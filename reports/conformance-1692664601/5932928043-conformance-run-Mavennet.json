{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f1053eb8-c819-4cc1-9076-13e43cd6d6d0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ee4849e8-7282-48da-a555-f8832950a854",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78befe01-f40d-4d82-86f7-c50413368bd0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b6f9e78f-8eb4-4ade-bdfd-dec2572b3373"
                }
              }
            ]
          },
          {
            "id": "61531f4b-8275-4664-b9b0-0b602ba5a451",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44251c60-6d62-4325-a636-0ac90fbb1c6a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4c07c576-6ce2-470f-b42b-90f7a0c7bd23"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "154df026-227a-4cac-9b83-5004e4fa3ea3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "71b1b4b0-8f27-44c6-bc09-c3083e5d6f04",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1ee4c5dd-54a3-4d46-b36b-d1ae8b686b64",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28d292a8-4d42-4a76-913c-27942304fab2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aeac5555-063a-44c0-9dc9-43d771190a23"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27494fff-e308-405c-9958-69ba3233b4de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c835630-7340-41d5-b202-4f14127516da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c5c7d46-a3a7-4d69-a084-f3c1bd3fd8a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e2e20e5-a3db-4401-a3b9-dbb81959ef29"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f16531d2-118e-4de1-98a2-09599657ad42",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d02d834f-2c41-4abb-b16f-04f76a328bc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "617979cb-2075-4da6-abd9-0ab79532864e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccbb5a41-5999-48f3-ac3b-7dc1bbfbf134"
            }
          }
        ]
      },
      {
        "id": "19aa1df5-e7d8-402a-b8d6-05ef32d49983",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "89d13459-8b42-4093-8cf6-6649aebd9f73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b35b2d8-0b36-449c-a60c-be03d86b844d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "232f8fa9-1993-4b04-9197-c966ee53bc39",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01853e45-4ca9-4a00-b58e-5f12c316c775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5aa99043-501d-4ea7-827f-0502538dafdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bc36c7-0996-4111-b21d-a6b962bc86e0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79136e2-b220-4839-8de7-6834a43326e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ed566fd-8cf5-41df-b7ad-677624a16c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef8c42b-bf60-4a51-a042-d68b8033511a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40537b1-d04d-45ab-a8b9-6f9f6f3c6fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d4f5b8c-826d-4a1d-ae27-1ab68031f3fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2bd932a4-1528-4993-888f-a8259b2c711b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9f9b36a-29ff-45a9-b9b6-6cff4b58440f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914f90bf-fe43-4b0d-a210-ea5bdd36e8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d2fbe54-fb41-41c5-9a6a-81773bbcab4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0b2d9b-ce50-4bf3-b3e5-4d37c507c609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1354272e-310d-4d94-85d2-30692d2b6a1a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1a105d23-adac-484e-ac1c-7af6e58d0017",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2eb6e242-1d5e-4875-a500-fea45e9fef0a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80f40bd9-1a61-40b6-ada5-bb32b150da16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8188e180-c4f3-4219-8c12-b5c2966cdbc5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e1232d8-5ab7-422d-ab4d-0a7078bd0adf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b2a6892f-8d3f-4f99-ac69-ddaaee5bb360"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c0a8b55-a360-4d4c-a9bd-9611217372bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57802a32-6365-432b-b89f-95069263ec39"
            }
          }
        ]
      },
      {
        "id": "9a1a873f-a2ae-4eb8-a7a3-ac0804c1890b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3a907e29-6dec-4a9a-9fd4-e35ab194d4e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5ceff5f-fec2-47f6-ba51-813c302b7270",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dc6419bc-ce07-46ee-af88-d884dba333f2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2016a8f6-6fe9-4f30-a831-c8544131d210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5228108b-7a46-45b7-a739-57852941f955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c00c6c3-8aa3-48e1-aada-c10469cfbe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab4e4bdf-bef5-4661-a530-61366adc47ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c401e86-946d-4fa2-8f4f-e74a3fb47cb3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a3ffc2-7290-478e-a699-6895387bf9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433f4f9f-2330-4b91-98d9-1afbf42293a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f310ea-304f-410f-ac7c-ae139f6fd662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dab8aec2-bbaf-440e-be93-4d69b2dddd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3a1715-cd7e-4799-bb67-4cbd7101f888",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899e33b4-80bc-4700-86ba-36b3b369747d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fa0a8e-6957-468c-a600-0ea32c8b3613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7e134f-13bd-428a-b0f1-f5c112e35b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e34fb50f-12df-4369-aac8-17070d650851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361422f9-45eb-4582-b6cb-c362dbcd13a4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4b8d15-bb26-4138-9a59-80dc4b5f0423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254dd5dc-fd2e-43d9-8b77-ba7cb96042a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0552b7-ef49-4907-a3db-a3bea9b536de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a547fff8-6097-42e3-96f9-e4b02b61a24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bda848-8b93-4a3b-bb54-1a4be6be8fc5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d699ee-1352-4371-a9f2-85e0f12ea6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a6cb9b-1aa3-41ab-87e2-74bc4d560a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36aed0e0-d1c1-4c64-b8a1-ca2d12a2d619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f41952e3-8e67-4a7d-a6db-030345c8a850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b642ac-3adb-4b0a-8588-062b2efb681f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d73a60f-0cdb-4ea8-8102-60b5365d3930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a72b74-46e6-4121-9e4e-372ce98c1279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47290e12-97c9-4e86-a2c6-0eeb64a250c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "744f283c-8ea4-4b39-bea4-50ac8b709664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663742c2-c64f-4033-bcc9-390866eeb527",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dd4e2f-d8d6-4f16-93f7-beabc5369c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0205ca6f-a446-4fbe-8407-f0ae988e0a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5532b4-2a56-4c23-afa5-88b526721e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85f54680-865c-4531-84af-30a7c05f6a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b116c7a8-7438-41f0-9676-96c15b65e218",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b115b1b0-36f9-42d5-b7e0-c0b662384090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06510f36-8053-4518-9440-09efa35e42c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9e26c5-0af4-4c36-8c9f-c8db0a4fc2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbca8fd0-ee1f-43be-b37c-086912bfaa64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759474d7-8e2b-44ec-b34e-e56572853027",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff6dc0d-7ce1-4b39-b836-463b18bd121e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee8a483-1ae3-4f58-b101-6eb328370967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1454c6c4-57f2-4af2-aa94-68d854f430bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d03d36f2-3e78-4f3f-9c14-ee8fcb822172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79375fc6-6c7f-4295-88ab-7924ee263fb3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438d9b64-a463-4837-bd83-2fd30a2c65b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20390ad-7d2b-4d68-8bb9-84c81b1010b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff6eb76-363c-48b6-803d-b2658ea19945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c84ede22-b7d5-41ac-8bd8-dc670e0658a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8a47ae-7140-4655-9bd9-35260a2e609e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1400b3-f833-4b57-a4b4-55ee9d7d85b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7517e762-c011-4f79-ac4d-302ca20c8836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4999afb2-7f60-4120-8686-0aff7295e4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7ce9f3b-a3c4-4a1d-86a7-a36ba1bcebd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de06b7ec-b2db-4694-8ca8-c815660996f5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360a1ea6-f64e-4d86-80a7-4e6fd7284577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2535d79b-b6d2-4cf3-acf1-0e5b0d2e053b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95752527-daa3-4478-a06d-173c1abdf9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13b86428-5a6d-40de-9261-0145b82eca2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20135b73-677a-4be1-abb8-cac8907c15d2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ece707-871e-46cc-a501-b7c0ac22af47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1e937b-ed1b-4d3f-8610-cf7fcf5d0eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4f22df-449c-4a06-be1e-2bf1c24d64a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ab9329d-38cb-4615-a9f2-bf420adb5bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ff3de7-898d-4beb-9d60-7f72285ec9f2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d3fea3-758e-47f7-a299-0135fa733d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e034a817-a94c-415b-8bd6-7a5abd054b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ebb85c-79ea-46f0-a524-413b51323492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c62a798-0ca7-4ed1-9eb4-fe4873971ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ab6a06-1328-44df-b674-15f892ed32eb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04e0237-c07a-4b6e-ad1e-0a8ff4eecb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe13736-8305-478f-862c-04c3696f55e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4ca08b-188f-4c9f-854a-221c6d943d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50c97cb9-c4da-4a3a-a058-8ef0b58c4fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c954c74d-269a-44e5-9916-c7b8e41b9065",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aea1ee-ac2c-469c-9b4a-cb2e6211322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48047862-3677-4f7d-b89c-2b9ba1efdfc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0179ef-8338-4f5e-a911-1bb82b2c85a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07cb8d5a-08d9-420c-9b88-5508ff2d3541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4a6518-7b1b-4f19-84d3-bc2d10adb562",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7571b46e-9345-4b9c-ae84-ec6ac8337391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131638fa-7977-4f5e-a56d-ce95c204c2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701a586f-e0c6-47fa-aa2e-57f9982be61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fc788ca-8a6b-4075-8145-2d1331e00ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9c7776-2947-4c82-9db6-1fd7d70e3081",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e9776c-f484-45fb-adb2-064abd4850b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a7e805-c578-4b2a-ab44-30b360a86225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa5fc28-87ab-4a18-b75f-ee6c0e1ff021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7844530-c162-4d12-8256-02c3dca80bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37169ef-c6d4-4e68-af9d-ca957ebf0c15",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b2eb55-9c88-41c8-914f-2dacfebdf5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb4bcad-9505-4dd8-b76d-66278a8af557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8915bb17-d73c-47d9-ae33-85fd954e00e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d161c25-9896-4be0-bc33-31dec96d3bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4ffb79-b21e-417a-b454-93a0fc4a3e4e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5712ed5e-ca88-437c-b2ec-789fe2a4e41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f77c05-b70d-4873-beb7-7b2770d55b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df317295-9767-4245-8099-75daa60790db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee48be25-00ee-4437-8a8d-9cbe3048f60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78937c8f-32c3-4720-b4c5-9db80ca417f6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb227fa6-356c-4b4f-8644-1cebdca7c6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a07d707-0d1e-482a-9072-cbed02108b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1954c22-a437-4233-a6ed-be1f952544fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eadfc87-0a5b-4026-b703-f22e9ba8e567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40931e0a-7d7b-400b-856b-9f7ae64889c4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20293d87-a2e0-485f-a564-4b97cd9f0216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b433c4-ad55-4103-865a-02e9d610aeba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df08784a-533f-44c5-a196-5141ae517270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b08bfd-22f6-49ba-8e28-b3119c857774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d94d35-49b9-49db-8523-ef6ea5b49097",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14346a3-ea98-4e7d-ace2-4ffd145cd4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b700dd-dc46-4d34-9dd3-3d6766017e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a30311e-175f-40e9-8f5d-40dc2e1a4f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58299346-6d2b-4de5-9ac6-f0fe146fcae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42985f5-5e35-424c-9661-cbb7eec900c7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ca9193-a332-44af-8e88-0850fc7a6964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40371130-3da8-4e99-8c46-51fd858abc69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e183ae-bfbc-4f7f-8bf0-caaa43daaae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef964e66-b22c-45b0-84cb-cd4b900734f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985c855a-5c52-43dd-bc33-a32356231f3a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da1da9f-f2e3-47b5-a50d-c049ecee2b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4085ff61-fc03-4c9a-b644-0f17ef798cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21bb5e8-4a2d-456e-ba96-a5a36fed0ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a18c5e-b08b-489c-9b1d-5882b047f654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5a51cc-f649-4bf8-9099-3d47eb07d63d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0869e7b2-c39a-481e-8f48-4e495f2d009b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16489bfb-be27-44cc-aa7d-caa0ed0cb2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bcca80-03bc-477b-b0bf-462eb835ca91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7591f7ec-05ff-4a4e-9ecf-53bcc97ab496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82557c8-22ed-4911-9463-802cce31b2a4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe4e5e7-34df-45d5-8585-8f0d1c6f1f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4f5a04-c204-4dfa-a37e-200e1fcd98c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a29c5d9-8132-4d02-b38d-e7644f371471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc08850a-9d3e-4f2e-b689-bb74a0909fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf0306a-bfea-4fa9-901e-77a51865487e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b34dac-4cae-4176-a6da-5e0dcaca4fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd63c4b3-1ce2-402b-b026-7acbcd399b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c69bfe-ab95-4af2-bf3c-8ac13bf7af64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d930c2-8392-492f-a5f0-acbe08f3200d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271ad184-0a1c-4150-a8bc-c90dfb2b1519",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74dffbc-d2b5-40cd-ba76-360cb1332582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f51933-8426-4ac3-a607-6893ee5da9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e1d450-b51b-4df8-8fad-051ac6367c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "439314a4-59b3-4bb3-8a57-57d5c614a7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d145ef-afe3-489b-b829-5478c41e295f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d03fd90-19e3-493d-8356-67aa8e876cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b65a09d-76c9-4f7b-b224-28a89a058246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f806020-c05d-4cfc-bf4c-2de49faea3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b77b5ca5-a939-47d8-98f6-aa4a955ba241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c07254-5de9-42aa-afe7-feb9ea59b3db",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a43236-5112-4546-bd44-aefbbb630fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda980e1-16cc-4e00-8678-db41bf9d77c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb03933-9265-4e9d-b40e-ac7a0c10560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1c7f77-0c30-43ef-b204-4ebc0825b8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084d6c08-d8cb-4679-a2ef-2bbad11bb445",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca45e51-55a6-4056-95d7-cd001bbf933e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f4c192-a607-4cb0-bb4a-8f3b8ba8f5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbe07a7-79b2-4c0c-a8bb-0c742189a5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2016ca3-a707-4a99-a7ef-5a51f2d06c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257fc1fb-0401-4cdb-9a14-c86f31339f96",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8d8a38-0025-42b1-9703-681e28493f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ee8c0e-a3b2-417c-8448-da49e61d3d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f13831-f89e-4908-9656-2ac41173c345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bd0393-6e2a-45a1-ab19-39f2858b80da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9fbcae-e930-4bc5-8f30-f02fdfdb6983",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcb5a54-855d-410f-a627-98c2756187b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bd90e2-5791-4c8f-8433-66cb9e930273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8548bc5c-0823-4f56-b448-c3a5c33cebac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8db8eb-6e58-4c8b-882f-540ecfac639f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5905401a-9f37-4059-a6d8-fab7ccf9a746",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760c76fe-4ee9-4967-bf18-dcd761bd7ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b6c435-05b2-4cc6-8b59-7b94b527ab02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebfe958-4ee4-4599-9677-cd2e028c00a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3abe05dd-5db0-4ce7-b279-ba8bad714372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f58f9e-96b3-4f2f-8d33-cb16a6e4c0ec",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f2504a-7454-4b5f-a5f5-05dc41bc5ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39d4311f-6728-4a51-bdc8-7a3efe475957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15133b49-65d8-471f-82f9-a3cd6ea24c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45d57904-0101-400c-8f6d-d5d20ae89b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dbd2ff-c234-45ef-b91b-3165610e306d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e531a43-e7d1-4bcf-99ca-f631e8afaeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5f8924-6168-4928-919b-3bf77b9b25c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aa21fa-d5bc-4e1a-b96c-63b05bfc59b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "debd1a2f-b503-48b5-8c00-e14fb70cde60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5abd69-9797-4a79-bcdb-45c09140c222",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9744bebe-a00d-403d-98bc-c52ceaec1fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eaf238d-260d-47ed-8c7f-adc609d1072d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd5284e-1e25-4e76-82e6-37c065f4cbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "869dafcf-282a-4e9d-ae8e-f855ad9472c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecefea1-3fa2-463c-9e1c-d8a2fccc69ab",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d9e5e7-2c74-4a83-986c-d3f264ae77ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb57c826-9c59-4372-b070-da5c49b4e83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8267ebce-7451-415c-a1cb-339643c765e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "da489d68-bbcf-4950-9274-c4b6659b189d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7039e0-0205-4b80-a9c2-100993618fb9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecba42f8-af86-4c68-86e5-41e57184493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78367ead-ec0d-4b3d-b64b-c95ee1764175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bda4ad2-acc4-40de-ae2a-256bf99bb1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f1e6c4-e7ba-40b7-ba79-90c5d7172159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6017fd-9250-4493-9047-c1c3e83970e8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aaec63-9060-4944-8437-8a0727489821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f9816f-6ef2-485f-ac00-27eab35a3f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fcf2d1-4c56-4f4e-a26e-314eb24bf6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3584fe-c71a-49f3-9368-9f809928cc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0b01a0-0083-4416-aed9-9edeb1ac3649",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43118cd4-db33-4d70-8db8-b8600583a64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f2cec7-bac0-4138-8bb9-b70280c4f1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a78fc0-0e6e-4c2c-a3e2-ce404c0d03cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e719eed0-a81d-48a3-8421-da1e3a88f8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74621813-50dc-4f1c-b515-839597d8ac1d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8899f35-8233-4f9b-9aec-ac1dd2d62d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24200766-8b6b-42c4-af64-eb8e159d9665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b19092-e79d-4e9c-8690-84e184ac8a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a45c2858-05a7-4d9d-8f84-622f1d37717e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa16f856-37d7-4759-b07e-7ec1e05f12f9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b078377-c6a0-4926-be9d-16a97f518d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc3e21e-fefb-41f7-a922-0c74fd8657ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd09964e-f0f6-4589-89ff-8fbf0b92f0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a36fd17c-5b41-46f0-aaaf-eacf39d92144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfdb42c-b714-4333-8e3a-782001b1aeb9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d6ba6a-48a3-4130-bbb2-faef588567eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30e6616-ecce-4629-8b89-8b0471045a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a359de28-0586-472f-aef6-11fa3807c3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b44ec9-9d62-4982-9ede-d20a1a3c155b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e9c8fd-5a6d-4929-ac95-9d8dee2f97b6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84648c0-336f-48e3-9ab2-75f8cc2c6930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0495f02d-9458-454a-a092-a749d13f87ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f843ead8-d8d8-4b74-a25a-9a3f9c2d064b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05d3b235-db6d-4057-bdbf-7b3c7a9386c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd0b86a-645e-41be-89d4-b430969962fd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb1fd9c-c14b-44b3-ab80-9d1a52c30bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7488341-1d90-4770-bbac-d6beb2e78fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f841416-3bf6-41bd-8371-efb412375fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da165ac1-65f6-4bd0-a807-95b4c9547e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da51e4f-8959-4a2c-9e99-2ade848bc64a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633cf56a-d62e-4529-833e-341d9909a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526480c1-3a68-4da3-886e-66c4f5a94397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81abf8d7-195d-4b49-805c-24859ef23a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd4cecd-7eb2-4ece-bd4e-56030d063f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be61d5ec-dce1-49ad-ae73-ddef20dc671a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80777d8c-4a36-4c6d-9638-81d11b7f5824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ce7f55-8334-4e0e-90c6-8ccdead28e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5223425-7184-4d27-a247-f09deee5b00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "308be139-818b-40f8-a564-e8f8e163b0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3b07f2-13d8-4e9c-8b0d-b7ed735115b0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98a7e09-1fed-467c-a355-43747b8986eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c35003c-2144-4b5e-9425-e70be110fcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219fb994-0d82-47e9-8b87-47f43c8b89c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b91d414-bdb6-4073-9842-b18c2a7487c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0907ed84-ff9b-448c-95cc-50e122029023",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50999f1-4e34-4227-9bba-910a6c61f198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54769657-a700-4397-a655-b715d8d4e686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53aec0d8-2cce-425c-8a60-4d2d088f0a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d506e3-29b2-41da-9278-88bb24588732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b10898-8a66-462d-922c-e66651308f31",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc25803-6457-436a-a52c-e7ed8b35ea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa62f3f2-af23-4b12-b295-58e5af2c29d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c81fe82-f860-4931-977e-8710aef0d6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2e8691-724d-420b-813b-c407b774f1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126786d9-be03-4978-b22a-845f224e79b9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e78050-8c9b-4b11-86d0-c4e25fbeee85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5735de03-5e14-478a-9f1b-5be387b2aa27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d488640-f0aa-4b48-8418-9ff970ed7168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efcca079-9172-4325-b49e-1318c08d64f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b91909-8ffb-4409-8c08-29badc90965f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9f91a8-ea37-4721-b534-e006ceb13755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04debba-04c7-46c4-a273-a3ce674b17ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fecbb1-057d-4979-9dd9-70a6c6883ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb684fa4-682d-46e6-93ce-ca6e612da609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90f34ec-99e5-4ac2-96ce-cf20a5e7c5b6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84162c44-9a5e-4489-a36b-543efef4d25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ce3f0f-08ed-45b8-89a7-8aaf45979c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d756a7-4844-41e3-bdcf-8fd053406e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2aa3ffc-7764-4e48-90ee-b0e51e874e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66138021-e723-4a89-bb3f-f0ef8f9cccab",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a67f218-f6b5-450c-9085-7f87b38f75bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4525afbe-2703-4530-a5c0-a7158da7a56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce5b64a-ae1b-47ba-ad05-b44a6bd68bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4f5bf3-ae06-488f-8cc0-783e443b936a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f8b191-63e4-454b-860a-53a7c5cc9b7f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77500718-caf1-44de-b31a-81672e84971f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed091d42-9434-4d8e-b882-53d6b30d09c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44daf696-ae56-4e27-8e4c-22f336eac46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8adf5283-d6cd-410d-8d5a-b3e872ddcf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722772d0-6c16-4a7d-92ca-46eb378f995e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b277e06a-0506-4db7-8c9b-1d00ded21777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dec293-94e3-4c0a-9937-14d1cae7de51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c35b7d-8aa3-407b-94d0-6ae1289b239c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5eae56-6ff0-4a37-971d-97088dd0e094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0802dc5-be03-4143-b7f1-516973cb5399",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68a3974-1ce8-45c1-8836-4ba1c76a4004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7fd09e-ad08-4825-add3-8c805b3cadbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d66a90f-26b0-4bfd-9d87-9d7c6b7e1eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6804f9-0460-46a5-8ac1-118123debb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbf8cce-2811-452e-acbc-26d90e8bf3ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6122a530-51ae-4fbc-95c2-b15d6b1c5233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d6d73c-0761-4270-9f31-3a1024bf52f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c32829-00bd-4e1b-9d47-48f277873cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3daf5787-fc00-41d5-ab8f-b531b90d71da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2baefa4a-bfb5-4735-a66d-4e1a4785edd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a49284-f0e9-4129-ba13-941106aa0825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2dafb2-9db3-4a4d-a7cc-e3bdc7bf3c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab87189c-c324-4751-9406-f9ba10dffa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4dcd41-08e5-44fb-a0fc-12a2f667bd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa01135-7720-41f7-b267-47432fce703f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d66caa1-cb91-446e-93b1-e9c1c5dabdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a9c0f4-d3ea-45ac-becf-aec0e9e64b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf6c3fa-996e-459a-95cc-ec1cac64da24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "db305c32-4b0e-4686-b126-34e99ff4277a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52a41c8-fbd3-4a0e-9ddd-46cc424c8796",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc862dae-42c3-4894-8ef1-58267d5781b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de94634-13ab-44ff-ac22-f77e5630ecaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d90bd0-239f-4ec3-8a88-be5266cea48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5bd746-9034-4540-a200-c840d9218a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b2eab8-9826-4577-94ad-dba425f3e46d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1243fc-4e78-4123-85b6-2eb7a04d997e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17bc6741-75c4-434d-9c11-1bea69bffee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1751eda4-ad5c-4296-bac9-92907140c80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9afdec-a817-45e2-bdb9-166a1e3befa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c946a2-3792-4bff-bfb7-a1a79a17917d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af0e1e6-3ebf-4fcb-b5cf-bbc420ddc37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63de8168-6e59-44b8-8317-296e0b771457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141f94ae-8e42-418b-9c52-fcefeb7344fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f22e88-78a2-47b0-bcc7-f34ac47a868b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce71d16-6e6d-4f75-beb4-545552547841",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e54b48-ca6f-4e91-a5d6-5c9b79da5359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3633cc-f543-4062-90a2-15ba721c25c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25277ee0-d0a0-4138-a628-02302bdbb5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07b8207-d611-41b3-aa29-c074756ec398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2f6367-62ba-4447-8d95-bfcad921de34",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf8c72d-c200-4fac-962b-366342c47c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfcde98-2cb5-4fa5-82eb-9abc2693f3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571aa410-ee18-4fd5-bac2-f7d45cf4ec74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "767238fc-19ed-43e5-8bf5-b7592e11d3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f0cda2-040c-424f-94f5-b066fc55e855",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa11ed3-1d81-46e8-b568-84d3174c8a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51b8993-b609-4d5a-bb90-d886150c4b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f80bc72-8955-40e4-b3d7-2f2739d14616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "981a9e5f-e23d-416b-b335-ab3f3fa96b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61912ac-1ec5-4ed2-b1c1-632858da4560",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1f2bd9-21f0-45a2-8e3e-309ffcd34dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cc9582-22fd-4795-a925-aaf7f3510d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ab94c2-c5cc-44fa-8df2-0a54630d4d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "77cc81dc-9f20-4b9f-8891-64a4dfa95d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718f86da-b14c-4ba3-893a-bb3c66cfeddb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32b71f2-4202-4a18-a3b3-51014c5c4f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2e7a96-1f1c-4ceb-9259-bab7757c8a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5f8c10-0551-4a75-a6a7-3368912b7ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e051ca66-7e7e-466d-b8d8-4a947ad522f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9654453-4920-48a8-854d-30296d86de7a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7cf571-3b17-40e7-9d40-5014bb3bda98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8936144a-11a1-442b-a88d-c8426cd27fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d27e46e-55b6-44f5-b3a9-aade8e872855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc45cfff-8c59-4b5a-b613-b3d9c79a01e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a854029e-f162-47b1-9146-4dce44f83b6f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fca76b4-6321-4d97-a846-6477998772c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee41c2ad-fb88-40ee-825b-312d9a40ee3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db8fbc0-2757-48da-a6cd-42114395b484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "694ab4a3-a71c-40c3-8960-e9d3a6bf9072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f01d5e3-1897-4181-9ddc-a801328f623c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05a9d18-b217-49ef-b893-b32df2db513b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18624316-398c-4c94-ba83-82bba832edf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e4a28e-3fe5-4bb8-b6aa-0d23fcdba0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aa2ea5-6dbc-4e0d-93c5-0e13992e34d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281f3c86-9816-48c9-bceb-c95babecf400",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86460d5c-597d-43b9-b4af-5abe7d957dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e53bdc6-a61b-4b51-b4e1-24eaac80d055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8658186-50ef-4b9a-9926-4590d86d2696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f75ebbf-14f7-44e0-b969-62bcb8a7bd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f93b84-f254-4207-92de-faea36ef3095",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f59360-68b7-401c-8ff3-1ec9ccbca12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21ac0f3-a60a-45e0-a29d-c6c62e7ead90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b048899-e25c-4c35-bdc8-379f70e804d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0be968cf-57f2-49e7-9b85-8f8160663afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630e9248-6401-428c-967d-909f456e3f46",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f3213b-5d6c-4b3c-b0e3-6b608b81e899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d437ba6c-85cd-48a4-8f12-9908cac27f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99a6ced-8762-406e-ad92-cada684bc2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "159e1898-db3d-4dc0-82b1-1f51e8ef8e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5199f8dd-aa7f-40ff-b04e-3f417f313713",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4ac8f5-7eb3-4772-856c-194867e3e81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfe99b5-f50e-43d1-9c14-0650adcd5acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c502cd5d-17c6-4925-9f93-e86b4e4ee08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5f27f1-fbd1-4ca7-be01-9c9fc4206bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8619c26-5962-4267-be1b-cf4089304dc5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0531d2a8-aa9f-45f4-b0b9-7a155ec556f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d526ebd5-b9da-4001-afb5-6659978dcfe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b310bd0e-1fb8-433f-9f99-4106f1df814f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb5ef2e-7982-4b4a-85eb-4f03fe4f9ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7af6f40-50c6-47ab-bc4b-8b411ddd5370",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df5cddf-4b7a-4c45-8e59-286449483490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd702c2-5f2f-47dc-aa95-eadccde9faad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47460de1-12c8-4463-8f06-18fe1879d127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1be333-cb83-4160-a517-4632629322ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ab59b7-9a11-4aad-b9e7-bcd9563af8d6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7949c120-4809-4b80-bc32-accf56f0091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d79dbf3-c709-49a7-a9ab-74fb034714fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4456ef-5a7f-445f-8d99-817de991ee9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b775a13-6aa4-49f9-b2c3-ed63b59b8b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af56c57f-8118-4494-af17-cde5afe2e169",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30999e6d-2d2d-4b1b-bc00-589171f92361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9825e4e8-1cb7-4f0a-acfd-f348467de83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f378cbcd-d8a9-4a67-b29e-12907268dd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54ecc486-c7a0-42e7-91ff-aa307b68cc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6689b15-30d4-4677-8186-7c8b7b03f7df",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3b4a5f-1543-4fb7-b4a3-63817642ee50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d39bb50-4a2e-482e-b6f8-c73375d3c466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c339cc-4a9d-4308-a231-4d1306041df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c0143e-2b6c-4ffd-a205-6a5dcb2922cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc514a4d-9220-4a68-a2bc-a715f4af61ad",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e14502-caec-4d14-a499-1644c40eb948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6784c9e9-4f46-49cc-8054-9bf75a47f520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5298e3-c51b-4409-95f1-0ce499c5c254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae627c8-beed-4a5f-b119-202ebc8661ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9911625f-3eec-4b53-bdbf-fb4485bacbfd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a02d57-ed79-402d-b13d-438ca422a02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6733a571-380b-4892-9f54-6bd365bb549e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568596de-8b33-4ce2-9888-d0d5f19e56d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a289cc5b-98de-4567-a7d8-7dcc9fc7609e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cbd994-3f0d-4157-b8b5-710bd4e711da",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d80756-3094-4565-8f55-817b4d2292f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9889bb7a-d8fc-4eb3-acfa-b4cfe430d275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e3a67d-5578-4be1-abe7-5daa2a48010a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10165408-d14b-4a3e-8324-12efbb30b232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2922bd53-351f-4de1-a245-1a7a05edcedf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a404c5d5-bc0b-4d0d-bf3f-db75022dc583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c471e7-0d71-4c1a-8edd-3ca4734122cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67db5630-daf4-4070-bc71-6b5a5761a9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1400626b-c2d6-4dc0-a7ab-2c53eb210606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0522dc-0de3-4edb-8896-ed12097400fa",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd95a73-cf35-4e70-bffc-ed435c918eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b2893b-287e-4cba-af15-14ff63156774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061b081c-4660-46ed-b41e-818a96957e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "af223d7b-5159-49d5-8c6a-2be62ef9d7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b82835a-83f0-4205-b11b-087b1b5c3c65",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a44e4d4-2098-49bc-bff5-a5a6167babb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4818998-3baf-4403-a2b6-bed274c0074c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb64d495-ea5a-49ef-bca5-15d6c6f21d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9574a7a-ab9a-4762-aa77-9bc3f6518d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc06850-1a99-4fc0-872a-909714258480",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d54b0e-d571-4927-a753-7725b04c11f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5786c5c2-3215-44ae-b0d0-429bc66ddb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c6f59e-0798-4279-9a3c-aa68052c0f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ff6958-b9ac-47f2-860a-056d5617f334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdc60bf-833f-4c13-a32a-e1023e716d25",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601956ff-8ab7-496d-9e1b-49a3100ccbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0ef53a-3579-4151-9acd-8e1f0f675192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0aba10-2d49-44b2-9a6c-9cdb57739275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a7cacd-f628-4af3-b1ac-da69620361c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94aff88b-6be8-4393-8221-b270d38fb748",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e652851-1180-4001-b5ad-ab8cfd5640d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "722e1340-5ff8-480e-b820-3cdfa96ef2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4770878b-62e9-42fe-8a07-aa12ceb1d8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f94e3096-1ea4-4aaa-ba6d-a988c9abd1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17dbfd6-ffda-4c68-a7be-5ec9dd0972f7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ade5ca-8b0a-4db1-9a28-5173df840a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d779aa2e-83de-4453-8191-3953b5e90053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29f6979-2072-40d8-b014-34d989900328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e90e245-cbc0-4959-ba05-f8f57956eb75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c9138a4-a7a7-4b8e-b6bc-1408fba7ac72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6935183e-494c-46d3-a3f7-0ea2354d5973",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc1320a-d5ba-48be-a914-b239f9b6c649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fe01a03-05bb-45bd-b67f-285aed8e9990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ea37e3-923d-420d-8adf-deee180dfea0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3b902b6-596c-4bda-9b9c-26642b9f3158"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4abd5348-3406-451c-942d-5d08499f5349",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79ccbdcd-b0cb-4531-9674-697e42a6eace"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80bd74c5-24ad-4dfa-8b72-3fbb65178d15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dc4552b-84c7-4908-9244-405e2cd0ab46"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "577d6f96-d24e-48d3-92e1-deaed7cc5352",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57e967e4-d959-454d-a08b-52903c1aea6b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9201c119-dd04-4557-8511-5357405b1b06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8683079e-14e3-4b74-9382-db253ea8f252"
                }
              }
            ]
          },
          {
            "id": "8158da4f-63c7-4df2-b9e6-e7de252340a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8dba3aca-3dd7-4291-b288-c30ce5b588a6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e88b894f-12f0-4cf3-a593-d6640f267f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dfcf963-6eb4-44e5-b6d6-1181bb72919d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e9aff1b-12d2-406b-b010-2f713581b917",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ee506c9-4296-42dc-9ef6-bb82f40c49ef"
                    }
                  }
                ]
              },
              {
                "id": "8795b460-744d-4549-ae74-b19ab2330f50",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a42ed894-37c5-4b50-8561-d6f9db7f22bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "341fcd74-64d5-4e04-8cdd-b2b9edaaa0cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb077aa4-d2f4-4fca-a998-5b901745f350",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "737fb28a-bec0-48fc-b119-c05a5a5c0e24"
                    }
                  }
                ]
              },
              {
                "id": "8ee386a4-9d23-4fa1-b301-7727e8e279b0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16cd13c7-3afc-426b-aa53-d290bf3e6a9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16225b09-0926-4400-9236-e1858766c97e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e412d572-1eed-4237-8b99-8493b9898378",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80fc1209-095e-400b-a61a-6ed51620e65b"
                    }
                  }
                ]
              },
              {
                "id": "3a3f22b1-de17-44ee-ab43-45f4b8af9d81",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94145b97-9c84-4bb6-bdeb-31c22e2a7cc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b230b7f2-012b-45bb-9485-ae1809a0e066"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cea60b35-c1a6-4ce1-a14b-9ec5f1ed779d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0b7ba11d-37dc-4080-855c-2624f99e37e0"
                    }
                  }
                ]
              },
              {
                "id": "e43ddfff-c0ac-409a-bb51-cde4ffed7caf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7980632-eb9d-481c-96a6-3df21600d16f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93351cb2-0e14-4609-87f0-369a3ef7114c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a6fc8a5-45f9-4338-8403-1fc0abb09d25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bd1e9e70-35db-4fad-9314-87459929f606"
                    }
                  }
                ]
              },
              {
                "id": "18a4e1cb-c00b-43f9-ad9f-9b311504c9b7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7406c22f-07d3-40ec-9c09-544505b3fa9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19bc7ab9-6729-4ec5-88d3-df190a5e478b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d41ddf7-22db-4f34-af77-98c97be7b396",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c5215aa3-9bb4-432c-b42e-bc04308d91bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "971ebb81-4126-4e16-b88e-657b3fd0a3ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e836bc40-f5c9-484e-a2da-2a40dda8d23e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c16d2461-ac74-4647-ad20-6e41236e84df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6edbcb9-acb9-4fb3-ad39-ab14b998b17e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93d852ce-fc48-4847-bba2-dc438dff965c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "491be273-492b-4c27-bc68-a46306b2f986"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d64446ce-2ac8-493a-866d-42f269a39444",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71fcdaa4-3866-421d-b2fc-4f9bb721e316"
            }
          }
        ]
      },
      {
        "id": "84c6d29a-9634-48f4-8437-de13a166274e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9a55f300-6cc4-40d1-a768-a92453de738a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44965803-2b4b-434d-a0c8-bab379e56b38",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0a2f473a-bda7-4889-a0df-8096303b4217",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b844b315-839c-4a03-9853-3ec54886ee30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c60763-8d18-4a58-b7e5-d1d85c44c257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161ad1e1-94f6-4628-898b-dfae76b2c5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b96629-5efc-4795-9990-7ad31876e300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba0d019-be34-4393-a845-e3ddbb31a6c7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f62379-4b5c-4202-ae86-26ac22b259f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97be77d0-dbb5-4dc1-94ea-2c4083d5bff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3313e7fb-b35e-420a-b456-655b1baa4c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4348f5e3-f55a-4c15-8263-4ce56a059d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43a43c9-17c3-48ae-8583-7ef4b56b24df",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b5cd35-25f8-4489-a48c-8f48a3ffeffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0c8711-2b7b-4688-8292-e1879122cf66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a952a66-aba1-418d-8b99-9b99381b4409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4af90a53-3746-49f9-98aa-1f89a7c0699f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed04cfab-8fd1-4701-9b75-ce445064812f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504c24fc-7c6e-465f-8b1c-d9b6bc04b229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fb813a-270c-4fe9-9d78-b618b15e371c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b671dd36-7e7a-4805-a3b9-3e63f74533d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84edeefa-31fb-45da-a080-9bfc6392cebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17061533-1aa6-4b35-9a9e-4ede906d3e6e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a186f4e-b008-4b71-9d2f-e8500e99e58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc35605-4387-484b-83ef-11b6a428145d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d686544-e199-4885-b39b-13b36ff6a6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15030d4a-8edd-4eb7-91ad-63f40ff6915d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2744d787-888b-4ea3-8601-147d6babf0e5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba20a24-22dd-47bc-8376-7ad6128f1a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d607b8a-48b7-45f9-a973-0a50d2d30c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3e0fad-a15c-41c4-8c41-0df1881a6446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "916cf5d7-73e4-41b2-9166-41f69c4cee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bff4ed5-3eb0-4a82-a12e-3ed5baf20401",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff59aa1-1593-4e1e-95bc-3ebd1e85e639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117b6944-2666-4f29-89a2-03aff935e925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88e5622-7fd7-48cb-ad34-319399827aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "20422b7d-3a2e-4380-a182-cfdf510d4391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaa3d97-b3c5-4151-8ef3-9512646f5a81",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6183bc2e-b710-45a9-940b-e8d818e9835c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d8e0c9-5297-4fff-a4e8-64a405070247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8cc8f0-c5ef-460a-a14b-2bd768c121e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9f65f1-4f6c-4f95-821f-dc2326a14e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dcc0c6-e8ff-407c-bc4a-d54b13c63f36",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26c7334-ad35-4cfb-8266-96bbad3f8687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb1298f-ec48-46b2-812f-422e0da674a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cb32dc-1cf5-473b-aa50-9f9a713a1d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d37e41-4f53-472a-be4c-18c72ee1de04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96ddeeb-899c-416b-98bb-702bd11b8e8e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43e56be-dae0-4bab-8e29-57d9688c7550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02def7a4-49b1-4491-ad9f-f9f7416b093f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa043031-e1b9-4503-b0fc-6e85c85722b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81e3b22-f54f-4514-8aa6-f9cf528ca4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4065e3b0-06b0-4db2-b0d2-a5a9f52d747a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e794d68a-f5a4-47f8-9c92-c24bac1e6c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1798a073-1730-4c7d-98cf-816c3f7bc5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04534008-0d20-4592-9a06-9bebf91ee8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5ecf80cf-c0b7-4567-bc5e-f31a1b7ab70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1770b0d-7026-4e2e-be5b-a0a7c83b94dd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efa8047-3e04-4970-986a-149694425e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36393288-0dd1-4d4c-976a-62e283f66d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8840d480-4f61-4ab6-96bb-913ff4b9bf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2abd587-98d3-4b1f-b649-00b77cfb4c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ffc92d-df4b-4001-afca-36d2de8fa1f8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c04f87f-5f07-4b8f-bafc-1bdc2dc85344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8b51b1-ebc3-490a-a9e9-1fa0e329016f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97be74b-4e7e-4280-a0a4-f94565a0ea44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed6098f-875b-415d-a0a8-42e06bda9bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74965158-f953-4a65-b618-5d6c43d0bd35",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb81cbc-b31d-4322-8ac7-39bbf20ff81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f09e93-3f9d-4727-b3b0-435ac6cf1b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c038ca-4515-40a9-be70-f9417ab6245b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eab2d85-b3a6-4fc0-a8ac-15cd437f2b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faac4667-fc62-4cb5-8049-9a137608d7f6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf5648e-4b29-45cf-8410-7ed694e28787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94981d46-5724-4f99-8305-e6164b0c7fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df021421-cf50-425e-9585-5ca21bda424c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c9b248-cd78-4797-9edd-146fcf6601a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b20f73-b514-4540-861e-255eaf513274",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95eb2b0-7a6d-45fd-af17-1d3eeafc5769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc731eb4-f5ba-4fba-b4ba-f982f0276aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09e71ce-3733-444d-af8c-3173001da66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "72c5d2bd-4865-47f8-b9d5-fdf10fd0ef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e83547f-7de2-4449-9ace-46bd6bf48da1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e056b8-ce7b-45bb-a818-6cee27dcf583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d78255-0395-4f79-a09e-215ff59405fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a78602-1fb2-43fe-b13a-2a8a28a8c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e911241e-e86e-44e4-a1cc-2d6147bd1fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72d4aaa-82b6-4532-a840-96008542c847",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc9008e-9802-48bc-b178-fecc78dbd55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb4bbb4-625d-4f08-8ae3-892f781dd656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783f9537-56a1-44fb-ab16-40ea91047aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "69734078-0aef-4d20-b426-f63eedb3be0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccb27f2-fcaa-4784-8b65-1025909eb944",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b2c592-f975-4340-90f2-9f3ba097e234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bd01f6-9cdb-406c-b1d2-cc6066f7bbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cb192f-e51e-4cf2-a901-c6cd5c69627a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c31743-6b36-4bc3-bc65-868a91b86247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa381016-2278-49e9-a7bb-dae8f56d4459",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21d2d84-aae6-42ba-80f0-d687de171fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d6a248-3a44-4a11-b889-bef08b7cadd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e0c16e-6b63-4a36-97f5-4ab22953ac68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33578a26-f8ad-4485-a82d-f1932af2343b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c570069b-dc14-4939-b81a-cf2c3382e26f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bc56cf-a87d-4f69-969d-c8591d958cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36105f9c-71dc-43bb-9fe7-67d90d2a2cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7afbe1-2154-4011-8597-c84bea4b2e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a1d6ea-d111-40e5-bd12-cf0be10a9de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8a0286-3f91-49dc-9b9f-b1487e4e9e30",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f928fb97-2c87-4c30-b43e-eccd3c2fbd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dda7321-db1f-4618-8428-5a24cd7435b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c6321-5f44-4d09-9c5a-75076e9c9add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a169185-780b-463d-add9-201b877fb167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c904a306-d097-4351-a38e-ad35366a8612",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c981ed6-2a0d-43c1-bef0-6f72da27ef33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03867e9d-fe81-47e9-9ca4-b0faeb414f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3190a849-8399-4656-9d94-993dff996cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cee893-feb0-4217-8e72-b8b60fc59163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0402682-0beb-4b0e-acb5-3a5011268533",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa6b2cd-d9ee-45a6-ba83-e957b7ec8cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc0654d-95b5-4bf9-858a-1d2374c90761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967bd61f-3e43-4fde-b79a-3df6210a65f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93c215fc-b6e5-41e5-84a2-3741b45259d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc802404-84af-4608-9a03-9955de8f6fa0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a130a682-10f5-4303-afd5-ecaf4f5b6059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1259aecb-04f6-43d6-9886-67cd28c4f6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d0f501-df57-44dd-96a7-050b078cdf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5c0b79-cc10-4db0-b2a9-fb39ccbe299e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c96409c-a83e-4ab0-9505-33a520ba5c0d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdcde0a-e4c2-4df9-bcca-b40bc647e08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec24f50-f543-4738-b48f-459975d4188e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9afea99-da21-4f6e-bc6a-d542ad180be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b4a516-7674-48a1-aab0-720370eaa597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a8d00e-9f96-4c88-966d-f07ec8edde7c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742b7329-b060-4c84-b2de-8b9fcb667bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ab2106-157e-43f4-a145-4871f192435f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8a1e00-08ea-4858-84d5-4885c254e96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2af6b45-e537-4af6-8480-c519df2dc8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce772368-11c2-496b-87b1-64363d102f07",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960a8e3a-49df-4635-9029-e9482dd5cba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffe4d19-ccbd-46ba-93fb-f408c16b6885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece31590-218b-4058-b793-fd06b6d9ec2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3885a907-b292-4708-9901-91b2ae655fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ccc908-719f-453d-970c-32c86966b279",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ef54e0-3acb-41d0-9960-2c14c10c923b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b70a22-49ca-47b5-a8db-47cb707fd3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b4dda1-bfa4-452a-b8cf-7b81ef910d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79eb6229-a08f-4158-9e1b-d4e4985a5c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde4d72e-46b4-4e55-bfd9-70c8395c6ad6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d0de24-dbc9-4ccd-a78c-b1a57a9b0a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6633b467-8087-4993-8e41-ee7ed36b8af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46af2f1-9635-4e82-b33b-7556095ff946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "482a7e07-11a6-4b0d-970e-f97ebd58b9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cf9eea-0b06-4620-b1b2-4306b05b7823",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fadbd0-7a3b-4944-bad0-fe7b5b7901f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2842dde9-9528-47c1-9443-f6274138314d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b75f148-caa6-460b-8f94-3fcb064c1593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f4f361-4080-4966-8107-d07f3c937f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7383dc-ee5f-4f09-a218-9cf475d8857a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3be52b-22ee-4b22-9d29-b425cc7d1ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a26d3d-89c7-448a-b439-b20350bd7589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149fa07a-5454-4410-9b1a-c1da26742256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9efa84-9605-4cad-804c-e0ab0ce9fe9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc8b93d5-3c09-458e-8702-e6e5904cc04e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a38288f0-2732-4e79-8f24-a9b0cb062674",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1994284a-166d-4d9f-ada9-bff922a7720d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "51b1cbe8-0c42-47d3-8abc-61f5b727ec0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52008355-5498-4b20-afac-e0c2dbf78097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69359285-406e-46b6-b427-d53e9135474b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c3c2676-d644-41ec-ad07-c6fa284091d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96c3a3e6-d650-4552-b439-48749cf374d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c087186-2bc4-417c-bb16-2fa6d573f89f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1335f05-9cf1-4824-97b2-b7636216a5ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3456a74f-a1c2-48f4-9c79-f0741b76ddcc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "657db7e2-0e6f-4554-9843-99eace39f649"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "351d0fbd-1d7f-44de-9252-b3603c96edbf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1647439d-3d02-4ffd-9208-e683ba6f7e06"
            }
          }
        ]
      },
      {
        "id": "1e0cf2ab-0e5e-4701-9750-cf5643fb4dc0",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fb6a22e5-11ab-4e4b-94bb-e2dc171eaaaa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a6c2e81-acce-47e8-9903-ac72dacdb544",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "49d5346c-856c-4013-b151-aa53c72baf88",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625418ab-61dc-4e42-b6a6-e2472ed0e390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79139d6-50ef-4769-a2d3-378bb4bf4189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b21d18d-7e2f-4dac-ab67-0abd11d77c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f13c47a2-896c-4c6d-ab36-a45b81cb2504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd22894a-a6cf-46b5-a688-0559204e2876",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c630e3dd-6160-44dc-82fe-b9564cf94421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2070bf78-4244-49d6-a987-a997fb8874af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e1a334-b179-47bf-af06-e6a7b0154675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb9cb33-12a2-4092-b350-f561c44d8b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0614c427-ddab-4d5c-9452-eff5a73669c7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24af5079-3add-48ee-a7ed-9ba16e56fa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cc8d28-9ca3-4742-aacd-b0f85bfb519e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714e3462-a425-4314-87f3-1b12a133e760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14177def-b7c2-499e-ab48-9501e25c39f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ca9938-e657-4196-8f40-96883dd52181",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8068f9e-b051-4576-b76e-34a4966839df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f308c76f-82b9-42ee-a754-a3f47f6cd3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae459dc2-79d3-47a6-856d-667e87c72318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e1870b-5b0e-416c-9efa-a717bf43f3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17e1c31-66d6-4317-9520-a1f2c248a466",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a544c4-cf39-4a93-9299-873d2a3369a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9401ca47-f03e-4326-be21-c9e3dc8da432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3974542-54f8-435a-8a6a-6ce5f1ec3ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "176700b3-edb9-4442-9929-4b808608c172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3630a143-3825-4195-9552-7defca468a5e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eff6c6-10d6-4d4a-9e0d-d31b8b0f2c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d709b916-6e34-47e4-bc3a-fbcaf02ae6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7975f241-6fbc-4898-b03d-defc13148e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dda3cea2-16af-43a7-90d9-f6019277f7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b242aa-d8cc-4937-9714-39be0d98c7aa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9720871e-c64f-4b53-b73d-7a78d8ee1ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb22e7da-48db-4d2f-92f9-4ea95a39d3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c639a921-c841-4feb-9d0e-62a1e25e37f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "16763294-1338-4d69-afd6-d2820e924579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663f2458-bff4-44a4-998c-524db82f7f44",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002f0fdc-12c7-4c98-a417-72228890059a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff867c3-2b47-409b-85a1-7a5c1f434691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed50ce19-7642-478e-aa0a-c0828354f458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86704169-f55a-49ef-adbf-22fc5c61e187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce9ef00-eaa9-4105-8c81-617669992883",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210fe24e-2189-4690-956e-507dd1858d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a33b91-4e70-4976-ace5-f5eb32f67466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f260371b-a226-47a5-adb1-6d096d0ead27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54274043-8290-4fbf-8bc1-8a90b3745077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bc2afe-fc97-44e3-afae-62a41f40abda",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505e5ef1-58fb-4aee-ad46-5f8eb05baee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e73e05-1f29-4816-bd9b-4fb9a584670f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d119ba2f-b770-4b90-b64a-bde893f1533a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11d2bc96-1381-47fa-bcc2-ea000db7855d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21f761c-d753-4f65-8390-0cefe2313367",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e37013-d08a-4fcc-8040-b19d80961165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a11b6d-b77f-4394-b6e0-5ab1aee8b563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c0fa34-6a19-44e0-9fb9-329379ee16ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bc136327-6a4b-4ffb-a063-94422afd794b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc2121b-e259-42a8-a6a4-ad9564920392",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3159137c-f38e-4183-9dc4-5b0d6db35bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38feea8c-f68c-41c2-87c0-83bf403c5f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f0b6e0-6771-4a44-a05a-1154f9f11a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "192e17f1-fb8e-4917-a296-4ae69d197806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b30a15a-f2d8-40d5-b06b-decf85889ffc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c82ced-1f1e-4598-829f-38f22475dcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66375dd3-7301-4e79-b59c-279ca92f3b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803a6f77-ee90-41e0-99f2-492ffa0d50c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "675e78cd-a0ef-4811-a530-1fc0fa510182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da74fe60-48b9-4061-9b41-70084f9b10ab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5a75d5-6150-43ed-9178-8f7709eae8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cff44ff-cbd4-4f31-b617-6be9ef167120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2b9152-e17f-459e-9ac8-838e495ed631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2638eb2d-2051-4452-9fe4-2d1ef332aff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cc43b3-682a-4f68-9f3d-4c1c4c373d2a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c8f5d-f1fb-4e15-921f-013be6f9d0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f578e7af-0c79-4b03-a5b3-aba9dc232289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7400a3-b4ff-447c-8f93-4a41f7dd87de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a6438a-d733-4037-bb34-b2701337e60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf8ad07-8c8a-46eb-aa20-3ecbacba7589",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18522bfe-d0d5-446d-9101-8e54e9980a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298bce41-1c5b-4e29-a939-c55724afbb72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44af4ba3-3137-4328-a118-f1b0e0106aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2e9d42-d060-4c88-a43a-827225001d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f99c890-ea7d-47bb-99b7-53475b67cead",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1668f1d-0194-441f-a1fc-8bf691115154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4598c47f-6fa4-4840-8219-6e20e7870c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e45c33-fd26-49f2-8f0b-b162c1f307f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1ac332-6a41-482e-9e28-c46a27411fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeb6c70-c803-4e64-bd12-fb2196da9474",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21044d9b-667d-41c5-a37f-f31e609c8cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e70acc4-703e-4032-a241-517504f962e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e322b90-594d-443b-bc28-322e81db150f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd8bea6-4a70-4d75-a04d-79aab5195661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a999a18-f337-49ec-a13f-3eff58231d3c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6044f02a-1809-4305-a096-6a3b4f8a7650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27576e1b-6bd6-4e5f-be35-cd3a56bd73ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d2d1be-7f21-487a-a0a7-d380888b1920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "553112a6-4937-4032-86da-eef281f05a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e3b118-bced-4e1e-aac9-c9e320982832",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e064780c-670d-4fb0-a726-7e91b281d77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65439365-d24f-4752-8776-89d91f5887bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c80e244-ef7c-4ed1-9896-c2d6298d6847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0adcb005-c4b8-4400-b033-3ad6b1f9d463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cba0b3-82c9-4e4c-8b28-205a740eb459",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e29b55d-5fc4-4028-8bf7-e4d0f498b833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f590198-739a-4755-913b-e5f95355b120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9179cf26-6e16-4d66-8be5-efe872a2547a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca26f606-ce85-4116-b0de-f4c2720f1322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d6eb10-11b2-4d5d-8a23-8b7eaedc5a7e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f2e861-1d04-40d5-a630-f41ea5e30679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8acb6ce6-fe85-405b-b986-e159cabb8da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65e4769-8493-4708-bb16-0896ef21daef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae52d24-bf4a-4f4e-bae9-0cb48e699772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0008ac0-9b0c-4a69-b818-2601b421f523",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908962ee-0d15-4bf1-b7b0-cd4261fc1667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a10f746-6e76-46e2-9479-f6ea0c1fcc7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746f7ce5-b699-4d48-bf9f-4747df0f865a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40f23d0f-ec5c-45f6-aab4-5daeea9641eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cce7c9a-c91a-4158-b596-2ce19b5d1db1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a948b10-e707-43d2-9989-05d0f7fdb758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ce3fb9-6311-44f4-8486-fb31b02b8155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fab460b-accc-46cb-84d1-c1112d90bfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59b57716-2d6a-4181-be37-2e07f0245d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c81f22-b0b9-4ecf-ac9f-aad39a7d9daf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94e9d9f-0db8-4f1d-981e-53b8512e9306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f778b6-fe84-4156-83fe-caf4ca3f8977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818ebabf-42d2-4337-8aee-2451135c9ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea309d4-1828-4a4c-84b6-d6ff3220ed63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143dbfc8-0017-4c41-a1f0-dcee76092cda",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ff4bac-971a-4d9e-9627-b2b9550ed917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9330c62-004f-4779-a481-8930003bde95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c54d94-e7d2-416d-a273-e49dbd33b0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8c12df-1685-4cc5-b925-dd622ebc108c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6234f22-e303-4b0a-a050-148f19645e36",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc64d971-ca26-41b0-aa40-ccdb6dc34705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140e969b-c9a2-4dbd-b243-4295727a5023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022b9da3-2a0f-458c-a923-a186ff3bca9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8dd065-caee-4282-a848-30cbc1b1bb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18287258-3720-46ff-a253-9825cde62beb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6004ef51-ef4c-426e-be52-31671a8d0a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c35207b-d217-4be6-b2fe-d4ac1659dc52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d363317c-fcf6-4c4d-8952-22c6eb6557ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93e4f3dd-ec20-4a9b-86a5-f182b40a86c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27daf4a3-ef5b-442b-96ca-2203b5214e6c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94e332e-69b0-4f79-8b8b-465d78ac4678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8a00b9-7f63-40f9-a0bf-01e3e9667060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d469eb0c-8f58-412c-9138-c8136effe317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf85a28-6660-4a7d-9d91-0d8dc8f64efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b60c023-8d4e-4aba-adcc-6429328f9a7a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31edd915-fe8b-4510-a278-be7d47869279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4e4466-afcd-4b3f-9b7b-5f58fb7bf4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cbe57b-715c-4438-b5b2-1b0a038cdd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7141f676-13c3-40fa-bed9-d4c8f4be1875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c7b11b-8869-4f2d-9d05-b8f3e9d502d7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879fa211-fd45-4a5a-add1-1f7ada04f68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd840fb7-ecd2-4ee9-851a-7dd27fb686fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fb16f5-aa88-46f3-bfce-bcfdb763788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c39c48-e45a-4791-a835-f4836538e63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7313388b-e520-4f73-b8c4-6f22137705ce",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a9ee9d-500b-4c93-b847-62b90668118d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28bb73a5-5b63-4d11-84a8-5736428b2811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d932483c-8352-40d4-b3a5-09d5f7a722d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed83368b-6427-4c56-bcde-8d1ac5b1c280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b606e1-2c43-4424-b39e-64c928f3a50b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435b4d63-032d-4c6e-b1ff-45976215ed9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461e98a1-008a-45cb-9592-793cf85f0cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b5456b-a76e-46ec-a4c9-bfd3e325129a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1da321b-5cae-4334-97ad-b33b69bd18eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e268f0-9364-4eac-9549-bb6a6bd71042",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721f062b-f305-4fa5-8a1d-fedf5cefeee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4053db50-b587-4fba-9b7b-11bdb2bc7623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b567d3d0-5b03-4fb2-be8b-5b4709e7551a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "170fa036-8546-4fda-bea1-35565937c419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434a6018-8a9e-4106-9cb4-235a2e523402",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f381466c-1f72-49ac-87be-594a4b58ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b52138-0249-42c1-aeb6-91b65a0e7a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d828e35b-639a-4865-94f0-9d0cda894630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d393262-de7b-466f-ba89-91273db74f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ce155b-9b7b-44e1-895b-bce4ad88a2a7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4cb1b6-d7dc-4f0d-9d92-f5e4f78e63cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ffe8fa-d9e1-4705-ab37-3b3ea40053f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c277ccb-f965-4dce-86c9-0569d5caa870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70a64f18-8973-47f8-8526-dbae08623cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d529b85a-cffc-4e03-9669-8d990d68da50",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476277ff-3dae-4957-afd6-9a75e2924590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c4fe76-3add-456f-8425-71e86d1d3a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed79a1fd-2d86-4700-a315-5df48c7fec71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "516dfcc9-38b1-446e-9ca9-4911fec4b79c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "061faab6-6011-46be-8224-e14c8777bf4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5e26c04-b5dd-415f-926d-db3f7fd91241",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97987464-ab6f-457e-8e95-d698b50415b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "01a7df6b-e270-4abe-87d2-83f1035dd918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d08b29-2956-41d4-88f8-3fadc745934c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0361040-9ed2-4524-a052-deac7ed8c0e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4bc8535-4e89-46f1-97d3-f568177b1503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "034eddfc-9105-42bd-a9dc-c946b1bc4217"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e79e24cc-8e70-49c3-8aed-3561453030a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dd413b4-79b3-4ccc-9953-6253ba704a79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15be4c2f-1667-4494-966d-65d06b182800",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3577fde8-e7cb-46cd-b790-be9079a61a60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea1336a1-4b60-4144-a9be-fb2106585a3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ddc0711-cae6-4c6e-a9ae-96fc7d8c39c4"
            }
          }
        ]
      },
      {
        "id": "f0f899a2-86a8-4cbc-a16c-e806f9b434bd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1448fbeb-bce1-4d44-b4bf-be538d5a70d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "488e69e1-977f-48d3-b0f7-f3e4154b02ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "efba54a5-3a22-48dd-8ccd-4d281516c39a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9ab668-6d47-4947-a662-3c273028dcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54033bb4-e2c9-442f-8903-8cf7d61bbad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a071e5-5ec7-4c37-8ddf-4a236da3fb9d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04a707a-7055-40d9-af28-a9c409453f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a39e03-7185-48da-9770-ce3820c1cf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d10b452-d089-45b4-abdb-16c14a3b4dcb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abebb1f6-ba70-462b-bd65-239fd07d99ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7c1e64-55b5-431d-8741-995015ce33ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bc8aa8-012b-415a-892a-31c8d4ab4c95",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f573476a-bc9f-47cf-8ff2-68af301d378a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8e3ca0-bc2f-43ad-bb35-3b89c8928ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c554f4bc-ec3e-4d59-b134-d27140e73449",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c375b94f-3841-453a-b569-350fe9a9372d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7521820-8919-4767-b3a0-ff2af2a23314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d031dd-c622-4ce5-bc3c-1f571f179cfb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c436c5ab-e7a5-408b-b44c-571eaee5fc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda6e949-928a-4a6c-851f-ae26d5ec403f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f344b48c-3857-4392-9167-edb6febb9769",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d47a18-ce6f-483e-b620-6e59dbd907b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb2683c-a9e3-4b81-a121-934bf2ca401d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f8f709-0230-4c9d-a846-13598493f742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276fa7f3-40bd-40fb-bced-2012e8f9ed35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ba41dc-0ff1-46a2-9af4-8d3bfa833336",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af6eada-157b-4f99-8cc4-ee08e5700979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecf41b10-d8ca-4e3d-8e21-1b41fad9bc18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908ca9db-4da2-43eb-a7ca-64223a7e59b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87b3465-8362-4843-a403-b63bf4f36d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be9abaa-7c2f-4864-9226-9d13254e5a69",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2876a1d-b2d2-45f6-b06a-28d4c907a7bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693376d2-7ace-419c-8a98-80f434be06d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9356f4-5a85-4072-9278-401893353bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33ddc9a-350f-440a-ba83-82357718625e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7393fc-4b70-42c8-aea0-e63a84b0c4a6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859c7200-4ba5-44b5-a922-48b0d2071b8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57348e46-6b65-4d93-9602-98dc69b0414d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af404a2f-1199-4bf1-a195-95c6f4ec61b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78baf633-fe00-40f8-bf29-65514340688f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44f7962-1796-4281-ba57-b84bd2d0eead",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39df6ccd-a59b-4740-a1aa-7d5f16a942b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5328933-5812-4e32-977e-0af01b0d86ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b62c5a0-7425-40cb-bc0b-ba1798a16a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718999ed-5b62-4272-a271-bb65c9efa5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6d4ca9-5449-440d-9288-1d93612857ca",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373615b8-f752-46b4-9820-5f72a4c27566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd013094-b639-411b-a2e0-6029b0ca2f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb47a623-5957-4c12-a93c-a7d9b129232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a931bc-c688-4c3a-915e-d6cd2c642ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a1bc3b-6705-44b1-b3d9-31f811b9bbd9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7981f1-3aeb-47f2-8b25-652ee594d630",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d9fe94-d601-49b1-874b-d30c4cc46e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecbc508-108a-4e5e-a04c-a81b7241eba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c6c1d4-be4a-43c7-8a9a-cd973b0302ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e386b84f-afa4-4b42-bbf8-467e8b0f385d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c0a7de-60c4-486f-9dad-9d358f22bf06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5d16c1-59e5-47e8-8cae-8f07df344f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be92532-d71a-477e-b969-4397a40d3a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a550bf-73cb-49ea-acba-bc8df29e8073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6268337-3d12-4840-a7ba-a54e806edb15",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23795388-7bef-4c02-af51-787793f91266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b872e96-6cb3-4c0e-8617-1d35a62ac88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19102a24-0df9-4884-9d50-c086ba779a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df12b5c4-7c12-42e9-a29d-a6767107fa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9672218c-8032-4742-8398-b9efa592a40a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a4b070-190d-4143-bb0c-02f305b25bba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7883310c-6db8-46bc-8a83-3930760e8452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3544afd2-bc30-4aa9-8382-a2d487ddef62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c20f34-f6a4-4091-9331-899202f4c852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8928b13d-e187-4151-99ca-5c54e0501c79",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619d3592-35ed-4526-8142-f1dd6c31f21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84655614-2ea7-4204-9e92-d78194915523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09da9331-6e27-4bf0-9d38-e39165f17b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f155599e-2afa-45b0-b717-9dc076fa7791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2d0f8a-09bf-4a7c-8d95-b5d24699003e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7976e7a3-fc7c-4717-b349-5940556e2d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e50e6cf-5894-43e4-84a1-259281a12c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf57c1c-7dac-430e-86c7-876965e72336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92aa6ac5-19dc-46bd-803b-0912c9d09878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0399688e-3a87-49c8-9b5c-f3ad4f198fd8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add88ad8-5016-40fd-8939-6f8ed28326c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae1a0f9-d105-46cd-8fef-10f7fb9365ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8adbca0-a640-4da6-a72a-10901a15c018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9610716-61aa-4f15-8b6c-170579fb3d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b8919f-997a-446f-b2c9-a5b26d525f4f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdbb7e4-6015-4edb-86ce-99763dcbd361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbec6e62-1746-41d5-a90d-58c70080795c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30605b28-1ac3-4f8e-93dd-672809c6abc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8dfcb67-408f-483a-b3f9-cd52135363e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2a1ac3-844d-43ae-9503-2c2f3c1d21eb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ad0a33-a5fa-4109-9064-b752a77bc889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c920d3-f4d3-4356-a6d3-2e751a04cae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37f6c08-82af-44a1-af12-cdbb8f6b3994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416ba0e8-773e-4b9b-8ee3-041b9750ca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ed5e46-d029-454b-818d-7064ecae9a92",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab87f10-c6ad-4619-919b-53a3f5079c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b54872-a92d-4835-b119-470028dd97d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7b94b4-7799-44a5-9d57-81513e4c756f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226bdc2c-4667-4356-aa75-fcf50fa198e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae685d4-683a-4548-8ccb-c7815ee6c8b4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684e83ac-8297-4045-a222-1223b2ada60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91749fc7-e91f-4e00-9605-51d794f24283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae14490-d9bb-4298-9c5d-5c1f324e63ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a00ee16-3ea1-4a77-a550-5c39de4ea1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d532d651-274a-44e5-895f-a5d7ce209114",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e575d783-c189-43c1-8679-ba63fba55e90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f62042f-227c-449c-b98c-7516b5ba97c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0340a22c-6f56-4ea1-8a10-42ab802c14e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2e283a-e720-4792-92f8-0016d3e6717a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429a8c50-f500-47d7-84c2-eedf8d70eeaa",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65af101c-5899-4807-bf1a-34c35c567e62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0547ad56-47eb-4af0-80bb-b3c17be0a38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739fa2db-edbe-4c01-9ae7-b54d742ed99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567c65ea-bfb1-4dbb-b5ca-cf82820f7fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd16dab-09da-4c0d-a430-90eae4338132",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66eb8d43-5f2b-4f36-b684-70fc3b57e774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4116979a-8fa7-416f-a54c-0154be7b9ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac2bdaf-f0e2-4447-ab37-596588685870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36339f9-be7d-4c2b-b997-e5891ff8bf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21822cfa-e763-4198-8c3e-ca969d278bae",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192ac39a-d2d0-4406-abf2-8c2984262a24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc30309-14c6-4578-a9bd-f7345108a70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346a8abd-580c-46b0-80d2-0c640d3da171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c2df40-161c-4af2-ad43-ecb87e907820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6f3fe4-22ed-45da-a331-8052784ad03a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93695ce-7515-4b27-9f7f-e3098f07dbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a599d0af-3544-46c4-9ab8-189b3383ab8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f764a18-7a0a-4f8c-b735-bfed108d82a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8bba8d-90b0-4d5a-b05a-425348740a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb92a2-a83d-49fa-ba99-304b9a1d4eed",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d607dd-5f79-4d22-95eb-b9abdacd13d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d86ab2e-cbe9-4351-ae90-fc914ac1e42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762b3c65-8e03-40e1-a420-23c00bbd09de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e97f58f-e231-4878-a44d-9486d1e936ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62dc156-26b7-48b1-93ff-264d7446bc8f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f94347d-af46-4c42-a4ba-790d794f5694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fa5ab4-fe67-46cb-bfd0-1198b586cd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12550f9e-f625-4610-b27c-7bcff1b3ab32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0af55e-866f-4ccb-8d04-0b9ad83524d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddda485-9dd1-4bad-a638-ac498f66556f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c699603d-38db-4d4a-a1e3-ab1fadcf67d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892f154b-9a45-46ca-9f3f-063e0afdc533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddd6e5e-4424-462d-af69-5d9e7c87383a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28fda9c-d5c4-4e62-92f6-9029d0d3e7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087f53ea-94ad-4d76-aef6-acc2f65dc0de",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e50188-bdc9-4962-a17b-882713288999",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f7113dd-6329-4f9b-9bb0-13a92e525b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ecf63a1-4382-4c7b-90bb-fe3db4bfa471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067c1be7-9629-4392-bfa5-da7ab1c122ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1595794c-9f48-4556-8b78-1144b97a2d28",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb846750-f401-4e52-a40d-7f6fd23f47f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3119319c-bf62-4a12-b74f-50ddd0141491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec77d76-4b00-43c3-9a87-e5686c19b7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8b9587-10b5-407d-9a03-076eff82737a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795b6bae-026b-43a8-8e5d-f1b9a4bc8dca",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f10b7e-b592-493b-aace-5dce5687e4cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e5879fd-5649-4d6d-938b-97b59d5ad50d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ad690b-3361-4536-aea9-5ae628b3fb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f69735-db65-4cfe-b5db-fba843ec0c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61d1e69-29c7-46d9-b43f-3374479ddd6d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7873839-ef44-46eb-9040-0ce985cd124d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d570052-a63f-4f2d-9440-f8b3803fc4b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc85297-9622-48f8-bca0-c2591b454704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab6cfcd-ef7c-4af1-bc8d-1762a8731179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfe7f92-79f7-4c3b-9932-8ff2482fa50e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780e438c-fa96-4830-81d4-85a75f986318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f8de7e-c792-495e-97ae-363b1fada7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb36264c-bcd7-4a0c-b5c4-7cee1a11aade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e4ee69-6106-46d5-9851-6efb126602fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c703122e-4582-4a56-9792-f24704576378",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089841cc-3cc2-4908-9531-0ed67997a0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bafa87-9ef8-40be-837a-91094f1184d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaa8cdd-870f-403b-99e4-b72f6f429e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc26283-240f-4cac-bfd3-48cc9b7db2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a44094e-0167-49b5-a129-e9beffd53116",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102d53d0-0375-4fca-becf-16a5129aebf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce746ca-5632-45dd-ae32-702685deeaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3923db-3683-483f-afe8-7b398d2526a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c675371e-a593-42f9-9ffc-df7975acc397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c34f0de-936c-4006-9724-6dd53dfcfa97",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61f386f-616c-48c8-8575-3ce25c7a8857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792dd6f0-f735-4b64-ace6-cf4ffe35c895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983701d1-48bb-43dd-875a-04fd941bd108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c54ba06-9907-44e2-ba2e-d7b35d7170a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c011a0-8073-4ca7-b9b1-552e4e424bd2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c826bc0-b447-44fa-a005-dfe9e336a4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fbf90c-1f6f-4310-8b26-501d11fe3028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04038ecf-3725-41c1-a11a-8be53cbf865a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b136cc8-14c9-484c-a5bb-54afed5dc2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e521c4-8fcc-49bd-b0d3-ac90ba2918fa",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba04155f-6184-48bc-b20d-59c9b11667fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cbfba2-0619-4515-b8f2-2ad9ada65553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b6546b-3277-4ee8-a1b7-1cbd1031bf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc5e389-3dd4-4d40-84d7-d9e791a89435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce82031-8947-4c0a-8e3d-239137077dae",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfa871e-7b71-4552-b6ce-8146db61ae25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b0fc83-d58e-4efd-9961-e549126615ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859e6510-a34a-4f7c-b3bd-c9ed0a9be2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bcc4ed-a8dc-4697-9b7c-48f773805952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4c5a40-2bb8-40bf-b107-922bbdbfa0df",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837eed92-8eda-4af7-a2fc-c9cdf33675e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58313c0-45a5-4a9c-aef3-75a87c1d3301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd69a58e-b1ad-4c1a-bb74-7f68fde9292d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5678fd-b3b8-465f-ae75-228f100005e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c2e8bd-f563-4913-bf22-b22c4349485a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54812c8e-ec94-481b-aee7-e333d3eec2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32348d65-b5ca-4492-96aa-8075e7ed4cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b8e08d-acbe-478a-8744-6f640a52df68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bc0742-bd45-49e3-992a-679f8e82e6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fd9182-73b6-491e-9253-fcaced525b8e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e377438-1c4d-4d75-b112-77d46c13bb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158f2fa8-610f-471d-82fd-7b556658bb51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf42afd-f6ee-4dc4-aaf0-bc22ee965021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c2422b-2875-4172-bdff-bec0990a91c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0fc615-88d5-4cb6-9736-24f8ba3bbde3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24fe387-acd0-4a32-bc21-d412c3b628ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80faced4-9447-4742-b354-91d846baeaa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4580bf04-0d9a-4c58-8848-ff529f5a8b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46fde5e-6f36-4c1a-a24e-9d076f0cf191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db1e3ff-0661-4198-83f7-802b16a484b7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b7f9e4-295d-482c-a3b6-53e4e486f18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d960162e-9a4a-49ec-8b79-ebf4b97d89fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec62967b-1040-4f83-a3ee-dbd1bbad0921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50914e0-ee68-458c-98af-d22952ddb49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4839fff8-e167-4a01-b997-5367cf698e31",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2708c24b-2e58-4f52-a393-5d806296f24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99df4767-41ae-4307-b6bb-53c5f845b090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1d012c-5273-46bb-9102-1df0c9676d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9515355c-bf9a-45a6-80ec-d69bb473749d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b2fa73-d4a8-43aa-b497-4fb0e0f6f1d9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f105ac-e20c-4b98-9f82-9623a3eba336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0764a1-f9f3-4da9-8813-9336811e672b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e001b46d-bd8d-4283-bd63-1b966c9c68f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2105e6-86c2-42a5-9373-87dca825b881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45e21c5-29bc-446f-887f-9288313215f1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54198409-a97c-4c91-a20c-dadebd687635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d289b738-6f3b-49e2-9f3b-766d667a13f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf21316-c37a-45a2-a204-d8db2ffa404a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20720049-a8dd-4e70-a9bc-4db020c3d06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0910aace-772b-443d-aec3-972473fb46a1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8de8eed-058e-42f3-8ca5-ef3d2b71be35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e590075a-df37-4558-8357-80e21af7da9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2583dc84-7da6-4c50-86b5-2300c1487a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74eaa5c4-38e8-44cf-ac94-3d0d87f49284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6566db04-81df-48b9-b747-69683a9b77cf",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11086d6-8363-4185-9b3a-c74c19edc26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92128bba-4e49-487d-932e-c6ee40c15e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ee7f09-1d15-4081-b0ed-2f9b4873dd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea07c6f8-6e3e-40b9-8a25-3c942dfd5078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f3872e-0780-4c4d-a118-c0bb5b929c08",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b5efa7-c037-420b-b0de-eb03107326c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca36c87-1723-49e1-bdad-fcf83c873d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152e5c14-9e05-4da0-8fb3-564a359f70d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2e2963-b665-4e37-a28b-a5aa71cb5450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956265c3-6650-4598-bccb-bf7d82c96684",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e711c1-728a-4c41-ac84-d9c0f62f8067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b358e920-41ac-44e9-94fa-d3990020891d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe8a7f8-31bf-4f1d-ab3b-78e3de95332b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e48ee36-ed29-49f5-9e02-f530617e0038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fc3b86-07d5-4671-af6b-aa09e0a84681",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f634d683-4d9e-405b-b9ce-d3347874599a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ed7414-72ea-41be-b8fc-0fc6944f51db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4f9451-76a6-4887-9ad1-c1bae94f47a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56669ad5-9a74-4166-a9cb-88b45b732082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad2773b-bc4c-4248-bf93-a3ec0a8bfdbf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322cf3e9-3669-4e07-8e32-028c5b5f88c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a40dac-ed76-421b-84bb-93cf75b2e6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c871076-2ed4-4085-82c7-658ed2160559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66308af0-7fc3-4f40-8786-95435f1b6eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99b241e-fc45-43c0-9edd-1bc033598b31",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b611d6-6b9a-412c-a736-3ebaaafa1815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52251f21-8754-4607-8249-380c7142f857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf24901b-5963-4bfe-a827-fe165b770bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06450220-a6ac-4b1e-ab93-6da4da23e00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb490b91-fd97-492d-b2f2-4a6f05713a6b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3fccdd-a46b-4f89-ac30-10f8367634ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f15b135-d5c2-4455-93b5-f7cc98475070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2371d7c8-7ac5-431f-a035-8b97ff7a45f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fd9bfe-55e2-409c-985e-36c79f313eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8e3f1f-2995-42c6-a4e4-49bb4faea969",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2569a41b-0e60-4413-b26c-9a75c26aae99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1cd872-8830-4b22-87d7-aee4f6d8a911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e7b416-51c0-4508-9738-f2d9b6865e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd78ab2-41ca-4235-82f7-51387ed48b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f3794e-593e-4687-8654-00f6a32a69d5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3475b55a-8f82-4730-8983-fbf1187f7e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb5d237-e53e-4444-bd98-96a3728ad0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c5f972-ec40-42d8-8293-2a2954c517cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a58e017-3da9-4a98-8abe-0b35fcec4330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546af725-8052-4185-a95a-f6ecc55334e1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda30540-2a92-438a-9423-78a35f195722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba5a2c3-f8cf-4cfb-9991-30e576e46a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dae306-735a-4982-b15b-d6120ab39e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a917a88-c929-4d65-9449-93b32c348b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baf1615-e29c-40d8-b6eb-f7609c42cad6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def38945-b69c-4fd4-bbe0-45b8259db63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd322c7-5bc9-4281-a8c4-12d95bc0a3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db091694-3bd4-45a1-b3a8-c8229e4e0765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969bc1d1-7017-46df-a351-78ef9dbae09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11321188-6bca-42de-afba-0a4f4fd73f1a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fd0a1d-ab68-42e2-ab39-16a32fd09198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02acc061-31b9-478d-b58b-36d37eda0baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed351c3d-eaaa-4929-b134-12e3b659385f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0966681f-905e-4132-af82-5eb33bb013d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b46296-3c07-42be-a535-b77b53d162a8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5c6721-b767-4330-bed6-f6a57f1c2ffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0438dd74-8bf1-4ef9-99fa-a91e8f2d6f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a28c2b-9bf8-4be8-9f0b-a0d0d12991a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55879d2d-cb60-4296-8ae9-6d541dc043ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15193fc0-40b7-468f-be97-132bd4338653",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01643d24-6fc0-424a-b0f2-f971325ff990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f40d71d-7862-4720-94ba-e6ef4e406cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72471070-c6b8-45ef-9161-236c1f266239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7661b705-ce8e-42b7-9aea-bd2c35523c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5527867f-425f-4e6e-8b65-efa71be74f94",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e2c562-342c-458d-980f-b175931364d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb5117c-51ce-4f54-8a3c-90b729e49071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7caafe39-dccc-44e6-865b-97a62553064a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9f00e3-4293-42ff-9862-d1ad71146180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7c6f81-8f6d-4f0d-8043-ffc202f9374c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786fc37d-3289-41fd-8d25-2db1d9ada387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5361d53e-7c54-4620-9193-1bade1e03dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57413bd4-5cc7-4305-99d9-3d4bea0e17ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855bd243-3c2d-4c38-a7c2-f92e3ad2f64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae88d2a-4649-47b8-9a63-9a1becf1b0f4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51f1134-c3e3-469b-988b-4ee596fda44d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a176e134-89e9-45b1-bf12-f8313cf1bcce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf35eb53-ac3f-47b0-8ece-a36d091bc669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c00aae8-79ac-42d9-bcef-c17e260d1a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af16a26d-aac4-4d46-920b-1d9d78698f95",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9e11d9-f041-4085-b4a5-7001d40b2531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770bad66-5539-43a8-9fb2-72dcbbb0602d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff8a515-dbb1-43b5-acc7-29d0bf98ea54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e35ac3-a089-472b-9cdb-e7badb2fa982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b8ed2f-e93f-42d7-8a32-b63262cdfa54",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1386fab-fd9c-4064-a459-9f206ac18f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09102333-a55e-4f5d-bce5-61e05cfe345d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5859ecae-a9c4-4c8c-aee8-1ab85027ae66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aceebab6-f1fb-4c41-a4c4-635b31ca3606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3a855e-8ac9-4d81-980e-c873e317dfb3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123873ea-e348-4dd6-a1c1-d34da0f6bcc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15f6ca8-3aff-48c3-9824-33fa213c6eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f6c419-5b95-4504-bd4d-5b81509e67e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3091da20-938c-43ed-9b79-6190d1f66adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08c7f1e-5686-4f19-ac40-79eb14017417",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19da2f53-16ec-4a71-b197-299ef31806ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fd12813-d16b-41a8-bd68-2ff10d397849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c0ec2c-f7ac-4138-a742-9a536e669453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33597b60-f470-4825-bc2a-45013c06f59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18473187-ec4b-473c-8b1c-b9c3a59f04c6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158aa30c-58aa-4c28-9736-67d58666cfa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d99f676-5ef4-4bb7-9d8a-ef646354f00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb99f777-2d04-4374-9dea-ab4776d95921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d31515-7805-49e7-a108-d22ea528a796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac81ef62-3bcd-44c0-8a62-a4875aaa4e1b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab267a6-3689-4514-98c3-97df30e5d5a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8323cf4b-42cc-4570-810b-58341e59eccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cff04b-c5ce-47e2-86c7-4d90651b0e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa1a6b9-dc8a-4dd7-bdfb-9aaa865c7fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bef91d5-7cb2-4d14-b2f0-1600919ac98b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d422bb95-4afd-4d93-bc4e-0e22be23c56e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b460e446-3981-4ada-9f74-186089d0b8e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72807af6-7d9a-4483-be59-e701357768e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0775465c-dc27-4a8e-b429-d44ea2d3c4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000a2dcc-e6f1-440d-a5d2-fd8a9520b350",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69386075-5ee9-4bca-9236-587b7b4a0157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a9120c-4de5-42ad-a69b-affa63e08f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157e3cd0-0331-4e30-9a53-2862893d9787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d9e59f-901d-482d-81d1-af512382430e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e34ec2-ec56-417d-8362-8dee773bb27f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a132816-8fd7-47c4-a8df-0dc27b2a8612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b20629c-b49b-4004-b2b6-313e1c5ed116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b0f0ca-1a5f-445f-a4a7-3e780c5f92d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948b685b-87a2-4639-afd5-50c87f36d8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16837525-2897-4259-8d64-2212ce941515",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcb1286-4a3c-41e9-84e7-e9fea65a93ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0181bedf-7c78-4394-9cdc-57dc49599171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a49e7d2-0317-459b-a01f-f994c39812ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf50346-85ed-4349-bd97-b600ab4481c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36549641-f239-48af-b849-9bf3ab0a5c89",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f239f2-0303-4195-9131-a14320abe530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d71e992e-c493-4962-9f46-ae98ad04bafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92207d77-f969-4ef5-a3b0-aa98e6e63844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9194c260-b2e4-4b77-8a5e-7ee9a2c8b226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ab28b3-a6b7-4a9d-8853-9adb17092b02",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ae4aa9-6286-4a8c-8d9c-ad686f0b86af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602cb795-9231-466a-9b86-9ecb0542c0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f008a9-54c7-4f0c-a58c-739628d2e708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb50895b-c70f-4e86-a758-460db576b16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57441257-d7e8-4800-9138-5423c1f40253",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad46c0b4-464d-40dd-9cff-5651f07c8c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "671cbd3d-4a52-4242-b674-39c3caaf573b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c245c1-e195-486a-b5cf-880642fc6fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d562162-9cb1-4d53-b30b-a4bea6392f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424fa910-6935-4226-b84c-7d8d16ee1684",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40c64c1-dd47-42b7-a021-e514dfef98e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "092e76e9-143b-4a53-b5cf-eae0fa059429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76667c6-e01d-470b-ba2a-c622c3b29e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2084c67-38dd-4b78-98d3-29aa6c78dd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3556f489-f566-4d75-b697-fe67cfc6c063",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6936f040-ffa2-4176-ab54-9ce867609be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4242a188-e43d-4118-b8ce-2c43df808043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab967d7-88f9-4297-8360-58c49f296f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e40693-ec6f-471d-a5c9-31f7ec8e9982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613e8f5b-9167-4d3e-b49f-b1505b86d424",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7356a11d-0a1a-472f-b691-c43c691b3e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0477dc72-d9b1-4789-9cd8-dff69c44c0e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2426560-01f3-4588-b60a-ac09f80604a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a226d6-f311-48b0-bbaa-d72793969c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feb3be1-e03b-44a6-b49f-82bb42b74d05",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091d1500-36c7-4862-b340-a9b7428a2aae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1af6bcde-9b2d-4d18-95b0-a293f493fc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb6290a-064e-477f-ac18-18e3eb30d396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17002c8c-64d4-45c2-acf8-0e02c3bc2a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9897e80-eb77-4735-85b5-97d4c873a772",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0c60a2-621a-46b9-b5dd-0c56c7f9e1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61a6145-3c28-4466-a4e4-23e74dbe14c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc440f90-5e15-47c8-93b3-bbefa38dc36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4629188-cc86-45fe-82f8-8afe2da6036f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f3e9d0-4261-4b52-9265-712acf956f77",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95d14a9-2254-4a4e-bb43-e8ef34946f5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167855f0-a8fe-462d-bd48-6552bd0cd280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247eaef9-6518-4ffd-8418-e94fbd451158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9aef750-2bbe-455d-928e-5a4e013b859e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ceb5dc5-6635-4181-997e-2cb4612c468e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3481b84-923d-4331-b285-235cd2bca8b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c0889a6-6a9d-419c-a4b5-3a93dcb89596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33226376-61ec-47e7-b060-c0efb235fce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f567b608-e2c3-4919-a979-26c1a71a22df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b6fa2f-3b7e-47a1-86d1-ef78cc7557e0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a3ed68-759e-472a-b778-4677c4beb947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95cbe548-c6a2-4be6-8d59-fc6402971a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24bedbd-15a8-4fc2-9eb2-ef309a31c437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d2bb78-6fb3-4854-acb9-490fe4c55edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39558bf5-b1d1-4767-9bfe-6997ef016ef1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259137d6-98bf-495c-ac56-1fdf38840853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9303edf9-8657-4da9-bc98-2dc6fbfb5533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c56e92-434f-4c1f-893a-fef3e6853ed3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0641ec-2d22-4b9e-97ac-3f924f230f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d57180-6880-4dc7-aa50-7ae9e0eb195a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e52e7e2-cf67-43a6-b9bc-dd7873c14867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef815580-702e-4bb7-95b3-60c81a050ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daddc454-7c2f-4fcd-b754-d41f0a72cc0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4fcf5a-902c-4033-a44c-b23bb95b6915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54693101-d839-4039-a438-a2f0a6ca226b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff4d72d-9ba1-43ec-91b1-f2af7a799187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "774df7ed-104b-46f0-8f79-b6d642241489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a88cd9-ebaa-4d35-b1c1-f880997fa8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c328e191-c9e3-468d-a44f-77ceed24033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a4cf66-7c49-4af3-8d59-35d50c58695b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234c1179-d643-4276-a013-f321d99f919c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e6dcb2a-a6ba-4edd-8157-f8580c033fc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded038f8-9dd0-4e16-a496-f3d701700b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dea3b21-66ce-4ec4-8d8d-92e563f34abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996965ac-d0b5-4b4f-9559-8416ae76c230",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20a3874-cabd-4b22-a220-a4d0f1dbd428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c1c6b3-e632-4cc3-a8c8-a1df8249a034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1297d40a-76c7-45e3-b4a1-31dd31ec6088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee14ba03-2b9d-468b-9cfd-47acb6f4e64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c6d759-098f-46ce-99ee-9dbadaac08a0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438621cb-b7de-40bb-8995-9e2ade17ada3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38da99d2-241b-4253-b037-52d30b81f01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "354827ab-d8c3-439a-aef0-1d2d00c968d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad2794f-6d8c-44e3-84c1-e38acad7267e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad462a1-ec99-4f63-8819-6c1b59e4fadf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf172cbe-6e24-4831-b62e-fee06fdacc0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81320738-bb38-4d7d-9d86-5635586d6d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb449f37-77d6-4a48-abac-d18312d21b98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41446922-3e8d-4111-8ba8-7ed116aaec27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2d72a5-37c2-4400-a6bd-8889b45add50",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef83f0ff-4ad0-410e-8494-b9a0ec83d2c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4588787a-136f-451f-9494-6dc4b46bb4d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28976913-53c1-4757-9803-2ef1a40d161c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a77f5a-8e03-416a-965a-071395f456a8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "426e11d9-8df1-4da3-84e1-d7161c5b2488",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2a71edd-ddaa-40e6-a1a9-c5124eabce73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfb14a1e-3c6d-498b-836f-34cac2a700ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "463f0c88-a4fa-4170-a311-60ccae492633"
                    }
                  }
                ]
              },
              {
                "id": "7deeb6b2-5009-4367-ae83-89dc77673903",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9507631-2ab3-4807-a808-c9f71a5e3c8e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90f5115-bb62-4780-a91a-81235ccf55dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "37e3fa51-ff58-482d-a6e6-0cc6e2ec3a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db72cd4-da73-4112-8aba-ac3c1dddc643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ced9ee27-ba72-45b4-9a8d-41fa50bf01cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2af3bf89-2f63-4744-81df-cbc8b070ccaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50136f70-42cd-4c6f-8f7e-9ece89fa7bdc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72b22baf-cde1-420a-a69c-2c1d34d8d549",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abafec08-7b4c-442e-a505-8c1055f2613f"
                    }
                  }
                ]
              },
              {
                "id": "2f858ad1-096f-450b-add3-fba60f1c76d7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "739fb397-93ac-4647-8401-8e1eee10381d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3738bb47-8b49-42f5-baab-0d1d69f86e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a3e71c86-ce1c-4339-a481-2c4ff30bdc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339d950b-73c1-41a2-a162-52e995c97273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076fc418-9419-4039-bc1f-39da81ecdebe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "67f966c4-25f3-49d7-8809-c04accc86e00",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0cab98e3-a9ac-44a2-ba3d-c405a34a49eb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bab001c7-f4a6-44cd-ada8-7dfeac7d200f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4b2ccbbf-6ceb-4241-938a-12868f578fde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96c40763-39e3-4d56-a80f-fe510abc7072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08617471-5186-49cb-a604-cd933af68249"
                    }
                  }
                ]
              },
              {
                "id": "9a776834-b293-4b11-9d7e-b68ab713d599",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a67252f-7fe8-465c-af25-23e2f68b81e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f975fc31-dd68-44a7-b67f-3bd3d53d772a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26c72354-1d5f-40bb-9267-3d4ca572a88d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17157b95-9a5a-486c-ac70-7fcb52f1e4c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20b45d46-c0be-4911-990d-c40a24adb66f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "657aada8-e4a2-4367-91b6-5eba6bfeb553"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc6a7c29-2cd8-449a-880e-5ee529f92dda",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c935e07-a203-4222-960f-becda4b7194b"
            }
          }
        ]
      },
      {
        "id": "de64d1d3-d97f-4e09-bbe5-89a8ce50d8b5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ba34457d-b42c-4efb-8bb2-35ce6d0968f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68007482-c8f2-459b-bb87-b06070ae601f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0de0c7fe-9e93-49c3-b244-5c656f52281b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7015e567-6b9d-4c8e-9668-fe105ad015bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1801d5d-17a9-4202-8ce6-1567e1bf1bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d737407c-5c15-4729-bad5-5746d1dbb426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9dbb3c8-4344-4c53-b547-328edb97dc6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03c606d4-8c81-49c2-b710-55ad3f3c104e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "250a580a-05be-449b-a9e4-a0a3a4d931c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aaee6e2d-6abd-4586-a33b-f17a19c20bd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a697af9-edcf-40a6-9ba8-3f9deae54105"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2914506c-900d-40e3-a470-2310cb8ee1fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b240ebf7-f437-4762-af0a-36636cf50dfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8babea92-f1ba-473e-8a0b-56f23d5f9c43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18e1db38-5a20-401c-82f6-7bc053e7e396"
            }
          }
        ]
      },
      {
        "id": "b5e17e17-e7ae-4414-af8c-0e437680bb5b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a8049929-fd0d-48ae-8109-ebd57b648abb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46fa0698-ea54-4a55-a046-ae43be402464",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "723c89b8-1c10-4352-b341-28f3061fbb16",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f7d33d-3e8c-47cc-8a59-25089ed7f29b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baf2096e-f0d2-4c34-a07f-93c54b63a424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42935977-3b96-46fa-a852-0c433ef01786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8cb258f-991f-4997-ae41-7963507f8988"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a263b8e-b526-4ccf-aa22-aee02dc85013",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65a8a677-b9b5-458d-88c3-955f5e610a6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24146c06-0496-414e-84b1-7afce5b3b23e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "232a22f3-4413-4853-8ae4-25ab23c04801"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdb39160-8bde-4237-82de-e9912231fbec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6156447-cc24-45de-9d19-ffaf75a6844b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dafdd99a-01b6-4629-959c-763c96b0f249",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46f3ec77-436e-4e18-9dd1-1bd0abaad3d5"
            }
          }
        ]
      },
      {
        "id": "18f708cd-1c8a-4eb1-a41c-4e07dff5f6b0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1505e6f9-33c0-4a14-8d5e-1d87836b86f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "472e7941-b031-4475-97b0-06fb7a939483",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "643ca4d8-26ba-48e3-a650-ac672246a36a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9250873-47d8-4523-ba5f-0c4cc0803d4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9652cdb-1cde-4c90-a9c9-b8bc543d3d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10faaa8-3392-44c9-b636-650a9c8dd4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e38feda-de8c-4c7e-abd7-89d8811c8f87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1f749f3-360a-4c20-b38b-6e0ef63a739d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c1429b0-e798-43cc-93de-a88e10d17462"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b01e1b8-e3cb-4cde-acad-9b552c06c8d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d177aaa2-07a3-41f3-b73f-5b5b2f813305"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1991e237-604a-4b26-ba11-3db0b3faf6a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "70f1609b-39ce-4d9d-a260-8a759cf022af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13e60be3-34f2-4a64-bebe-7c1e3d361048",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e9d8a03-7098-4c68-99c6-fcdc6f32bd50"
            }
          }
        ]
      },
      {
        "id": "67d7a9ae-616d-4a9c-a571-52eabf017880",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "632be68b-a4bf-409e-9aaa-3af4c46f500a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43094c3e-ba79-459b-9e19-16a2b28b84c6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c1888cea-e7af-46a4-96a7-75d63694427c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48a54a5c-77c7-4558-bde9-a6c8529c8307",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38e3ac9c-61b7-4f44-b204-92406a213a35",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.84859154929573,
      "responseMin": 10,
      "responseMax": 2143,
      "responseSd": 233.18435922106866,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692664315561,
      "completed": 1692664359908
    },
    "executions": [
      {
        "id": "ee4849e8-7282-48da-a555-f8832950a854",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ec481c79-a57c-49b9-8329-ab8c31565265",
          "httpRequestId": "33c85933-469d-4e5e-82f5-52cdb6cd928e"
        },
        "item": {
          "id": "ee4849e8-7282-48da-a555-f8832950a854",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b7e23ba3-85d6-4585-a435-cfbabe126a11",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "61531f4b-8275-4664-b9b0-0b602ba5a451",
        "cursor": {
          "ref": "f9cca53c-9e57-4356-b28e-f5ab17f3549e",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "457134ce-a268-4177-a1eb-00b6eac873c2"
        },
        "item": {
          "id": "61531f4b-8275-4664-b9b0-0b602ba5a451",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dad43c0e-4f60-4620-a4e9-9652b1701eab",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "1ee4c5dd-54a3-4d46-b36b-d1ae8b686b64",
        "cursor": {
          "ref": "af8098ef-e921-4dfd-b4de-2ff4d061377f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ca3a9663-107e-4f1c-bf79-1bd534e365b4"
        },
        "item": {
          "id": "1ee4c5dd-54a3-4d46-b36b-d1ae8b686b64",
          "name": "did_json"
        },
        "response": {
          "id": "19b02e49-b70d-4291-bed8-10fcfa99940b",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232f8fa9-1993-4b04-9197-c966ee53bc39",
        "cursor": {
          "ref": "aeb24f88-0b79-4a64-a6a7-284a4335d518",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "423a6a40-592f-44a4-b1a8-27b5104a6c40"
        },
        "item": {
          "id": "232f8fa9-1993-4b04-9197-c966ee53bc39",
          "name": "did:invalid"
        },
        "response": {
          "id": "0cce5576-7223-4418-8d08-8e5809ced10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232f8fa9-1993-4b04-9197-c966ee53bc39",
        "cursor": {
          "ref": "aeb24f88-0b79-4a64-a6a7-284a4335d518",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "423a6a40-592f-44a4-b1a8-27b5104a6c40"
        },
        "item": {
          "id": "232f8fa9-1993-4b04-9197-c966ee53bc39",
          "name": "did:invalid"
        },
        "response": {
          "id": "0cce5576-7223-4418-8d08-8e5809ced10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bc36c7-0996-4111-b21d-a6b962bc86e0",
        "cursor": {
          "ref": "e0f8a55c-3606-4862-b115-af4a3ba83008",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "640989d4-dcd7-4a64-868d-bd63df88efd3"
        },
        "item": {
          "id": "b9bc36c7-0996-4111-b21d-a6b962bc86e0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f5aef807-ed51-4382-95bd-a45d7b39ebbb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 129,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef8c42b-bf60-4a51-a042-d68b8033511a",
        "cursor": {
          "ref": "3663a03a-3254-46c1-a1a5-be4181e82b36",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9ca2949f-ba11-4703-b794-d7b971fde52d"
        },
        "item": {
          "id": "4ef8c42b-bf60-4a51-a042-d68b8033511a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "69b251f0-af47-46a4-a4e9-7018df690e2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f9b36a-29ff-45a9-b9b6-6cff4b58440f",
        "cursor": {
          "ref": "a9a2d0f0-96b6-4b1c-bb18-185cc660e13c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "38ca908d-8c87-42f5-824f-60ae37efb336"
        },
        "item": {
          "id": "c9f9b36a-29ff-45a9-b9b6-6cff4b58440f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6a734d8c-8eeb-442f-84b1-489a3612301c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb6e242-1d5e-4875-a500-fea45e9fef0a",
        "cursor": {
          "ref": "c65614e4-1ca6-4206-bc0b-c052c771b529",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e0b7a57a-9c03-4c1e-9bd5-41809cf1b77a"
        },
        "item": {
          "id": "2eb6e242-1d5e-4875-a500-fea45e9fef0a",
          "name": "identifiers"
        },
        "response": {
          "id": "36c0991d-8d82-4472-b2d0-a023f2e5e6ab",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6419bc-ce07-46ee-af88-d884dba333f2",
        "cursor": {
          "ref": "eece9c2d-a478-4670-8d2d-68a856fd1a50",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3d0be0ed-963c-4fb0-b1d7-84c819d8af75"
        },
        "item": {
          "id": "dc6419bc-ce07-46ee-af88-d884dba333f2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3b755f05-a6f4-485b-8bf7-f440e33ffd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c401e86-946d-4fa2-8f4f-e74a3fb47cb3",
        "cursor": {
          "ref": "36f774a2-745a-47c9-af7e-d2ba9722a32a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ffc5e026-b969-4585-a0b9-4a97cfa5bf93"
        },
        "item": {
          "id": "5c401e86-946d-4fa2-8f4f-e74a3fb47cb3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7b4e4f50-67e9-4b78-a4e5-049a93219464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3a1715-cd7e-4799-bb67-4cbd7101f888",
        "cursor": {
          "ref": "21149e71-d2c8-4382-acb2-94c97b961661",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "70704934-393b-477b-a9ed-9c37c2412dd7"
        },
        "item": {
          "id": "cc3a1715-cd7e-4799-bb67-4cbd7101f888",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e103309f-0bcd-41d0-927e-fc05603314ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361422f9-45eb-4582-b6cb-c362dbcd13a4",
        "cursor": {
          "ref": "6e4175fb-4cef-4d2f-879b-01a9c79e0f6b",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7b0d91ad-d2d9-4416-8aba-4315446d9838"
        },
        "item": {
          "id": "361422f9-45eb-4582-b6cb-c362dbcd13a4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e8fe5e0f-3f53-4905-9e08-2e868b1052e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bda848-8b93-4a3b-bb54-1a4be6be8fc5",
        "cursor": {
          "ref": "3aecc2ea-e615-4b56-bc66-6734c8c20464",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "42ba3193-ecca-4802-ab49-ea5620ffea76"
        },
        "item": {
          "id": "03bda848-8b93-4a3b-bb54-1a4be6be8fc5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bcbbd78c-26c2-42bd-b614-67e9fa576c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b642ac-3adb-4b0a-8588-062b2efb681f",
        "cursor": {
          "ref": "dbc71d01-610f-48cd-b605-090c5f059376",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7e134df2-2207-403a-8a9e-9b8b426454b2"
        },
        "item": {
          "id": "67b642ac-3adb-4b0a-8588-062b2efb681f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1caaf5e0-951d-4038-b094-9df4b341387a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663742c2-c64f-4033-bcc9-390866eeb527",
        "cursor": {
          "ref": "282ed46e-8a44-4239-817d-689bbabf4659",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4677e30a-512f-4a40-bc54-153c2e9b0e0b"
        },
        "item": {
          "id": "663742c2-c64f-4033-bcc9-390866eeb527",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "83d6fa28-9d8c-479d-8697-4fbbbe8b72c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b116c7a8-7438-41f0-9676-96c15b65e218",
        "cursor": {
          "ref": "d36e8945-997c-4450-bc77-4807bc5949ed",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d74b13b5-2d8d-4876-9319-7880b16ee559"
        },
        "item": {
          "id": "b116c7a8-7438-41f0-9676-96c15b65e218",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "03bcce2e-3dde-4da5-b2ce-20dff7275c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759474d7-8e2b-44ec-b34e-e56572853027",
        "cursor": {
          "ref": "e1b19616-06e3-45b4-a52b-c807312d1049",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "35ec3811-32af-49f9-82fc-5db9a511f341"
        },
        "item": {
          "id": "759474d7-8e2b-44ec-b34e-e56572853027",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8abef955-5b3d-4d12-94c3-a4177579123b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79375fc6-6c7f-4295-88ab-7924ee263fb3",
        "cursor": {
          "ref": "543c503e-4412-432e-acf6-afd0a3bf85a9",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1a466e2d-bbc8-4875-9f82-b2d3fde4df95"
        },
        "item": {
          "id": "79375fc6-6c7f-4295-88ab-7924ee263fb3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6c1798fe-f55a-4d51-9efa-dfe68d61dcd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8a47ae-7140-4655-9bd9-35260a2e609e",
        "cursor": {
          "ref": "f077d362-c0cb-49b8-89bc-9718f9577c33",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1c9f58b7-7c69-4d95-804a-70153779d23f"
        },
        "item": {
          "id": "bb8a47ae-7140-4655-9bd9-35260a2e609e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "590acaba-f1a6-4a59-92f1-478fe0cfb1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de06b7ec-b2db-4694-8ca8-c815660996f5",
        "cursor": {
          "ref": "add549a1-7eca-41be-86ec-6e54ddfc4406",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4d2435dc-4e3d-478b-979a-98305d91178c"
        },
        "item": {
          "id": "de06b7ec-b2db-4694-8ca8-c815660996f5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5842437d-c503-4308-9060-e6aa3fd75e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20135b73-677a-4be1-abb8-cac8907c15d2",
        "cursor": {
          "ref": "0a4c02f2-386a-4e52-8350-21aab5f6e5ce",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ccedad03-b9c5-443d-b4d3-bb6794a13012"
        },
        "item": {
          "id": "20135b73-677a-4be1-abb8-cac8907c15d2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3c7b564c-a472-461d-bd53-2ec93ff6849b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ff3de7-898d-4beb-9d60-7f72285ec9f2",
        "cursor": {
          "ref": "676d93e9-3c0f-4e51-a27e-1090ef25afd1",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3db43c90-3b42-4e66-aa38-0d95887f7f3b"
        },
        "item": {
          "id": "b1ff3de7-898d-4beb-9d60-7f72285ec9f2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a9c49233-274d-41ec-a379-255d464f6abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ab6a06-1328-44df-b674-15f892ed32eb",
        "cursor": {
          "ref": "64751970-48f0-42f1-aae2-81e10fcb036a",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bc23d835-99f0-4667-8cf9-8e1c0ba4dca0"
        },
        "item": {
          "id": "89ab6a06-1328-44df-b674-15f892ed32eb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6a029778-729a-4bd0-a6da-01bf3cad477e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c954c74d-269a-44e5-9916-c7b8e41b9065",
        "cursor": {
          "ref": "5c58e602-972e-4a71-b985-fa29d1162677",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d11b026c-f455-404d-8c31-a807776aae6c"
        },
        "item": {
          "id": "c954c74d-269a-44e5-9916-c7b8e41b9065",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "56d0af7c-19c6-4661-9ea8-2dbc0170e87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4a6518-7b1b-4f19-84d3-bc2d10adb562",
        "cursor": {
          "ref": "1e1226ed-6177-4bab-b95e-13c012242b5f",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0b835fbb-7d72-43c5-adae-1d9b250ba0e3"
        },
        "item": {
          "id": "8b4a6518-7b1b-4f19-84d3-bc2d10adb562",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a9a7b911-acd0-4ca4-bf7b-c4b355e29181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9c7776-2947-4c82-9db6-1fd7d70e3081",
        "cursor": {
          "ref": "6df6331d-0415-4ea1-aead-bd34f59cdde7",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "30d7ac91-690d-40b1-8015-527d726a19ec"
        },
        "item": {
          "id": "bc9c7776-2947-4c82-9db6-1fd7d70e3081",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6a2199c8-ff52-465d-a600-c397a5b620a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37169ef-c6d4-4e68-af9d-ca957ebf0c15",
        "cursor": {
          "ref": "b6a6777d-7259-45ce-9337-b6039cf6fed9",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6bfdfe68-9416-4a19-8fc8-0d2e26a9e486"
        },
        "item": {
          "id": "a37169ef-c6d4-4e68-af9d-ca957ebf0c15",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a899f4f4-c672-49f8-b672-c7e97fd0068b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4ffb79-b21e-417a-b454-93a0fc4a3e4e",
        "cursor": {
          "ref": "42d5aa82-ccc4-4dc4-a912-6c871a3dcbe9",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "409fe046-5838-4fcd-a1d5-e78d19992368"
        },
        "item": {
          "id": "9b4ffb79-b21e-417a-b454-93a0fc4a3e4e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2f0ea53f-1268-47e3-9d3e-a1340164cf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78937c8f-32c3-4720-b4c5-9db80ca417f6",
        "cursor": {
          "ref": "70e85855-0375-4de4-be11-cc5e3cf40730",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "08d51fc5-8499-4290-8316-1fc76733b742"
        },
        "item": {
          "id": "78937c8f-32c3-4720-b4c5-9db80ca417f6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "42a0e854-0143-4ae8-a581-e18b1782454e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40931e0a-7d7b-400b-856b-9f7ae64889c4",
        "cursor": {
          "ref": "0da75b78-dc8c-4ef6-b590-9b9ad9cea6f1",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "beb64af8-96ac-4f00-85a1-0afbe0488823"
        },
        "item": {
          "id": "40931e0a-7d7b-400b-856b-9f7ae64889c4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9af27fd0-ab73-4c86-8bcb-b96e5984a5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d94d35-49b9-49db-8523-ef6ea5b49097",
        "cursor": {
          "ref": "eab138eb-d311-40d9-a0d8-323aca5a4cfc",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ed38937-2799-458f-b21e-cb50f5bcf200"
        },
        "item": {
          "id": "a1d94d35-49b9-49db-8523-ef6ea5b49097",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c7faca91-ec40-4b9c-af15-4b3369761b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42985f5-5e35-424c-9661-cbb7eec900c7",
        "cursor": {
          "ref": "0bddd8ff-9f73-438b-a1ac-3456c2cdc033",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4e6c1204-936f-431b-9b98-0d57a50e8c40"
        },
        "item": {
          "id": "a42985f5-5e35-424c-9661-cbb7eec900c7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bea771ce-0b6c-436c-9a11-dae052eda624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985c855a-5c52-43dd-bc33-a32356231f3a",
        "cursor": {
          "ref": "6c012552-6b73-4048-9b66-5c153e31e72f",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ff2721c5-a927-4411-b08d-b92212eb01ba"
        },
        "item": {
          "id": "985c855a-5c52-43dd-bc33-a32356231f3a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6e229d72-132b-4a05-b744-5a4672a305f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5a51cc-f649-4bf8-9099-3d47eb07d63d",
        "cursor": {
          "ref": "97d76e50-08aa-4902-bd87-5bf507dd06b0",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "734bfb37-12ea-45c9-a3c1-98b224ea8ae1"
        },
        "item": {
          "id": "6e5a51cc-f649-4bf8-9099-3d47eb07d63d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fffad474-c93f-471a-a94f-bfa5f658a562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82557c8-22ed-4911-9463-802cce31b2a4",
        "cursor": {
          "ref": "8523712b-e77d-4764-a3f7-1f8458e28bea",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e18a10a8-0ec6-4b98-a68a-9eb6fcdc11ad"
        },
        "item": {
          "id": "d82557c8-22ed-4911-9463-802cce31b2a4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a25128aa-c58c-4d71-9c90-37fc2522e14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf0306a-bfea-4fa9-901e-77a51865487e",
        "cursor": {
          "ref": "84071473-1e49-4625-92bd-e1b81beaf7ff",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f1e6f203-8823-4958-819b-097bbe82ecb3"
        },
        "item": {
          "id": "dbf0306a-bfea-4fa9-901e-77a51865487e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ae56278a-a37c-4bcb-827b-c0ed89be2e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271ad184-0a1c-4150-a8bc-c90dfb2b1519",
        "cursor": {
          "ref": "713f904e-798d-4164-ba37-498064436f46",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "18fec224-aad3-4470-9238-a5ae730f5272"
        },
        "item": {
          "id": "271ad184-0a1c-4150-a8bc-c90dfb2b1519",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "91d14643-a381-4137-93da-50ca91f5b8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d145ef-afe3-489b-b829-5478c41e295f",
        "cursor": {
          "ref": "5724b6fb-4eca-4767-9f12-3e9f57a1b4d9",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3ba1aa80-e0f9-4adf-8b17-52c3ac31de62"
        },
        "item": {
          "id": "45d145ef-afe3-489b-b829-5478c41e295f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "481a1408-7f8a-4b5a-9b89-61f9e67661a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c07254-5de9-42aa-afe7-feb9ea59b3db",
        "cursor": {
          "ref": "8d7695da-a28c-4675-b12b-43b72a85ee0a",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1a7ffa0b-94ff-4822-94d0-34429e72441b"
        },
        "item": {
          "id": "b9c07254-5de9-42aa-afe7-feb9ea59b3db",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "023048a1-d7d2-447c-a8ee-19aad99eec4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "084d6c08-d8cb-4679-a2ef-2bbad11bb445",
        "cursor": {
          "ref": "336f21fc-2478-45d5-9623-80da7d09b468",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "535eadfc-5dad-4fc2-ae83-21048332853f"
        },
        "item": {
          "id": "084d6c08-d8cb-4679-a2ef-2bbad11bb445",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "52018f43-2772-4ea3-9802-770d506b5ce9",
          "status": "Created",
          "code": 201,
          "responseTime": 2143,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "257fc1fb-0401-4cdb-9a14-c86f31339f96",
        "cursor": {
          "ref": "fd19cf49-7f10-4b5a-ab57-54ee10a0acbb",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "108a9cbf-f51c-425c-b1d0-0d5f38d01826"
        },
        "item": {
          "id": "257fc1fb-0401-4cdb-9a14-c86f31339f96",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "741f07e1-88ad-4104-b398-bfceb0a1ec40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ce9fbcae-e930-4bc5-8f30-f02fdfdb6983",
        "cursor": {
          "ref": "92795d6e-7d52-4196-a6c9-b6c5cd79d00d",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f8f7ec19-4da9-4568-b3fe-6fcbabb16420"
        },
        "item": {
          "id": "ce9fbcae-e930-4bc5-8f30-f02fdfdb6983",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "30afc103-2be2-4ac1-a641-09fc980af708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5905401a-9f37-4059-a6d8-fab7ccf9a746",
        "cursor": {
          "ref": "fe6f979a-b226-47ba-b4de-ea76d9b45fd4",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "00b0cdd5-7aa6-4db1-971d-d4e2d33f74d8"
        },
        "item": {
          "id": "5905401a-9f37-4059-a6d8-fab7ccf9a746",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ba4a9ac0-82f9-4081-9ad9-be0b2b52a33c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d9f58f9e-96b3-4f2f-8d33-cb16a6e4c0ec",
        "cursor": {
          "ref": "d78d13af-62da-46bc-b320-007fe6c2b82e",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d5c9a1b8-36ac-4909-9c8e-0bbed7379a10"
        },
        "item": {
          "id": "d9f58f9e-96b3-4f2f-8d33-cb16a6e4c0ec",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6c069338-0feb-40f2-b0e0-461bac485d35",
          "status": "Created",
          "code": 201,
          "responseTime": 1519,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "52dbd2ff-c234-45ef-b91b-3165610e306d",
        "cursor": {
          "ref": "ff5e6787-cf41-4b62-a2fd-21e8e4fb096a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eb547871-0ead-476a-b100-0dffe113a525"
        },
        "item": {
          "id": "52dbd2ff-c234-45ef-b91b-3165610e306d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f300eef8-db6d-4b94-8ff3-7ffda151b89a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3a5abd69-9797-4a79-bcdb-45c09140c222",
        "cursor": {
          "ref": "c9ff1453-bec0-4805-b97a-60a4a7c30006",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "88f2a241-862d-4db2-816c-3ecb89a3eaad"
        },
        "item": {
          "id": "3a5abd69-9797-4a79-bcdb-45c09140c222",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "262ab67a-b37b-4397-8bca-99857dba9938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 753,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0ecefea1-3fa2-463c-9e1c-d8a2fccc69ab",
        "cursor": {
          "ref": "04eacbc8-43c4-4bc7-9e10-c30ee693ff59",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ef2764b3-b990-4c46-b111-d565ea2ac43a"
        },
        "item": {
          "id": "0ecefea1-3fa2-463c-9e1c-d8a2fccc69ab",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "02ad5b88-9dbd-4137-b456-7e1c4eb69862",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3a7039e0-0205-4b80-a9c2-100993618fb9",
        "cursor": {
          "ref": "6e51f3d3-a2db-4e87-8a1a-359e67d44aae",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dac5029d-e101-43a1-95ee-e71bfd317760"
        },
        "item": {
          "id": "3a7039e0-0205-4b80-a9c2-100993618fb9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "abd871ad-aba2-4278-b311-f35a2392a748",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 328,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5e6017fd-9250-4493-9047-c1c3e83970e8",
        "cursor": {
          "ref": "26425f94-d7a9-40cd-9052-e7e74503c7b7",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ac95b09c-90ae-4b26-a530-dfca6d9baee2"
        },
        "item": {
          "id": "5e6017fd-9250-4493-9047-c1c3e83970e8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6c1a0a3b-1411-4195-8016-738c0663be55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4d0b01a0-0083-4416-aed9-9edeb1ac3649",
        "cursor": {
          "ref": "0d875496-43cb-4425-9eaa-d3d97a99883f",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "33d60755-7a57-4886-a7e9-8f696f52bc85"
        },
        "item": {
          "id": "4d0b01a0-0083-4416-aed9-9edeb1ac3649",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9779a152-3bd0-4df0-b90b-9e09341f127f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "74621813-50dc-4f1c-b515-839597d8ac1d",
        "cursor": {
          "ref": "2c3e41b0-2467-4ccf-b72d-bc4c11dfda88",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0b1caf29-584f-43f1-bd02-1225fe53facd"
        },
        "item": {
          "id": "74621813-50dc-4f1c-b515-839597d8ac1d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4d363a6d-5e0d-476f-a92d-c7f923f5b58c",
          "status": "Created",
          "code": 201,
          "responseTime": 1005,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fa16f856-37d7-4759-b07e-7ec1e05f12f9",
        "cursor": {
          "ref": "9767061a-5283-40f6-878c-02b8d39f3905",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3fd81b9e-b5e8-45af-8d54-d72958f997aa"
        },
        "item": {
          "id": "fa16f856-37d7-4759-b07e-7ec1e05f12f9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "dab1313c-0a80-4131-88ad-003d9bc7d0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfdb42c-b714-4333-8e3a-782001b1aeb9",
        "cursor": {
          "ref": "a62e447d-fd23-49d9-8c8c-6c4f3c7b7e17",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d2db70fc-5b59-4033-b1be-7f5b7ffe1ac1"
        },
        "item": {
          "id": "9cfdb42c-b714-4333-8e3a-782001b1aeb9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6d304ea5-628d-4204-a7bd-e01e6a0c4886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e9c8fd-5a6d-4929-ac95-9d8dee2f97b6",
        "cursor": {
          "ref": "64b61de1-d531-4757-8dfd-510a488a59ff",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "939742f4-67ca-4903-9ae4-f370536bdf50"
        },
        "item": {
          "id": "34e9c8fd-5a6d-4929-ac95-9d8dee2f97b6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "703b47c3-59f4-4bc9-9426-7e2fb91a59d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd0b86a-645e-41be-89d4-b430969962fd",
        "cursor": {
          "ref": "f97b9df4-0775-43da-9b0a-9669eca7d0b9",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "04da2033-e73e-49af-83d7-f585a4ad11f2"
        },
        "item": {
          "id": "2cd0b86a-645e-41be-89d4-b430969962fd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f764210a-1c90-49c8-909d-6c8e0414badd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da51e4f-8959-4a2c-9e99-2ade848bc64a",
        "cursor": {
          "ref": "3ea815d8-0651-4194-b822-fd0009bc9fcb",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "442b3150-bcc9-4b35-bbc3-a0c5638787af"
        },
        "item": {
          "id": "4da51e4f-8959-4a2c-9e99-2ade848bc64a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9bebfea1-c638-4493-b2bd-9359c36d763c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be61d5ec-dce1-49ad-ae73-ddef20dc671a",
        "cursor": {
          "ref": "3051bef0-a8f2-418c-82f6-ea65f4877d76",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2d602cde-2dc1-411c-8408-770b2ef54d2b"
        },
        "item": {
          "id": "be61d5ec-dce1-49ad-ae73-ddef20dc671a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7ac15635-e771-469b-9d97-833f4ca070d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3b07f2-13d8-4e9c-8b0d-b7ed735115b0",
        "cursor": {
          "ref": "1f90cca3-cc45-4f3b-bc97-b207a8568e41",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "af16c396-e864-41ea-8808-398c1e1e7e0f"
        },
        "item": {
          "id": "cd3b07f2-13d8-4e9c-8b0d-b7ed735115b0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c00ee29d-f059-4f2d-bbf3-43f521ba4911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0907ed84-ff9b-448c-95cc-50e122029023",
        "cursor": {
          "ref": "5ebb457f-b018-4ba1-b24b-f20b09d48b19",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4c3cf6f6-b312-4646-8e6b-b2a9324691e4"
        },
        "item": {
          "id": "0907ed84-ff9b-448c-95cc-50e122029023",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c1ba74ee-768c-46e4-bff9-820108f9f077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b10898-8a66-462d-922c-e66651308f31",
        "cursor": {
          "ref": "2739c2c9-4822-40be-8b61-afc9f0c54f4c",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "55626189-4afe-4550-aadb-c2b92262a51d"
        },
        "item": {
          "id": "e2b10898-8a66-462d-922c-e66651308f31",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e8c3d217-063c-4c20-b6c4-bd3bbb25ded5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126786d9-be03-4978-b22a-845f224e79b9",
        "cursor": {
          "ref": "1499691b-3353-4581-a1bd-189d25c57806",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e91e0e4c-45f4-4a5d-8df2-e50f27fb7390"
        },
        "item": {
          "id": "126786d9-be03-4978-b22a-845f224e79b9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "18293257-3bec-441b-9e68-8cab9d81b27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b91909-8ffb-4409-8c08-29badc90965f",
        "cursor": {
          "ref": "2cd249b4-581a-4080-afd8-a9b037d472f4",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8f413f0f-da6f-4413-a8ef-abde08933528"
        },
        "item": {
          "id": "17b91909-8ffb-4409-8c08-29badc90965f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1e8f656e-5cc4-4afb-a1f7-09ac4509226c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90f34ec-99e5-4ac2-96ce-cf20a5e7c5b6",
        "cursor": {
          "ref": "3e147f53-bf3f-49eb-bae1-2223a1e0cf45",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9bab32c0-c0a9-48c1-9bfa-de6ad416f32c"
        },
        "item": {
          "id": "c90f34ec-99e5-4ac2-96ce-cf20a5e7c5b6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5ce13a1a-0df3-4168-953f-cbf4b21322cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66138021-e723-4a89-bb3f-f0ef8f9cccab",
        "cursor": {
          "ref": "dbf41ec3-a46c-4f83-bda8-a956973b6214",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6af0bbae-33c0-4854-8908-320d6a3f3191"
        },
        "item": {
          "id": "66138021-e723-4a89-bb3f-f0ef8f9cccab",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3b5f25e2-0cdd-4de9-9633-727c7c1a3481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f8b191-63e4-454b-860a-53a7c5cc9b7f",
        "cursor": {
          "ref": "bd27ba1a-d056-4d1f-aa3d-93090695fab6",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "48c7a9b3-886d-48ae-9f19-1af97cc49761"
        },
        "item": {
          "id": "b1f8b191-63e4-454b-860a-53a7c5cc9b7f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "277cf2b3-d090-486f-80d9-bcc6dcc97b9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 722,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "722772d0-6c16-4a7d-92ca-46eb378f995e",
        "cursor": {
          "ref": "40c01c47-54d1-47c7-aac5-502334895203",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0bd62ea6-97d9-4dd6-a317-6ae24a5ff97d"
        },
        "item": {
          "id": "722772d0-6c16-4a7d-92ca-46eb378f995e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9bf37117-fe93-48dc-bb09-e4ea9f162366",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 720,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d0802dc5-be03-4143-b7f1-516973cb5399",
        "cursor": {
          "ref": "720ae6fb-4d75-4271-b6e0-91cf99b0bb98",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9d34f3fd-85e5-4603-93de-19fb167299f6"
        },
        "item": {
          "id": "d0802dc5-be03-4143-b7f1-516973cb5399",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dce484ca-e492-48ec-9c7e-4a52aeeb7035",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8cbf8cce-2811-452e-acbc-26d90e8bf3ed",
        "cursor": {
          "ref": "40d1fdd7-e46f-4460-8a8f-8065202ba849",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "29fb94ac-f43a-4dfc-92a4-fc3d54be0416"
        },
        "item": {
          "id": "8cbf8cce-2811-452e-acbc-26d90e8bf3ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "793db2dd-0462-4eee-a99a-ca283e98ce05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 743,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2baefa4a-bfb5-4735-a66d-4e1a4785edd9",
        "cursor": {
          "ref": "60c17490-5e15-4d59-a384-5182cbed4a39",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3469bcde-9b63-4115-b9a4-ac9c9adc40f8"
        },
        "item": {
          "id": "2baefa4a-bfb5-4735-a66d-4e1a4785edd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bfb39e5f-84f7-4072-b4e3-7883c3171fd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cfa01135-7720-41f7-b267-47432fce703f",
        "cursor": {
          "ref": "2f87d25a-6d01-478e-a17a-eb7a81f929e0",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "37e7f30d-8de2-4274-90ee-0dca437bc2a4"
        },
        "item": {
          "id": "cfa01135-7720-41f7-b267-47432fce703f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "04a695bf-d0d4-40f3-ae90-5ab17fc1fb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52a41c8-fbd3-4a0e-9ddd-46cc424c8796",
        "cursor": {
          "ref": "92776798-524b-40e1-a6ad-e57f00911d87",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "aa2f60c1-949e-4c36-9a3f-c032b7b63199"
        },
        "item": {
          "id": "f52a41c8-fbd3-4a0e-9ddd-46cc424c8796",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e9641842-0611-47e1-9a2e-f69081b04767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b2eab8-9826-4577-94ad-dba425f3e46d",
        "cursor": {
          "ref": "fc010b2b-f6ec-4be5-86ff-73f9e4d4ce84",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f6be320e-5d90-4337-9403-8efa9911e3ff"
        },
        "item": {
          "id": "49b2eab8-9826-4577-94ad-dba425f3e46d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2a8a631e-2d49-44ea-94b5-e0c4f5dc2417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c946a2-3792-4bff-bfb7-a1a79a17917d",
        "cursor": {
          "ref": "cb499bb7-8142-4fe3-926c-c869c77f1ec6",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ab85db99-93f1-4815-8f26-dd7bc8255629"
        },
        "item": {
          "id": "d3c946a2-3792-4bff-bfb7-a1a79a17917d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cfc37877-c88d-4c1e-aba4-1d3b6d310192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce71d16-6e6d-4f75-beb4-545552547841",
        "cursor": {
          "ref": "00d73829-ec09-46dd-81d5-3dba36d776d0",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "226a9029-b3cf-4a62-9048-a13cfd986626"
        },
        "item": {
          "id": "cce71d16-6e6d-4f75-beb4-545552547841",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ed96ca1e-71f2-4fb5-8234-74e60b4e88fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2f6367-62ba-4447-8d95-bfcad921de34",
        "cursor": {
          "ref": "9fd15330-a0eb-420c-ac8a-0d9008b664c3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6dc09921-68c3-41ad-8dfd-a59c8b15852a"
        },
        "item": {
          "id": "7f2f6367-62ba-4447-8d95-bfcad921de34",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fae9f06a-5e60-43a9-8d8c-ed2d23b5f212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f0cda2-040c-424f-94f5-b066fc55e855",
        "cursor": {
          "ref": "00a15290-25de-41a0-aad8-243e051803b3",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9f7ac9f8-08ce-4a6b-8dd3-ac8c7677fcfd"
        },
        "item": {
          "id": "40f0cda2-040c-424f-94f5-b066fc55e855",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0aa54f14-adb6-4348-b57c-ff2881e09a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61912ac-1ec5-4ed2-b1c1-632858da4560",
        "cursor": {
          "ref": "bd622481-6d37-4f88-976e-e1e6504c83c1",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4a4aa36e-5068-48e5-b1e2-6212e2a97044"
        },
        "item": {
          "id": "b61912ac-1ec5-4ed2-b1c1-632858da4560",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ad970a7b-bff1-4d6f-a725-fd856f317a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718f86da-b14c-4ba3-893a-bb3c66cfeddb",
        "cursor": {
          "ref": "25de4e6d-b6cf-430d-b40d-6920d14dcff1",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a7df8a07-56b5-4e4f-aec7-59d362a081e8"
        },
        "item": {
          "id": "718f86da-b14c-4ba3-893a-bb3c66cfeddb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c17216d8-8a65-458d-9485-12798e4fabc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9654453-4920-48a8-854d-30296d86de7a",
        "cursor": {
          "ref": "0c24737f-d91c-4dfd-8ad4-d52bc9251a0c",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "75b4751a-ef83-4dd3-ac2d-9b583ca07ef3"
        },
        "item": {
          "id": "c9654453-4920-48a8-854d-30296d86de7a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1858c390-d9d1-4f7a-8768-5a4e4a362836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a854029e-f162-47b1-9146-4dce44f83b6f",
        "cursor": {
          "ref": "93d8a4d6-9033-486e-8b35-2ddd5904eb57",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dd10ec79-4f20-4b26-a258-32af54e8796a"
        },
        "item": {
          "id": "a854029e-f162-47b1-9146-4dce44f83b6f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1595c978-3608-4cc2-b602-e843e895faf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f01d5e3-1897-4181-9ddc-a801328f623c",
        "cursor": {
          "ref": "f8b10d22-2c92-4a21-842a-9e3ef8bb949d",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "20290023-5896-49a2-b438-6d863aca7955"
        },
        "item": {
          "id": "3f01d5e3-1897-4181-9ddc-a801328f623c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "be1b0ffd-b13d-432b-acc2-aa568e1f8b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281f3c86-9816-48c9-bceb-c95babecf400",
        "cursor": {
          "ref": "ee838c4f-e2d7-4b0c-8732-c881c8c0b1a0",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1061f62f-09bb-4ea6-9940-d28919f6d1bc"
        },
        "item": {
          "id": "281f3c86-9816-48c9-bceb-c95babecf400",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "18030ea8-b5d5-4615-a0a8-d0428af211d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f93b84-f254-4207-92de-faea36ef3095",
        "cursor": {
          "ref": "f1d75e8b-1fd8-4c88-9be5-7330406882eb",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "93b42b28-8a0e-4d4f-856f-a309accf637b"
        },
        "item": {
          "id": "d6f93b84-f254-4207-92de-faea36ef3095",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "db5d8cc5-f70d-4182-a458-79c4e8189350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630e9248-6401-428c-967d-909f456e3f46",
        "cursor": {
          "ref": "810e7454-414b-4194-83ac-27a996f916ca",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "405faa90-0a5e-4396-9bbb-80b674e2adfa"
        },
        "item": {
          "id": "630e9248-6401-428c-967d-909f456e3f46",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7eb1b0b3-e55d-4ceb-8d07-93c9c4c983f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5199f8dd-aa7f-40ff-b04e-3f417f313713",
        "cursor": {
          "ref": "1f6a988a-1c46-492b-961f-01e8610da38d",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59beb7a1-03b1-49c8-b953-640ce9e73791"
        },
        "item": {
          "id": "5199f8dd-aa7f-40ff-b04e-3f417f313713",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "469ea628-ac2e-4a85-a025-42618ec7d22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8619c26-5962-4267-be1b-cf4089304dc5",
        "cursor": {
          "ref": "cf9de284-bde7-4768-b30b-bbe43ba8d028",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3ea68269-a8e3-4ec6-825e-7f1f152fb429"
        },
        "item": {
          "id": "e8619c26-5962-4267-be1b-cf4089304dc5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "64bf3605-509c-4ac1-aac6-6b4fe99d4b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7af6f40-50c6-47ab-bc4b-8b411ddd5370",
        "cursor": {
          "ref": "d614eca6-1019-46f1-8a91-4ab56490f215",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f3b23649-b6a5-43dc-a362-ec7110a7e33c"
        },
        "item": {
          "id": "e7af6f40-50c6-47ab-bc4b-8b411ddd5370",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "88999215-5f2e-4d3c-870c-e15cc90d43b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ab59b7-9a11-4aad-b9e7-bcd9563af8d6",
        "cursor": {
          "ref": "5cdbf7f9-4e48-4d4d-ae3d-d9a263052381",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6435523a-876a-48ca-accd-26897d6695e1"
        },
        "item": {
          "id": "03ab59b7-9a11-4aad-b9e7-bcd9563af8d6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f045aecf-c368-4bc9-bc3f-77e265b7d2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af56c57f-8118-4494-af17-cde5afe2e169",
        "cursor": {
          "ref": "13c479e9-bd4e-47cd-aed9-d15f1b35e200",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5712f937-a47a-4a33-b6b4-4b4d473a46e2"
        },
        "item": {
          "id": "af56c57f-8118-4494-af17-cde5afe2e169",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dc76c602-7df6-4179-82b8-afb3c6fbb49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6689b15-30d4-4677-8186-7c8b7b03f7df",
        "cursor": {
          "ref": "5e6299dd-8327-466a-8f51-2ae181ff92ec",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "45cbc7ab-fad6-45dd-b7d0-57a6ac7e0321"
        },
        "item": {
          "id": "d6689b15-30d4-4677-8186-7c8b7b03f7df",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7a0c92f2-5d3b-4fed-996d-7afb119169e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc514a4d-9220-4a68-a2bc-a715f4af61ad",
        "cursor": {
          "ref": "df0df56c-0dea-4db2-bb4a-bfcd8642dc23",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b1eebf37-81a2-4620-b4ac-3ba97eef99e5"
        },
        "item": {
          "id": "dc514a4d-9220-4a68-a2bc-a715f4af61ad",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8156bae7-f2a8-4a43-b108-7b246789e55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9911625f-3eec-4b53-bdbf-fb4485bacbfd",
        "cursor": {
          "ref": "538f674d-0b20-44e9-a90d-1a6b5ecbf62e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7d18358d-988a-482f-88ce-33074b64b675"
        },
        "item": {
          "id": "9911625f-3eec-4b53-bdbf-fb4485bacbfd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "67e1485f-dd27-4f5d-ad58-865e24ac1a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cbd994-3f0d-4157-b8b5-710bd4e711da",
        "cursor": {
          "ref": "6a656e60-af55-4f2a-a20b-a69eee270a2d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8bcf7c0f-eca1-4a5a-9fb7-e016d4d3db49"
        },
        "item": {
          "id": "19cbd994-3f0d-4157-b8b5-710bd4e711da",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8784c9bf-35ee-4563-9acb-c9a360b2775a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2922bd53-351f-4de1-a245-1a7a05edcedf",
        "cursor": {
          "ref": "f1bbcca5-1ef1-4f09-b2c6-2cc3a0857b42",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "041f460a-dc69-4007-95e9-8dd77e24a412"
        },
        "item": {
          "id": "2922bd53-351f-4de1-a245-1a7a05edcedf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ca689723-30dd-439d-8712-a0c1defde0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0522dc-0de3-4edb-8896-ed12097400fa",
        "cursor": {
          "ref": "5b904acc-0c70-4e56-8154-0da284156ff4",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3868a5b0-e560-4e21-81e6-55bae478bfbe"
        },
        "item": {
          "id": "6c0522dc-0de3-4edb-8896-ed12097400fa",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2f981782-47fd-406a-ba9f-971be7ea91dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b82835a-83f0-4205-b11b-087b1b5c3c65",
        "cursor": {
          "ref": "1b6489bc-1974-4acb-9dec-11722c924e90",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fbf987d4-0624-4d8c-9160-4a09a18efd6b"
        },
        "item": {
          "id": "8b82835a-83f0-4205-b11b-087b1b5c3c65",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "89deb9cb-5daf-4b4e-b337-35285a00f613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc06850-1a99-4fc0-872a-909714258480",
        "cursor": {
          "ref": "f5ab26f2-dd2d-4df3-9a68-7c7847fba906",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a4956f4a-9e08-45bb-b9d1-730d86c10dcf"
        },
        "item": {
          "id": "edc06850-1a99-4fc0-872a-909714258480",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "883fc16b-35da-41bd-b862-caf166b584a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdc60bf-833f-4c13-a32a-e1023e716d25",
        "cursor": {
          "ref": "45ca9658-c0f1-4c28-8d25-48cb401d84ff",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "28837ac2-22d6-4864-9399-9f236a880d1d"
        },
        "item": {
          "id": "dcdc60bf-833f-4c13-a32a-e1023e716d25",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b09085c3-4076-48b6-a92c-0ef9d7f610a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94aff88b-6be8-4393-8221-b270d38fb748",
        "cursor": {
          "ref": "8034269c-d3df-41c4-821d-fbd2caf00114",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8ed3d6e5-b146-4dba-b301-7b0756313b91"
        },
        "item": {
          "id": "94aff88b-6be8-4393-8221-b270d38fb748",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "adfa3656-2c6d-4473-a86c-d7efc8c54919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17dbfd6-ffda-4c68-a7be-5ec9dd0972f7",
        "cursor": {
          "ref": "e2268ad6-ff85-4fe5-aa85-d5917d6bb4a7",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9b84a0d0-8f70-4343-a1a5-136853fab373"
        },
        "item": {
          "id": "d17dbfd6-ffda-4c68-a7be-5ec9dd0972f7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4af6f0c5-6ff1-41fb-af5c-887643734210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6935183e-494c-46d3-a3f7-0ea2354d5973",
        "cursor": {
          "ref": "0c3dc1ce-3b35-4907-9cc8-079e8634af68",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "876e0752-5c73-49de-80d9-0bfe1c9a63c7"
        },
        "item": {
          "id": "6935183e-494c-46d3-a3f7-0ea2354d5973",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ad3dbbb5-1bb7-435b-a1d8-66ed186bf18c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dba3aca-3dd7-4291-b288-c30ce5b588a6",
        "cursor": {
          "ref": "50ef3f2c-bdb4-4639-838f-6c623fb7524d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e42f40b8-29d7-402b-a43f-6d44d57cd173"
        },
        "item": {
          "id": "8dba3aca-3dd7-4291-b288-c30ce5b588a6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8cb83215-2109-43f5-b430-6a8e84301a99",
          "status": "Created",
          "code": 201,
          "responseTime": 1552,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8795b460-744d-4549-ae74-b19ab2330f50",
        "cursor": {
          "ref": "418c6ef1-5e66-4ead-b4df-66fcf9aeeef3",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "552d53f3-5529-43c8-aaef-f22826b8da3c"
        },
        "item": {
          "id": "8795b460-744d-4549-ae74-b19ab2330f50",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bf395270-f859-4699-875e-7614590849c9",
          "status": "Created",
          "code": 201,
          "responseTime": 1032,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee386a4-9d23-4fa1-b301-7727e8e279b0",
        "cursor": {
          "ref": "044b3501-ba7d-4cc9-a881-2026dae8d082",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d35d4b28-15d9-4df4-b9e0-e75b2f830dfe"
        },
        "item": {
          "id": "8ee386a4-9d23-4fa1-b301-7727e8e279b0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1325cad7-6bc3-4c60-b6dc-de8e5004b6e5",
          "status": "Created",
          "code": 201,
          "responseTime": 1069,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3f22b1-de17-44ee-ab43-45f4b8af9d81",
        "cursor": {
          "ref": "029f5ad5-7206-425f-bcaf-4075f5c9f773",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4bb7aeea-5f7b-4a71-a60e-f42dac6d67b4"
        },
        "item": {
          "id": "3a3f22b1-de17-44ee-ab43-45f4b8af9d81",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "df6a64f9-620d-44c2-81a3-9795ad190790",
          "status": "Created",
          "code": 201,
          "responseTime": 958,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43ddfff-c0ac-409a-bb51-cde4ffed7caf",
        "cursor": {
          "ref": "3e65866b-d6de-4349-9521-47a89dd93d30",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "075d308b-7f6e-4053-9d7d-85a353fd6722"
        },
        "item": {
          "id": "e43ddfff-c0ac-409a-bb51-cde4ffed7caf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1852ea92-2580-4d95-a6ae-4976ad8b1c85",
          "status": "Created",
          "code": 201,
          "responseTime": 998,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a4e1cb-c00b-43f9-ad9f-9b311504c9b7",
        "cursor": {
          "ref": "b9d83308-0a14-4650-9409-aecc23c92a15",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e04a0be9-5775-4869-b155-d50c766d04d2"
        },
        "item": {
          "id": "18a4e1cb-c00b-43f9-ad9f-9b311504c9b7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d9c4a565-2b59-410c-944d-6b965b61b6e8",
          "status": "Created",
          "code": 201,
          "responseTime": 1062,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2f473a-bda7-4889-a0df-8096303b4217",
        "cursor": {
          "ref": "c51e36a7-5ffa-4182-9565-aecf2ee11ace",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2185ee6b-00d7-4e1d-a850-b6946eb23fbc"
        },
        "item": {
          "id": "0a2f473a-bda7-4889-a0df-8096303b4217",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d548a2aa-e914-4396-8188-e0096ae93827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba0d019-be34-4393-a845-e3ddbb31a6c7",
        "cursor": {
          "ref": "d6c18994-c64e-46ce-91d7-4c00df82e544",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "20fea18e-669f-4150-844f-d3a4b54cbafa"
        },
        "item": {
          "id": "9ba0d019-be34-4393-a845-e3ddbb31a6c7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "75c90cf3-0c95-4c4b-908e-91eed5b393ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43a43c9-17c3-48ae-8583-7ef4b56b24df",
        "cursor": {
          "ref": "9fd4f503-51b4-4215-be79-dd7c59f5f006",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d1f56f67-44b1-4017-bd13-3231e1566975"
        },
        "item": {
          "id": "f43a43c9-17c3-48ae-8583-7ef4b56b24df",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2396c83d-f69a-4295-b57a-b8e884d4fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed04cfab-8fd1-4701-9b75-ce445064812f",
        "cursor": {
          "ref": "5972ef35-b566-445c-b8a7-ca38ea24c1f3",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "19cd8bd0-03bc-4596-80e1-f9d3363ae843"
        },
        "item": {
          "id": "ed04cfab-8fd1-4701-9b75-ce445064812f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9b3d7491-0bcf-4845-a70b-23f1dfaf1671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17061533-1aa6-4b35-9a9e-4ede906d3e6e",
        "cursor": {
          "ref": "33cd1b42-52a1-4609-bd3d-daf5e6fa1c48",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "712ee0d3-2292-487d-ba7c-526a4abb7de2"
        },
        "item": {
          "id": "17061533-1aa6-4b35-9a9e-4ede906d3e6e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6086722c-b3ad-4cb5-9189-31b628b89337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2744d787-888b-4ea3-8601-147d6babf0e5",
        "cursor": {
          "ref": "94732fa5-eb19-4d66-bb37-16cede14ed53",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d2370670-fa0f-450f-a659-4f6ce5fe77c8"
        },
        "item": {
          "id": "2744d787-888b-4ea3-8601-147d6babf0e5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9a0f5dd8-cb99-4ebd-a969-9454fc04941c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bff4ed5-3eb0-4a82-a12e-3ed5baf20401",
        "cursor": {
          "ref": "bf73fc09-e40d-442e-be8a-15ee6fd6c913",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "406e210e-a2a8-4259-a5cd-86134fe2c7bc"
        },
        "item": {
          "id": "0bff4ed5-3eb0-4a82-a12e-3ed5baf20401",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5926166f-076f-4c5e-bb63-5c3f26e80e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaa3d97-b3c5-4151-8ef3-9512646f5a81",
        "cursor": {
          "ref": "ede3551a-5473-4d77-8a7e-0cb3b014ae3d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b0f07c58-d3f6-47b3-9615-90db3a4f9cfc"
        },
        "item": {
          "id": "fdaa3d97-b3c5-4151-8ef3-9512646f5a81",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0fd6e1e0-868b-4f79-a69f-bae66b27c483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dcc0c6-e8ff-407c-bc4a-d54b13c63f36",
        "cursor": {
          "ref": "d73cb9a9-2e33-4483-af32-8ccbcb6c1a29",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7a6716bd-02fc-4742-a973-3174082c097b"
        },
        "item": {
          "id": "b8dcc0c6-e8ff-407c-bc4a-d54b13c63f36",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ae34f4a1-004f-49be-97ce-6db8aab4043e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96ddeeb-899c-416b-98bb-702bd11b8e8e",
        "cursor": {
          "ref": "7ae81f7a-b2ed-4c6c-8869-3f2eeef31afc",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a58a6131-a853-4207-8b5a-8ce338f2f46f"
        },
        "item": {
          "id": "a96ddeeb-899c-416b-98bb-702bd11b8e8e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e87a0456-99d3-4212-8cdb-1199738942ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4065e3b0-06b0-4db2-b0d2-a5a9f52d747a",
        "cursor": {
          "ref": "d02a5a8c-c9c9-4431-bcdc-0ebeffd5f5a8",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "47b6dea7-ceb1-4805-a9fa-a28740ae2c9f"
        },
        "item": {
          "id": "4065e3b0-06b0-4db2-b0d2-a5a9f52d747a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "52fe1967-aeb2-4b8e-95dc-646072c73b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1770b0d-7026-4e2e-be5b-a0a7c83b94dd",
        "cursor": {
          "ref": "c933c1f6-4280-4238-b31b-cfe02b90133b",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "14e7b523-5eb1-4434-86b6-ae2469360320"
        },
        "item": {
          "id": "b1770b0d-7026-4e2e-be5b-a0a7c83b94dd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "27c48cac-5898-4763-8b90-2dcbd949825b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ffc92d-df4b-4001-afca-36d2de8fa1f8",
        "cursor": {
          "ref": "ddd3074f-96a6-412e-9888-a92eb05f9449",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f368c20f-0f1a-43c7-aab1-700e3d6fb8ef"
        },
        "item": {
          "id": "c9ffc92d-df4b-4001-afca-36d2de8fa1f8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f79940ef-ee13-404e-aab8-452d3dab283d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74965158-f953-4a65-b618-5d6c43d0bd35",
        "cursor": {
          "ref": "5e8ff627-1594-4f9b-a1ec-c4cee8f1a9a9",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c027481c-3d2c-4b5a-866a-ff7cbf248edd"
        },
        "item": {
          "id": "74965158-f953-4a65-b618-5d6c43d0bd35",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3ad8ddbb-cd36-4e31-9ce3-8303e549bb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faac4667-fc62-4cb5-8049-9a137608d7f6",
        "cursor": {
          "ref": "238fc838-48f0-456b-a515-5aa21c1d354c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e5eeea3f-3b80-4e9f-8231-91465e6f58c9"
        },
        "item": {
          "id": "faac4667-fc62-4cb5-8049-9a137608d7f6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9377cd82-dd36-4538-ba2c-eca878769b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b20f73-b514-4540-861e-255eaf513274",
        "cursor": {
          "ref": "19dafa95-f209-48d4-a948-7363417227b0",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f12c5715-efeb-4cbd-a2ce-7aa8cc7c2d37"
        },
        "item": {
          "id": "89b20f73-b514-4540-861e-255eaf513274",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6b7fa84c-d265-4d1d-ada9-4523a277eefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e83547f-7de2-4449-9ace-46bd6bf48da1",
        "cursor": {
          "ref": "d0189a7a-4247-4f16-b328-7f611bd74653",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a11a0029-b58f-4930-b7c6-01fa25b0d95c"
        },
        "item": {
          "id": "8e83547f-7de2-4449-9ace-46bd6bf48da1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ef639cce-a2f3-44bc-bbcd-07083a5504ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72d4aaa-82b6-4532-a840-96008542c847",
        "cursor": {
          "ref": "33e215d3-7952-451b-881a-113772cbb9e0",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "319e65e9-229b-41c4-b16f-e84ecfcfd208"
        },
        "item": {
          "id": "c72d4aaa-82b6-4532-a840-96008542c847",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1ae8a9f2-4571-4907-9cdb-cba979fd3d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccb27f2-fcaa-4784-8b65-1025909eb944",
        "cursor": {
          "ref": "04382357-e9b9-4c16-8c3f-d433356cd27b",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ac34f949-74d6-4d80-953e-119096b69e1e"
        },
        "item": {
          "id": "6ccb27f2-fcaa-4784-8b65-1025909eb944",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "027868a0-83c1-40ea-98bb-2ac6086d7ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa381016-2278-49e9-a7bb-dae8f56d4459",
        "cursor": {
          "ref": "85593451-2c32-4957-8099-35e99fcd9c3c",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "18a28087-38c6-4266-a66f-ff1c866cd095"
        },
        "item": {
          "id": "aa381016-2278-49e9-a7bb-dae8f56d4459",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0f43eb96-38bb-41e4-ad35-ee44f3a21d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c570069b-dc14-4939-b81a-cf2c3382e26f",
        "cursor": {
          "ref": "fcbdf76c-c1bc-445f-ba7c-af20acb533b5",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "960a513b-00a3-4db0-a5b6-b8616774549c"
        },
        "item": {
          "id": "c570069b-dc14-4939-b81a-cf2c3382e26f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a0c4dfcd-cf82-499a-b697-516a61fead5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8a0286-3f91-49dc-9b9f-b1487e4e9e30",
        "cursor": {
          "ref": "165f85d7-ab06-43fa-afe2-de892d1d8f48",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "caabe931-4e97-4c85-8433-016da047a4de"
        },
        "item": {
          "id": "bd8a0286-3f91-49dc-9b9f-b1487e4e9e30",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b8e7486e-0e3f-44cb-ab07-abbd85dd7447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c904a306-d097-4351-a38e-ad35366a8612",
        "cursor": {
          "ref": "90c56895-3cba-4ae7-9f7a-8043969502de",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "747f9898-7cba-4c19-b9b3-c209dc306e78"
        },
        "item": {
          "id": "c904a306-d097-4351-a38e-ad35366a8612",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "575c1241-897a-4fd4-8f76-79109a0d119c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0402682-0beb-4b0e-acb5-3a5011268533",
        "cursor": {
          "ref": "cbe79e94-238d-4c8c-a7fa-946313ea2838",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e6e0f3be-2610-45a0-9cbd-d9f3f7abfd18"
        },
        "item": {
          "id": "e0402682-0beb-4b0e-acb5-3a5011268533",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5a5cce3a-f582-43fa-9898-375b0471be02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc802404-84af-4608-9a03-9955de8f6fa0",
        "cursor": {
          "ref": "c729d7b0-3433-4b7c-97d4-6bf82d4b8470",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "03b102df-745c-4bec-9b15-798c8fcdd64d"
        },
        "item": {
          "id": "bc802404-84af-4608-9a03-9955de8f6fa0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "60f76093-3922-47c4-9568-c067899fcf28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c96409c-a83e-4ab0-9505-33a520ba5c0d",
        "cursor": {
          "ref": "726699e8-a54e-4b89-a68a-0b7a272649c6",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "05c54067-2efd-4b99-bc0c-dce175682c57"
        },
        "item": {
          "id": "7c96409c-a83e-4ab0-9505-33a520ba5c0d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b5fdac71-608f-4f43-8fb0-023b191ba250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a8d00e-9f96-4c88-966d-f07ec8edde7c",
        "cursor": {
          "ref": "ba58109d-768a-4c69-a846-a5adb25a4550",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "658bc415-7fb3-4778-a978-bdb4c243d278"
        },
        "item": {
          "id": "e6a8d00e-9f96-4c88-966d-f07ec8edde7c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "894e8d08-9013-4d69-b9f2-2e48375bc640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce772368-11c2-496b-87b1-64363d102f07",
        "cursor": {
          "ref": "78eee54d-3a42-4d3c-b1de-9fdc57fa0c51",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f597e70c-51de-4b5e-9099-a2895102feb6"
        },
        "item": {
          "id": "ce772368-11c2-496b-87b1-64363d102f07",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "173dcabd-0401-42cd-a083-8f7036c06292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ccc908-719f-453d-970c-32c86966b279",
        "cursor": {
          "ref": "aeb128f2-fb93-4559-932f-f95ae082eea6",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "358e30be-2a7f-4498-bc99-e40e946a34eb"
        },
        "item": {
          "id": "e0ccc908-719f-453d-970c-32c86966b279",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cd128bd6-0176-447b-85a1-215fd5b497f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde4d72e-46b4-4e55-bfd9-70c8395c6ad6",
        "cursor": {
          "ref": "9fa62e66-d8b3-4d23-9ad5-0730210d5ed9",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6a47bce5-9c2f-4350-a832-5d75fc359a08"
        },
        "item": {
          "id": "bde4d72e-46b4-4e55-bfd9-70c8395c6ad6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c5411261-0793-4271-8a60-d64dd7c206c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cf9eea-0b06-4620-b1b2-4306b05b7823",
        "cursor": {
          "ref": "1f0dff96-e087-49c1-a423-1a2d272f65a3",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b677d0b0-6ffe-4d58-9036-ef02fffceb76"
        },
        "item": {
          "id": "44cf9eea-0b06-4620-b1b2-4306b05b7823",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c5107d14-ae96-4421-b0fb-8e4f3c103fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7383dc-ee5f-4f09-a218-9cf475d8857a",
        "cursor": {
          "ref": "37a35767-6fb5-4357-8a01-70b51fc3d31b",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f7c9ad9f-0187-4a2e-af56-7101909654d5"
        },
        "item": {
          "id": "2f7383dc-ee5f-4f09-a218-9cf475d8857a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "07b0d4e6-6be0-4da4-aea6-e7c0b5252ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38288f0-2732-4e79-8f24-a9b0cb062674",
        "cursor": {
          "ref": "7d510902-80bd-46c2-a03d-257a37faa179",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "72d45958-924b-4b7c-b501-aa7f2c8ae25c"
        },
        "item": {
          "id": "a38288f0-2732-4e79-8f24-a9b0cb062674",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ff70491f-2513-4096-93e3-f2bf10b4739f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d5346c-856c-4013-b151-aa53c72baf88",
        "cursor": {
          "ref": "3c648d1a-988c-490c-b978-fac3e6219cc5",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "60f0b271-9078-4857-8ffb-b520472f1810"
        },
        "item": {
          "id": "49d5346c-856c-4013-b151-aa53c72baf88",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eea269e5-a734-45e1-b268-8f59d319530d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd22894a-a6cf-46b5-a688-0559204e2876",
        "cursor": {
          "ref": "535b36c8-cf28-4303-80aa-1a92f7a8f663",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f362951a-51fd-4fee-99c4-7b107bbbc4b7"
        },
        "item": {
          "id": "bd22894a-a6cf-46b5-a688-0559204e2876",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d6ae85b8-99cd-4987-841a-2a230691e6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0614c427-ddab-4d5c-9452-eff5a73669c7",
        "cursor": {
          "ref": "53760dc0-63ae-4d7c-a449-19e732b63d17",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b2098436-2b34-4c22-a7da-543d3fbd5bed"
        },
        "item": {
          "id": "0614c427-ddab-4d5c-9452-eff5a73669c7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "14a04354-8ccb-475d-94e1-38467c068079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ca9938-e657-4196-8f40-96883dd52181",
        "cursor": {
          "ref": "0a63d63c-919e-4f70-8c7f-d31acedabf01",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8d0f5176-7477-4270-827b-67ede6a582a2"
        },
        "item": {
          "id": "06ca9938-e657-4196-8f40-96883dd52181",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a01f6323-8a33-4382-ad1d-cf9fcf8ade53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17e1c31-66d6-4317-9520-a1f2c248a466",
        "cursor": {
          "ref": "4f890f19-0992-4b5a-93a9-4e778f0bdf27",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8b536916-9beb-44e8-bbd5-84bce7c0f398"
        },
        "item": {
          "id": "b17e1c31-66d6-4317-9520-a1f2c248a466",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "18787bf9-3972-4ddd-b99e-6d5fb0631536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3630a143-3825-4195-9552-7defca468a5e",
        "cursor": {
          "ref": "6e304c32-d597-4644-9288-e1c3f6abdbfa",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "73dc078e-eeec-4f18-b9d9-7587ea8a68cf"
        },
        "item": {
          "id": "3630a143-3825-4195-9552-7defca468a5e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8e42b884-ed43-44f1-bd8d-335e9cdb3416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b242aa-d8cc-4937-9714-39be0d98c7aa",
        "cursor": {
          "ref": "7ce1222f-6780-4ca4-a1e1-d97c151293e3",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "022a81a1-79de-4632-a47f-40392d98d771"
        },
        "item": {
          "id": "44b242aa-d8cc-4937-9714-39be0d98c7aa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a44e0ab1-d53a-47cd-8817-b8938b459c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663f2458-bff4-44a4-998c-524db82f7f44",
        "cursor": {
          "ref": "d47f05de-d593-45c3-80c4-34bb6a6cf42a",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7d86aa24-5d5b-412d-9051-c4300d9393d7"
        },
        "item": {
          "id": "663f2458-bff4-44a4-998c-524db82f7f44",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fdf84bc2-17a4-4f50-b99d-a7feadbc5e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce9ef00-eaa9-4105-8c81-617669992883",
        "cursor": {
          "ref": "dca5bf47-5a43-4112-a0bc-863c41bcd8ee",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "266e5fb5-eac3-4967-a49b-891d5f83132a"
        },
        "item": {
          "id": "fce9ef00-eaa9-4105-8c81-617669992883",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bd3f5a63-5f2d-4b43-b4a2-032aa5d2e32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bc2afe-fc97-44e3-afae-62a41f40abda",
        "cursor": {
          "ref": "b21c7462-355b-42b9-ba49-0f4b29196717",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "543c13e0-f724-4697-b10e-57fb1081222c"
        },
        "item": {
          "id": "b3bc2afe-fc97-44e3-afae-62a41f40abda",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1de7ed6f-af5e-4cdd-921c-f026a4b59ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21f761c-d753-4f65-8390-0cefe2313367",
        "cursor": {
          "ref": "898ac7b1-21a6-4c5f-8ec2-0e406abc97a8",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cbfcb5ea-d9f5-483c-b64f-a0e980a5f6a0"
        },
        "item": {
          "id": "a21f761c-d753-4f65-8390-0cefe2313367",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "79a54008-9e7a-4801-ad66-930317309004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc2121b-e259-42a8-a6a4-ad9564920392",
        "cursor": {
          "ref": "0c17b480-b26d-4424-a533-3022232c0311",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "acd62f94-8145-412b-9b7a-1626a4235351"
        },
        "item": {
          "id": "dbc2121b-e259-42a8-a6a4-ad9564920392",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "83646cb2-30e6-47a5-af86-4271a991554a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b30a15a-f2d8-40d5-b06b-decf85889ffc",
        "cursor": {
          "ref": "c1efff24-441a-4ddb-9eeb-99a888e42fb3",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7f0fc336-d8e2-4469-8f0b-46ebd03ca362"
        },
        "item": {
          "id": "9b30a15a-f2d8-40d5-b06b-decf85889ffc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7126d685-2e6f-4b72-b7e6-809bfada966e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da74fe60-48b9-4061-9b41-70084f9b10ab",
        "cursor": {
          "ref": "c4517319-1071-41d1-9feb-0a2c718a1d23",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1e3e14e4-b832-4596-a3f7-4b60a41f823d"
        },
        "item": {
          "id": "da74fe60-48b9-4061-9b41-70084f9b10ab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "88c2a1c5-4786-4b46-bf30-bd4b9e2ee73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cc43b3-682a-4f68-9f3d-4c1c4c373d2a",
        "cursor": {
          "ref": "91ea20de-b6b8-4dab-9b16-43d20f454814",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "251b5e5a-4b8e-4388-919c-8798188e010d"
        },
        "item": {
          "id": "80cc43b3-682a-4f68-9f3d-4c1c4c373d2a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "49471657-ecb7-4079-bbdb-7ff46fe0f344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf8ad07-8c8a-46eb-aa20-3ecbacba7589",
        "cursor": {
          "ref": "87d5f744-a3a8-4a67-b0dd-a06e878db6d1",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "388d40de-1801-400a-93d3-609502a32ded"
        },
        "item": {
          "id": "baf8ad07-8c8a-46eb-aa20-3ecbacba7589",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "812be3c2-70b8-4854-b991-edb2a998bbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f99c890-ea7d-47bb-99b7-53475b67cead",
        "cursor": {
          "ref": "53fcb151-c8f9-4d0a-a270-49bed2e76260",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "14d8fbdd-a182-4459-ac52-e5fd1317f422"
        },
        "item": {
          "id": "4f99c890-ea7d-47bb-99b7-53475b67cead",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cdb0f877-f695-4009-8a21-ae3c1f9df271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeb6c70-c803-4e64-bd12-fb2196da9474",
        "cursor": {
          "ref": "f48097a3-fac7-43dd-a6e8-b29628b98ecf",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "592ab231-5c25-407b-b27a-6633f03dfbca"
        },
        "item": {
          "id": "3eeb6c70-c803-4e64-bd12-fb2196da9474",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3893f041-779a-45d5-bb17-c3e548da527d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a999a18-f337-49ec-a13f-3eff58231d3c",
        "cursor": {
          "ref": "e491bfd3-f871-4724-9e88-8234390c5b41",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3ef13ab2-2383-42a4-8ff2-a3dd811c907f"
        },
        "item": {
          "id": "2a999a18-f337-49ec-a13f-3eff58231d3c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bebea47e-0fc8-416e-ba6f-8ab86bbbcad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e3b118-bced-4e1e-aac9-c9e320982832",
        "cursor": {
          "ref": "36fbf207-a6f2-4023-8eff-33ad537e88d2",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "41b07f20-8bfb-47a5-b785-a4c33fea2a92"
        },
        "item": {
          "id": "05e3b118-bced-4e1e-aac9-c9e320982832",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "deadf3a4-ad13-4a4b-b5d2-0d43d87c221b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cba0b3-82c9-4e4c-8b28-205a740eb459",
        "cursor": {
          "ref": "9c172b97-b8a1-4194-8b56-fed693427b5b",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "17a08234-73d8-4014-b56f-f3dd8856425c"
        },
        "item": {
          "id": "d4cba0b3-82c9-4e4c-8b28-205a740eb459",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0ab95b2f-732a-48c2-aebf-fe0e530a4c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d6eb10-11b2-4d5d-8a23-8b7eaedc5a7e",
        "cursor": {
          "ref": "57be1c7e-cd54-4e6c-badc-889bfce75934",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a14f5b33-69c7-43e2-ac28-ced0fee71cf7"
        },
        "item": {
          "id": "13d6eb10-11b2-4d5d-8a23-8b7eaedc5a7e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48197184-847d-42ea-8d1a-8e0168bedb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0008ac0-9b0c-4a69-b818-2601b421f523",
        "cursor": {
          "ref": "c346659a-ac0f-42ca-9871-af317b3e7ff7",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "69985d0f-c6ca-45b2-95c1-ec2221fef49c"
        },
        "item": {
          "id": "d0008ac0-9b0c-4a69-b818-2601b421f523",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3195c62b-a881-4fab-8122-272da0e3de9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cce7c9a-c91a-4158-b596-2ce19b5d1db1",
        "cursor": {
          "ref": "14caebd6-8ab4-497e-8c42-609e77070041",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "54e792be-7c1f-463c-b21f-26253b785ca4"
        },
        "item": {
          "id": "9cce7c9a-c91a-4158-b596-2ce19b5d1db1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e7228a93-f635-497d-9d27-346b8d4a023a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c81f22-b0b9-4ecf-ac9f-aad39a7d9daf",
        "cursor": {
          "ref": "387fac03-777a-4dc7-905c-ab9daf62607a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3c11b4c9-d54e-486c-8d66-cfb620298e56"
        },
        "item": {
          "id": "26c81f22-b0b9-4ecf-ac9f-aad39a7d9daf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a77909ec-d376-4501-8b9a-ebb80df6e6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143dbfc8-0017-4c41-a1f0-dcee76092cda",
        "cursor": {
          "ref": "ac7eb387-f45e-480c-9ace-ce70bd013cce",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c2a65208-b096-4c8f-8ea6-3278acdbf757"
        },
        "item": {
          "id": "143dbfc8-0017-4c41-a1f0-dcee76092cda",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "34e3d78f-a27c-461b-a169-79ab74982e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6234f22-e303-4b0a-a050-148f19645e36",
        "cursor": {
          "ref": "e5f96fef-9c35-469e-9e35-9c310c08de63",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6f242e8-f465-4c4d-9757-38be278922fe"
        },
        "item": {
          "id": "c6234f22-e303-4b0a-a050-148f19645e36",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "df0c87b2-7acb-4666-a0c8-8a5f10541140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18287258-3720-46ff-a253-9825cde62beb",
        "cursor": {
          "ref": "e28f437e-4016-4b50-bf03-28d3204eb5ea",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0fdadcfc-0e7e-45b6-a53e-12e387e0826d"
        },
        "item": {
          "id": "18287258-3720-46ff-a253-9825cde62beb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5cbcf3d6-70a7-48e4-b3c5-b9e5efd438e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27daf4a3-ef5b-442b-96ca-2203b5214e6c",
        "cursor": {
          "ref": "ce6def71-58be-431d-a6b5-aa7ad5466655",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8d013b0c-d1af-4636-b72a-98d99ee7c47f"
        },
        "item": {
          "id": "27daf4a3-ef5b-442b-96ca-2203b5214e6c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "66a363b2-d474-4cb5-9287-901b7fdfbe68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b60c023-8d4e-4aba-adcc-6429328f9a7a",
        "cursor": {
          "ref": "28f7d4fc-3e65-4790-8cf6-34f4cc44520f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "57991403-94b7-4623-aed7-1ed9d70f73a3"
        },
        "item": {
          "id": "3b60c023-8d4e-4aba-adcc-6429328f9a7a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "986a55c5-ba05-4997-b629-77e15176fbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c7b11b-8869-4f2d-9d05-b8f3e9d502d7",
        "cursor": {
          "ref": "f489d3b4-f441-4674-9037-8f256d4ada40",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1b6d5b8e-727a-4ef4-8a93-80b31c7c0c0b"
        },
        "item": {
          "id": "00c7b11b-8869-4f2d-9d05-b8f3e9d502d7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "62ec5719-2d3d-40e0-ae32-2d5ba27bdf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7313388b-e520-4f73-b8c4-6f22137705ce",
        "cursor": {
          "ref": "d8b8eff1-0696-4db1-af79-e9cd5557c944",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b5a42dcb-2951-4277-b59e-2ba33b57ca37"
        },
        "item": {
          "id": "7313388b-e520-4f73-b8c4-6f22137705ce",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "46ea97ba-2b7f-46ee-8e1c-837cb31459ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b606e1-2c43-4424-b39e-64c928f3a50b",
        "cursor": {
          "ref": "706a93a6-4900-44eb-b528-d7a42ff799f1",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "65af9666-8071-43df-93cb-d687e285d646"
        },
        "item": {
          "id": "64b606e1-2c43-4424-b39e-64c928f3a50b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3e7e0f08-628a-4231-ac11-cf4caa65bcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e268f0-9364-4eac-9549-bb6a6bd71042",
        "cursor": {
          "ref": "9c255152-c701-468c-bbcd-f2544bd8bbec",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2e706649-1f90-4753-ac50-384457d1624e"
        },
        "item": {
          "id": "63e268f0-9364-4eac-9549-bb6a6bd71042",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4fb5baf7-d377-4405-99a3-4b6d259b3b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434a6018-8a9e-4106-9cb4-235a2e523402",
        "cursor": {
          "ref": "60cf00cf-8812-4b8d-b4b2-2bd372fd8fbd",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2c132401-72d2-411d-aa1c-a3f876bbdd17"
        },
        "item": {
          "id": "434a6018-8a9e-4106-9cb4-235a2e523402",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "29306929-6ade-4d72-8e26-3f0f5ce0e3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ce155b-9b7b-44e1-895b-bce4ad88a2a7",
        "cursor": {
          "ref": "2ca022a1-8e51-4686-abfb-d43a3dab5a8c",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "63be3e48-cda3-44a7-9672-3b786ba00498"
        },
        "item": {
          "id": "d7ce155b-9b7b-44e1-895b-bce4ad88a2a7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5293bd56-5f16-4232-a3c2-e89060517393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d529b85a-cffc-4e03-9669-8d990d68da50",
        "cursor": {
          "ref": "15a796ca-5376-4d01-909e-9f8d299f8d38",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4882ab53-5d49-4815-b021-8bd929923bc7"
        },
        "item": {
          "id": "d529b85a-cffc-4e03-9669-8d990d68da50",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "82a6c9a1-8c03-4899-9b14-3de07e12be92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e26c04-b5dd-415f-926d-db3f7fd91241",
        "cursor": {
          "ref": "f41518e1-773a-45d0-9baa-2ecd5b116297",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e9227156-3761-47e8-ac13-4dc0401c0c4a"
        },
        "item": {
          "id": "c5e26c04-b5dd-415f-926d-db3f7fd91241",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "661c7950-7b1a-4b8e-9b04-5aaf041f28eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efba54a5-3a22-48dd-8ccd-4d281516c39a",
        "cursor": {
          "ref": "59aa669a-7f1c-46dc-8ffc-d2df8eeaab23",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "42b0530a-be0a-4c80-aa0e-b340e7ef51bc"
        },
        "item": {
          "id": "efba54a5-3a22-48dd-8ccd-4d281516c39a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7bca4ce7-331f-4acd-bd1d-3146016d6fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a071e5-5ec7-4c37-8ddf-4a236da3fb9d",
        "cursor": {
          "ref": "60735c0f-7188-4233-aeab-8f55fb7137ee",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "af6a54aa-0781-4b29-aaa2-1411479fc6d5"
        },
        "item": {
          "id": "99a071e5-5ec7-4c37-8ddf-4a236da3fb9d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "dbc61da7-1022-46a1-9dce-21a9fd6f7408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d10b452-d089-45b4-abdb-16c14a3b4dcb",
        "cursor": {
          "ref": "95d9cf7c-96cf-47f6-83f2-062e64bcc501",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "45612efb-d963-49ed-b5e1-78f181f0b933"
        },
        "item": {
          "id": "0d10b452-d089-45b4-abdb-16c14a3b4dcb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b7be3698-c099-4b98-a894-7ad0973619b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bc8aa8-012b-415a-892a-31c8d4ab4c95",
        "cursor": {
          "ref": "96b13add-0159-48f5-953e-251757c0e016",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ade99be2-0c49-4ed1-881e-fa2e3e317792"
        },
        "item": {
          "id": "86bc8aa8-012b-415a-892a-31c8d4ab4c95",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0b8aecfa-9014-409e-a919-f970d719d0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c554f4bc-ec3e-4d59-b134-d27140e73449",
        "cursor": {
          "ref": "ec840853-98cf-4e9f-8fff-7b48263cab24",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "666bd6a5-cd61-4617-b732-414425fcc5f3"
        },
        "item": {
          "id": "c554f4bc-ec3e-4d59-b134-d27140e73449",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9b518ae4-ff1e-4d0b-8a9b-34f7a2defe4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d031dd-c622-4ce5-bc3c-1f571f179cfb",
        "cursor": {
          "ref": "fff741ca-f151-4a45-85d2-576aca8a8408",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a8b65ab1-ab42-4038-b66e-7a1f091db51e"
        },
        "item": {
          "id": "34d031dd-c622-4ce5-bc3c-1f571f179cfb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "28fbbb54-23d9-4c52-9b02-88d78ba1fee2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f344b48c-3857-4392-9167-edb6febb9769",
        "cursor": {
          "ref": "0f3c3ace-6022-436f-9d85-8a8823361202",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7be115b6-d7bf-4524-920a-bb3289dea397"
        },
        "item": {
          "id": "f344b48c-3857-4392-9167-edb6febb9769",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b22a8e61-caf4-4d37-b1d8-1c45f7772a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ba41dc-0ff1-46a2-9af4-8d3bfa833336",
        "cursor": {
          "ref": "2bb258d4-87eb-476b-a369-4e0a802229ab",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a712e7d4-e44b-4f2c-bff8-7111f736463a"
        },
        "item": {
          "id": "24ba41dc-0ff1-46a2-9af4-8d3bfa833336",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "726ff1d8-5d80-42f8-9a47-6cea6214463c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be9abaa-7c2f-4864-9226-9d13254e5a69",
        "cursor": {
          "ref": "8e917f51-1165-415b-a860-32592f7b32e3",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0de9176b-1f40-48b6-bbfc-a69106cdd8b3"
        },
        "item": {
          "id": "1be9abaa-7c2f-4864-9226-9d13254e5a69",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "69a3be82-6234-4371-87eb-df4e5f19de41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7393fc-4b70-42c8-aea0-e63a84b0c4a6",
        "cursor": {
          "ref": "c10cc869-e51d-42e6-952c-640f27c34fe6",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4bfbc565-3e99-4392-aced-607f8497940d"
        },
        "item": {
          "id": "be7393fc-4b70-42c8-aea0-e63a84b0c4a6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "70e143ce-59b1-4883-94e4-aaaa117f7633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44f7962-1796-4281-ba57-b84bd2d0eead",
        "cursor": {
          "ref": "3facbf10-674c-4091-95a0-585ad656d89d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "50c0b7c2-0fa7-4222-90e1-c1b02bd0a862"
        },
        "item": {
          "id": "c44f7962-1796-4281-ba57-b84bd2d0eead",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3f889c46-7132-4b98-8561-d519e9a885ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6d4ca9-5449-440d-9288-1d93612857ca",
        "cursor": {
          "ref": "3fd39064-b78a-460a-b612-17223946f9b9",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2e3856da-97a4-4b1c-9b9c-466383b6d784"
        },
        "item": {
          "id": "0b6d4ca9-5449-440d-9288-1d93612857ca",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f8de94c7-1cef-477b-9ccb-43258587102e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a1bc3b-6705-44b1-b3d9-31f811b9bbd9",
        "cursor": {
          "ref": "eaeb5261-916e-40b2-a1db-ae3e6e97fd20",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e915cc40-4bc3-44e6-9e65-201eada6c7ce"
        },
        "item": {
          "id": "18a1bc3b-6705-44b1-b3d9-31f811b9bbd9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "809de959-3cd7-48cf-bd2a-0bb2b6c43df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e386b84f-afa4-4b42-bbf8-467e8b0f385d",
        "cursor": {
          "ref": "3dc327d9-06ba-49e4-b6f2-29e1a3e2632f",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dfa6d2cd-21b6-4313-8351-a69fa44df7b6"
        },
        "item": {
          "id": "e386b84f-afa4-4b42-bbf8-467e8b0f385d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "832148dc-5b71-4863-8cde-526780c2373e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6268337-3d12-4840-a7ba-a54e806edb15",
        "cursor": {
          "ref": "75731c8d-03e6-4167-b575-19c33c2861d5",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "260a0144-51d6-436a-baf2-e59d3f70baa2"
        },
        "item": {
          "id": "b6268337-3d12-4840-a7ba-a54e806edb15",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7224275d-4457-4787-979f-e983b2de61d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9672218c-8032-4742-8398-b9efa592a40a",
        "cursor": {
          "ref": "f86204c6-3258-4004-8909-4d139bac7cdf",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "176399c6-0696-4c94-973d-213b226e9782"
        },
        "item": {
          "id": "9672218c-8032-4742-8398-b9efa592a40a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "71f2219e-7ec8-41b0-9446-4145ad7bccdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8928b13d-e187-4151-99ca-5c54e0501c79",
        "cursor": {
          "ref": "3479a454-23e8-48a1-abcc-0a2c4e4f4761",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "aa9fe5f2-0ee8-462d-b71d-3f841cbbd3a6"
        },
        "item": {
          "id": "8928b13d-e187-4151-99ca-5c54e0501c79",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ff24b475-3af0-490c-a79c-145374bfe3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2d0f8a-09bf-4a7c-8d95-b5d24699003e",
        "cursor": {
          "ref": "9b8ad967-aafb-4395-8bdf-07cd02f8546d",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f9d9fe7b-8afb-4ccb-9d0d-f59dd50b278d"
        },
        "item": {
          "id": "6c2d0f8a-09bf-4a7c-8d95-b5d24699003e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "32a9042f-0f32-44d7-ae45-b5bef395d59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0399688e-3a87-49c8-9b5c-f3ad4f198fd8",
        "cursor": {
          "ref": "54b218c2-a5a4-4d53-abcf-647f9dc399c8",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1e1a6510-0a56-45d8-aee7-582c2123de5a"
        },
        "item": {
          "id": "0399688e-3a87-49c8-9b5c-f3ad4f198fd8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3bb1e78f-f84b-49f8-a89c-dceebb62f010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b8919f-997a-446f-b2c9-a5b26d525f4f",
        "cursor": {
          "ref": "1e7a2fc6-668b-4e72-997b-5c065bf66c03",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "05c44b4a-de88-46a3-b906-635e7e64809d"
        },
        "item": {
          "id": "87b8919f-997a-446f-b2c9-a5b26d525f4f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "04639f97-4b41-47f3-8847-5629d80992e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2a1ac3-844d-43ae-9503-2c2f3c1d21eb",
        "cursor": {
          "ref": "d66624df-e524-4df4-852a-fd6381ecb8b4",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "090de819-ad2f-4212-ae80-d9d33f59a30e"
        },
        "item": {
          "id": "4c2a1ac3-844d-43ae-9503-2c2f3c1d21eb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8fdbd807-fc26-4f07-9ad4-9716b0879072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ed5e46-d029-454b-818d-7064ecae9a92",
        "cursor": {
          "ref": "7f64c8b1-6c1f-4ff9-8c75-d605863a1d16",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4255ae24-03ea-462e-bab3-d031ef53ffbe"
        },
        "item": {
          "id": "66ed5e46-d029-454b-818d-7064ecae9a92",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "758794eb-8587-4479-876d-9471a1f54ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae685d4-683a-4548-8ccb-c7815ee6c8b4",
        "cursor": {
          "ref": "7cbc6fa3-be9c-421a-b11c-e1d4c9b6a796",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6da17a24-e300-4d29-94cf-72ee8e63485d"
        },
        "item": {
          "id": "0ae685d4-683a-4548-8ccb-c7815ee6c8b4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b1358a9b-8b19-4379-bc99-70616529c6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d532d651-274a-44e5-895f-a5d7ce209114",
        "cursor": {
          "ref": "285bdf93-0785-416b-a2a6-096dc23c71db",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c8a55604-4ce9-4873-9ba5-558accec8201"
        },
        "item": {
          "id": "d532d651-274a-44e5-895f-a5d7ce209114",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a69f1e26-c95c-4ca8-afc3-51833bff73ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429a8c50-f500-47d7-84c2-eedf8d70eeaa",
        "cursor": {
          "ref": "7c330d7d-6af6-4bce-a774-1827badd4ebc",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "448251b1-7ef2-48e1-b74f-fe57c51c44da"
        },
        "item": {
          "id": "429a8c50-f500-47d7-84c2-eedf8d70eeaa",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7c1bb9c5-ae5e-40dc-8a2c-bc01ee12c133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd16dab-09da-4c0d-a430-90eae4338132",
        "cursor": {
          "ref": "309661af-0edf-4a94-a1ee-952bf44cc54e",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d17b63eb-a08a-4336-b744-aabc7a9abeb9"
        },
        "item": {
          "id": "acd16dab-09da-4c0d-a430-90eae4338132",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dcc6181f-cd12-4092-9ff1-343122dfe354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21822cfa-e763-4198-8c3e-ca969d278bae",
        "cursor": {
          "ref": "eb2087e2-2970-47a6-a2bb-8d6c43cb4f0e",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fee8fc98-de3f-4a33-aef5-e30ab397fcee"
        },
        "item": {
          "id": "21822cfa-e763-4198-8c3e-ca969d278bae",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4d5e6051-90c1-46e1-87d1-d9633402ae5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6f3fe4-22ed-45da-a331-8052784ad03a",
        "cursor": {
          "ref": "5d5e6cd5-fca6-456d-8abf-c9e3daa628e9",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2490d5a0-3f39-4e84-8347-16e75cd3410b"
        },
        "item": {
          "id": "cd6f3fe4-22ed-45da-a331-8052784ad03a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ef0aa622-1a63-4698-b3fd-d4ce13824884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb92a2-a83d-49fa-ba99-304b9a1d4eed",
        "cursor": {
          "ref": "816e4d8d-58e7-4d6d-ad9c-628d0872ebd0",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "af97409e-1293-4d67-b0b2-85b519d9d274"
        },
        "item": {
          "id": "cdeb92a2-a83d-49fa-ba99-304b9a1d4eed",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "65b84f1d-9842-4cc4-9f43-9321463059ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62dc156-26b7-48b1-93ff-264d7446bc8f",
        "cursor": {
          "ref": "67835fc8-baf5-4817-bca6-bd9bd03cb3af",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "82cd4532-3e60-41c5-a307-756c1a1742aa"
        },
        "item": {
          "id": "d62dc156-26b7-48b1-93ff-264d7446bc8f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4a68878b-ca5a-4f7e-8e78-12a61a4362c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddda485-9dd1-4bad-a638-ac498f66556f",
        "cursor": {
          "ref": "4991b881-369e-4eb0-912d-c0c7658db3ea",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8cdae7ec-0568-4b17-b24f-02bbb15d920b"
        },
        "item": {
          "id": "8ddda485-9dd1-4bad-a638-ac498f66556f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "51003c46-c9ce-4e70-b2e8-883b50f189f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087f53ea-94ad-4d76-aef6-acc2f65dc0de",
        "cursor": {
          "ref": "a820df31-ecc0-4e8a-8d5c-7f878f1bfd80",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9be93c53-10f1-4b0a-8d09-0f774f829a6d"
        },
        "item": {
          "id": "087f53ea-94ad-4d76-aef6-acc2f65dc0de",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b2ad7866-5479-4f1c-9d3b-9f0de3d1d98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1595794c-9f48-4556-8b78-1144b97a2d28",
        "cursor": {
          "ref": "ac15b2d6-4fa2-4aaa-a227-885233755adf",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e64a6621-b41f-4936-8bad-fc162a7391fe"
        },
        "item": {
          "id": "1595794c-9f48-4556-8b78-1144b97a2d28",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "13e6e605-b17b-4e25-96e7-46aaa3bdb3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795b6bae-026b-43a8-8e5d-f1b9a4bc8dca",
        "cursor": {
          "ref": "b65003bf-4b7b-4113-a289-edbbec4e6b3e",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ebfa61eb-af30-4713-9598-de3641e1b828"
        },
        "item": {
          "id": "795b6bae-026b-43a8-8e5d-f1b9a4bc8dca",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f445d1ff-422f-443d-b939-fff30cb35cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61d1e69-29c7-46d9-b43f-3374479ddd6d",
        "cursor": {
          "ref": "d05365a4-59f7-4073-9038-b7f03b64293a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6ec58d14-03aa-44c2-943a-8252c4f61861"
        },
        "item": {
          "id": "e61d1e69-29c7-46d9-b43f-3374479ddd6d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eabb11af-bd68-4b0a-84ba-23cec1fe0629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfe7f92-79f7-4c3b-9932-8ff2482fa50e",
        "cursor": {
          "ref": "68aba9ec-d634-4cbe-ad97-9876f4bd3057",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e621dedf-3705-4217-abd5-134a7480ef44"
        },
        "item": {
          "id": "dbfe7f92-79f7-4c3b-9932-8ff2482fa50e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7ea96e2e-ddb9-4821-b3c0-f3c1f1dbea38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c703122e-4582-4a56-9792-f24704576378",
        "cursor": {
          "ref": "14a44170-188f-418c-8d82-64b4b4e157ea",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8dd4cb78-47db-4c79-9dca-528afd322f09"
        },
        "item": {
          "id": "c703122e-4582-4a56-9792-f24704576378",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "29177dd1-c927-42f6-b3b4-5c48a0329a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a44094e-0167-49b5-a129-e9beffd53116",
        "cursor": {
          "ref": "da0827f5-4fff-4e3c-975f-05dec0dee4ad",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c28f2fc9-12ce-43b0-9918-3395fdc43867"
        },
        "item": {
          "id": "6a44094e-0167-49b5-a129-e9beffd53116",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d6c729e9-7358-4a6a-8089-fc075ed2b851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c34f0de-936c-4006-9724-6dd53dfcfa97",
        "cursor": {
          "ref": "2e19bcda-f768-4b9f-a2e7-2058dbf7eb66",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b29d797a-9ef2-4598-9d95-f9c22212c1ba"
        },
        "item": {
          "id": "9c34f0de-936c-4006-9724-6dd53dfcfa97",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0333f73f-4594-4827-93f1-ea57776c2f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c011a0-8073-4ca7-b9b1-552e4e424bd2",
        "cursor": {
          "ref": "f991cf5c-4af9-4a3b-8f38-5bfeafe6a878",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6bce7076-8ed7-4817-a2e3-cf98cf3bc045"
        },
        "item": {
          "id": "a0c011a0-8073-4ca7-b9b1-552e4e424bd2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "07a48f4b-1d46-4164-a97a-1f4aacecfc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e521c4-8fcc-49bd-b0d3-ac90ba2918fa",
        "cursor": {
          "ref": "749cef23-a189-4ec4-b039-75107992b718",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b3f19d5a-1ac0-4cb3-acb6-5593e3812cc2"
        },
        "item": {
          "id": "76e521c4-8fcc-49bd-b0d3-ac90ba2918fa",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ad701708-6f69-4140-9a5a-979d609ccbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce82031-8947-4c0a-8e3d-239137077dae",
        "cursor": {
          "ref": "0ea03af8-4cf2-4d50-9cb7-8ff93f7f5459",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fdaec01d-6c74-4b03-9f94-1841d572e456"
        },
        "item": {
          "id": "8ce82031-8947-4c0a-8e3d-239137077dae",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e0426a05-32b5-4484-8e4a-3b150513e090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4c5a40-2bb8-40bf-b107-922bbdbfa0df",
        "cursor": {
          "ref": "572583fe-09bc-41cc-a236-2ce13bf1dc83",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9159f6c0-2c66-4f23-8b54-30faa43e90f0"
        },
        "item": {
          "id": "eb4c5a40-2bb8-40bf-b107-922bbdbfa0df",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9b5c83b3-ca0b-416d-a0d3-2f4933089309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c2e8bd-f563-4913-bf22-b22c4349485a",
        "cursor": {
          "ref": "d1ee4d6e-44ae-4779-80cb-be4ca4a964cc",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4f7aff0f-7c63-4dad-bea6-c3727bfa57ba"
        },
        "item": {
          "id": "57c2e8bd-f563-4913-bf22-b22c4349485a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "46dedf8e-5f02-4cee-a452-b88dc795b13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fd9182-73b6-491e-9253-fcaced525b8e",
        "cursor": {
          "ref": "766c05fe-e893-418e-984e-d8d03fedcef1",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "30810b56-2ffc-4552-80c0-f2cca300ed64"
        },
        "item": {
          "id": "67fd9182-73b6-491e-9253-fcaced525b8e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "58d6cb1f-930d-4c81-b597-55bc297362f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0fc615-88d5-4cb6-9736-24f8ba3bbde3",
        "cursor": {
          "ref": "0c748141-1761-4b89-8bfa-b417f8b46d68",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7942d149-913c-4f1f-8873-53ef3eed5be5"
        },
        "item": {
          "id": "1c0fc615-88d5-4cb6-9736-24f8ba3bbde3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "edbb3402-1f29-419e-b142-11c278c3dd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db1e3ff-0661-4198-83f7-802b16a484b7",
        "cursor": {
          "ref": "f3bf67c4-8efb-4ee2-8591-1ae7f5089e08",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3b4311c5-6c06-43db-93d9-dd4c67573b9f"
        },
        "item": {
          "id": "0db1e3ff-0661-4198-83f7-802b16a484b7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c6922643-f899-418d-b79f-a15144cdedcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4839fff8-e167-4a01-b997-5367cf698e31",
        "cursor": {
          "ref": "02fa8e9b-9f58-413c-b890-d3e4e3b98cc7",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "21e1191a-b66b-4390-9fb5-825fec1fc5ef"
        },
        "item": {
          "id": "4839fff8-e167-4a01-b997-5367cf698e31",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1d57108c-2156-4b86-b503-eb476c2b1614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b2fa73-d4a8-43aa-b497-4fb0e0f6f1d9",
        "cursor": {
          "ref": "4db49bc4-04d6-4922-bdc4-97c91fc1f08d",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "27b53428-9fa8-4bd0-a9df-55b0d42e4d98"
        },
        "item": {
          "id": "52b2fa73-d4a8-43aa-b497-4fb0e0f6f1d9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "eb8157be-614c-4b57-af73-2d6a79753b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45e21c5-29bc-446f-887f-9288313215f1",
        "cursor": {
          "ref": "72dc4eb9-6db3-4760-9f37-da5fd93ae916",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3a576c63-0147-484c-ad17-cf9a9cc1a51e"
        },
        "item": {
          "id": "d45e21c5-29bc-446f-887f-9288313215f1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "25854c94-635a-418b-8c06-949f04113c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0910aace-772b-443d-aec3-972473fb46a1",
        "cursor": {
          "ref": "04b49217-f327-4119-bcb1-58be9c879373",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b6fefd56-f007-4994-8875-ba1cfb255be8"
        },
        "item": {
          "id": "0910aace-772b-443d-aec3-972473fb46a1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "05e20a36-f503-4558-b00b-e77e89b4759d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6566db04-81df-48b9-b747-69683a9b77cf",
        "cursor": {
          "ref": "650f66e6-4a3e-4bfa-8928-361df1eb49c3",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "727b8fcc-518f-4aa0-9fc1-824f32452a6d"
        },
        "item": {
          "id": "6566db04-81df-48b9-b747-69683a9b77cf",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "908d6857-d7c4-4c63-a7d6-7c30156d8435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f3872e-0780-4c4d-a118-c0bb5b929c08",
        "cursor": {
          "ref": "746d4680-26af-45e4-b32c-a8e3db4ebf68",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b8c7b686-19a9-4bc6-ae11-cbc8177916b0"
        },
        "item": {
          "id": "77f3872e-0780-4c4d-a118-c0bb5b929c08",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5ab5fc54-54b4-4c40-ac52-231691e86722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956265c3-6650-4598-bccb-bf7d82c96684",
        "cursor": {
          "ref": "16fdda4f-1829-4504-950c-d1bb0f1253c0",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d2139703-5207-44b3-9354-8322f7f6f7b2"
        },
        "item": {
          "id": "956265c3-6650-4598-bccb-bf7d82c96684",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7c6d6e85-caa7-4b0b-8bcb-fe7646b25a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fc3b86-07d5-4671-af6b-aa09e0a84681",
        "cursor": {
          "ref": "d68bdd6c-4c43-40a6-b136-cf44bc11b87a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bd153d1f-c8c7-4bee-b4d1-bdbe7cf2d41a"
        },
        "item": {
          "id": "a4fc3b86-07d5-4671-af6b-aa09e0a84681",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dc6227f1-83ff-4976-8a45-f8a3a64e6515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad2773b-bc4c-4248-bf93-a3ec0a8bfdbf",
        "cursor": {
          "ref": "1ea9bf0d-ac31-4bfd-b59b-67b4463091ea",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "68c3a2fb-550b-41d9-b1ca-b85f880a36ee"
        },
        "item": {
          "id": "bad2773b-bc4c-4248-bf93-a3ec0a8bfdbf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "89f09124-0874-49f0-bb99-a9607b21975f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99b241e-fc45-43c0-9edd-1bc033598b31",
        "cursor": {
          "ref": "9d73aec0-39be-4a57-a5e8-d32b0dcf80c1",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c666ffe6-340a-4480-8421-9dfae9bb6a05"
        },
        "item": {
          "id": "b99b241e-fc45-43c0-9edd-1bc033598b31",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a45e6856-ea3b-43f4-882c-72bd05e1ff83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb490b91-fd97-492d-b2f2-4a6f05713a6b",
        "cursor": {
          "ref": "315dc046-ca69-4208-b693-97f00cd60039",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "61dfb392-c43c-4a44-bef7-1c61fa6b1db0"
        },
        "item": {
          "id": "fb490b91-fd97-492d-b2f2-4a6f05713a6b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eea586d1-9528-4e1a-8723-5ea4b811ac95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8e3f1f-2995-42c6-a4e4-49bb4faea969",
        "cursor": {
          "ref": "d532ef50-9d09-4f51-8255-0ca884f0c634",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "45b6dc9b-30f0-4c95-a15c-5b5d8dd97478"
        },
        "item": {
          "id": "3b8e3f1f-2995-42c6-a4e4-49bb4faea969",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6692569e-7b5d-445b-a47a-e8452641bdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f3794e-593e-4687-8654-00f6a32a69d5",
        "cursor": {
          "ref": "d5930db1-aa1c-4c65-a4a5-7d8c750e4b4b",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f8775581-a78d-4557-ae48-62822e31450d"
        },
        "item": {
          "id": "57f3794e-593e-4687-8654-00f6a32a69d5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "11510e4b-c11e-4334-9462-a800b295d615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546af725-8052-4185-a95a-f6ecc55334e1",
        "cursor": {
          "ref": "3191277f-c51f-47c4-80b1-90c618525b60",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0addd39b-5a57-4c82-b3d6-1769c471c8ef"
        },
        "item": {
          "id": "546af725-8052-4185-a95a-f6ecc55334e1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "74c0fcb9-3004-43bf-a600-ed97e98dbb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baf1615-e29c-40d8-b6eb-f7609c42cad6",
        "cursor": {
          "ref": "ecf70503-c2e6-4dea-afee-fa24410977b3",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b3d14d66-6312-41c6-82f3-05d27b69317b"
        },
        "item": {
          "id": "0baf1615-e29c-40d8-b6eb-f7609c42cad6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4e015f07-3c07-428a-9b7c-f52ee99ab5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11321188-6bca-42de-afba-0a4f4fd73f1a",
        "cursor": {
          "ref": "e57a6991-03ac-45c9-bda7-8792bacdee2f",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4ef42290-899f-49c4-82c1-17589889a6c2"
        },
        "item": {
          "id": "11321188-6bca-42de-afba-0a4f4fd73f1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "72dcd657-c531-4676-b4a8-f5eab37beb78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b46296-3c07-42be-a535-b77b53d162a8",
        "cursor": {
          "ref": "5087e846-2fbf-46e1-afdc-9eaa7107e251",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "60db0c81-ec82-4bba-ad2e-da7b9805c689"
        },
        "item": {
          "id": "08b46296-3c07-42be-a535-b77b53d162a8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c5fbc27f-c928-4498-8648-5d8e651af586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15193fc0-40b7-468f-be97-132bd4338653",
        "cursor": {
          "ref": "b9c1ca8e-a23c-4b31-9b32-42e5c8d4b243",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9394b31f-2a33-47dd-993f-af9faa5e1eef"
        },
        "item": {
          "id": "15193fc0-40b7-468f-be97-132bd4338653",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1868d211-764c-40bf-ae2d-a7656ff2a66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5527867f-425f-4e6e-8b65-efa71be74f94",
        "cursor": {
          "ref": "c32cf760-9df3-4ade-aff7-5baf63d59990",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4ee1440d-5753-4cd1-9179-af6147c8605c"
        },
        "item": {
          "id": "5527867f-425f-4e6e-8b65-efa71be74f94",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a17771a8-f072-4404-8f2d-d0e447dbdc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7c6f81-8f6d-4f0d-8043-ffc202f9374c",
        "cursor": {
          "ref": "09f668f5-e88f-4493-b311-73b0805dd1da",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bc079d20-d940-49d7-893c-57ecdc556d25"
        },
        "item": {
          "id": "0c7c6f81-8f6d-4f0d-8043-ffc202f9374c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "96744c25-dbdd-493c-b118-91ab1423f567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae88d2a-4649-47b8-9a63-9a1becf1b0f4",
        "cursor": {
          "ref": "479de9da-12cb-419e-96c1-63dfc4f8658d",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bd4c017d-64a6-4c7a-a6ae-32412a37d1ba"
        },
        "item": {
          "id": "bae88d2a-4649-47b8-9a63-9a1becf1b0f4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "124b15ce-c10b-4313-9d11-9535b7c20f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af16a26d-aac4-4d46-920b-1d9d78698f95",
        "cursor": {
          "ref": "58ad9149-063d-4e35-a05f-b6644d7847a8",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ea43de2f-3f46-406e-9daa-d602852ff5f9"
        },
        "item": {
          "id": "af16a26d-aac4-4d46-920b-1d9d78698f95",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c2cebae7-8b83-4802-bf6e-59e9e2ea0dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b8ed2f-e93f-42d7-8a32-b63262cdfa54",
        "cursor": {
          "ref": "2c84757a-6d1e-4e1a-ae5d-8d9ceb5e43ff",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5d123bb6-ba37-4d18-aaaa-3d34e8c7f3f4"
        },
        "item": {
          "id": "25b8ed2f-e93f-42d7-8a32-b63262cdfa54",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4cfc2500-2411-4a23-846b-55f8be99a8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3a855e-8ac9-4d81-980e-c873e317dfb3",
        "cursor": {
          "ref": "f8c883d5-70b6-4f71-b92b-1e729a44ba60",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16b8ee00-ceec-42a1-8b2a-a051f8b37a27"
        },
        "item": {
          "id": "1e3a855e-8ac9-4d81-980e-c873e317dfb3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fcddcd8b-0c78-42d5-b845-2ae3913494a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08c7f1e-5686-4f19-ac40-79eb14017417",
        "cursor": {
          "ref": "1c8fc5ee-875d-465b-954c-516692b61f8c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9f26a73a-9311-4dc8-bb41-895eeede5ee8"
        },
        "item": {
          "id": "a08c7f1e-5686-4f19-ac40-79eb14017417",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9e6e2007-2fe2-469b-a4f1-ed49d2fa2fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18473187-ec4b-473c-8b1c-b9c3a59f04c6",
        "cursor": {
          "ref": "8eda55a9-9e8e-4f86-b7b8-af19a5070111",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ba9fedd2-94fa-4a38-9748-22b363232a3c"
        },
        "item": {
          "id": "18473187-ec4b-473c-8b1c-b9c3a59f04c6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "94569c5b-502f-4bb3-a9a9-fed5a5697050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac81ef62-3bcd-44c0-8a62-a4875aaa4e1b",
        "cursor": {
          "ref": "7052f77f-aa2f-4fe6-ba00-068fb3b462e7",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d6faf974-3f28-4c53-960f-ef1ad286084f"
        },
        "item": {
          "id": "ac81ef62-3bcd-44c0-8a62-a4875aaa4e1b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dacf548b-9de9-4b4a-b4a2-2f0ff13a592a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bef91d5-7cb2-4d14-b2f0-1600919ac98b",
        "cursor": {
          "ref": "efecda1f-38a2-400a-aa39-189bbbf66496",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f0bca03e-86b6-4003-b3d8-2c632f30bb73"
        },
        "item": {
          "id": "4bef91d5-7cb2-4d14-b2f0-1600919ac98b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9a08fc9e-1b1b-49dc-8567-20bcb0e187f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000a2dcc-e6f1-440d-a5d2-fd8a9520b350",
        "cursor": {
          "ref": "537c3e57-a578-44ea-846f-85c46bbc44e0",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "11746544-61bb-4946-be39-b2f770760582"
        },
        "item": {
          "id": "000a2dcc-e6f1-440d-a5d2-fd8a9520b350",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ad5126ba-5a04-41e6-970e-7386a1936f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e34ec2-ec56-417d-8362-8dee773bb27f",
        "cursor": {
          "ref": "b23fefab-d5b7-47ce-b039-111e26816190",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3eeb7d15-d320-48c6-8e76-5212782bef9a"
        },
        "item": {
          "id": "f0e34ec2-ec56-417d-8362-8dee773bb27f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e6d4e12d-def8-4175-83e9-5a0751c53451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16837525-2897-4259-8d64-2212ce941515",
        "cursor": {
          "ref": "e6a250fd-326d-47d1-9432-2c83a40b83c1",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e60df91b-a327-4228-a1ba-bdd06c148c28"
        },
        "item": {
          "id": "16837525-2897-4259-8d64-2212ce941515",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f4c07fda-bc99-42f9-94a1-8bae997f3fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36549641-f239-48af-b849-9bf3ab0a5c89",
        "cursor": {
          "ref": "918f4bce-88bd-4d92-8006-7a55231f8d77",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "180e1b95-bdda-4b3a-b56e-384e291c925e"
        },
        "item": {
          "id": "36549641-f239-48af-b849-9bf3ab0a5c89",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "74505279-453b-4e58-986d-9fd7a1d167c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ab28b3-a6b7-4a9d-8853-9adb17092b02",
        "cursor": {
          "ref": "8f215b58-acf2-4aee-877e-ed9bf36d78de",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9dd95185-bb1f-4728-928a-e86937088571"
        },
        "item": {
          "id": "b5ab28b3-a6b7-4a9d-8853-9adb17092b02",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8ce59812-b7a7-4d67-8d0a-f16bfec1ad6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57441257-d7e8-4800-9138-5423c1f40253",
        "cursor": {
          "ref": "6cfcd026-d895-4f40-8116-1b2935fe3d5f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "21889253-cd85-4a5d-a68f-d0fd4101e90b"
        },
        "item": {
          "id": "57441257-d7e8-4800-9138-5423c1f40253",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1b83a28a-d1b2-43a5-81ad-e9921e7f2c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424fa910-6935-4226-b84c-7d8d16ee1684",
        "cursor": {
          "ref": "170f708b-fa02-4258-9965-cb084db0c62d",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "6d98ee8d-b219-4ec2-a456-2adf9175e7b1"
        },
        "item": {
          "id": "424fa910-6935-4226-b84c-7d8d16ee1684",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f203221e-a773-4212-b8fc-63dc9c735f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3556f489-f566-4d75-b697-fe67cfc6c063",
        "cursor": {
          "ref": "c35e1cd5-9864-4bf4-b3b2-20c1151bbc7f",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9e011488-4f0d-4cca-9320-13d14cd30570"
        },
        "item": {
          "id": "3556f489-f566-4d75-b697-fe67cfc6c063",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "17f2c4f3-4891-425a-a580-439be3649d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613e8f5b-9167-4d3e-b49f-b1505b86d424",
        "cursor": {
          "ref": "e7dde5cb-44cd-4b14-83e8-ef11d4bba590",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3ded3bd2-ea87-4ee7-8aca-0ce88e9723df"
        },
        "item": {
          "id": "613e8f5b-9167-4d3e-b49f-b1505b86d424",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "21628218-4ca3-42f0-a6d2-bcffb6ee8b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feb3be1-e03b-44a6-b49f-82bb42b74d05",
        "cursor": {
          "ref": "c5d4eed8-eadd-429e-9772-1d5c979b30e3",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "06c88dd5-ec7a-4493-b280-108005ccb5b9"
        },
        "item": {
          "id": "9feb3be1-e03b-44a6-b49f-82bb42b74d05",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9a9086ef-87bf-4be4-b4dd-c031b52968c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9897e80-eb77-4735-85b5-97d4c873a772",
        "cursor": {
          "ref": "10b7fc92-c0f5-4b8e-b171-ee6ffb28ca6c",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7add165b-2da0-4a2e-a7e3-b7349abd19fd"
        },
        "item": {
          "id": "d9897e80-eb77-4735-85b5-97d4c873a772",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "89ac6485-739f-4192-8ca2-b71c3bc3223d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f3e9d0-4261-4b52-9265-712acf956f77",
        "cursor": {
          "ref": "d78e07c2-b37a-4adb-b64a-93eaff76e229",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "53c880ab-2ba2-4818-bad4-607f4e531427"
        },
        "item": {
          "id": "41f3e9d0-4261-4b52-9265-712acf956f77",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f34f3393-803c-4dd5-a29c-929b58aca64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceb5dc5-6635-4181-997e-2cb4612c468e",
        "cursor": {
          "ref": "fcf75e38-0374-4cef-8175-d2c20f60dcd0",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6a1edcdf-ce80-4a41-8391-98a7ed319067"
        },
        "item": {
          "id": "5ceb5dc5-6635-4181-997e-2cb4612c468e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "79b6d980-5206-49af-909f-304a31835714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b6fa2f-3b7e-47a1-86d1-ef78cc7557e0",
        "cursor": {
          "ref": "0def1ef1-4091-43ae-afb6-36075fc3994d",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1a684e6c-4939-4fe3-a611-4f935c73cb26"
        },
        "item": {
          "id": "06b6fa2f-3b7e-47a1-86d1-ef78cc7557e0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "398ccc42-9814-40aa-8b70-a0a13b68c72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39558bf5-b1d1-4767-9bfe-6997ef016ef1",
        "cursor": {
          "ref": "3ee75829-a82b-4d71-b9c7-c361e043c8a2",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "07d08177-a97d-48fb-acfb-4c09dea3d89c"
        },
        "item": {
          "id": "39558bf5-b1d1-4767-9bfe-6997ef016ef1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "09e07f2d-403b-474c-bce7-d27469727b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d57180-6880-4dc7-aa50-7ae9e0eb195a",
        "cursor": {
          "ref": "29d70caf-fece-43f0-a671-cb214e1d3ec5",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "708c26d9-43c8-465a-9b16-937aecf956a2"
        },
        "item": {
          "id": "76d57180-6880-4dc7-aa50-7ae9e0eb195a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6ab9ef8c-f016-4185-a334-5a4f543f5c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54693101-d839-4039-a438-a2f0a6ca226b",
        "cursor": {
          "ref": "c6930ab3-c344-47ea-8cc7-34bf85c3683d",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c3c7ef18-6159-42e2-a887-4e7114fbbeaa"
        },
        "item": {
          "id": "54693101-d839-4039-a438-a2f0a6ca226b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "69c71ce8-5958-45e4-b923-2321a108ec3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a4cf66-7c49-4af3-8d59-35d50c58695b",
        "cursor": {
          "ref": "29010a3e-7d2c-42d1-b783-4d23ef2bc951",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a7b89835-194a-4e22-8d8a-cea69fa859bd"
        },
        "item": {
          "id": "36a4cf66-7c49-4af3-8d59-35d50c58695b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9cbd87ab-77f4-426d-9cf7-7534f045218d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996965ac-d0b5-4b4f-9559-8416ae76c230",
        "cursor": {
          "ref": "bbb8de5c-2234-4c73-bf70-349b0361c42e",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "af6789b9-cc41-4c1f-bde8-22cba89bf66a"
        },
        "item": {
          "id": "996965ac-d0b5-4b4f-9559-8416ae76c230",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "45939d33-06fc-4a9a-be3a-18abd84e80ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c6d759-098f-46ce-99ee-9dbadaac08a0",
        "cursor": {
          "ref": "c46cf58b-4bc7-464b-a092-df7f872e0000",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "fed3dcad-3f27-4da8-8d5b-bb0a87627209"
        },
        "item": {
          "id": "d3c6d759-098f-46ce-99ee-9dbadaac08a0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c2e403ef-3e24-42cc-8c96-aa0a2aa6c54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad462a1-ec99-4f63-8819-6c1b59e4fadf",
        "cursor": {
          "ref": "6595ff45-c09f-4bd5-a998-2e19eb747b79",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a69d9d21-33c3-4f8a-b096-e549ce131d0e"
        },
        "item": {
          "id": "9ad462a1-ec99-4f63-8819-6c1b59e4fadf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "659b2aea-6e77-48b0-9dde-f176967e61a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2d72a5-37c2-4400-a6bd-8889b45add50",
        "cursor": {
          "ref": "ec72a53f-63fa-4e10-810f-19b6bb033ce8",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c64baa1a-13d2-49e0-a758-8fa968065d49"
        },
        "item": {
          "id": "9e2d72a5-37c2-4400-a6bd-8889b45add50",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d95e6f78-c7f7-489f-b66a-bb560117aa28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9507631-2ab3-4807-a808-c9f71a5e3c8e",
        "cursor": {
          "ref": "8d25d2d8-0852-411d-a85d-8cea246f2c63",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "59673868-107f-4af8-ac96-0f85d1bbd2a5"
        },
        "item": {
          "id": "f9507631-2ab3-4807-a808-c9f71a5e3c8e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "37a9e65b-c7f5-4b35-9a5c-4bdda86af49f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739fb397-93ac-4647-8401-8e1eee10381d",
        "cursor": {
          "ref": "9633f902-3af4-49bb-b2e0-74da0de2b45e",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "dfc6811c-0484-49d7-b0f7-c155ab523169"
        },
        "item": {
          "id": "739fb397-93ac-4647-8401-8e1eee10381d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3b1e9e61-f744-4a76-9dc0-1fc7a2085c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "0cab98e3-a9ac-44a2-ba3d-c405a34a49eb",
        "cursor": {
          "ref": "c8ec7609-e9e7-43ed-8963-cc9615ee619c",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7181819c-5092-42f3-b93d-490c3e8459c9"
        },
        "item": {
          "id": "0cab98e3-a9ac-44a2-ba3d-c405a34a49eb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9cdf0dc1-9ddb-4ab1-ba15-82cea6927cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9a776834-b293-4b11-9d7e-b68ab713d599",
        "cursor": {
          "ref": "c27095df-5888-4494-904e-5edc61f63ac5",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1e46d923-a9ea-41d2-991a-954586982191"
        },
        "item": {
          "id": "9a776834-b293-4b11-9d7e-b68ab713d599",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b39fc392-51a1-481e-8cad-5b43f0f3cdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "0de0c7fe-9e93-49c3-b244-5c656f52281b",
        "cursor": {
          "ref": "63362a4b-20fe-4b45-b76f-127f3940d9c6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d171e4b7-8489-4dc3-8cd6-e9aaccfac153"
        },
        "item": {
          "id": "0de0c7fe-9e93-49c3-b244-5c656f52281b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b667311e-50cc-47a7-9492-5c2e673257ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de0c7fe-9e93-49c3-b244-5c656f52281b",
        "cursor": {
          "ref": "63362a4b-20fe-4b45-b76f-127f3940d9c6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d171e4b7-8489-4dc3-8cd6-e9aaccfac153"
        },
        "item": {
          "id": "0de0c7fe-9e93-49c3-b244-5c656f52281b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b667311e-50cc-47a7-9492-5c2e673257ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723c89b8-1c10-4352-b341-28f3061fbb16",
        "cursor": {
          "ref": "89e29681-4582-43d7-bdcf-6a9728b93a2f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a8291a4c-5e8a-4d6c-82b8-9a8b1fa11804"
        },
        "item": {
          "id": "723c89b8-1c10-4352-b341-28f3061fbb16",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "845a394d-4141-4653-ada9-cb936d352d8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643ca4d8-26ba-48e3-a650-ac672246a36a",
        "cursor": {
          "ref": "79c5efdb-7ab9-4a97-81cd-aa7e5f8a8a11",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "77cebdf9-deda-4a3c-a58a-eb38e2db4f2f"
        },
        "item": {
          "id": "643ca4d8-26ba-48e3-a650-ac672246a36a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a102114c-8233-4a27-946e-62e859255f38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}