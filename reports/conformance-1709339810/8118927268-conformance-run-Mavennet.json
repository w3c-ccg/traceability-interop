{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a4c6a5b6-5c62-4819-9f06-8ea5cd064b48",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3829aac5-f12b-48b7-b30c-f69b0aed6c26",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3cd65200-8d9e-4ed3-934f-0ebbc4457272",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a59d1904-201e-4402-821e-5c682a3382fd"
                }
              }
            ]
          },
          {
            "id": "23cdd9ed-fabe-4ee5-a4a8-e2923de856ae",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8ed4aff-27f7-4401-a5c2-7566f154f6be",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "180e588c-9fb6-41f9-a04b-d73fd6b8ae1b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b427ea17-3e52-4853-adc0-841c01408f26",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "88232397-3adf-4c39-8167-a03ede9130e1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f19e20d4-3645-478a-b19b-fc805d7cac6a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40005a12-0d14-4140-92d2-1ed551ebd449",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dff4bb17-b7cc-459c-94ca-ee9725695424"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dada9bd6-7188-4b48-9f93-00602617ac28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2b1ba19-5ef1-43e7-94fd-9aceeb110075"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "80ff3a9a-7ff4-4dd8-aea5-64bc6bbb852d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "509faf2d-510b-47c6-91e8-e1984b9ce5f2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e73d6e15-42de-499d-9f0e-440256cd2eaa",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1e395e4d-b521-4724-8b7a-a53ee7d1387c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3454cd35-02f5-46ac-b367-b64915887e9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b7c9a0c-97b8-432a-aa81-d775bbd13e19"
            }
          }
        ]
      },
      {
        "id": "e9e97114-8e32-4696-a66f-9708fb58bc8f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "143ac48a-4346-461f-a84a-88172e3eb8d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f78d8323-b438-40ec-a3b2-d8bad2c33b0f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b97a1ed-9b59-4398-aca2-91671c34169f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8188b5a1-d657-4d01-8074-987279a02fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8561b49c-6bbb-47a0-862b-0e4a6498ee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32497d9-2f9a-4611-813f-b03404b5d5b4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffade8c-cc59-40ff-b523-a3f0e6b79708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a730da08-7366-4447-b1e2-7e117bdeaa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74a2b79-a51c-440d-9740-f59b3744c503",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c4a396-4a70-4d7e-9344-1cb780a1bb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d8c6c83-3c1d-46c5-bac6-5be3c9de83a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec5780e1-2dec-4059-acc5-da08019b91e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2e8b516-2e96-48fc-8ae2-2a77c8d39df7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8262f2-77a0-47b1-b0a4-e906cf3de423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30e4f999-9bac-4ef3-9103-f9dff629e155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2edd957-9c44-4150-af3d-ad6cd68d420a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4258f2-3c58-4b45-b30f-ad1ad11d22d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fc8fa901-bc3e-4393-8854-bdd72e43eadb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f264dbe-44c3-449e-befe-0a943967a484",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dd480fd-a516-4c2b-96fd-c6d089c48ff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d288a688-922e-46cc-a0d6-f6edddbe614d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9c65120-93eb-430d-9797-5f8467d7b28e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "769dd2f8-e324-48b4-8bf3-b6f7bd518e1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be8e976c-6054-4b22-868d-666de31049c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e906f6b8-e670-4949-b9f6-7f21b4a186d6"
            }
          }
        ]
      },
      {
        "id": "52d7ae7e-74ea-4340-832b-9f8a25d5c361",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3a214dad-50ee-4a4f-90b6-63f836d01284",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd0a0e87-c2e1-4ac4-9c6d-fd4df11c7d2a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3368e1a8-3374-4eca-b6ed-7a1446771b65",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb5f5b6-12a7-4e4a-809f-a0b90b26f86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799f66fe-9005-462f-b33e-40879a50b689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125da80a-9417-4ae1-9b9e-137d41551faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6ee7841-5abc-4b75-b30d-c42537a83c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c73884-b20a-4a44-8f42-2e78668d2ad9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e84e854-457d-47bf-9acc-a3542a849c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855273be-00cf-422b-8c57-f3b957b0a994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f599a6-6eeb-4dd0-bb9c-369c11ba9699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed9f80e9-4c29-4c47-a7e9-b008627bf28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3d1c59-d4f3-4af0-a87f-6437bed1ca5b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e9cf39-f223-4fc9-9dd5-b284ac42252b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d6b5a8-fb51-419d-b42f-b17963e4e964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ee103c-48f9-47e2-842d-daf94757bf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "149a161f-c917-4c4f-9438-1c290101670b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66d3061-d3ac-4c99-8c9e-5fbbe7bfa9a1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698e0d83-4dd8-4bda-87ad-974c01037c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7e00ed-19e6-46b4-bc83-a5b6d0a23931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68918e3-736c-439a-b9b6-7f1f9ff09774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab667389-4e94-4c92-9dfb-0396043af3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3ad519-8237-4972-b856-52bc1e352558",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dbd0a8-c9b6-4ca7-977b-8d160f4fe1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6652f76b-09a4-4bdd-95f6-586722fd9eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a382e5d1-3317-4245-846a-99fdd5c85a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db3c6035-3246-41ac-b691-85a1888d37c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc2987a-77e7-4e46-acf5-1366666f256a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32753a77-4666-407c-9c7a-4b8a3e0cdec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5100d404-85e5-41a9-bb58-ebc127b08688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a29058a-9687-4fbc-a703-5d4243472843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9113003-b8c6-4b45-a9a3-1ffac8c64b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768c6644-f192-47ae-8779-6bd5d9b73526",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce765e0f-c793-4f17-b83d-138042a183b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d1f789-458b-4a14-845d-41889ec30061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8132d003-3638-4057-8009-439b8fc8062a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87674890-4230-4742-b610-ffe6beb3c447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a995cd-a7be-4627-a646-8a8dce36aef7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da49fd37-43cf-48c0-a934-a2bb9c85740f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c97a22c-1a4d-4239-a965-50190db6057b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2398524a-f6b3-4362-8db7-003a1d896208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c25f477-3139-4a96-93f0-2ebec975fe0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed51c6fd-7344-46ea-850f-b05dc8efcb8d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c612eaea-3dc2-4bb7-8ae9-14d2011780ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7456a8d2-bc5c-4aa1-868c-1d3db009a594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a31cc3-2703-4660-a780-808316628cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edacbaba-954d-4298-9582-969dc999b782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8648788-f510-4c4e-940b-9c84843095a4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad5d4de-9559-4493-a01d-d175bebfca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbff19e-100e-49cc-b932-ecb151ce6b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17284e78-8bc5-429a-b28b-9520a085e408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d6c20a7-3a79-483e-aec8-88d51c63fd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833d9888-ca73-47a1-9983-2ca7336e9f3a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b8bfdc-4975-4399-885d-ff03ea48bd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820b9baa-20fd-4813-a7c2-46786f62f07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ab4ca9-91bf-40a0-8d1e-a061b22beefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b94506de-ba3c-4f83-b5aa-eabe1eaa3346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25669b31-40b8-4f3f-8d8e-349338d2bf69",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6448a80-82e0-4e80-bcce-e5340e0eee26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa5b760-bb2d-4939-916a-bf2da3f229fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312554cb-b7fb-46fd-a5d6-0df5a4e3e129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3254c8af-01d4-4b24-849f-d8882a66e631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a525a126-5e5e-490e-af14-daf58bdc03d6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb74d442-09ba-4dba-9ffc-6d56cc1c4f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4caf798-1653-4a25-9764-fed369c88d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7605790-3305-4ae4-8416-41b19020cbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b3f38a1-09e3-4be8-89a3-e1e5ca1236bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba14afc-166f-415b-8437-b451ecbf560d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efed8af-5994-4e13-84dd-53cdad4bfed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ec80b9-b5ec-4ff9-84fb-5ab8676d2556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ab47e5-b806-4252-882e-83bfae53cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1201848-2b56-453c-90e5-963b25530926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d6d935-60d4-4b47-a447-e10956beb7c5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff2ad8b-cb28-4f51-9968-0544c42b03ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212246bf-1bb0-4995-928a-937eda8b93b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114a47da-4d63-444e-bf32-791ba7abb005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19f74841-1064-4880-91d9-600d2a0e8828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4436fec7-4ba4-409f-80ec-1ef4826bbc64",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4524ecb4-74f4-46e5-98b1-94da840ed3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373d526b-d4fd-43b2-8873-5e22a1ace351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39735c07-2bdb-4968-876e-68be13c90ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b066c21f-46e7-4b5f-94aa-01fb1596377e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff91d46-d77f-4ca0-bb6d-d97507a03af1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c203d712-05f2-493f-97d9-97aa78fb89e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4161c53-86d5-43eb-9d9e-acdd1be2e0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a07e213-2b50-4b69-94d7-37cde0a7d8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0f4f6a0-50a2-4356-b0b0-be4986aa57d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04888cc-7cfc-4ef2-832a-16e9b15d7a53",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32c0dcc-dc7b-486b-aacd-a9ced5db3661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52618ee6-511e-4b45-8659-70bfe0c06b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608f8062-3ff0-428b-88d6-b8b4aa014161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf06eb-84a6-44ee-9b5e-6fb5cdd0ebd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d27305-8e45-4391-9770-9ba139c57fac",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7c320b-7b0c-4768-b8f9-2243be53215c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142e73c2-734c-4770-ac98-440ae1aa511f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08e0f34-9dc0-4cba-87f9-b6eeb30bff6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e72e28f-11bd-45ee-94f3-552e36ecff46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5827b20d-4c8b-415b-9130-6eb640674fc7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295a2507-9963-4300-9ffd-4e0f2d0a8f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02365753-b9e2-4af5-ae63-8e5d6502704f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea45e054-b421-4b82-83d2-b06d10de3ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce5b637-36db-40d3-b3bb-58f4c47065da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95df12d6-1de6-48cd-aaaf-b2d053f1380d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d31f38-1e8a-4a46-9e06-124bd0e7cb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9735dd54-03fb-4849-b738-6fe4bfb02a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc6d9a0-0286-4abf-8639-8e4eeae2f7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d72b77-5662-4b6d-8ce7-a351f6dec3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef5589d-a260-4fae-becc-117d5ecb5b28",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5d7d1f-f0de-4c80-a619-26f288261e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f0c6b9-25fc-4ed1-8e81-68aa17032986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a715419-00b1-43b1-949d-46e0f03ed9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd608b54-78c4-4164-b179-266e665001a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f9ea1d-af0f-4db5-8843-423a0dfe6369",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d3a84f-08c9-4f12-82e1-0c6e55c53225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a2554d-d8f4-4eac-8bc9-62c21fa3a80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416fcb60-d4e0-4304-b044-9794548f0fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99b47ff1-adff-42d9-9d38-2a6b0c5853ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaf3e5a-99bb-4dc5-8172-ecb7ddbb45a5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74132e01-6805-4d07-acda-c6d521b3510d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd4b8c8-c467-4a3b-bed8-b740a16eeae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93547e8e-6b23-43a4-b534-6bf517ce1c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "08340ad2-2e82-4c26-8573-ed3ba837d5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b27f48f-a45f-41ca-b389-a07e72f3f3a3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627ee567-7c08-469f-b3b8-5e95959637bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7c29ef-34a7-4123-837b-1665d2f463c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4a2c10-3ca3-4ac3-9b35-fc6a98902613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd74df0-32eb-411b-8518-e77b8848060d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458ba6be-7147-4bf6-a936-da24c8e45b07",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e11fcee-8110-4ac6-a758-25f87a1cdd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40c355c-4163-4b0f-b795-43e8a66a9b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58afd6a-0804-406e-a289-16b1abea4622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf10fc94-9885-429e-a308-a50c5a00fde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efc6200-c7d4-4294-8de1-449bbf0cf30b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d9c02d-499f-48ec-a250-c1a88d5af200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f84e11-1256-471c-bcb0-a8cbeacc4806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a580a5fc-44d9-4cb8-b4a3-de55ffb58b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a13ad009-eda2-4be2-9f64-cdb0420b33bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17545dd2-b6de-4a06-b68d-038d59724a2b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa1186a-d33c-4379-b503-30a4af18a398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe401a5-3bf2-45b6-8ca5-d14ad5888757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0998c096-907b-448b-b779-5bc43b5814a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc109794-eace-430d-9168-051719bb56a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b466e315-b273-444b-8cf2-ab91a2319ec5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb87409-7cf2-4810-9fb2-02bb733afd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62183599-6407-4312-bf46-4d67656e65e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760e26f9-0c60-4867-b135-e08247e676b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8a5431-c9d3-40c9-8e54-80c1cec400cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40966a93-6705-4a59-ab98-9c3c1000af1a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6ea34b-bb1f-4989-ba1a-af5de3fc1908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c5f6a1-57a2-4bee-bff4-c191511fd518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38887a7d-3eac-4a18-bee4-0caabfa3fdc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd45b4bb-ab2d-4099-b2f2-c2b8ffa8b7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e521a177-98d5-45a4-84b9-09176ceb758e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a523e1b-47cd-4c14-adc3-65553a806a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b00aef-fb8f-4678-bea5-4ceeb6d3227f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103b64b4-ff2e-480d-9f82-b6c3f93870a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e27ae1b-da2e-41ab-a78b-a85d3bd0364b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83447d16-34e0-4a18-853e-064927051291",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9624e066-7479-4e32-9bb2-bfe4812c23d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f31869b-df53-4562-a53e-a116a5e43658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbef6442-af1d-4d5a-92f2-73b27b65855a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80156db8-3271-4a3f-81e5-3752a326b577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923c9d48-7f09-40e1-a271-7c5ad54f0b1f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcc32d6-3ab1-4c59-a7fa-58a2f40ce102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fa5bc4-c315-44ee-985c-994b89d5e6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09beb27f-bea1-4280-939b-048c1b39d9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4cb8db5-4137-4064-973f-c251e7d4f99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dadc539-77b1-4861-b9d3-04543ecb8bf1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c62dafb-ac7a-4955-beb0-f59db4973248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3443d740-17de-458e-91dc-0adc1c889955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7068a03d-ce4a-4f23-b48e-01439b2e984e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89a61cd3-efa9-43ba-9d73-974ba1b8a1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8b2b97-3e68-43a2-9342-45bf342422d5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79d3775-f730-4363-8bf0-a62741fae83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba548af0-f636-42ef-b61c-498554e38ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48475f79-8775-4cc2-9b31-6f42bcb0899c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf9dc54-c088-44fc-afdd-43554f70e39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f8a891-54fd-4487-8a8c-4e26c1a7b5ce",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb1a4f7-edd7-444f-8c70-b5768a7fb8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53c96a68-daa0-44ba-b83e-49a0a88f131c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fad753c-6daf-4e4a-a255-8413b9f31cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "537fa0b2-c8d3-4720-a8fa-9209f53e19a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10522b28-03f8-4bbf-b87c-b54b822e7450",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12f5400-f7b9-46ff-98c8-6fa8e791b6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a2a010-a289-441d-b48b-0628bf8f26c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e5543-4f40-4f23-bd41-dd2aa7fef574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb1f4fe-2377-4f29-a9e1-ef5379746cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231631d6-5ccf-43d6-b09d-d36b0e87384c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20027302-e886-4b17-97d3-830decf76a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74484ef1-7510-4dbb-95f6-7404c7d13a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed9101e-a943-4a30-b044-0fdd6495ac86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "016bf4a8-9666-4643-809a-ace7b0dc1895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a741638-f9d3-481d-adcf-0fef6d7be85a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b90c12-9712-41ec-a3a1-f926b638fef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248de8c0-4c73-43e8-b4f0-a41710f7727e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecd45bc-a1ff-4f24-a9fc-8f04ced89ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "19e4eb70-590e-481e-8866-def923b99393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c310dc01-2704-4ab1-8c04-eeb9434b334e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9259455f-05e2-4765-b3a0-4877c7618312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13346ed-83f1-4e56-8737-7f1d18fa1aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4c892d-42dd-45e6-9a22-eca7d839bd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4d45d4-6977-4c8d-928a-5262d6a35022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09901384-4580-46c3-a472-39a78fc44305",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70564c4-b884-490d-bd97-043431d5a4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb1fa54-774e-4192-8ce8-0c605e76ae08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ef9c84-a827-4f0b-9c28-0fd992584d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "417859dd-8585-4224-8cbd-a7e46923cc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e859db71-1d45-4576-a1d3-52441912f69d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e653a6-6f5a-4174-8e1a-d03473f6c451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af286918-283e-4326-8b1d-dac71e4794f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11907b21-374b-4328-b48b-0b8f694966bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "75c4897c-28f4-4acc-ad17-abd75f42229b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945fec17-c5d8-4af9-a8a5-8b187ba6686c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aae8dc8-f837-4544-87e6-ece46b485014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1e1872-5009-4fac-ae64-a0eac2aae08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5693f489-e9f3-48c3-b680-c3da1f102d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4f189f-2750-421e-b530-85d459d29152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54958496-b3eb-41c1-80eb-72272612d230",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b1faa8-0caa-41b6-802c-53fb5e41c8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cada9d-902b-4b57-9265-137d7d6245b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2ef26c-71c0-4ea7-a9c8-22f4aa6f48f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bea9180a-6f26-4014-8537-0a0a643884f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7905bc30-ace2-4d79-a4b3-e84dbda1c7d3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeb950f-bf2e-49ea-9af2-2a1900b5ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcfedcc3-c9d5-4a04-af84-dc57b73349a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1bc885-7c08-4d81-a2ae-d777505d3e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cbbfbf-73a1-41db-8771-be3cdc8094d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d137f8d-116e-4de1-9a3a-a7abbda3bbe0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f860a6-e08c-4e77-aced-1e5f5f24d563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a3a294-2d0d-4590-a53c-ee2e9b8a085f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fd4825-9151-4476-b7cc-031f43069759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c404bd05-8750-4fa8-b25d-3c4d98d67d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c052662-e213-49b1-9be6-ebd0453fad9a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb05747-03cd-43b0-a27a-9dc634a15b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20814bb-dc7b-4d07-a750-b96fe87543bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7daadb-3ea2-41d1-8d6e-2eb91571ee15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16be900b-9a45-4548-8e4b-d35b9fd5528d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3108ffbe-e7af-44f4-a4bd-fc441dffddbd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2037c58-c322-4a80-bbd3-74cc4752d7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caeecd2d-bff7-4dec-bcbd-93d58abb6967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e99f026-7cc0-4bf4-ba86-e1f2d02020d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "504c881a-9727-4464-a5bd-af613ad5474f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d036aaa-f6d4-48f1-9cd2-14e56c4cd0c5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eca681-d156-403e-af00-9a13b26e1556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc923ed-d6f9-4fac-a86f-ef43dfb84394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f5cbf4-8b18-4f64-8c94-b813deba1378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea6df38-e581-4d22-9586-b14891d77265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40c2c1e-4aee-42f3-9e75-85aad941d5f0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19623e0f-21fe-40e7-bbe9-ea537d6ee881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c00a99a-973c-4e15-b2c0-2346e5e1aa37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199e1cb8-55fd-454d-bd7e-f30c5f9f7d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9332992e-ef4f-430f-abdf-5d04f5ed5a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e3df58-f1a7-4fea-b797-d7f18c6d9905",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfc8288-292d-415c-8d64-54e0466b3d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071a1531-bcdc-4f0c-a2eb-4fb5f76ba813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6543de6-d707-4fec-80ea-4c28af1b13a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b021bb6b-4e0a-4b0b-8d36-8de07e0ded7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec087a9-54b0-4d5b-9261-565bb3a2dcb6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2983c867-9e4a-475d-a9fe-f75eabed0f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bcd972-9fb4-4a7a-8dae-95c790ad1218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6e76d0-b10a-4bc3-8bfa-946b651f0828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbe7c95-5403-415a-9f3c-0464d0080331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1d773b-99c3-4e54-acb5-28769c1969dd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3d5151-83d6-47ad-8183-b80942646ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa108461-fb1b-4ff2-baa0-4023292829a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e961e6cd-6fc4-4fdf-87e3-6f7f0b9ba374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1747f1-5504-4fa3-bd3f-e1bf5a9b1a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0922649a-5da2-42c5-844c-5e17dd9a60ed",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60309efc-e407-464b-b24d-3a751536b2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d21156-a4a5-42c6-a7b3-62b66f01f729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e29d0ff-f546-4fb9-b07f-fb7f8e53aced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac66b972-c93c-4993-9c74-7210c199aa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d041df8-bec3-4ffd-bcab-cbebb5c2cd7a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd77b1ac-0959-4250-a00e-f0a04bce00af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2edb20-2035-4438-bb7c-e680d249837d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13f9876-eb56-4569-bf39-c3db11896844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b80fe74c-4121-469e-ab44-26fd6854c961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7c243c-c6c0-4da5-b70a-0dc1f4bfc881",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3697760-6841-41f3-bae5-3dbc283dfd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fdc5b9a-9e16-46fe-a770-41a0b9c17b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5592b24f-7cb4-415d-be4d-48b3ab126255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "47898d06-deb7-4027-a550-082bf7b0d94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c6b208-ede2-47a7-9b2e-b1cd8448d06e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbd881d-6d3b-4f3d-b866-1b640507a15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e96fac-8375-46aa-80ae-9335cb7eaff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518b8150-8966-492d-acbc-3449582a5409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2805c49-dab6-4a7e-a27d-05a9b7f7c347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8430ccce-2765-48f2-9e68-619eb5b9e340",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a3ca9b-ade1-4253-8789-95431deed1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3b38c8-f259-4489-bc69-33959edb225e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97b0dd0-a48a-429d-af93-83ce2a57a05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "727266d9-099b-44b5-bffd-2dfcf8e876db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d90031-7b36-438f-b043-1b71dc0d306e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d913286-a628-490f-8d3f-4eb0b8cda67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e11d81-7d1e-4d9a-9dd1-94174531ae4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cf0d4e-d7e0-42f2-93c4-1834e6f11b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "025d665e-4c7c-4af2-9b78-42d67aefd8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fbe6b3-95ee-41d6-bbde-39ce24192030",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f16d6a-c093-4d32-b88a-c2dfbea28250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adefd3e9-64a9-44e0-9ff0-56e4ef449781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e9718d-3a26-4425-84a8-2f79a5440368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c9ad0a-bc2b-4feb-8db0-7367767ee809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22bd46a-0eed-430e-b50b-f584b9340e8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb64ac7c-6f63-4e4e-a0f6-4367774cd883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfe054c-f6a4-465d-904b-4f7759823d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf19040-afa0-4bb2-bb26-25b6096f5a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4380fef-1149-45ac-bb83-e36c78b217d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccb7e28-1b61-4d4b-a71d-60841ba894cc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdaa60f2-8c60-4aa4-832b-99d0917fae84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888e563b-1ae8-4c1e-99e7-0515633699cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15980a3e-c89d-4c2a-bcef-3ec110897c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "501b4f94-bd4f-4eeb-a9d1-bc2e8c596ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1611ff05-8cec-4c4b-804d-5425259a2cd6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b2f7f9-e409-49ac-b88d-dd1483444837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20268ad-473b-4812-bb8b-740a0b45be68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96603d23-a2de-4297-983a-df4dd754c40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cfa1e7-1feb-4100-9c72-0976b85d900f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f805ec-acd2-47e7-911c-cd449b26a9bc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2394ae7c-71d7-40d7-97a4-37d6021c32d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f78f9cc-e25e-4bf7-97c1-5034c6510e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b424ab75-035a-45ab-9134-0ad1c7e57fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91a7fdb8-a74f-4436-b693-00e891ab3978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95904375-9219-4630-aabd-c497e757eec1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ca280c-31e4-4973-94fc-38f387d769b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7dd8b84-c5f1-4478-85cb-0f5e48c1d074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46052813-6e1b-4aaa-b147-e3011341cb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "434d297b-75b3-4756-b4fb-6b571d47d692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183d259b-0971-4921-9886-cda8cdb82a48",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b22e36-f3a5-49a8-a284-3adb0bcbbc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a070c2-21d7-4dc8-b0a5-2da2723bcb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f935a54c-1fd5-4516-80e5-4b40b4a81dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4372a9-3123-466a-a057-c485d31b6c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ad0137-f366-485d-b973-edc4b0db0eb4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7d3ec4-9c0d-4836-9667-9d836d19860f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889f39c1-098d-40a9-a9a6-3736b77da5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931e7ed9-db39-4615-a8b0-cb5d8a1fe02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abc95a52-82e3-47ba-94ff-7afb7070cbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cdded3-b9d4-49d8-aa92-9541c240d809",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f26a2d9-f5e6-4962-af35-d6eca6d76e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1ec725-0e54-48b2-96bb-fcf8be0a4d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493941dd-5d10-4203-baf0-a7b2e203b09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fde1e29-2124-4d37-8762-c42c85320758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712e73e4-5afb-4d19-af22-4e7aa19d00b5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386edafe-f1ca-4d87-ab85-d51cfe046dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188cc97e-9736-436c-b0a5-a915dcad3947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fe2c32-2bb1-4472-ac64-c43a2f0d2601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a71028b-3e0f-4e24-ba02-8a6d2ae4562f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb90d70-e2c5-40a2-be2a-f79bb4c3e3c7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf10333-8eff-4b13-9099-36d563829121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258a4b4f-cf60-4d77-b69e-7030f665c228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175c29f8-6a98-4c09-be05-c1f2c680c661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2102fb16-7bda-4ede-ab8e-61a9c12ee461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd173e0d-3a32-466d-9796-59dc2a5f693e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c810430a-da27-485e-8d29-4c3f7943ac35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408bc383-80fc-4799-b8fe-8d323c42ab39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1560d1f-9492-44d6-99c9-914b19bc0b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6384f7b9-7922-42bf-a640-74000a4bc1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cd1255-23a4-43c9-99d9-23f902f6de01",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab4b792-88c7-480e-b1ed-81172580a7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f592c5f3-859d-4f35-97bf-deca85b44005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62bd636-d6a7-4ebc-8120-015736b9e587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eaceca8-84cb-4231-8d4c-e428f433c8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0901cf75-fcca-4a9b-a5d8-5d0c2f083073",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b128ea71-2649-4779-a1f4-15fedf0287d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f09305-6297-41b5-8ab1-90cf95283ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3602c282-3b80-4fb5-b162-b449da2c9b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "063f1937-6a4a-423f-b68d-3520606fa29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36aa8ff1-9a86-4dd7-afce-1cce1d0a9569",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475ff70b-a377-40f0-b26a-ec040ec64375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d222842c-00a9-4072-9f65-5cb76740385b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307fb7c5-e1e1-4988-8816-0f0b4638dd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58895e4c-7df1-4619-a066-69fd3f659829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c2fb9a-e8d8-4ba1-8c79-a0167e07fdbb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e160f44c-105c-4c05-b2fb-1da258f0b7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24eed9f-0f3b-43e8-82e5-d08d593fd04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1198728c-7c91-43a4-a636-79a56dfa2d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b00cc05-360e-439f-8ce8-fac3ce77ad18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e54fdba-e6e2-4cb4-a514-e5f3b2d893c9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c78dc9-2809-4bbe-941a-ebdb7364f92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f2aee7-adf9-4a4b-b20a-5382f1327f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f234997d-d08d-4f11-8d0f-2f6c8c8a8afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7dab91-cb23-4605-95e0-ff6c0e129b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b90adce-39e3-4679-829b-1653ea42853e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea688e3-1e69-46c9-b68f-c012dc63538d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e90d25f-ff18-4f8c-a4f1-cefa1ba3fd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e5fcf3-d05f-4483-8cbb-2c8f20f8a7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68e9094e-377d-4cd1-964e-d27778ed1c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b48a871-236a-4ce3-af06-9bb65e783d76",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d276c499-82ee-4692-9fb0-696e5391b377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086ca73d-938b-4631-b18b-2eab0a22e6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d2b9cf-54e0-4a22-91d2-2c7ece3c5210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e3b0d14-47dd-4d19-b006-b3c3a225ec08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3361932b-66d9-4ff2-82b1-e59380460856",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2a69f9-b9c3-4e8d-8ff6-bbf8b4340bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f9d1cc-eef2-4d99-94fb-cddbe31d9c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3001a284-14ab-4cf8-b63a-5609bdcfacd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f916acf7-424e-4558-ac23-039c7da50786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06440fa3-6481-402b-b36b-71f3d1b6ed09",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f042229b-2e43-435d-8f4a-38fa0d84dca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3545d851-34be-4b00-8f16-5a9baad586af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87caf7fa-fa4f-42a3-a303-24decd511a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6c1815-bc60-4b7a-8a92-1291423bb308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cff7572-a7a9-452d-b425-d2beb469447b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270fe464-6cfb-4aec-a4c3-3ec476ed2dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de9f45f-d0ec-49f0-b6ae-4badeee51fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964af59a-2803-4e35-a267-a7a964fd8433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b26b2033-5b9a-4703-a1cc-595c21a3f2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb564f5-9f87-4dda-9496-99c96e21b171",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f829d39-7b5d-48d3-9b0a-2c1508a42e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4decd0-4fb7-488e-a787-e5ab9ca5d714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ca855c-ed4c-470d-bdbf-d337aab4b185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc0fd52-ce37-462d-a926-fdb5e94cb8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13309ac1-e0c7-47a0-b2a4-3a03f7a7676e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece688d8-42f9-4ba7-b4fa-a0ca174dc62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b17aa67-a9ed-41a2-bd62-7d5c09aca6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a283013-63c1-4a7e-b2e6-f0993c8fa5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df15fda8-a7de-4a04-8053-445330b13f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d377bc4-73dc-41f7-b6ab-79d7de3fb321",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd06e1ff-c93e-4c74-bdaf-82fca70692f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f3a9b3-5f97-4f95-9dbf-b81405646f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cdf299-8681-4f14-8a7a-1fdae7f77151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c701c7da-f14a-4c30-a325-d73e95a47205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc83832-18e9-4e34-885b-e4ba11a1d3ac",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307a072f-f89a-4610-b2fa-136f21cfd0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3d2d0e-bae0-40f6-892b-30ae94c141ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf352b16-32b8-4831-86aa-e119ef285758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f8926b-c7d0-490a-bd51-2592de81a8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58445fc-0bb6-4530-9c03-6882de2c98eb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895445a8-e6b5-4571-9899-0f573de176fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52dd389a-f7e3-46ee-a5f9-3f6f455847ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2a3f2b-a473-4e17-acf4-1a299848df3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c29ba1e0-61b4-4ae4-9782-2cb0b60c986d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feded5cb-568f-4f98-94be-e9bf3f3e8e2c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d24073-4d2f-430d-8948-95c8609224c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadf6265-1765-4881-bc27-d69121ee4fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6222ee5-1747-42a5-852a-abc6e85c60d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d15fa68f-231a-465d-a388-c5d9d43ef623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430b2254-b4ed-463c-8802-b84ac663e408",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf5be9a-6234-403e-a445-25f738cdaf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3352eb5-5020-43f6-b0cc-76d890b50578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5db6f5-c7b3-421a-a46b-8155d1ce49a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "61ce1455-2749-4b18-914d-d5fb1964efec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ffc620-4f53-464f-80e6-7a70159177df",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349c0bca-6499-4b4b-a9f1-bffd9c717416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a36ebe3-8648-40db-992c-631a62bc6721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711841ac-836c-40c4-8526-60b299b9c8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7f2b57-75aa-4d77-aea9-fed4b2c73810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527b32e0-7c03-4bf3-a105-9e9ecd5e6096",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5caaddc-2282-46b4-ad85-09dbba2e94fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032c53a1-c905-477e-94a3-7b3ab7854bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df0313a-43e5-4600-9b61-5ad8b06188b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "12c174c2-be78-49e6-81f7-0e2f0a8ef459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbc2843-f6d2-49de-ad45-c225cf71f0a6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5220db9-ab0f-42d1-b8fc-683608ea8152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faeee5eb-a62c-41f4-af98-22d28538d992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5eca8c9-0559-403f-a1fe-d31911ca2383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfae5d9d-79a2-4d37-8db8-9fed87ab4027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa70dddb-914f-4048-8044-81b7f9b4e62a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fb06d2-8463-4652-abbb-957d6872d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "83f4d951-25bb-4bf7-95c0-1aa8232d63a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cc9e27-9bc5-4dea-b1df-c1b70757442d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "498b6d8d-1689-4e45-910f-ff4813ee292f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "78c52870-96a5-41c2-bd1d-7766358c402d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0c7d282-c2d2-49df-a71f-00bfbfcd9944",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be25ec95-649f-40e0-8e86-990abddd2dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04e4f889-df48-4a16-9f6a-665565fc7ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6808b637-9fb7-470f-ac55-27fefabfd0fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42b77916-7abd-40c3-aa43-ee1244c45c50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a6d4813-6227-41d5-ae28-5ad329ebf912",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07735287-85d6-4fd0-8da9-5888e2443059"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09c8ffe5-e89b-422f-8df0-a0836a6c8ed6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "402c52f5-f6bb-48f4-b0b7-d9cd31d287b6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "77c602c7-c89c-401b-80d7-a43d92161252",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e32db02-36f3-44bc-8818-53fb24e2938a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4aff59f8-dcc8-41e6-bf3f-d3ba3e09ec6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e01e0962-a969-41b8-b245-291b78b5562d"
                }
              }
            ]
          },
          {
            "id": "3c14f337-35f9-44f5-8307-02d2aad8389a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3fa14b03-13f3-4144-baee-8c75ec365f68",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7f41b0ab-118e-435d-8c8f-ee547f8cb7ed",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9edb920-87b7-4568-815d-ad5b7351b6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8cd72421-e86b-4dcb-9765-1c560823b74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be9891c-cbbd-4d40-85d9-976ced1943ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4f7c75-8230-49e2-bca5-1a7fe6b8c365"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "531f1e54-0e75-4b96-888e-4616959dbffb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ceaa1a77-1c13-4c26-a5fb-3f3f804c5797",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c4dc439-d56c-46e8-ae69-420fe8d33901"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54312a22-a11c-498b-b2cb-2553ba6fc169",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "61804b24-de1b-4073-9251-b89f66eb8ebf"
                    }
                  }
                ]
              },
              {
                "id": "edcf87f7-fe50-477a-bd2c-605a0d10eb3a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "235c6b68-cc92-489f-a450-c6375c6291bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5eba1f3-b09f-4107-a782-e87fe8ecc753"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a97ce68-d2bf-4e2c-89c5-f8a3aaba6235",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0459330b-e827-49dc-890a-4f58f5b80437"
                    }
                  }
                ]
              },
              {
                "id": "5c7103af-1bdb-44db-b0ee-9ff90992e757",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "382ba3b8-d9f5-418b-9808-ddc0e0d7b62a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b9b0b0c-70ad-4999-bdb5-8c1aa357a547"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "937d06a7-99ff-402e-92e8-75a9e0b1d892",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "23ed7cc7-66fa-466b-b783-deeae93333aa"
                    }
                  }
                ]
              },
              {
                "id": "beefe439-c620-40e0-a101-11c99ed2d098",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca60487e-fd1e-46da-854a-4592c16d3a46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "920d6634-059f-46b7-bfd7-ee83d720c127"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43323dea-51ce-42ba-9890-067a3338a893",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "40183754-e801-4e3d-bf4a-22c673e4e6d2"
                    }
                  }
                ]
              },
              {
                "id": "1129fd4b-a79f-47a8-bb36-64700f5e97bf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1b15cc8-006a-4f6f-9317-be8f9e9ba0c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2eeae47-3706-45c2-a196-1c914be50b37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e02652cd-5dc0-4363-a075-59160dae4a9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d27b5ee3-4f93-4ea9-a28c-79fbc3fc68a0"
                    }
                  }
                ]
              },
              {
                "id": "5745fa21-98c2-4d4a-a918-e22145263084",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "646b5809-7781-48b7-8852-e7ff50c5a003",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da60e239-b89a-44a0-b6b5-0d6808194ddb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8d612c5-5299-411e-a4b8-221f9a4db83e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f05cd913-621f-4a16-983b-f284d6a8fa34"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb6ec523-2f15-4220-a332-478642bbba76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bce1b0d2-f5b4-4863-bc57-832ec50ea403"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23dc8c92-17ef-4099-82a5-054fe6ea69eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5c86416-0f9a-469a-b81a-2fb9727d98f5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12b3b38c-914b-4cdf-a8d4-80e0f66898f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "823ccfe9-b474-4f09-a03e-cec6230ac461"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "296833b8-0db0-4b2d-8194-62214107c698",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7573440f-eb12-46b3-a28a-34a898539cf7"
            }
          }
        ]
      },
      {
        "id": "a13dff2b-0625-41e0-af77-99f4c5e30960",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6cb5a701-5cca-4c84-a3a4-b12bceab3175",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a307719-5f2e-47df-85a7-4798c579aec0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04fd3e75-80ce-4781-8864-b6d564ba6e12",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae57503-5f39-4419-a185-7cf79bca68ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafaf06b-f66d-4d2f-8533-e2f584c571d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91695c75-398e-4bde-9258-30933125d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "597a9cef-9fc7-4b10-8628-5c0f2289ae83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f132ab94-af75-4d5f-8362-29a8eda470c8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ae5707-1e86-4c57-8bf5-18ec54927a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f83fe5b-9c3c-4211-bc8f-0e64ca418284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a94296-0769-488c-a16e-4e9991c91d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94be21ed-fb04-4a7f-b0c1-5dcbe743f832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacc1719-a179-4311-94c9-c4abee9a2d71",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2604f718-6a44-49f8-8342-2fb580d5a1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff3bd5b-7d7c-4ca2-802f-d2872d396ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a25cf91-9e88-45fd-bc01-53c9fbb536ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fc6100-3ae7-4c11-a992-dc8b31ce4ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf8d620-0fc3-45ee-b799-ed9cc71588ec",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de2588e-ddaf-4444-9d0b-45008487fa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4e32f0-53cf-4397-90fd-4c601fa558ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314ad7d2-6bcb-4125-a63a-643f8961346b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d681802-06bb-4b56-a692-a0f7c2f156f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d570ded4-04b2-4197-90f7-c5402626ce00",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59637732-458c-4433-ae51-45c0829251be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454753e7-7431-4a44-ac68-22943c88b386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b608210-477a-4b0b-a70e-daec88ffd649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46f48cdd-b6f7-487c-8fcc-351ffa1fe6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9e7896-64d8-4dbe-9155-dfb5f45a9699",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17ea778-e7d7-4ffe-920c-3ad3026abacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cfd505-7386-45b5-9fd0-737438b941ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5449a8f-e79d-4c6b-8786-091e74af7b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbfb0e1-080f-4af0-80a7-6cbebe4edcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45575741-ab7e-4e16-8cfd-02dc17b19018",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf1c1eb-14f7-47bc-ae0e-20c7e4babc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b686ad7c-f160-4772-b738-0c7d7e62aade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3606e1e7-7da0-4cf1-a071-cf73ad4aa3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "909375de-15dd-458d-abc9-474ee207dd14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49acf23d-b852-4bc4-b075-52a281f4f13c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380afc0e-27a7-4a73-9e7b-574825d83a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967f43ce-3e53-4e47-943f-4fcb6475815e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e6cea1-1403-4c24-8d56-c7ba29cbcac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "570a0880-c076-486d-8f67-e174b623328f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470040f7-6a7b-4c16-ac69-70fb5e38c060",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed009b54-e9cd-4143-a631-ff9a794d84cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66eccf66-5cbe-456b-a3e8-bc36aebcdd7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b7a7ba-a8c6-4179-a697-939bb81029b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e47881b0-bab8-4029-82f2-6b1103d1f84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3ece00-3d17-4c37-abce-0388e4616fe5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6064efe4-f4f3-40cc-83d8-3ea18397c4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a00f66-ad03-4789-8d49-6497a8fbb49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2dc7056-6f13-4cdd-83c6-56ee1b982ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a8e0c0-7fe2-42dc-88ea-4b6f89cb4741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca31b42e-df0b-4397-8a44-95db30a4868c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c736f2c9-82c3-4f35-b922-48201abb7709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872f7e0b-24e5-484e-9eae-593575ce79de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64a273d-da4b-4df3-a948-d05b88ca6f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3802ccd9-8f60-4136-9d0d-3720d3521450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc72e5d-76b2-4918-af9c-9530525afd99",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34adcda5-a33b-4c1e-90e9-6539c65f5336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f164510b-4f2b-43d6-bfa4-873c8a61e7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2e3259-c513-4a8f-8992-d11d6013279e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e0c56d-27da-4bcc-8194-8addbc126251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f90f163-2e09-41f6-b95d-01d66793ddbe",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca7bc68-62e4-4e24-a61c-81e307511a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754d4638-5dd3-4d12-91f9-c4dc1f79c83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef200d6d-ab61-41b9-ae71-d66288365a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e1ec05-c025-4206-a24d-e415d595a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c41899-f149-4822-9c23-3d4a2e483f4a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a057b64a-c5e5-419e-994f-0d509c53f188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe509ff-ea0d-4b72-8c13-0a44dcf1db34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7146ce8a-2c17-433c-a9fb-a06ed336feb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3747d12d-2a5c-4d38-9aa3-81f71c291fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fd2b1e-659e-4a4d-8d01-5e4cf5bbb932",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e1c4bb-1246-4a43-8bf2-7eea9e55d4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7e4a82-ed7d-4992-bac3-53487c2cae55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c91e65-7cb2-4a97-a7cb-7c68726214bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "221fd909-574b-4fec-9d09-52cd94fd9e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41728448-5f23-4737-9bad-8ff7231b5625",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9444b4f0-32f1-417c-bbb4-e9609255b2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3edc4db-d9c3-44d3-a7b2-d5dfc84f995e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a979b36-4c82-4fa3-bfdd-81b8955ccff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e7f7e5-13b8-4b5c-85dd-a7216a4b83e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3770ae28-32c2-46cb-b53f-e93007d7ad44",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30419c65-5e00-4713-a3fd-5ffe987f8e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1e229a-09eb-43e2-9b7f-b3dc9ef61883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4347e4ab-c3ff-4eb8-93b0-3888fb5400ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a35d272-7126-42dc-b818-3b26c2611441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aeb48d-8306-4e11-9dd4-94225155c1cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca94762-538c-4a52-9471-8160be88ba48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683e115b-1219-449a-86ff-d561a83cc0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17427e92-0285-44fe-a086-be5d828cc529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ebe134-8443-476b-a4d7-26cc8bbd7b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581294e5-1650-4041-9248-477ab4d786cb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5bb704-169a-4972-91cc-2fbf48b4217b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78fd875-41d0-48f4-a9f0-fa040e47460d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11284713-7084-47f9-a6f0-e78bcf182020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88f980f8-dcca-4771-8261-25519013641c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e29939-78cc-4cba-8532-5025d4dd085c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ad5a2e-95fe-4e5f-8589-f7331077f0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23690942-ded2-4e3a-bebd-0c2a62f8169c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd039162-c4c6-4342-a24a-2534639f34ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3dd70d-011a-4c29-8d30-55cbf393e770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d868e351-e445-4223-9cc0-21767858cda9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acef43a7-f071-499e-a589-d22b76d7658f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff54845-ee47-4a01-8c78-24a46668a103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95f75a6-2277-444b-b1f0-e80adf3cdb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e04e75ac-4ebc-4d5a-ba55-153cd1e7598f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241b0023-a5bb-48bb-b571-9c052aec0ad0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde1d381-5969-4664-8d1a-38fa3991616a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a8371f-76dc-4ca9-97e4-15ea15057439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c8f9b7-14fb-4256-b241-92670691f382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb997f4-6d3f-455a-8d2c-2b8d5803a042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2922a970-93d4-4786-8853-ddd46b5419ea",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7190df41-e8dd-4236-b81f-7b829b0022da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d55d25e-08e4-4887-ad7a-453013e2247f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d30882a-07c9-45c7-b7ad-d6ae1a707192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da676b64-ae76-4ebb-83d2-025cba6a8617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237ef09b-51c0-4da4-80e7-941205029e2b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0365cfa9-6c29-478d-a59c-4036ebaa7307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33db4e59-6417-43f2-9a71-e6578b94483c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a16fe16-77a5-4041-a196-ad542e23c13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03a2a406-d8ef-489a-966b-f66ddc13de44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0fec24-5f0e-474e-91b9-5cfaffafa838",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7341e952-8bae-4e5d-90c7-c4b3c3cf76ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d65df0a-3e1f-4616-bb34-cd7624779288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa598956-4bb9-4104-b800-039b56f7d9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a28025c3-cedb-431f-ac5e-223ee570a294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b64bde7-e66f-434f-a3e1-b87b51c49790",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d53e454-1e2a-4a68-91c9-2f5ad7f490c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f9aae7-667d-4f16-b9c2-0623c6940319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d137b0ed-855d-4d61-84b3-f347b34e373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44b4a889-cdbd-44c7-8027-d75d720925db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5499b75e-933e-48c3-b687-4a03704cda01",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3a69d9-b322-4ee8-bb7c-ada93faace57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5e6a16-2566-4e55-98d1-7e3900a7ecaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e28726-80f1-42f4-9b29-97fdf3755ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6983fb-d833-49d4-80a5-49135dc6f6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815b2fb5-d5c0-43d5-a7a0-0a8088a89d7b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afad87e-13b4-4813-ada5-fece6640380a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffde708-0531-4687-b968-ac98b445aaf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b215bd-660f-4fea-a299-e46554fd8124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2564f8f-3a90-4447-92e1-cd47cd3632a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ecc71b-ece8-4917-8036-f5d8e580152e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d86d6a-63ca-4948-9d1f-12f385a0e1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d6e4b8-45bd-4c54-9efd-c22dbf621232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7685339-8f99-4b89-ace3-dacd9c32ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6822e9-6e43-4b77-9a54-ef4ae764ecec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5c1de5-cb36-4828-b75f-2d812494180a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb66ab12-0fc3-4242-b81f-38c8c5c48e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76748c10-fea4-45e3-998f-21feba37689c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f78a7e8-d82a-4715-a891-358da666f2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f79e85ba-9327-4911-8e0c-a9deb051047a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df780a3-1c6d-4e2a-8723-ab8f1cb5523b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3806b8ea-a9e3-4f1a-954c-89bf9006b5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3a7711-9235-44b5-9cd1-d65d4627213d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ded0a-9860-4351-89b4-dfd41eac86c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8ad13e-243c-4742-982f-e6830a6b46ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187ca5cc-9f11-4302-8ff1-33dc89484999",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd56b52b-7b35-4a5b-b134-046b38521cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b10d84a-c9ba-4d0f-af33-ffabe77729ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639d80b4-4d65-4330-9d90-66a752b9ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a20ffd-aac7-41d2-a199-b26a01f705a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "09b13fc4-dc2a-433e-9969-755fb06dda88",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93ca9820-c3b6-45aa-ae01-3c463271a9f6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e26a06e-ce7d-4ce3-b408-2d5599319199",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a4429d87-20c6-4171-b833-368f78e09dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42647a43-76ef-4dd4-974e-48c575e86234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8c518e1-9419-4588-a8bd-3ed8cd4c0321"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "425ec49d-7c17-454a-8d2a-265703e383af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a703565b-720d-4380-86eb-90796c7c9dce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f8641b-b327-431a-9a5b-d42f4d7f3c09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d899c9b-b275-401f-a51b-92525dd555ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf51791c-5e44-40e8-aa2b-e1f928b4d38f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b65ced2-2f0a-423c-8490-34a44bd75813"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d93841d1-b1e9-4f1d-829e-54e90ec35c9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a74b3e7-a2e9-4950-9f01-0bf117c483c9"
            }
          }
        ]
      },
      {
        "id": "11c789e8-29f8-4e7f-973d-ed25fcb7f913",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "bec3dd08-a191-4d40-a3d0-b5623a66b695",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61d73dc9-cbc5-432f-bee8-3d8785d60cb0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f9e21aa5-464d-4765-b114-5c549c0de609",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8116d898-f501-4460-afcf-5475cac41405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5996a4-9d8d-4435-8277-f3fad47ce22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e616857-6d6d-4819-89a4-85decfc31437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc0a046-d6f9-4304-b9cc-f9e8ea71c2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b420d1c-22ad-4172-b8f5-fe6ce03cfc5d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df20e6a6-0241-4ba8-9c60-8b3f611abfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613c3b91-2fda-40f0-8c2d-011e82bfe675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd1d00d-be25-407a-a325-44bd8b55c52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a12f467b-6967-4269-96df-f1488d324254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c8c756-f374-4970-a4ca-2fb7c63b14f2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720331ef-efc3-428f-b7ba-7a0dc340085d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4cfed7-251d-4694-8f44-7ba99a41d4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d435f26-d191-46f1-9009-4647e9fa9fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3335bd79-4a22-4ac4-b216-04afec6cc8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cacbaf-1a0f-4551-b96f-60f4a0e40075",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc5a71b-a701-471c-9300-4d6489103c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a59be3-1824-4fd5-96fa-d21121b1f4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4895515-2641-484b-ac30-12387cd11e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a307cf6a-bb85-4622-a8b9-a903a893c017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f908555d-514e-4c96-ac16-6f560653852a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221ecc30-abcc-45f0-ba73-84bd6b2fb51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2b2d95-302a-45e2-a91e-757c6be1d601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d338625-7ff2-4c71-96b0-2d0661a3363b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d680fc-7070-43bf-bcc0-bb881ae78181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb09289-7f98-4e5b-b66c-4bfabfcad2af",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8870e13b-c282-4046-ae67-a8cb47c55271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5ead0d-5b90-44fb-bebb-8d2905e581c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a1d09b-96ff-48d2-a426-660a46d2cedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad435709-52e6-4f2b-bc6a-f851b4be9c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53720cc8-ebc7-4ecb-a398-c564f7b2ba6b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bb9b6a-7ee5-47d1-b008-5b36d5e5522f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c206f1b4-b34e-4100-8cb7-f560b601ff6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fb8bf9-974d-42ef-a051-2c93f6b1c016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "56c22ac0-2cd1-4646-8eb6-03587a00d959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa6049e-f168-4500-937d-5a8c4f495c1b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8517decc-0ffd-4ab2-9219-3c85a15d2f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f515e55-6642-45dc-8fb6-8f25c54ad59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580c7a50-89e0-4725-9269-fee7ddeac007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce42dd08-b156-47a9-a5c3-49ef0dbcd2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e88e29-490e-4e02-aec5-d32059eb8c48",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b7b1a3-8fe9-415f-815e-5b3d3a25ecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057194e2-6e4b-4764-ad04-a410a555a1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde26354-7272-46fd-8b65-60e8571f7f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "576af05f-79c4-43a5-9101-83401678f3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b68a5e-8979-483f-9384-673d41d33e6a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02edd05-4ddf-4f72-98e7-52c2be52a4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2940f173-5546-4838-9ef1-e7cdd0134ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c628a6e0-afc5-45c7-b8d1-e1fae8dbda22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75956706-5041-40dc-a3ea-81b297223482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c55438-06d1-4bf1-be23-2708beaf4546",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe20535c-54ca-49d2-9a57-5a8e3880ce87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed82b78-1b3b-4c84-aac0-5f7b53908bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eeda5e-57fe-49b5-a7ed-56f5a007d5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac19224-eb0d-4fb4-87a0-513e11f8df1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e80426-8be4-4160-b9b7-3db52547652f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65014c42-c373-476e-a3ec-683761e4ec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d3c694-4112-4c51-a885-8b3ab3d9ff4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d07084-25db-4d1d-aea5-0df395e96133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7dfb69-a98e-4c97-9947-35f119b51a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607208aa-b9f1-4b58-a760-8891b301f202",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ec5e18-6572-4472-b4fb-ca9923d76fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce112ba6-5c26-4810-8228-b0ddf6dc1770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a62ea4c-d90f-49c9-8e2a-bab01b61d2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a42187e5-7397-4d49-97c8-492b1f7621c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25fad0c-599c-430b-a6bd-b8756de1567e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c10ad8-2166-4612-96d5-9d188d34e1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ed496a-571a-4c43-a451-b824797ec7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535f8201-76f6-4d23-9811-1535c5cf7ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5988532c-3020-43b9-8f76-dd8928e7d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281d923c-a95b-4805-ad4e-7e6920a1b73f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f1727e-fc85-41f5-8536-27bc74cc5e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f45b69-a34b-46f4-8e31-faddfe29da1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97df963f-d194-4825-8f24-fa0a57f0b0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb51a62-ebc4-4e28-9724-02dd9a29cdf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d5369b-5558-410e-abb7-0d27394d2e60",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5cc3dd-369c-4eea-b13e-eb5f1b23a078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1557c507-0e1c-4cb8-a10b-f73a686848ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982f7d78-2456-4c30-948a-b52be5e8f87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11a28aa-4f02-4299-bbd1-5ac8e249d896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15bf4cb-bb5f-400b-b9af-0509d57bc7f6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fbf234-92f4-4103-8a9d-0b29e339c4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d792ff1c-8841-4d9a-887d-631300663147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d776134c-3618-4147-8965-c9306956628e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "68fb117e-c080-4c45-9a05-8c9bb3d80618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7d1689-4b83-4d47-a97b-8300702476eb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd83b20-a1eb-48e4-bcb1-1f827adafbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f565b132-ea45-4be5-a4ad-366a86a0c768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c68ef4d-500b-48ef-9cfc-774a092c04b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd69e02c-e743-44e5-88b5-ad2a6f1783b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35347590-57eb-4abe-9eb9-a3bcef9d2941",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cbd014-6262-43d5-8ace-d7ec38278d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b19cbd-515d-4562-9285-15ea72d6184b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f31289c-1d5f-46a1-8ba9-889f49b9de79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa0e4f6-8682-4e15-8b36-00e45a4a17fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1e13a5-391b-4e74-8f11-090baee952ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44719896-c1f6-4c07-a895-fc652179bf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e7e5c9-387b-49aa-b9f4-3f644e2bbf30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b34392f-399d-4a93-8289-86c666355118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0d0b38-2484-4276-ad1e-b2b2fb3bb3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6bf5f6-40a7-4b39-8fa0-5bdd3961ef99",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1dbef3-a1ea-4f71-9705-345a7141e33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d602cb-9cea-490e-ae90-1bcfac1aabb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf89afa-00f0-4c08-9b58-006789b31738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2db3be24-827c-4d84-aacc-5c7e24c26bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d59f78c-b993-4ed6-83af-2d87bb9410d3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db91bc1-09bb-485b-a3fc-752f139a1c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b576c6-5487-47c3-ad98-7a9a1c4f6342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9f8b8e-3e9d-425f-9c01-e9e7456ebf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df9deed1-8ea9-4c57-aede-27d4e86ec204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7477a92-5762-4e3c-8e24-2215eed6644c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a01064-a7fa-4aa9-885c-fdd8c08b396b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275e637d-8599-497b-97ad-86ce63b902b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f49317f-54f2-4342-96dd-677125ea6338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47c84a0d-4072-4cb0-b34b-d66b937e0c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3835ac6c-e726-442e-87f4-c436eb83b915",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310379fa-edde-47b9-97cf-dfd6f7f39751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b53880a-8b38-4c84-84a2-c868926fa9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c45a752-4d17-4645-801a-f4bce3bc67df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76a72fa0-2522-47e6-8d91-e0e259e0b916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20a3446-c54d-4c1c-b5a5-f184917b73e1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92d1b00-b845-4104-85b6-2cc784a0301e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7faae4e9-517d-4478-8bd7-e83c0d42f837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585a77e7-c451-4175-80fd-50cabe1d7c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8deade-98b9-42ed-9cde-f3476192014f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21fb2c6-9c8e-4919-ad49-7a258e0ced9e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557f8668-747e-4b0d-88ec-79f8dc53c200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a17a09-00a6-4bb7-8f51-25f1ad9b3717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6fee1f-6490-483b-b9af-495ee74331e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86e36185-534d-4bc9-9560-1233a667aa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae72921-33ab-43a1-a164-ea885e1d5745",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c00f6a5-be74-43df-a5fe-4dfdf830909b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d27d69-dafc-4577-a70b-4c5fcfa7fbc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1f07d5-f960-4d72-bb3c-40d2a346b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2510c00f-b3c6-4c1b-a1d9-d346ca54af4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40541a4-19ee-48bb-aa7e-9c5413277ccf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82aadc2-eca6-4288-a920-22aa74e6b176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab280ec-e508-466c-b459-20cdcbaf98fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2588fc-de6c-469b-9cab-59a5a8670721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "306f2c53-8cdb-429e-add5-686fb8fa6468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69a6f50-1206-4832-8a28-a3329a9afbc9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0786e08-72a4-408d-98f0-6a8312102319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b305394-b807-4d07-815c-ecf0659a34b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa694e8-13f3-4fe5-8ead-78fdec346bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a89f39c-0c96-46c4-a85e-715ff0975215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39d366c-c29e-465f-93df-5cfa6d0602fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f82481-f734-4cec-80bf-b165fbb0f46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3559b847-5345-4268-87f9-afbf8705604c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b29be-da97-4e98-a5cd-346d4f76358f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9081daa-3f29-4812-8f88-aa2845675ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfe112c-08dd-489c-aff9-35f9a20f2160",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5025378c-ad11-43d7-987d-0d2e2f5aa437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db18819a-fb62-4d08-a9e3-2cb68eb0f8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2623df-c924-4324-89ef-49de66cf0e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acf7fc1b-081e-4e8b-b5d8-2908be213bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa9cb7b-ae12-44c1-9422-62f4fb8f8923",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0bd7b9-1f56-43b8-82b1-507553995c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09159f3-e618-43a1-bade-86df3fab2e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114effaf-0715-4e85-b955-c1d0fc0ca57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "079e920e-388d-4ed7-98c3-b85187431f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21408c4b-0ffd-4913-861e-4726ce4a12b6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7d6041-9dfe-4951-b279-0daef9a3e278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd91250e-f386-4074-8766-3efc80974f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2131cf-eaeb-45ed-8ad3-191d55b11d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac824d3-ea02-4556-8a27-ee8c9e3ef248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395ad0c6-59e5-4ef0-819c-8f68eecb7986",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e67a37-0e15-48c3-a30e-abff972596d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96893ddc-3e00-4f3f-841d-073d0c84346c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d93a69c-eaad-468c-a098-04a21bdb862a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff85260-e994-4031-abe7-c89860ca83f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05585f81-d5df-49f6-ab1c-b4fc26421ebd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f374734-6c1d-47bf-9a36-b6178ceec004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59b7ffb-f3a0-416a-a000-3991e5df062c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c770a7e-c037-4aa8-8a2c-e6ef4818051f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57aa4537-7f42-4ced-9802-8397d9d934ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c1385b-0ad6-40b6-a6aa-4e36c1450b03",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65791c53-d679-45f0-862a-71b2239e81a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8478a9a-33e3-44e5-a033-c0665f2f776a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1efd95-97a8-4017-961e-27b88766c31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5afdd953-61e9-4427-90bd-d3f1a006cb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2ce9bb-c46c-4455-9b05-9cda149e5d25",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa67475-6ea4-49f7-859f-6cf2df82f1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a13052-454a-4920-9ee9-81dbf3d851ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79db31e6-f589-487c-bcb7-cb227787adc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b34f2bd-c1e1-43d5-bbc1-c03f5d62f934"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dc6b3f1b-c179-4c97-85f4-354d038f73ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "924dad70-a2dd-4e27-bc42-bfdcbc21d572",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fff60e2-7163-4eee-9887-b08d677da404",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd583ff-46fa-4729-9e28-fa86315967e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee7c9b7-f1fc-4896-bc7d-3a60c975dfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdb4cfa8-b035-4af5-b467-9fbb470b8454"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acf56333-f877-41dc-aad2-98c5e48fcd3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4384d607-826e-4aac-a3db-85fac17e58d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "424da2c6-2bc7-4b59-81a8-e8b9e9dcd201",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a2eaee9-6d5d-47c1-b9a1-9d6f944b1930"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c4b6a86-e46f-4d47-8c75-e434b8708fb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1554956-97a7-428e-9deb-3f6dbb669b6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4374a14-4a54-4517-913c-27306204ea59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5941be93-9969-4981-92fd-11c75cc4c4d8"
            }
          }
        ]
      },
      {
        "id": "025f09b6-5c96-4273-be22-8f1d1cb508d6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6ab79ea7-8dbb-4727-82b6-9cc7e9366554",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad37c109-8b63-4315-a611-9e9ba2643fdc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "491e1c9c-1536-4441-b183-188b7a58e71e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8badea47-fc64-41dc-98e9-c43de3b4ec70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4e8803-a463-4858-927d-302ea626d6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c1ffb1-70e9-4bf9-b83b-42f23e97e0f6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac574f15-0357-4fe5-bda9-c48dc6cddc3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec0c2fa-3586-48d7-b775-1e4008be73de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb41e29e-5aec-4361-8aef-73ca3e99367a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061021ae-6e4e-440c-a7a5-f95e6745d61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1f9efc-cf49-4769-9ecb-bb21113317f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6190b0ec-be9a-43ee-9867-f2b4d82d7c1d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09d26bc-d1d3-4c79-b7ac-1d164b97984e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f0654e-4f3d-4226-b239-74364162b6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc7a1b0-861e-46cc-9e98-20ba31664f4a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26e3ec9-71b1-492e-808e-84638bd06eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb2f1ea-7066-485c-9c66-ed22e8968953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97897762-89ea-4b9f-99d6-f7e375c10bf8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df56ab70-4bd7-4da9-884f-1a912f004248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6950d7c9-32eb-4e77-85cb-b6361fc4bc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570746a8-d613-4280-a320-ccb047143ac9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cc5213-a7ac-417b-a340-1e72ab8d687f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b608dbf-8256-454e-856b-87889c91d3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03696fb-eb01-4d70-9e1f-f9075377768e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036c2dbb-d6ef-46cc-bb9f-8962d60d50a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42701c7b-5202-47c6-8504-8584b6b6e6db",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d9f424-2dfb-41de-bc2a-3751e182c2b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26cd973-aa33-4166-a1dd-d19570d692e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a82dd9a-a08b-47f7-961e-38bf338f7923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e58c5e8-7710-4364-aca1-094be7f74d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ea8c1d-933e-43f5-99e6-273e01098c6f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9a971b-4a6b-4f3d-96c8-1a71a83b678a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "563c0f55-7485-46a8-97df-03a4f87215c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755aac4a-1caa-4d1c-82b6-5d30deae352d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca00b759-f3ee-4b53-9c52-550a5c5e0cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a088e6-757d-49cc-9f1b-aa06ac078405",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490d6dd8-024e-4137-a15b-2a2e4e9297e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "022f1052-8aaf-40a7-9ec0-1aecb98e33ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a65a99b-8eaf-4011-8a6f-34ada137d811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d517e4a-f355-4b44-ba5b-9d8db327a824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8beb50-17e2-4114-b6f2-438a597ee915",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ffec8-c2b4-45b1-8950-d508828cea91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ac577c-051b-4dcf-971e-3738b6b2d5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78ed8c5-8655-44e1-950f-b83df5c3e4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e62001-a39f-4f86-b8fd-d89f666ee04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce29043-5f54-43fb-9574-1a91bcfa0e8c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da816d14-b79a-4b75-9424-1fc7340d81f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec2bddf-f16a-45dd-b317-3b29e54cc000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cefc60-8d7f-4acc-b90d-48edd842b248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f4b69c-dabb-4700-ae7d-f34eebcfcd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1a1549-054b-4cfe-b272-90f878c3876f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a96514-9725-4b29-b56f-e51f70809150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf6ea3ed-f7ab-4e26-8a04-9912a6fd57ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2307616-889f-4466-b29e-f48207398250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be7bf34-d65b-4032-b914-a55d4be0bc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2a8bae-f76b-4de7-ad67-7a987882bd96",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e0f3b2-dcf8-41ef-84cd-0f98d5720838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0672808e-9dc3-4cf7-b581-126f8b6f1646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d8b3f7-d5f8-41f6-9dd3-4d3c11447e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de2e74d-ad32-4781-b0c0-31f17453b78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129113e4-2cf8-47d7-9382-9e7c21f42e79",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb659a6e-b6d1-4609-b145-09c7be2287a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbed6197-a9e0-4aed-ae4e-cc685152e859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9726c4e-77c3-4ca7-a71d-4454e820a6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c9b164-0d98-433c-9bae-3b5fcf89aaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcd4fa4-06c8-4665-b24f-ccad64ae05a9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcce2ca-b1e2-4bf5-a6df-13436aaad31a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f43e709-f52f-440d-ad57-46cf4044010e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50950ff1-1915-438d-944d-79af0675a85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c23412a-1e74-424d-bba8-6596495156a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88772383-cff8-412f-88c3-b851946d0bff",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95972b16-c784-400e-9f84-989d949184b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00c3714-cd90-427d-9610-ad8e97ce57d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40504a00-96cd-4069-9eb1-2afade863c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed72ae7-9403-4a13-8aa5-7c47066f310e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc84e2d-6aa1-453e-8503-d93dbc14bc82",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df96262b-5cef-4469-8ecd-77c7e6d85804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c148e3b0-f8d8-43fb-89da-1ffefd7a97c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7697b0-81c0-4754-b380-3869c201e909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348b8be9-1cb5-484c-8d17-e70e099fee03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d38f1b-2f91-441e-9241-07fc14f6bdc2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f747e558-0eb1-41a0-92ca-bc96ed92957b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6ce09b-4aab-4850-b9e0-097c7a0f7b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16889ca1-6c1d-4641-965c-26733205ea44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a34406d-c57f-4eef-be42-7633eb222d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1050c6bd-7d16-4e51-ac6e-d67f369df957",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c22ce9-d021-40c5-a4d2-142beebf07dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae4e841-8365-4bc3-b9c1-c3702e9731cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5ff51a-4834-464a-8fcb-4ef5e2fd98ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccaf6a24-1463-4cd9-927d-b2f9aa141574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0082565f-b988-4ab9-8f60-5ca60c5ae28f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0a28f7-8f71-4852-8895-d01fd46eeb06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cebaa15-a6c8-40a4-be71-e7433bd9563c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf25a7ee-9edd-4d2b-a0fb-e90c35cb1455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c52c8b-88bf-47d2-8bb9-35322030e976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641a6600-f580-4923-873f-8a6536cea240",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5d6ae7-0300-4ca1-8ef2-dbb77d4224da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31424230-1f40-4d59-bc02-fdd926d5312e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61b0b68-0a50-416a-8560-fbbc62e5b7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18c793f-d575-43af-8812-8f3e49e5d3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a36a476-2ef1-4056-80b9-c1179a55dbe9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7743b973-d105-49bb-b2fb-7df6ad81f54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6c0e0b-cc3a-4b37-8abc-648fd3af5aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c1b4b6-29ed-4b85-97bd-9a99aac7f6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4d5da9-fde1-4474-8375-cb24072abbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ba6d82-a00c-4f27-93a1-8a86093c9574",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d721f7-823f-4b61-91b1-163817c77127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684bd9d7-4850-4e4c-bca2-ada33983dec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d7fd93-cd3c-4a0a-b38f-2501fe0d7d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1566ce-923a-46e8-aed4-e263915359d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661b7c2c-7c8c-4732-9e1a-0d8572e01a17",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcf6b28-bb86-4f6c-babc-4e0db08201ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e4d1c4-791c-4264-b56c-da185ebe3e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce3eff9-a5c7-4c0f-9a1b-24a5c73668c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e8a1d8-2907-450d-9982-75a6e88e0aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae7872c-6ba2-48d3-8070-463df467fda1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c43f29-14ce-468e-ad3a-2e7b7eaa7cfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdfe4c45-f9bf-4078-a74d-c16f50e21a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29c246d-d1af-4e23-996b-45b0576a4fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42e717f-aa17-4315-add1-5f6e2648d686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b37828b-c7b7-467c-b44c-bbe55547cb7a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4987d0f9-ec06-4b07-8305-bfef02901702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d39fa5f6-463a-4596-a875-a31c5bd5f03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a6b139-811c-41de-9ad6-ef1edaf74440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209977d1-445b-4f92-a406-ea5128af1bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1664c155-8dfa-4ad9-a6e7-3dbcfc1ae578",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb89f7d-c18f-4de4-9cd6-c516285a43ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297b8038-1d36-4e37-8020-7aa34dfc84a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd09b53-71a7-42dc-bbee-513e44e5bf0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2093a682-2b2c-4b14-9e94-22771c628af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102ed1fb-8318-4d81-b495-a79cf5aaea1c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2710a5-f688-49bc-b382-39d3078fdb74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3546461-16b1-48b4-85a2-1ae6d5064e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e58fb21-c96d-4ee7-a847-834a5bbcbace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dd1585-0d90-4a21-aa72-e655d3e33134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adf046b-4532-4877-ab24-0e28a40bd0ee",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d32655e-7e7c-424f-8b51-bd396c040628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "696da154-3429-4b48-98b0-e845edf2dac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509bb4bc-d135-4cb8-8752-cd2c1f7483b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edc01ec-cc5f-4309-953e-ae35f0ced3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749bd3f0-2ccd-469b-87b7-99e721a97bfe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758efda2-e2f8-4293-8610-01373e40e61a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11ceafce-4d54-40fe-9c73-38de53aa6518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262adcf8-4360-4a8a-8909-9e8bd0679d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92afee88-4750-4588-961a-36568032d6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafe42e8-47c7-414e-b81c-462e36570e20",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f4c7cb-e27a-497f-89e6-552659111c6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c222727d-ba89-45ca-9983-2f81bac61d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84df2544-ef99-4b86-95cc-df7fc6d7a416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831dfd9f-afeb-4bfa-9423-b06a32da6764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8831d251-92d5-40e0-aa0e-ef60d8a3601b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f42ce90-eddb-4a1d-84f5-e35d917ec41c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a995f11c-e40b-4bd4-aa6d-e6900927bb79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f009bcc9-ebf9-40dd-838a-a143e211b5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6821ea25-e7a6-41ff-856e-2c470a5c3d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a0498f-8e42-4ac9-b1f6-255de59f2e90",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfcd22e-3196-4ae3-b9fb-eb3876ca7246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7cc950d-a6dd-4345-9add-41942853a38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "322bdd91-3dae-49a4-96a5-de5d3e381b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6388c1a5-d1cf-4d8b-8604-67dae96d1f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250da636-1e74-4ba2-95e3-606a4b7cae5f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515eaa79-7879-4ebb-9904-00c550371306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8920691-aaf0-47f5-be53-4da60c1ca9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de02b7d-3d60-43cf-bd03-b360479f8c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bb326f-1ddd-4dad-b0a0-710c647f6d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af670337-06c4-4c1c-8418-274a3d639324",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c4b3fd-3bf3-4af6-9f86-3cc36152233b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9478faa9-e3a9-4f35-9c4a-79854c9f2276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8a5d38-6654-4841-998f-7156741cb548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd906e86-5df9-4b78-9103-c36f7419905d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2169bd-2212-464d-ba7c-ad64980e1565",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8789019c-d814-48ee-82bb-f16c15727ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c86a8a-9e4d-4599-ab77-ccc82d0781ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2cb701-50c7-4fc8-95d4-afdc31e9f07d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d94eaa-82bb-4f42-b510-345afba0d1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb6d747-46e4-48fd-b479-913452a9bda9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93b39b8-1777-4293-aabd-f24e8be45408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375c54b2-041c-4675-bf62-09c997cf5fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a87c59d-0f65-4e1a-8f2a-fea1fec2ed2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebdb6eb-331c-4a6f-96d4-7b874113ed1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de48d0c5-f584-495f-9434-2625d37900f5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e48996-8646-4e0f-9a48-bb7e07826f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa387f84-52bf-4205-9b13-113a84faa909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c176bbd1-3c06-4468-bd04-24cc5515cb0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3302f8-61cf-4bdb-9b78-a5337d76ee56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b37696e-d701-404b-ba2d-458fd9a63e05",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335c6533-2524-4c79-b69f-9bb7d6bf110f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464e2456-610f-4021-9fa8-99cc38a333e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf034aa-047b-498d-8880-7996227b6e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53fec21-3712-47e8-b25f-4e81cc57ba79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796eba63-8022-4089-9ca2-9fb78e1ece86",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27867b9e-d1e7-48c8-8377-6d6e0f63e2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e36945b-9a6a-43fc-87d2-5b480296e118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e933e9-c056-4050-ac3c-674154b5aaa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113d3bd2-511c-4cb2-8389-a58bff47e544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c45fb5-6c9f-4555-bc7b-f8ce0e6a8281",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57010225-edfd-420b-87e8-777a85c61189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55ebcd7-5c19-42a1-ad0e-6f7759101112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d89435-5825-446b-8e5a-53ec23c12da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a6afe0-c472-41f4-ac35-d6b5907a4745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9022caed-2ed0-4d05-ad1f-7415a36deb48",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c54a2dc-d64c-491b-a806-55cbe99a775c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3d3bc9-d40e-42bf-b39f-22e9cdc7467c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0151dc4c-d2d1-47ab-b2ef-f7080c12532d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00a205e-6e90-4db0-95ac-e050d0221a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4114412-1130-4243-86c2-45f2caf0b8af",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f882ab1d-1a08-401d-a9e3-f391bc19544e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01ba5ec-b76c-405e-8f70-e15278f4d9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9faa49d4-5fc1-461e-998b-d86d93fdb7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7322223a-7109-40a0-ac53-3d4f2cddef5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027adc90-04af-4792-ac9c-f738af7f7a7c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cc8833-58bf-4278-b5cd-d326a72679f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63784316-a6d2-4798-8d51-606d930ed8e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f192257b-eb7e-4acf-9487-500f29f69702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57767ca6-88f2-4273-8035-6f5a81b86c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c3b2ae-38ba-473d-8597-cbf44d084aa5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1705f90d-bfc9-4aee-9836-f13a9b3bcc5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968f3fe7-7848-4e65-bf8f-3dc1a50243b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a30b2c-c2a3-4f54-8722-26bd1c482e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f70655b-3ad6-477c-b3c7-6ee944f4ae86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cd0164-5906-4b0a-92d1-7a88e86a889a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389a1d12-e00a-46e6-87f8-b73dc76d8a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14924373-9829-4da9-a9af-2d5b7f747abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5ba469-197b-4d69-a3c3-c38f5507ca56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c293b6-3214-497a-af9b-bdc973026ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33708c1a-563f-464b-9e8c-7aa6840cc4fc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa394e0-625f-4dcd-a25c-0227521e0f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf454777-d12d-4dd5-8515-2fee7c522a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a92d1c0-d06b-4aa3-8855-d10750f4df18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67aadad2-e75a-4411-bebc-49a6ec6a92f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8633d3f-1da7-4adf-a5ad-ca0d5ee5bebf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bb9e1c-240d-4570-a74b-b569d4e2a548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b937ea5-3e6c-41f8-a809-de3c5de0e181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf1df10-88a9-42cd-ade9-7c1a884c9a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac08d0bd-e186-4938-8f2f-4fe5f78fb1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3805792a-8b4c-45ed-b186-9e80249d1f17",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea16b36-49aa-410a-83c4-11a1cbf6a304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a2b485-47cb-4663-9c20-4f7bf8289df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cac134-e98f-4806-8014-52919073ac65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d60684b-1427-4ec9-8830-980d11e9894b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5896ae-d1a8-4c92-a24b-1a7578678f3e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c380fa-24a2-4444-b82c-dd1b208b9ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a475b730-a06e-4c2d-b0b9-6caaddde04d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cd5557-ae8f-4a99-92e1-7343c032e0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55317c75-99fc-4730-a159-c30c6f1fe900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c55008c-c292-4fca-85b9-5fb1ff2d3aa7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a53d83e-5347-4b51-88ad-2476917e5783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672de114-aaad-4e34-8321-ec80c6763fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc14805-7bfa-44b0-83c7-88dea2c00eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f72f24c-4200-4f7e-8c6d-18f536e2f72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5088aa18-289b-4801-bf6e-cc26d4d8b72d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb02c30-afb9-4ec5-ab61-b68e16a01af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8feeea8c-0ab0-4c9f-b3ae-bcda8ceeb565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "972dfb52-ae6b-4545-a26d-7c4eae9d1e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15493e7-bbf1-456b-af40-df5de5bc537b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ad8a70-666f-46aa-9579-18fcaabf1973",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0165c8e-3f77-4220-bd62-2777aa21fa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29820ec0-0755-4912-8737-d3476d6d44ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd31d9e-fce6-4089-8315-5c447b78e95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59a24cd-a25a-4704-b2a0-a7a9db4ca7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655dc344-d1cc-4bcc-b8fd-3e9ffe4415c5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6ab241-97a2-4d46-afd1-5d7cc2142279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc77211-9ba9-4078-8ae6-ad2a595ca989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eab9250-3343-441b-a512-c8bea72b03ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d97e7a-b2f9-422e-9e44-dcaf1d77334b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15389881-ffe8-493a-b5c6-8ce919f4a736",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0b7b13-8c16-4da4-86f7-58eac842e077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78960bf-099d-4b3b-8f4c-62290bd9bc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed0f6a3-cea8-4283-bc85-23e15b4c8e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7456724-b819-477c-abd2-b5329a933072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e8e33b-49b1-4fe4-9fec-ec54cc7a22b9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c394a923-1529-4618-bfb1-21e2f047f09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf0030b-cf3c-44b2-b43a-3473c91b300d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b46cb9-857b-4820-b362-a7b3688eb6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfc9cba-3c0c-463f-872a-74c750080ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b296d7b-43f8-4bef-aa38-040dd522a4c7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f02b4df-3272-4134-a7d2-bc77bda2c9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c05032-f87d-4449-9b57-60f4fd661f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e208c944-83a9-4da7-88b1-d53ce821aa29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55fcce32-e101-4e1a-abc8-a82db8b80815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cad96f1-6a21-4ffd-b9bf-6ed7bdf18a33",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b230fcee-3a0b-423f-94ed-fa652e70335b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0f6d6a-78fd-41c2-9d63-005d19be1295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3437168a-7cbe-45bb-aab6-72a5fb2bef8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4716e887-0c79-49a9-a1d8-b9bff7a63266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128f81ed-93ee-44ba-ad2a-3ddf0b5aec2f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1edd4dd-4982-4315-b824-dc30a5acb4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec840ee0-2727-48be-a2ce-8fe0ad24535c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e22d910-b34a-4d78-bd42-c9ce857b1790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3616ffca-90e4-4265-be22-db4afa171630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7db9d0-6f37-45e8-959e-8adb47353192",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a1721b-04b5-4a2a-9a50-72adc3eb86d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370c2a92-b28e-4c65-880d-05513fa5a7ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5087e1-0fe2-4171-9292-ed6ad30012e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bb3088-9838-49eb-86e3-02bf62c43fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c5ff6d-24d8-44b8-9430-505c1ffb58a1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d41f88e-5ea3-4683-8d5e-184fa29d9638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbe8073-0590-477a-8db2-b7c785b39af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401d9926-1210-44a6-8ad5-4d139f8360c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9915a3d1-0a23-4d4b-9c45-a6a928981ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1fb1df-dffb-4716-b486-1dd11b1411b9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b996ff1d-b680-4b24-bbda-1964162ca13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6cb89b7-227d-4d5b-8a68-9cc130df9819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef3d06f-f33f-40ce-8f72-0d2dd679871f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9d71d4-5720-4472-9e29-95869a19d6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9f568a-b767-4d09-871f-1199581b2097",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f2a693-b7fd-49d8-9b13-4768b5d26ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af0bb7fd-04fc-4fd8-99b1-dcfeb0f6d2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1daefc1-ba27-444b-920a-bb3baa0d1cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d4416d-e766-47a6-8995-2226c66f3a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d80fc37-35ac-40b1-bf34-3bb86c1f780f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857b31d2-7515-4918-b502-b61f688cddc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a8ecf52-ab45-4bac-9c09-b34d5e287b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e1a63a-2eb7-4532-bf67-3795a3cda058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8254bc96-48a8-44e9-8ec5-74df21049366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af93d1ed-f9d8-46ca-949a-8ebc6e44c569",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494bf5e3-c10e-4b3d-a716-1dd22b10e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "585d7985-bd68-4989-8594-b224a97e2b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb7f89a-79a4-43d5-98aa-f01550af6481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af669273-c794-4816-b5e7-b9777a3408b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc25e211-8fe1-4863-90fd-870137998a0a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8f56c3-087e-4726-9960-ce7f716ff937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a2027d5-8aae-4176-bd9a-02602e3d335a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1405770-624b-4531-ac47-5137ea48ba3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce244e7-9080-4836-84cb-f06dc06891ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf46e58b-ba7f-421d-97c9-ac8f86b6747b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f4933f-071d-4567-8870-383af344af97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4493b8a2-73f5-4bb5-974d-59ce96fd79bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a44292-48eb-4667-8b88-eba1cf7f75d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adad8ee-01e6-43e3-abbf-e24b438d2f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378020a6-4892-4aed-8529-1a3ad1c84ba4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828a1d0e-cf21-4f9b-91af-fbfd41c0a30f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf3225e-d0fc-43e9-8d02-186e35307737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a4c6ab-92eb-487c-a9a0-3203dbef7f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1fd622-2433-4d72-89da-5ad3988f6c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed93864-58c9-438a-89f6-b5ea3a0c35af",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1af819-7ad3-42eb-a860-c2b10edceabf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c7d54af-f446-4f21-b1bb-eeaffe6e208c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a654da7a-599b-413c-b840-81f1fb688777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f52e07-8c38-4f9d-b556-170308263d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c920451f-6755-437f-b458-9f75b06ea606",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5283163-991b-4007-a01a-a0445b5dec17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36710b5c-672f-4e37-8a72-558886adb440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "774630c7-689d-406c-bf1a-f40fd62973ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0c5cf4-34c4-45dc-8700-fc97f615dbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aac716b-63a0-4a6a-803e-4a6b8d5c59b0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2188632a-d9bf-4385-96c2-b1970a88d166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9cb4d10-8469-4678-8743-ccf7aad0b332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf96ec64-664f-4fbb-b739-6775958893c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49aed653-9551-4253-a582-f4d137ae4ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f535c000-5d07-4add-8d36-e9ec181ca284",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ecce55-fb42-40dd-a178-a142b1a06092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bd812a1-8667-498f-a331-cb9f759be69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ace65f4-3a4f-4edc-b3d3-893f9ce6df11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253cae84-d850-4fc2-af36-8f64883dce97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f137e5eb-5509-4d76-aca0-8816c3fdcaa8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aca36b0-2bb9-4885-9cb7-c0792d755c90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a5fe6c-5926-4b29-b3fc-ceaa3df62d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d035d1f-aff5-4f80-8147-407f0d80accf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13976aeb-36d4-426e-9195-c47b622cdff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d493a2-302f-48f1-a0d6-40333d51d42b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcce2ea6-f6c4-4230-93e6-fd11fc38482a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d52cfe-1b9f-4b18-b560-fa10b5afa317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40feb2e4-8428-45ae-91ca-656281616668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b248f0-eec7-4af5-98c9-b26418870b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e415981e-e8f6-4b54-9b0f-e7eaeb9e9080",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00ec66c-bf15-4d94-b2a5-9b1b7d503d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d20863ae-fa12-422b-88cf-2ca565eecb4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7e4d38-5d0e-4a50-97c0-479ca8135939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c7ec15-a106-4716-874a-cf71404c0b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cca115-dcc1-4686-831c-4b36cc081fc3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efe2d2f-f661-4037-8f2a-4f3e80f74692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c4a590-992f-4e63-b4ee-30a23a802467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb39c15-f088-45c5-982d-e8e704ba2d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e339695-9d36-4632-b61c-4e301f807edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60cc50a-cda4-48e6-b09d-a96fb7489f42",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cc18f1-e2d9-4012-95ca-cedceca6936f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7d177b-ce1d-4432-a4c3-7a5ae03725b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe4902c-52ba-456f-a75b-dd8e84f682a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464e3582-7267-421d-b690-867f13303244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789788f2-3f9f-47c2-9593-f58293dd8fb3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8bc060-5c23-4046-b55b-a98d49386c7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d415c892-0cca-42d7-b6a0-bf0542478dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfdd5db-a328-4bac-be19-5f6fb449004f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2bcf05-04f7-4bab-9ca8-0c3a00bec5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49867d6-dd4b-41be-95d4-1cb6bf077df9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69145739-f8d5-41cd-9346-30fb433a6583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "219e4cfd-74c3-40c4-a8ad-297fbd2cf469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7913307e-86b8-40d5-9d1e-52147b466ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ad8134-bb49-4ab2-97e7-ae7812ee4cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e01935-a54b-4e0b-9c8e-33403a30e64d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96df786e-062b-4535-ae0d-35572c72834a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "174caa03-9ade-475e-98d7-0f028d510b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c6b538-e4af-460f-963d-61cf3346600e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46052cb9-1a41-469b-9737-b442a0af73b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea0a1d6-8661-4314-89c6-1592a1bc34f8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d131c7d9-01a6-4c38-a754-902b81321548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dce2531-63f3-4424-88d1-6b8244bb216c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6106e901-4576-438f-824c-57f2456ba9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614fda57-57d4-4ab3-b843-612b134ebf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896e21c1-a133-4e97-8578-5bc8d952b2ae",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af83613e-4754-4cdf-b418-e07b681b72d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf81313-7d86-4b44-bd62-19990cf3f2cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b28273-abe1-4e55-8411-97cb10e8971f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8755a848-ebd1-4d80-a235-14f2f25df37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94df494c-c874-4fca-bcd7-abde15bfc8f0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcf11f4-e138-4d40-874a-fc574c2e7e85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389828d5-f6b6-4a66-be0e-e6b312685fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ba3fd6-eace-4288-ad43-50c6dc7905e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fead296-8346-48ca-aea4-d765219dd58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc628d44-ce56-49f3-9148-43738191ad7a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603cb1ec-a50b-4845-9188-716edac99954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f712d08-4dd3-4693-9648-5d8bfd8c2c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50431301-cf96-4f08-9743-05a5ba88b578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445c70b8-d52f-4595-a887-02bfc2dd4f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c20ad2-8b35-470b-847a-c86ed6e0d1b9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b2004a-80f1-4729-a64d-712f9f9a23e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5034bb7a-6a5d-49a3-be69-97218c1194a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5574a3-90e1-4347-a81c-6b7a1cbbffc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e6a145-eaae-4e55-89b2-be61a69b5701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd73ee32-e4ac-49f0-9969-4cecf0437b86",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd51daa3-27e4-4bc7-86e0-02b550d8fbf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e204c8c-5efd-4a09-b708-37ce84738742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f50706-9f6e-4e72-a752-e6e0f4d862f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8f57ab-fa7f-4f97-b79c-c2cdb6533b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435a16be-8122-4cb9-8efc-f6270989ec25",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ca7c34-523a-4588-8048-902741640ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a8f2ee-110d-4235-b27c-b735a075e460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e2cbc0-bf6c-4c0d-8f54-7a053d4cd08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f830c30-575a-4388-ad2c-4b7e2a18a5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8a3c52-71fb-4e43-87e0-1e0064bae954",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a0c855-7bde-48b8-9682-3a330f314268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe15525-9a83-49b5-baa0-99629c38d1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab105fd-7234-449a-b722-553bbf4d6da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b37109f-18e8-42aa-84b9-8f325cf8b3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500856ce-3c9b-4199-8e7f-323ee7673f60",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eb1617-8def-4975-b71b-96946a664519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c7a4441-9283-412e-b3a2-cb521b7ca37d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bee86fb-860b-49fe-ac3c-466992cb7b87",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9848ad-c1ec-42ad-b265-7048a6ff7a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252fd066-5e5b-4e9f-837d-4973171a3aed",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84de78e5-aa56-4bae-a4fa-3aa97794830a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396e7194-b820-4323-8c89-4ade183f49ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03728e8a-577b-42b4-92d4-c118e148171d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e580664-14c1-4117-a315-23994eeffe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02333352-e6ed-4d4c-bf6e-f3fc8126cd25",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11672bd0-1f5b-48b5-8f25-f30d0cf8e921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "124a0a5c-0d32-48b8-b2b5-3ca7490fa654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438f5af2-0c5e-414f-9094-41bee2f18159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e27fdd-d780-4882-89ba-feb405f48a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e71d3-8766-470f-a1cd-9f74e22621fc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c21f412-9283-4dff-adf3-a00e5f74aa0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57fc848-54b7-44b1-9fb2-2a42a6b765c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534be0a8-0e2a-48a6-b8f1-007f75a19f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fc542d-0a0d-4ae5-b2f8-38aec5181e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21789607-8231-4e39-b1c9-f0e5d5987356",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599763f9-384b-45cc-b90b-8969b9ac6b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc98386d-bb19-4856-91e3-2de123389bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b323ab-011d-4a29-9ff4-5f3895c884ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1ffaa2-2470-4f78-9aa3-bc7bcf47c185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ba8286-0bc5-4aa0-8de9-fd8a97326d37",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f010468-2dd9-41e8-9169-facfb11223b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081783e1-efeb-45fb-840d-f4f510e9fc5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043befcb-3ffe-4329-81ca-6ab0d68e69e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97867623-093b-42ab-8e22-ddedfd623ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46f7004-a677-4c60-9186-6764357ed30c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8fd070-659c-4446-9ee9-1618e825f729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06ed846d-ba38-46e9-922f-5eb08f77241d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27652ce-7289-47f7-8f9c-9033170a575c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7b3301-66e8-4da5-ac3e-c0dea67e73e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a98406-6245-46e4-a586-df88b94c20bf",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776cee7a-6961-44d4-9019-1c67ce701dca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b53aa5c-9f29-4490-b558-1322ac7eedde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f6d1ee-21bf-431c-b1ad-04f31b1c003b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452eaab1-ce4e-4bb8-9e9a-72e0e4f83692"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "009b0389-7e95-4b61-acab-9b204982d251",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7174881b-b157-4647-9291-699e6490bbd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fa1434e-79af-4c14-9fe3-864fdbfa133c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "992653f8-5e57-4fbc-a522-e37d86c02317"
                    }
                  }
                ]
              },
              {
                "id": "40ff8e08-4834-47dd-9bdf-04923a70a182",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "898eebf3-8317-45c2-ba67-19061728cdc5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e04078-2099-44cd-ad12-e5cb15f70dac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b57df642-aaf9-46c9-8adc-d21a181193f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeedba61-2628-4638-82ff-30579f9e991a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9d57390-6a85-48c8-8755-2456068b1ada"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9eaa5ebf-d52e-4b34-8877-fd6ca6ad5003",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ebdccb5-595f-493c-bcff-4cc4335f373b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2ceb5c6-5d90-4425-a5de-0f61bad7cfc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed8d8f68-5bee-49a9-8dbf-3718467a0f44"
                    }
                  }
                ]
              },
              {
                "id": "b136da75-affd-4b22-bbdc-3b6ab59bef78",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b64ab195-2273-42f3-a20c-15f09f8b6642",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb7307a-7f69-48fb-912f-4d0c134a9a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "65309cb5-2623-483b-b30f-cd73252b575a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5e4698-d499-4686-9814-7296a8d2b85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b99d499-f838-4cdb-9bef-6edd089f1015"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6850c9b3-1a9f-461a-90a9-51f545a3097a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6154773-0a4b-42c9-abcb-12adcc50ad34",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5582e935-6fce-4168-b007-e5dccb25868b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1a73b62f-842d-41e5-969f-16f6f0edd309"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74dff471-0490-42d9-82c5-b2a20a5866c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95df487f-beb1-4663-a260-cae896669303"
                    }
                  }
                ]
              },
              {
                "id": "8cb43e1e-9bfa-4885-ad2f-7d10db09162b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8f4a6de-778c-4833-b394-53bcba8bb710",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "16c93cbd-6e67-4373-a453-f9eebefd82aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3786e807-f822-45db-9617-ec2d1aabcbde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dece48d3-5417-41e5-a40a-9cd2ad32f6bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81f3a3c5-eb05-4dfa-bce4-a3c162c2b5a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d8678800-c291-4832-885d-33f0b2e8fbae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b443b74b-4a71-4bc7-8d84-d05413e82ff6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6096a33-6996-40dc-a408-16c422feaf10"
            }
          }
        ]
      },
      {
        "id": "fdf830d2-e15c-46a0-95a0-1093c3e4dc03",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8779bf6f-bc8e-41fa-989c-2f98447ddbc7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff4e4fca-9810-478e-8d3f-b17582a4ee4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "789d5c6e-209d-4936-857b-ebe397a6bb4b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d22b4a8-0a9f-49f8-af14-9786d81f8b0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e103f460-9e61-4eb5-aff7-a8b82357626d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47075123-8619-45b9-a4c4-68cdab1528c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85600782-fd37-4a53-ac3f-6ae7468161c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6836e964-d89a-4215-a848-b42402632fe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a32d0a4e-c802-464a-acfb-ac97ea64b6ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "733663e3-b1e3-41cc-a10e-9d9c5718431d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56cc9002-fef0-4fc1-a928-28b169914a89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39d31f4e-448a-427d-bd2d-8f0c7d5fad56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3ff66d4a-8821-4498-99bd-fb8bc812a1a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "344e8837-5946-41d4-ab2d-512605ea784a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5c5f41e-7800-435c-a0aa-199e7e9cccaf"
            }
          }
        ]
      },
      {
        "id": "6493fe20-dd72-49ca-9ba4-4922f4ecb5b6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4987c82d-13aa-4340-b7ad-dbe2a2dcb1bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc4e833c-275b-47b7-9ffe-2e2b66b5cea0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8a4b97f-b78e-4a80-b031-3c866d29359b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316642ae-1ede-49a6-abaf-28501d0c2e3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c648f78-d5d0-4b58-adfd-3deda79781f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b8a60e-ec99-48c6-906b-80f5af943738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "003a42a1-bf2d-410f-a225-8de5a8225d48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6ee5428-9248-42d3-bc4b-ccbc7814ff18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "355c85da-415a-4c97-a862-eb6c866d3d90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e4f4766-48d0-4ec4-be27-e9c2b4486b40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f14c73fe-9597-49d0-aebb-3038886c26c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5641a99-c094-4b07-8437-760f98c1a181",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a81d3cfd-9bc3-4489-ac0f-16f1fe07effa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7108b7ca-edef-472e-b97b-9dfc9a922478",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "166fdda4-464c-4d82-a9ee-185471f254ec"
            }
          }
        ]
      },
      {
        "id": "28d23c43-6f03-48ee-80c3-39b4325dd611",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "20319615-0953-45b2-b6dc-19bd0fcfdd52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80098259-12e3-4d2e-821a-b38dadbf8ba8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10c355d4-6290-4f30-9028-2253d62f0a44",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02356e40-da31-4fef-9d5a-eae64c66cf72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1db52654-2191-47ca-ab7a-47618e193f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93addf86-eba3-49db-98d7-be3e7e85ff9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4c1713c-1ccd-47f3-abf8-dd471dc01d47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "866b7294-ed2a-475f-ac1e-46f84695f35b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dc572cc-1b05-4c44-9276-4e6c05af4bc8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbba9a5f-219c-489a-937b-7e1f1cf22300",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "785955ae-e6dc-4ebf-8e23-f0c4dd64e597"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cdc6483-5d76-4367-9568-f8997e1ca022",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bedae5e0-df9f-454f-821c-625cab36ed66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ede1b54-4666-44fb-88ed-05b946dc04a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d64b801e-a219-4a36-ab2d-b9978b33d8cf"
            }
          }
        ]
      },
      {
        "id": "5c5f34db-eb18-4d33-92aa-ab28aec87d84",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b64b10d4-8d75-486f-b85d-dff70d32d781",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1599f61e-3282-4390-b122-7a7788626bac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cbaa538a-ceaa-4b42-b409-7fcffe0695cc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1951ea9e-cc72-4819-b708-0c672af872e0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f60b8919-683c-4438-a37a-18edf003c326",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.97543859649123,
      "responseMin": 20,
      "responseMax": 552,
      "responseSd": 87.14486483386662,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709339579937,
      "completed": 1709339609516
    },
    "executions": [
      {
        "id": "3829aac5-f12b-48b7-b30c-f69b0aed6c26",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "97f91918-da96-47ee-932a-192936546899",
          "httpRequestId": "d5c7070a-5ad5-48da-bef5-1e8b1bd77a97"
        },
        "item": {
          "id": "3829aac5-f12b-48b7-b30c-f69b0aed6c26",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a8f5e2cf-4580-410f-93a8-b75d8e6e5448",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 0
        }
      },
      {
        "id": "23cdd9ed-fabe-4ee5-a4a8-e2923de856ae",
        "cursor": {
          "ref": "8108a3f9-292f-4762-bf57-c09af3fef5d6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f69857e6-6e0d-4bcd-9aa8-5145002d4496"
        },
        "item": {
          "id": "23cdd9ed-fabe-4ee5-a4a8-e2923de856ae",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "662cc9e5-f259-41d7-98a9-63baf9c090cc",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 0
        }
      },
      {
        "id": "f19e20d4-3645-478a-b19b-fc805d7cac6a",
        "cursor": {
          "ref": "c4690518-7d7e-4cac-a2c6-5208f77d9dc0",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "61e7ce43-caa0-43da-8fb1-99ce962b9eb9"
        },
        "item": {
          "id": "f19e20d4-3645-478a-b19b-fc805d7cac6a",
          "name": "did_json"
        },
        "response": {
          "id": "0fdc9c20-76d5-4c0c-a5c7-2aca70d8acbb",
          "status": "OK",
          "code": 200,
          "responseTime": 300,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b97a1ed-9b59-4398-aca2-91671c34169f",
        "cursor": {
          "ref": "d1551e38-1db7-4544-bf0a-5f04cb828e07",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "354015d2-9c03-41a7-b90c-66c6c6cd4cd3"
        },
        "item": {
          "id": "8b97a1ed-9b59-4398-aca2-91671c34169f",
          "name": "did:invalid"
        },
        "response": {
          "id": "6460e4f2-ad15-448d-aa8c-b853057d5935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b97a1ed-9b59-4398-aca2-91671c34169f",
        "cursor": {
          "ref": "d1551e38-1db7-4544-bf0a-5f04cb828e07",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "354015d2-9c03-41a7-b90c-66c6c6cd4cd3"
        },
        "item": {
          "id": "8b97a1ed-9b59-4398-aca2-91671c34169f",
          "name": "did:invalid"
        },
        "response": {
          "id": "6460e4f2-ad15-448d-aa8c-b853057d5935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32497d9-2f9a-4611-813f-b03404b5d5b4",
        "cursor": {
          "ref": "27853aa6-b3ec-4b63-9dad-9f1cc75b2ecd",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "265c9547-0f5b-4371-a355-0a3d8324f8f5"
        },
        "item": {
          "id": "b32497d9-2f9a-4611-813f-b03404b5d5b4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c684a5df-0c19-4113-9306-3573c3a12cbb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74a2b79-a51c-440d-9740-f59b3744c503",
        "cursor": {
          "ref": "a29897e7-2085-4e67-9032-f13b1c194234",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ebe66a2f-653b-46f3-a595-ce4562b612d9"
        },
        "item": {
          "id": "e74a2b79-a51c-440d-9740-f59b3744c503",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9cedda41-e5e1-46fc-a8c7-62bb05b66628",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e8b516-2e96-48fc-8ae2-2a77c8d39df7",
        "cursor": {
          "ref": "145d9e7a-e3f9-4509-817f-245c87e553d8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "245d2231-81d7-4ecc-9f5f-b9af7b0a7121"
        },
        "item": {
          "id": "f2e8b516-2e96-48fc-8ae2-2a77c8d39df7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "93679e46-adc7-40d5-bdd0-ded4bd317d39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f264dbe-44c3-449e-befe-0a943967a484",
        "cursor": {
          "ref": "23864488-138e-4a56-81e1-b7a5e19caf94",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "db38e23a-6323-42c3-a360-e5c5a006be85"
        },
        "item": {
          "id": "9f264dbe-44c3-449e-befe-0a943967a484",
          "name": "identifiers"
        },
        "response": {
          "id": "cbf28d26-1d85-4d37-950a-b22ed8dfb2e4",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3368e1a8-3374-4eca-b6ed-7a1446771b65",
        "cursor": {
          "ref": "510b645c-1cc3-4cda-ad8f-3473fafe59e5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1a4b40e4-deee-44e0-a105-23ced32d35af"
        },
        "item": {
          "id": "3368e1a8-3374-4eca-b6ed-7a1446771b65",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "75d7110c-8789-4954-8a83-03deeb147b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c73884-b20a-4a44-8f42-2e78668d2ad9",
        "cursor": {
          "ref": "a6bc1cc5-7faf-4f78-baf5-9f37a430c5c5",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a292112c-4127-41e4-8cbb-076ec9369a37"
        },
        "item": {
          "id": "17c73884-b20a-4a44-8f42-2e78668d2ad9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cbcaf766-8ecc-487d-8edc-2ebb76fa8445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3d1c59-d4f3-4af0-a87f-6437bed1ca5b",
        "cursor": {
          "ref": "4acc9bd3-7b6f-45e3-9cd5-58f45d1c33a3",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5b9089c9-905f-4c1d-948d-72bfe6b4f855"
        },
        "item": {
          "id": "5e3d1c59-d4f3-4af0-a87f-6437bed1ca5b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0789cdc7-0054-4cf8-b4d9-ba2054a6e9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66d3061-d3ac-4c99-8c9e-5fbbe7bfa9a1",
        "cursor": {
          "ref": "a3e80d61-b03e-4c9a-86a0-d97556434e93",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "79649e1c-a22d-4ed5-84c3-50fe11a074eb"
        },
        "item": {
          "id": "b66d3061-d3ac-4c99-8c9e-5fbbe7bfa9a1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "acf1e032-1d96-4821-843a-d06216de5fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3ad519-8237-4972-b856-52bc1e352558",
        "cursor": {
          "ref": "40bf3497-eab6-4c2a-ba1a-2a89e38b238d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "684a57f3-c753-484f-8216-becd27ec2bfd"
        },
        "item": {
          "id": "4e3ad519-8237-4972-b856-52bc1e352558",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "766614ea-f194-4b91-884c-2c509714cd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc2987a-77e7-4e46-acf5-1366666f256a",
        "cursor": {
          "ref": "87f7bb3f-98a1-4c61-841b-1337b6ca8b1c",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "57f43a93-8f74-4d84-a9fe-3d5261234fe9"
        },
        "item": {
          "id": "1fc2987a-77e7-4e46-acf5-1366666f256a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "43d50fd8-f65e-463b-a843-712366377747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768c6644-f192-47ae-8779-6bd5d9b73526",
        "cursor": {
          "ref": "62a0552e-7a05-46ff-bba9-89e4b98fc6ed",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "352216e4-a187-4e62-b439-18c8a933720b"
        },
        "item": {
          "id": "768c6644-f192-47ae-8779-6bd5d9b73526",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6abce25d-2e36-4d17-b037-2d3609ac5a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a995cd-a7be-4627-a646-8a8dce36aef7",
        "cursor": {
          "ref": "7d789868-1253-4ff9-9d6f-578a0343033a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "da883aca-1fb0-4bab-b2d6-a71c07f05597"
        },
        "item": {
          "id": "59a995cd-a7be-4627-a646-8a8dce36aef7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f1cf6653-7d6d-4964-8e88-3b888e980e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed51c6fd-7344-46ea-850f-b05dc8efcb8d",
        "cursor": {
          "ref": "2df7b892-9797-43a9-92bb-1d93bc97609d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c8d8fd8f-583b-4a1c-a9ba-3c5bdb422dd9"
        },
        "item": {
          "id": "ed51c6fd-7344-46ea-850f-b05dc8efcb8d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a7b3cb7e-2ba1-4518-bda7-4f80842b9ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8648788-f510-4c4e-940b-9c84843095a4",
        "cursor": {
          "ref": "3c1ec59b-8155-4c1c-a090-bb3e15bf0fcb",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9c4a6b33-bf12-4f02-99af-c70676915d6d"
        },
        "item": {
          "id": "c8648788-f510-4c4e-940b-9c84843095a4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dc1223ad-fba0-4956-821d-8302d88a784c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833d9888-ca73-47a1-9983-2ca7336e9f3a",
        "cursor": {
          "ref": "df880407-8f24-4138-8abc-451abea6d645",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9b2a5b07-3c5d-4635-8e3f-443bb44fe3b8"
        },
        "item": {
          "id": "833d9888-ca73-47a1-9983-2ca7336e9f3a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5ca3478b-bf07-4f6b-9b34-7dde87b6860d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25669b31-40b8-4f3f-8d8e-349338d2bf69",
        "cursor": {
          "ref": "c6a197ba-818a-4f85-9001-e6b71abbcb04",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "82c3ab34-ca65-4210-b53b-e02634e55486"
        },
        "item": {
          "id": "25669b31-40b8-4f3f-8d8e-349338d2bf69",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "67733321-76ce-4bc8-b172-e7db1783baf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a525a126-5e5e-490e-af14-daf58bdc03d6",
        "cursor": {
          "ref": "9daa306b-7207-42ea-889e-6c18efc80807",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8b5be8c0-6abc-4899-b1c1-6ef968e98fda"
        },
        "item": {
          "id": "a525a126-5e5e-490e-af14-daf58bdc03d6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6a49c220-e4ef-4160-84ff-1bcee038ec79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba14afc-166f-415b-8437-b451ecbf560d",
        "cursor": {
          "ref": "34d81a61-e1e3-4727-b0d0-ffc64b259afa",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "14fb2eb5-ad34-4c93-b946-ecdc81c50936"
        },
        "item": {
          "id": "7ba14afc-166f-415b-8437-b451ecbf560d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "927fba85-e90f-4cd7-9f07-3c6db9f8392f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d6d935-60d4-4b47-a447-e10956beb7c5",
        "cursor": {
          "ref": "b2220502-40cb-4265-a6e5-012b9da2e819",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ddce29bb-f7ee-46a3-b3e9-0b4a400d4f75"
        },
        "item": {
          "id": "a1d6d935-60d4-4b47-a447-e10956beb7c5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d068fa7b-d1dc-4738-9680-41dc56bed389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4436fec7-4ba4-409f-80ec-1ef4826bbc64",
        "cursor": {
          "ref": "521b021b-cbfc-4198-978b-c46d5fad4d71",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "90cd5635-e1c5-4579-a93e-c3c2093345cb"
        },
        "item": {
          "id": "4436fec7-4ba4-409f-80ec-1ef4826bbc64",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f789be76-467c-4a3f-a090-48c5e0bf2e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff91d46-d77f-4ca0-bb6d-d97507a03af1",
        "cursor": {
          "ref": "c8430074-9227-496d-9791-bd700664596b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "eadd726d-6def-4176-9db7-988604940a0f"
        },
        "item": {
          "id": "aff91d46-d77f-4ca0-bb6d-d97507a03af1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5cd6f88c-478b-4f98-b395-9b9bdf9fbf3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04888cc-7cfc-4ef2-832a-16e9b15d7a53",
        "cursor": {
          "ref": "d8db9461-b1e2-4381-8ccd-c396a8d6004e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6b2b3be2-95bc-4a1f-8137-1f036086ca57"
        },
        "item": {
          "id": "a04888cc-7cfc-4ef2-832a-16e9b15d7a53",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0e596f71-573a-4f7a-bca2-837306c55ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d27305-8e45-4391-9770-9ba139c57fac",
        "cursor": {
          "ref": "74362e28-64b9-4265-9d7d-747fd0a71e14",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bc58fc33-7c95-4673-a610-d84e3de57e5d"
        },
        "item": {
          "id": "c2d27305-8e45-4391-9770-9ba139c57fac",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "68fbe6ba-ff16-4414-a6c1-207bced44cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5827b20d-4c8b-415b-9130-6eb640674fc7",
        "cursor": {
          "ref": "7e3cb822-9ff1-4e76-9fcc-71c86f979a9f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "37b8973a-ddde-4614-947e-d23f2c3bfacc"
        },
        "item": {
          "id": "5827b20d-4c8b-415b-9130-6eb640674fc7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2b9a896a-d926-4e0d-8bce-ce5568865608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95df12d6-1de6-48cd-aaaf-b2d053f1380d",
        "cursor": {
          "ref": "c9536d89-4a6a-4aeb-abc5-0804d7d125f9",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4c30121f-209e-4a31-bfe5-bda63be01231"
        },
        "item": {
          "id": "95df12d6-1de6-48cd-aaaf-b2d053f1380d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "51d225c5-0b32-4d9b-b800-6fab2a25747b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef5589d-a260-4fae-becc-117d5ecb5b28",
        "cursor": {
          "ref": "6cc96948-36a2-45cd-a240-282d84d5a2ff",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "212f7989-d08c-48aa-a181-f559848b8a88"
        },
        "item": {
          "id": "aef5589d-a260-4fae-becc-117d5ecb5b28",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b67878d5-ef50-4235-98fc-11846d13315b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f9ea1d-af0f-4db5-8843-423a0dfe6369",
        "cursor": {
          "ref": "cda99dc1-3057-4e80-9631-ab320b3f7650",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a0f56baa-d8e1-403c-87f4-32d412a19ff8"
        },
        "item": {
          "id": "77f9ea1d-af0f-4db5-8843-423a0dfe6369",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0ff357ff-a1af-4f17-8d1f-f4ca7174784c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaf3e5a-99bb-4dc5-8172-ecb7ddbb45a5",
        "cursor": {
          "ref": "47ab75b2-9aca-4635-9b80-64dce1030505",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d1a68747-dfbb-49ec-b11d-87bb0ebb1542"
        },
        "item": {
          "id": "caaf3e5a-99bb-4dc5-8172-ecb7ddbb45a5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d1dbbc12-02e9-4f51-81b1-87bfde49d1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b27f48f-a45f-41ca-b389-a07e72f3f3a3",
        "cursor": {
          "ref": "2aeabaf2-447d-4fc4-b254-71225471824c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f9a1687d-6096-4c0f-8a48-d2f89c22044f"
        },
        "item": {
          "id": "8b27f48f-a45f-41ca-b389-a07e72f3f3a3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "37c2bda1-41f4-4148-9c26-fc3a789bbaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458ba6be-7147-4bf6-a936-da24c8e45b07",
        "cursor": {
          "ref": "050061e0-6ffd-47bb-99c5-8e480584b691",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c18a007c-2e93-4355-a9a6-b37090f9af16"
        },
        "item": {
          "id": "458ba6be-7147-4bf6-a936-da24c8e45b07",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1755571c-1a94-498c-9f83-fb986c3f610c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efc6200-c7d4-4294-8de1-449bbf0cf30b",
        "cursor": {
          "ref": "e8b060da-94e0-45c1-a737-be0b085d4786",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7160a501-ed8f-4f1e-9203-41451c7ae36f"
        },
        "item": {
          "id": "5efc6200-c7d4-4294-8de1-449bbf0cf30b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c5000f35-80c8-4157-8479-6b4095e9fc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17545dd2-b6de-4a06-b68d-038d59724a2b",
        "cursor": {
          "ref": "f58442c4-a6ad-44cf-a891-d762b6f8332a",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c6b2e420-9c3c-4b0d-ab29-741c740066f2"
        },
        "item": {
          "id": "17545dd2-b6de-4a06-b68d-038d59724a2b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e3aba884-8ddf-4e73-8bef-8ac4b162bc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b466e315-b273-444b-8cf2-ab91a2319ec5",
        "cursor": {
          "ref": "4f472cb4-6ce5-4eee-9684-95f566d2183d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "28d0438f-642f-4ff3-b65d-71eef5a296a4"
        },
        "item": {
          "id": "b466e315-b273-444b-8cf2-ab91a2319ec5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "508bbc1c-5a06-470c-a9ff-3a85ebd24f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40966a93-6705-4a59-ab98-9c3c1000af1a",
        "cursor": {
          "ref": "4db9ce83-2e20-4396-8477-cfbc5b3701fc",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a6f33cef-94b6-44de-a834-ee5f8bedaa97"
        },
        "item": {
          "id": "40966a93-6705-4a59-ab98-9c3c1000af1a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "19ccc6f2-267f-42f8-b52c-40386237e87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e521a177-98d5-45a4-84b9-09176ceb758e",
        "cursor": {
          "ref": "cd48e429-461b-46a7-a41f-f731409861b7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d578e673-2719-497a-ba2b-f727cee9cc32"
        },
        "item": {
          "id": "e521a177-98d5-45a4-84b9-09176ceb758e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4b532aa1-44fa-4d8f-b311-756a99d609a9",
          "status": "Created",
          "code": 201,
          "responseTime": 552,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "83447d16-34e0-4a18-853e-064927051291",
        "cursor": {
          "ref": "efd0dfd9-57ea-4359-b491-b2b0174fe5b7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fc040c39-281f-4ccb-bdd2-73159e1b79e8"
        },
        "item": {
          "id": "83447d16-34e0-4a18-853e-064927051291",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "441c94f7-1634-4f29-80c9-dc670de8c69a",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "923c9d48-7f09-40e1-a271-7c5ad54f0b1f",
        "cursor": {
          "ref": "fd5520d8-f44f-40a9-a453-30ee4d326945",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d663bff6-06a8-41b5-88cf-b505cc169f6a"
        },
        "item": {
          "id": "923c9d48-7f09-40e1-a271-7c5ad54f0b1f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2970010e-89da-463e-82cd-de25b7e7e67d",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2dadc539-77b1-4861-b9d3-04543ecb8bf1",
        "cursor": {
          "ref": "3fdb978c-eb14-447d-a274-d07a7f0651b9",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cb17facd-922e-43f6-9363-1f3c84550bdb"
        },
        "item": {
          "id": "2dadc539-77b1-4861-b9d3-04543ecb8bf1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "20a44d02-5787-4b5d-8eff-c94958b0dc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8b2b97-3e68-43a2-9342-45bf342422d5",
        "cursor": {
          "ref": "43af64e8-0db2-4bf3-b3f0-22a872f5492b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9bf28b2-d96e-4264-bb10-ddbc8b94d420"
        },
        "item": {
          "id": "3f8b2b97-3e68-43a2-9342-45bf342422d5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e489d299-7073-4547-8f1c-861a5fa86a2d",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d5f8a891-54fd-4487-8a8c-4e26c1a7b5ce",
        "cursor": {
          "ref": "7133dbbd-c432-49cc-bece-a9cddc7a5c3a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2a64e131-27a5-4d55-915f-fb7813e8d0e8"
        },
        "item": {
          "id": "d5f8a891-54fd-4487-8a8c-4e26c1a7b5ce",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b2f690c9-0289-4a6d-a7ed-eedac2972767",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "10522b28-03f8-4bbf-b87c-b54b822e7450",
        "cursor": {
          "ref": "a8e3914c-4432-4e55-bcd2-97443cd6fafe",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "63ffdfb6-c54b-4e72-a407-3397c51eb372"
        },
        "item": {
          "id": "10522b28-03f8-4bbf-b87c-b54b822e7450",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c2b28540-5d6d-4c5c-91e1-4950642e92ae",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "231631d6-5ccf-43d6-b09d-d36b0e87384c",
        "cursor": {
          "ref": "895be0b0-733d-48a4-b8cd-8d381b274f78",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b9b8d1ba-8aeb-4854-a86e-b3ca8b65911c"
        },
        "item": {
          "id": "231631d6-5ccf-43d6-b09d-d36b0e87384c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f06716a7-3f24-4d63-84ff-a1643c543e60",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3a741638-f9d3-481d-adcf-0fef6d7be85a",
        "cursor": {
          "ref": "6b153a40-7cc8-4c6c-baa4-0b5b1a61acfe",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e96cc6c-7ee1-4fe2-9ca9-471dcd75e98d"
        },
        "item": {
          "id": "3a741638-f9d3-481d-adcf-0fef6d7be85a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f80b0950-bfda-4d58-9dc7-eb63e5d6d52d",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c310dc01-2704-4ab1-8c04-eeb9434b334e",
        "cursor": {
          "ref": "343966bf-e02d-42c0-9f39-0fda56bdb838",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "81756d83-4889-4621-a45b-e534ccaeb8a5"
        },
        "item": {
          "id": "c310dc01-2704-4ab1-8c04-eeb9434b334e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e533a32c-10e6-4584-8004-fc2e8a9e2ab5",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "09901384-4580-46c3-a472-39a78fc44305",
        "cursor": {
          "ref": "7c70f084-b9fe-4d37-abeb-ffb1ac452d27",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3c2fe44d-9e3d-4485-ba47-27cb7b33884a"
        },
        "item": {
          "id": "09901384-4580-46c3-a472-39a78fc44305",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a4a99a3a-5964-4db7-ae81-caa6527944f5",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e859db71-1d45-4576-a1d3-52441912f69d",
        "cursor": {
          "ref": "48583e5c-bede-4732-8507-d078b6b8a699",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "96cf1ddd-dcc2-44d5-ad8b-c6cfb1604bf8"
        },
        "item": {
          "id": "e859db71-1d45-4576-a1d3-52441912f69d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2375ace0-5887-4f47-9d0e-463cd617a3bd",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "945fec17-c5d8-4af9-a8a5-8b187ba6686c",
        "cursor": {
          "ref": "cd65bd05-6942-4a41-8832-ffd572c0b1b8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f1a65b4e-8678-4b9e-8845-b7ce5ad7de6a"
        },
        "item": {
          "id": "945fec17-c5d8-4af9-a8a5-8b187ba6686c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "518a2d21-f036-4a1b-a9bf-69d9dcb883e0",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "54958496-b3eb-41c1-80eb-72272612d230",
        "cursor": {
          "ref": "f9c68a32-7d8a-4348-8900-ea68f1e31332",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "757817bf-fb09-412f-b817-3818a1a05ac1"
        },
        "item": {
          "id": "54958496-b3eb-41c1-80eb-72272612d230",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2dc6244b-fc4f-4cdd-b454-f803e3824924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7905bc30-ace2-4d79-a4b3-e84dbda1c7d3",
        "cursor": {
          "ref": "7cba4938-c8fb-446a-90e7-d2bd029e9521",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7a37abde-897a-4f0c-a14c-00f8e8937a3b"
        },
        "item": {
          "id": "7905bc30-ace2-4d79-a4b3-e84dbda1c7d3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "995352cb-e5f6-4881-b7c2-f822639c034f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d137f8d-116e-4de1-9a3a-a7abbda3bbe0",
        "cursor": {
          "ref": "6eaea2b1-e44c-4dc3-886c-407c4bbc2d61",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d6fed614-2127-4555-a2c2-c8fe2cfbb639"
        },
        "item": {
          "id": "9d137f8d-116e-4de1-9a3a-a7abbda3bbe0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9dd1c5ca-e5e5-4c76-8578-c6a6fa032a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c052662-e213-49b1-9be6-ebd0453fad9a",
        "cursor": {
          "ref": "c9f523e1-0ce1-4c76-86bf-eee6ef391520",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f1ad548f-246e-44d9-a28e-0cd72ace60fe"
        },
        "item": {
          "id": "0c052662-e213-49b1-9be6-ebd0453fad9a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "45128b85-fe1f-46c6-ad72-1e7e3dacab88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3108ffbe-e7af-44f4-a4bd-fc441dffddbd",
        "cursor": {
          "ref": "086dcc4e-e062-4977-b777-0419250d8ad6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b0b11163-db3a-493a-92fd-f2130acbc8ea"
        },
        "item": {
          "id": "3108ffbe-e7af-44f4-a4bd-fc441dffddbd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8739406f-c8e7-4200-a006-fc45ae3b1c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d036aaa-f6d4-48f1-9cd2-14e56c4cd0c5",
        "cursor": {
          "ref": "aae8708d-a3ac-4276-b4c2-2301fa4ab187",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ce454843-0612-4b77-ac3d-a4298f150c9c"
        },
        "item": {
          "id": "2d036aaa-f6d4-48f1-9cd2-14e56c4cd0c5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a45ee97c-6a7f-4292-883a-e9a888621431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40c2c1e-4aee-42f3-9e75-85aad941d5f0",
        "cursor": {
          "ref": "605345c1-e41a-4aae-b2c7-6af7f7d18cba",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e1101810-35ed-4ca3-a42e-ab9f01608f29"
        },
        "item": {
          "id": "c40c2c1e-4aee-42f3-9e75-85aad941d5f0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1a2f402f-080d-451c-9f75-ae3521aa5f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3df58-f1a7-4fea-b797-d7f18c6d9905",
        "cursor": {
          "ref": "f9b88328-eac8-497a-b183-a2c387cd7a9c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d2c60297-e90a-4e9e-a624-4c52df461805"
        },
        "item": {
          "id": "c2e3df58-f1a7-4fea-b797-d7f18c6d9905",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8d0c5607-a60c-4dea-b3e9-9230175bb28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec087a9-54b0-4d5b-9261-565bb3a2dcb6",
        "cursor": {
          "ref": "5737f16d-e418-44ac-b7c0-8d030893805d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3f51a5e5-fa4c-4b45-974d-2978a4c92963"
        },
        "item": {
          "id": "5ec087a9-54b0-4d5b-9261-565bb3a2dcb6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b3d2a5bd-0d72-4107-9118-aef91decc8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1d773b-99c3-4e54-acb5-28769c1969dd",
        "cursor": {
          "ref": "93e5a2c4-1f54-4abd-b294-9c68e32ebff5",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3029f6f2-230b-4885-93e4-799ad1db7b2f"
        },
        "item": {
          "id": "ef1d773b-99c3-4e54-acb5-28769c1969dd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4fddc314-b831-4cbe-9370-17e9184dcb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0922649a-5da2-42c5-844c-5e17dd9a60ed",
        "cursor": {
          "ref": "78aa24d8-ecda-4f78-8efb-2a883fdf61ae",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "377c791f-b909-443e-9bda-4702c2c26d30"
        },
        "item": {
          "id": "0922649a-5da2-42c5-844c-5e17dd9a60ed",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "76b8dd9b-ce19-4a5d-a940-1b4f50ae2af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d041df8-bec3-4ffd-bcab-cbebb5c2cd7a",
        "cursor": {
          "ref": "6dd3d88b-6d22-4732-a6a7-e0fb4bc6990b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6f749906-bc37-4907-baf6-36777a44b978"
        },
        "item": {
          "id": "6d041df8-bec3-4ffd-bcab-cbebb5c2cd7a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "934826f2-c759-4d18-931e-2fbd59132005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7c243c-c6c0-4da5-b70a-0dc1f4bfc881",
        "cursor": {
          "ref": "0cdae28b-89c1-4c7c-bf1d-ed584c0be0fc",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ebf068c0-cb94-4085-ab2d-cdc74a9eaafe"
        },
        "item": {
          "id": "4d7c243c-c6c0-4da5-b70a-0dc1f4bfc881",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e62ac2e8-48a0-4987-bbca-6904f4ec67c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c6b208-ede2-47a7-9b2e-b1cd8448d06e",
        "cursor": {
          "ref": "d08dad89-40f7-4e9f-b5db-f592141aa136",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0f0ed903-d4f9-4fa7-8d8c-ddff83634a34"
        },
        "item": {
          "id": "58c6b208-ede2-47a7-9b2e-b1cd8448d06e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "31e9b698-f9b8-4c3b-acd0-aeac7a96b101",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8430ccce-2765-48f2-9e68-619eb5b9e340",
        "cursor": {
          "ref": "7bb57a62-5cb6-41d4-8d97-26f1ddd86d6b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dd846bc0-d193-43df-9dda-c8ddbc7384ba"
        },
        "item": {
          "id": "8430ccce-2765-48f2-9e68-619eb5b9e340",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fedb43ca-adea-4d06-8a58-6ff858f69dc7",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "37d90031-7b36-438f-b043-1b71dc0d306e",
        "cursor": {
          "ref": "59d3ce69-b7b4-41ec-8265-f02c52e6e8f4",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f0ffd86-4e09-4d1b-839a-5e2ac8cee4d5"
        },
        "item": {
          "id": "37d90031-7b36-438f-b043-1b71dc0d306e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "59972340-2b9a-4a8c-a9c5-4f1e19303002",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "33fbe6b3-95ee-41d6-bbde-39ce24192030",
        "cursor": {
          "ref": "048b0a08-8a78-4191-882c-db05a4f149ad",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "461366e9-f75a-4d6f-a59d-e9a5b8906918"
        },
        "item": {
          "id": "33fbe6b3-95ee-41d6-bbde-39ce24192030",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4f99a574-d4f2-4af9-bad6-970678ec90a7",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a22bd46a-0eed-430e-b50b-f584b9340e8a",
        "cursor": {
          "ref": "4a02e22d-b71e-4660-bdb6-f6b85da474f9",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "34ca4d6c-f612-4abd-bfa9-13fa77daa553"
        },
        "item": {
          "id": "a22bd46a-0eed-430e-b50b-f584b9340e8a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "01bfe64b-226d-4db6-9551-105e36707366",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2ccb7e28-1b61-4d4b-a71d-60841ba894cc",
        "cursor": {
          "ref": "633d75d2-a2bd-4c6f-a128-77512b1b3579",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2b3aabea-132a-4d91-8c12-b0bbcc80923a"
        },
        "item": {
          "id": "2ccb7e28-1b61-4d4b-a71d-60841ba894cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ca703c7d-02a5-4961-bd2d-771f8df3dcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1611ff05-8cec-4c4b-804d-5425259a2cd6",
        "cursor": {
          "ref": "4cbaf108-b64f-4109-96c7-a4d4f000b6c9",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c36222a-1142-4f7d-91c1-9562c88ecd3c"
        },
        "item": {
          "id": "1611ff05-8cec-4c4b-804d-5425259a2cd6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "459197c2-c2ad-43d0-b389-da56ecef62d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f805ec-acd2-47e7-911c-cd449b26a9bc",
        "cursor": {
          "ref": "5c1ed328-e3b8-4dc6-9418-d003958fd698",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6e560d08-5508-43da-8dcc-72457de1ab01"
        },
        "item": {
          "id": "e4f805ec-acd2-47e7-911c-cd449b26a9bc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0e73df44-24b6-4656-a9a0-3b84a1117534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95904375-9219-4630-aabd-c497e757eec1",
        "cursor": {
          "ref": "9c6183af-1ccd-45cf-a6b4-a401ee5c8813",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "49d298c3-b7f1-4a3e-b752-413863c2c08d"
        },
        "item": {
          "id": "95904375-9219-4630-aabd-c497e757eec1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e7542204-5540-490b-8e3c-ed792ba14021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183d259b-0971-4921-9886-cda8cdb82a48",
        "cursor": {
          "ref": "bde3572b-980e-4948-8690-3485e94aaed8",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "24911797-5ae3-4bff-a3a2-08b8cecb4af5"
        },
        "item": {
          "id": "183d259b-0971-4921-9886-cda8cdb82a48",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cdc7cd72-2c85-4006-9db0-d420706359c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ad0137-f366-485d-b973-edc4b0db0eb4",
        "cursor": {
          "ref": "a8939113-fe86-4021-94cc-4214fb221cff",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "20de3b04-dee6-4230-9e86-26d2a036a325"
        },
        "item": {
          "id": "e6ad0137-f366-485d-b973-edc4b0db0eb4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8bd06f35-0dec-48b7-9b5c-42d809af401a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cdded3-b9d4-49d8-aa92-9541c240d809",
        "cursor": {
          "ref": "399d86a7-47e0-42d5-b81e-0f72969c8259",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e201a1f1-4dd4-4add-af1b-60e3d1d58760"
        },
        "item": {
          "id": "e4cdded3-b9d4-49d8-aa92-9541c240d809",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "34852880-34e2-4f14-8566-d003c461ead6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712e73e4-5afb-4d19-af22-4e7aa19d00b5",
        "cursor": {
          "ref": "bf639449-1044-4316-89cd-aa7e91b08bca",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9b155366-eaf1-47b0-a996-633cb43948ab"
        },
        "item": {
          "id": "712e73e4-5afb-4d19-af22-4e7aa19d00b5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0db87d7d-cb05-434c-b199-e80fb2a75338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb90d70-e2c5-40a2-be2a-f79bb4c3e3c7",
        "cursor": {
          "ref": "cbe3dbdd-4b72-406a-9197-1fb417b8e812",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d6e1e11-e320-4cf0-9402-20da026ad13f"
        },
        "item": {
          "id": "3cb90d70-e2c5-40a2-be2a-f79bb4c3e3c7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "867303cd-3bb8-44ca-926d-f2330e951119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd173e0d-3a32-466d-9796-59dc2a5f693e",
        "cursor": {
          "ref": "2d33d087-ede0-4c71-848f-0d3211c19b47",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "928f944d-37df-4569-a478-6e212469d0f5"
        },
        "item": {
          "id": "dd173e0d-3a32-466d-9796-59dc2a5f693e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c1be840b-160d-4d81-a87b-515525df60f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cd1255-23a4-43c9-99d9-23f902f6de01",
        "cursor": {
          "ref": "ce4d7381-9c1b-47e3-bf16-dcb931ffb88c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d3e09dd7-2989-4052-afee-189ca02d4f44"
        },
        "item": {
          "id": "00cd1255-23a4-43c9-99d9-23f902f6de01",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1aa38788-b59b-483b-a667-a6e8edb6b9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0901cf75-fcca-4a9b-a5d8-5d0c2f083073",
        "cursor": {
          "ref": "a22b426b-a811-4d6e-a13c-bb60736c2d9a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2a9ab8f4-80f0-422a-862b-288c8c73e873"
        },
        "item": {
          "id": "0901cf75-fcca-4a9b-a5d8-5d0c2f083073",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "65382acd-a20e-4b19-befe-e2c719dd1fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36aa8ff1-9a86-4dd7-afce-1cce1d0a9569",
        "cursor": {
          "ref": "3514311f-bd4d-4689-87e8-d2fd34dc5e5b",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ad80d32b-f318-4605-bc69-fbae40a12c69"
        },
        "item": {
          "id": "36aa8ff1-9a86-4dd7-afce-1cce1d0a9569",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a3baf18c-732d-4aa0-afba-5e404593f1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c2fb9a-e8d8-4ba1-8c79-a0167e07fdbb",
        "cursor": {
          "ref": "619173ab-3294-4e63-a816-1e55a6a54133",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "26c9e4ac-151b-4979-b47b-edd743606dab"
        },
        "item": {
          "id": "69c2fb9a-e8d8-4ba1-8c79-a0167e07fdbb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "02ad0072-1d37-4d70-8327-be2b84f17c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e54fdba-e6e2-4cb4-a514-e5f3b2d893c9",
        "cursor": {
          "ref": "2495d134-e418-469e-a98b-0d7f33003e7d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6c33201f-4e68-4604-9ed1-f90ba4344f0b"
        },
        "item": {
          "id": "5e54fdba-e6e2-4cb4-a514-e5f3b2d893c9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7c845d5f-2875-4834-a2dc-829d00b0b9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b90adce-39e3-4679-829b-1653ea42853e",
        "cursor": {
          "ref": "687b2b40-a02e-4870-a057-af1d0506fd37",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "65927225-146b-4a31-b31d-8f9d292baf00"
        },
        "item": {
          "id": "7b90adce-39e3-4679-829b-1653ea42853e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8eddfb67-da53-4334-a5f7-2c4fcfeed1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b48a871-236a-4ce3-af06-9bb65e783d76",
        "cursor": {
          "ref": "69158dd3-7045-4d5b-8e7e-944f6531f3eb",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "97b1ebf0-9361-4315-b732-b5d6683d6363"
        },
        "item": {
          "id": "5b48a871-236a-4ce3-af06-9bb65e783d76",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5ed68534-c028-4451-b1a4-69a269b64563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3361932b-66d9-4ff2-82b1-e59380460856",
        "cursor": {
          "ref": "995ff14a-4e31-4e46-94a2-76074234ca59",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7c4eef7c-1869-4bbe-bd4f-a44d190bd652"
        },
        "item": {
          "id": "3361932b-66d9-4ff2-82b1-e59380460856",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c46a8448-549d-4a26-820e-9b96362a3a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06440fa3-6481-402b-b36b-71f3d1b6ed09",
        "cursor": {
          "ref": "ffd839f1-57c6-433e-83c1-2fbdf01884e5",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e1e1f2db-1d36-446a-8b72-4a613c6b80e0"
        },
        "item": {
          "id": "06440fa3-6481-402b-b36b-71f3d1b6ed09",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4d040c58-a933-4c57-83a2-360350bee16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cff7572-a7a9-452d-b425-d2beb469447b",
        "cursor": {
          "ref": "6fe97305-1d9d-4bff-9353-b2bbb75ef9e3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3248f01c-68f2-48c4-8a49-11a01296846e"
        },
        "item": {
          "id": "6cff7572-a7a9-452d-b425-d2beb469447b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5be1fd70-acec-48ca-9ad4-fc115d2ef311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb564f5-9f87-4dda-9496-99c96e21b171",
        "cursor": {
          "ref": "bda5b26c-db68-4714-bdae-0bf682a3c1f2",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6ab15d0b-066c-4eed-a92b-eaf3c2a2d7e0"
        },
        "item": {
          "id": "6eb564f5-9f87-4dda-9496-99c96e21b171",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e0e3a7b8-acb0-4798-8988-e91d0ce0905d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13309ac1-e0c7-47a0-b2a4-3a03f7a7676e",
        "cursor": {
          "ref": "c3ca6fff-329c-4cc6-b6a3-d7e222e4829d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5347ab35-9bb4-4dcf-a71b-bcd1fa54098c"
        },
        "item": {
          "id": "13309ac1-e0c7-47a0-b2a4-3a03f7a7676e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c34036dd-497c-4484-a7bf-f72d4b2238e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d377bc4-73dc-41f7-b6ab-79d7de3fb321",
        "cursor": {
          "ref": "ed990413-1130-4fe9-9a52-259d08e8ab8e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c3483f93-cb3e-4b50-896c-ae7d60b4fd91"
        },
        "item": {
          "id": "5d377bc4-73dc-41f7-b6ab-79d7de3fb321",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0e5ad8ea-22ba-4991-9019-0e79a985bc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc83832-18e9-4e34-885b-e4ba11a1d3ac",
        "cursor": {
          "ref": "1b4be809-d9a9-4c02-afb0-77a53e799719",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c6ccdd68-becf-4f9e-953f-56ffe71d9902"
        },
        "item": {
          "id": "2fc83832-18e9-4e34-885b-e4ba11a1d3ac",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2959a1f7-4e7e-49c4-9960-80387b3154e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58445fc-0bb6-4530-9c03-6882de2c98eb",
        "cursor": {
          "ref": "5b73cc08-c682-4fdc-ad79-1d97036b422f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "617c3a69-f9cd-4057-9fab-9d69d65b862b"
        },
        "item": {
          "id": "c58445fc-0bb6-4530-9c03-6882de2c98eb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e70d78af-085d-43ab-9986-e0f1b8a41b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feded5cb-568f-4f98-94be-e9bf3f3e8e2c",
        "cursor": {
          "ref": "2c025745-36f5-47ec-a161-02d42f2dd0c8",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7b341e3e-6341-4698-831f-9c014b9a03be"
        },
        "item": {
          "id": "feded5cb-568f-4f98-94be-e9bf3f3e8e2c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "db37525a-3b03-421c-8603-48c13ba14e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430b2254-b4ed-463c-8802-b84ac663e408",
        "cursor": {
          "ref": "fcd3de4f-6d01-42b5-a0d8-7b117d9ff3cd",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7da00a74-bd60-4981-a98d-277cae360045"
        },
        "item": {
          "id": "430b2254-b4ed-463c-8802-b84ac663e408",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e4b15f6c-23c6-4f0a-83f2-0fd7611c1ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ffc620-4f53-464f-80e6-7a70159177df",
        "cursor": {
          "ref": "9b3ad7e9-d8fe-4b8b-8454-5e0fb05297bc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "15a37654-23a1-4c35-8886-cac0ae688138"
        },
        "item": {
          "id": "74ffc620-4f53-464f-80e6-7a70159177df",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0987bfc4-cf62-4ac2-8e54-f371af483781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527b32e0-7c03-4bf3-a105-9e9ecd5e6096",
        "cursor": {
          "ref": "14b2bf9c-902a-4aa8-905f-76d5bebc1753",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6ada190a-e6a2-4147-95eb-9b04fe54c236"
        },
        "item": {
          "id": "527b32e0-7c03-4bf3-a105-9e9ecd5e6096",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e8c37f8b-460a-45aa-b800-08902496910c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbc2843-f6d2-49de-ad45-c225cf71f0a6",
        "cursor": {
          "ref": "bd482dc9-1f53-4de7-af72-d1fcf43f20b0",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1327c7e7-f6b8-4f7c-92c6-04229a6cc9bb"
        },
        "item": {
          "id": "3fbc2843-f6d2-49de-ad45-c225cf71f0a6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3cee83e5-d052-422e-b7f6-c0118072dddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa70dddb-914f-4048-8044-81b7f9b4e62a",
        "cursor": {
          "ref": "099df353-b728-4973-aab8-f725ed7baa46",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "65e104b6-8700-410c-8df4-b5a9711e908f"
        },
        "item": {
          "id": "aa70dddb-914f-4048-8044-81b7f9b4e62a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3a4bc7ab-64d2-4409-ac0d-e39c9ec9fc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c7d282-c2d2-49df-a71f-00bfbfcd9944",
        "cursor": {
          "ref": "7f2d3d2f-8ce9-42f8-a372-4a149a674a0d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b48952e5-20cd-4415-b3f3-7d443fe53e22"
        },
        "item": {
          "id": "f0c7d282-c2d2-49df-a71f-00bfbfcd9944",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b23aaea3-7ea1-45ad-9acd-539bb422fe22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f41b0ab-118e-435d-8c8f-ee547f8cb7ed",
        "cursor": {
          "ref": "b2468a58-ee78-41a5-b787-6f3ddd3446f7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "81106d31-0ef2-4ae7-8a7f-2963d8641467"
        },
        "item": {
          "id": "7f41b0ab-118e-435d-8c8f-ee547f8cb7ed",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b3e8282a-17fc-46c3-9e59-043d2754c9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "531f1e54-0e75-4b96-888e-4616959dbffb",
        "cursor": {
          "ref": "1745de94-87c4-43fd-ba92-d97f3f42c925",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "70cefd0e-3ad2-43f6-b83d-ce2e34528e2e"
        },
        "item": {
          "id": "531f1e54-0e75-4b96-888e-4616959dbffb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "893d6415-9b57-4c5f-b51c-8a8b652b814c",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcf87f7-fe50-477a-bd2c-605a0d10eb3a",
        "cursor": {
          "ref": "b893c0a5-47f9-4d38-9812-aa1a3357edbd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8de17986-0d60-4bb6-958f-1d99054c2fae"
        },
        "item": {
          "id": "edcf87f7-fe50-477a-bd2c-605a0d10eb3a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "32e28776-08a9-4223-b078-531c3c7773bc",
          "status": "Created",
          "code": 201,
          "responseTime": 524,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7103af-1bdb-44db-b0ee-9ff90992e757",
        "cursor": {
          "ref": "afbb9a3a-a4a9-46ee-afd0-ea968719d72e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3c2ee137-8d66-4596-8489-fcae7ff2f156"
        },
        "item": {
          "id": "5c7103af-1bdb-44db-b0ee-9ff90992e757",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a59fcbc9-2a20-4441-ba92-d93457e336cc",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "beefe439-c620-40e0-a101-11c99ed2d098",
        "cursor": {
          "ref": "95a47d08-bde8-4d9b-8fe0-3d802ad10f75",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5dcc78e9-39df-42f1-b5e7-e6a09181159c"
        },
        "item": {
          "id": "beefe439-c620-40e0-a101-11c99ed2d098",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e57a21c1-ab60-4e14-a040-3b1da5d8f2de",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1129fd4b-a79f-47a8-bb36-64700f5e97bf",
        "cursor": {
          "ref": "fe727a7b-15ee-4e13-a731-cacad015186e",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dc4ae2e2-0ad2-482d-a36d-b5d01a7b1ea5"
        },
        "item": {
          "id": "1129fd4b-a79f-47a8-bb36-64700f5e97bf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4da00ef4-466a-41d9-a6bc-be880161f65c",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-02T00:33:14.936Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-02T00:33:14.936Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5745fa21-98c2-4d4a-a918-e22145263084",
        "cursor": {
          "ref": "3ca4c5b6-950c-4218-adee-7b4b7bcd5ddf",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "06305bf4-4e01-49cd-ac78-e586b38e8fa5"
        },
        "item": {
          "id": "5745fa21-98c2-4d4a-a918-e22145263084",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8d558ddb-cf9b-40fc-9d9a-58cfebbedf46",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fd3e75-80ce-4781-8864-b6d564ba6e12",
        "cursor": {
          "ref": "0906a46c-2f3f-4b99-9cf4-cdcb9d58a7eb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "404fb670-76b0-4de1-98f0-47be20215a00"
        },
        "item": {
          "id": "04fd3e75-80ce-4781-8864-b6d564ba6e12",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2317924b-3fa9-4ae9-806b-1e3e4baf29c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f132ab94-af75-4d5f-8362-29a8eda470c8",
        "cursor": {
          "ref": "5f0020ea-5abf-47a6-8f6a-fd0f5805fa5e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fa9886d0-85d4-4b47-9ec9-364719588588"
        },
        "item": {
          "id": "f132ab94-af75-4d5f-8362-29a8eda470c8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0b6d3092-4e76-40c4-bbba-21c71b322e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacc1719-a179-4311-94c9-c4abee9a2d71",
        "cursor": {
          "ref": "e7687af6-3726-441b-ab08-2b97062a74ab",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "884bfbff-0661-4d7c-b2c5-891c70680a1f"
        },
        "item": {
          "id": "cacc1719-a179-4311-94c9-c4abee9a2d71",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "16d7b26e-f133-47f1-8218-514a5d4aba97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf8d620-0fc3-45ee-b799-ed9cc71588ec",
        "cursor": {
          "ref": "956ca9f4-83c8-4768-8b04-f10b1613fff4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7109a37f-7750-4633-83b4-d5151b9daa35"
        },
        "item": {
          "id": "bdf8d620-0fc3-45ee-b799-ed9cc71588ec",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ba9d217e-f646-41d1-a9d7-8a255210e23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d570ded4-04b2-4197-90f7-c5402626ce00",
        "cursor": {
          "ref": "8d1b6b0b-26d3-4b5a-a03e-84bc89d92153",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4fa5036b-121b-4fa3-8e3a-100bc21b56d8"
        },
        "item": {
          "id": "d570ded4-04b2-4197-90f7-c5402626ce00",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "63b23582-adde-48da-9d23-ea8b753b33f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9e7896-64d8-4dbe-9155-dfb5f45a9699",
        "cursor": {
          "ref": "5eb5e691-c3a7-4459-8682-070839d87de4",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b60a5295-c23d-4b64-a0fe-c809ec6a6b89"
        },
        "item": {
          "id": "9b9e7896-64d8-4dbe-9155-dfb5f45a9699",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "583c7547-4119-4a23-b8f2-14c031f59d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45575741-ab7e-4e16-8cfd-02dc17b19018",
        "cursor": {
          "ref": "553739f1-b7ba-4ce3-b259-6faf325fd884",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c0685116-6817-4fa2-87fe-0285416c51ac"
        },
        "item": {
          "id": "45575741-ab7e-4e16-8cfd-02dc17b19018",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "71baa599-c5f9-468d-b9ed-bd6002019ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49acf23d-b852-4bc4-b075-52a281f4f13c",
        "cursor": {
          "ref": "c507fcb1-3d6b-41a4-8fbf-6252b91ac1f0",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bf100294-5cc6-4a88-a624-367b4f5172d9"
        },
        "item": {
          "id": "49acf23d-b852-4bc4-b075-52a281f4f13c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9323a9d0-6f07-4ba9-9daf-cfeea82c785c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470040f7-6a7b-4c16-ac69-70fb5e38c060",
        "cursor": {
          "ref": "1acf227c-bf21-42ea-a019-9a6565e5852d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3f39c43b-74fb-4509-9fc9-89fb5848e777"
        },
        "item": {
          "id": "470040f7-6a7b-4c16-ac69-70fb5e38c060",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0ec628db-7780-4c31-a3bf-f93aab08ef3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3ece00-3d17-4c37-abce-0388e4616fe5",
        "cursor": {
          "ref": "c432f70b-6634-423a-a1a0-c7fe0dba2747",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3fa6fa2c-73a2-4ab0-bfb1-9ffa7a5a3c8f"
        },
        "item": {
          "id": "8b3ece00-3d17-4c37-abce-0388e4616fe5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ef70d83d-be84-46ba-987e-71a48622afb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca31b42e-df0b-4397-8a44-95db30a4868c",
        "cursor": {
          "ref": "3233598a-64f9-4935-b40f-1b56bdc1a591",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c48a54a8-17a7-4caa-a397-c08e7e4bb1ae"
        },
        "item": {
          "id": "ca31b42e-df0b-4397-8a44-95db30a4868c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3bd45bdd-9d55-4005-8c89-fe83ca294f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc72e5d-76b2-4918-af9c-9530525afd99",
        "cursor": {
          "ref": "46b80958-2130-4ca6-8cd1-48ed16fbdbd4",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "608a6a24-6b45-4904-996a-287c549c49bd"
        },
        "item": {
          "id": "ecc72e5d-76b2-4918-af9c-9530525afd99",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f8954fcb-dd78-4056-ad12-260b7bfc37ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f90f163-2e09-41f6-b95d-01d66793ddbe",
        "cursor": {
          "ref": "381dd3e9-1ac5-42aa-a4c1-f60d750e5537",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6e9bcd14-1056-4313-bb7e-59c04a211d6e"
        },
        "item": {
          "id": "4f90f163-2e09-41f6-b95d-01d66793ddbe",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3203f161-cce6-436b-a759-931f024f6204",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "37c41899-f149-4822-9c23-3d4a2e483f4a",
        "cursor": {
          "ref": "35d0b709-11ac-4e5b-8e52-5c72fed3916f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "85997de8-89e5-44a3-b50f-d26950de9956"
        },
        "item": {
          "id": "37c41899-f149-4822-9c23-3d4a2e483f4a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "77b4421d-18fe-471d-bdac-c64945d00387",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "82fd2b1e-659e-4a4d-8d01-5e4cf5bbb932",
        "cursor": {
          "ref": "f4b7a10f-e445-4d58-b870-29000bb8a401",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f98c73b9-e79b-42d5-aaa9-f53bb7de5df3"
        },
        "item": {
          "id": "82fd2b1e-659e-4a4d-8d01-5e4cf5bbb932",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bbb03d0b-d197-4945-b63c-3c358ae15cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41728448-5f23-4737-9bad-8ff7231b5625",
        "cursor": {
          "ref": "4b51e135-02cf-4d90-944d-626785a1904c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4cf9bafe-203f-4b41-8c41-fd4a1d8fe10b"
        },
        "item": {
          "id": "41728448-5f23-4737-9bad-8ff7231b5625",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fb66fd5c-e433-406f-b161-65a4db81df00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3770ae28-32c2-46cb-b53f-e93007d7ad44",
        "cursor": {
          "ref": "015f4b7f-69b8-428e-9c81-b9a47460dbb8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "595b1cfe-c3dd-471e-b9bc-a6b01b9fa0b6"
        },
        "item": {
          "id": "3770ae28-32c2-46cb-b53f-e93007d7ad44",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "363c0bda-c4c6-44cd-90c3-d56478c8712e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63aeb48d-8306-4e11-9dd4-94225155c1cb",
        "cursor": {
          "ref": "5a0e2224-b6e3-4e1d-9d84-9844605dbc12",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4b0bf80e-d320-4c34-88fe-119bb5605d98"
        },
        "item": {
          "id": "63aeb48d-8306-4e11-9dd4-94225155c1cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d9fa7427-ecb9-42e1-8845-20742c171d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581294e5-1650-4041-9248-477ab4d786cb",
        "cursor": {
          "ref": "11a8c231-b10a-4b89-aedc-b15cab6c0a9f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1c6683fb-65ac-404f-a91e-44820d1598d7"
        },
        "item": {
          "id": "581294e5-1650-4041-9248-477ab4d786cb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "304b9fef-9d22-413c-878d-2a2e43d8ea05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e29939-78cc-4cba-8532-5025d4dd085c",
        "cursor": {
          "ref": "39e03010-aead-46d4-9bbe-8c29ef759217",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "14586c92-c748-4d79-9f18-390652bca3c9"
        },
        "item": {
          "id": "a0e29939-78cc-4cba-8532-5025d4dd085c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e934220b-fcf4-4e2b-8a68-a35a6b970cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d868e351-e445-4223-9cc0-21767858cda9",
        "cursor": {
          "ref": "5c69b61d-621d-4640-8b2d-4b4f42e69c25",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "68ebf65b-9572-4939-b14e-acc72c5bf968"
        },
        "item": {
          "id": "d868e351-e445-4223-9cc0-21767858cda9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dc84602a-4ace-4193-97f5-f41c5e70f134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241b0023-a5bb-48bb-b571-9c052aec0ad0",
        "cursor": {
          "ref": "5cf0c95c-dc74-40f8-bfd4-96f328ef20eb",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4cae02e0-67e2-4079-8a02-1ea63c7d2a50"
        },
        "item": {
          "id": "241b0023-a5bb-48bb-b571-9c052aec0ad0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1c2c81cf-fcf5-4dc5-bee6-be84feced738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2922a970-93d4-4786-8853-ddd46b5419ea",
        "cursor": {
          "ref": "05e9b79a-e644-4929-877c-ec0e10622a86",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e3a63206-4d86-47a2-9fd6-bd95d450e68f"
        },
        "item": {
          "id": "2922a970-93d4-4786-8853-ddd46b5419ea",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "15a52139-5a6e-4c56-bec8-6ee9b0b3767d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237ef09b-51c0-4da4-80e7-941205029e2b",
        "cursor": {
          "ref": "512e33b1-8e06-4b8f-9c0a-f12b70909bb7",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "636a5d87-419d-4d40-8269-90e6493bf72e"
        },
        "item": {
          "id": "237ef09b-51c0-4da4-80e7-941205029e2b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b395a4cf-8b97-4456-8961-db59c1285f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0fec24-5f0e-474e-91b9-5cfaffafa838",
        "cursor": {
          "ref": "db334ea7-e668-432b-b59a-9772d9cc8104",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "880ec242-2092-4fed-abb7-2621b713ef8c"
        },
        "item": {
          "id": "5b0fec24-5f0e-474e-91b9-5cfaffafa838",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "33f2b485-0e19-4c1f-92cc-bf3e644a717a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b64bde7-e66f-434f-a3e1-b87b51c49790",
        "cursor": {
          "ref": "76ebd0ec-f3f8-41a5-b730-9a1fd1f938b9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4531677e-803e-48ce-8726-79b75a6880ed"
        },
        "item": {
          "id": "4b64bde7-e66f-434f-a3e1-b87b51c49790",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "36e193a9-c202-4b47-8e82-442ccd6fe44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5499b75e-933e-48c3-b687-4a03704cda01",
        "cursor": {
          "ref": "2e33158f-1229-40ef-b3c3-f20cbf347ae9",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7257a6b1-7e2a-4ff4-9392-69507e8bee7d"
        },
        "item": {
          "id": "5499b75e-933e-48c3-b687-4a03704cda01",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "28428f58-3cb8-4563-98a8-11a5f75fc5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815b2fb5-d5c0-43d5-a7a0-0a8088a89d7b",
        "cursor": {
          "ref": "423246bd-59e5-480e-a7e4-f18d0efeac55",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fc0b4cc6-7178-480a-a5e6-2086ed8854cb"
        },
        "item": {
          "id": "815b2fb5-d5c0-43d5-a7a0-0a8088a89d7b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "de03550d-9a23-4838-9bc7-19770a3202e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ecc71b-ece8-4917-8036-f5d8e580152e",
        "cursor": {
          "ref": "95a1f829-44f7-4584-95bf-91ce225e467e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a0e09889-ae76-48c9-8858-60d93e814c02"
        },
        "item": {
          "id": "34ecc71b-ece8-4917-8036-f5d8e580152e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2493b55b-89c2-43f2-90e7-b6991ce83c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5c1de5-cb36-4828-b75f-2d812494180a",
        "cursor": {
          "ref": "959eb3e6-6583-47f0-8ebb-cff6367744f9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "31d6429d-e35e-49e0-b16c-b93afa4b018a"
        },
        "item": {
          "id": "0f5c1de5-cb36-4828-b75f-2d812494180a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6820e12e-1498-4a59-809b-5f5fdf42f46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df780a3-1c6d-4e2a-8723-ab8f1cb5523b",
        "cursor": {
          "ref": "9efeb30b-c2bb-41ff-9de6-29541b35e93b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ce0a179e-f22a-43b2-acaf-e8d654307dd4"
        },
        "item": {
          "id": "4df780a3-1c6d-4e2a-8723-ab8f1cb5523b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b010cfc0-8e9d-479b-a957-72f5665be6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187ca5cc-9f11-4302-8ff1-33dc89484999",
        "cursor": {
          "ref": "88a61029-f3f6-4be6-a4b2-2c7f3b9476ab",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "15820955-eb3a-4385-81c3-2e27352ccf45"
        },
        "item": {
          "id": "187ca5cc-9f11-4302-8ff1-33dc89484999",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "00982371-eef1-45d6-8b55-88be3650fc27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "93ca9820-c3b6-45aa-ae01-3c463271a9f6",
        "cursor": {
          "ref": "7dc10ba6-1ead-4bbe-8151-2228800397e6",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "244403a8-1039-4c29-9abb-db925f1f3449"
        },
        "item": {
          "id": "93ca9820-c3b6-45aa-ae01-3c463271a9f6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "104d42e0-98f3-4b30-838a-bbb7254d93f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e21aa5-464d-4765-b114-5c549c0de609",
        "cursor": {
          "ref": "6bd8f146-dda6-4d29-a79c-3f9aa5132232",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bc494b36-b572-44a0-84d2-d4cd5f28541b"
        },
        "item": {
          "id": "f9e21aa5-464d-4765-b114-5c549c0de609",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "062b57f0-4c5c-4d66-9fb2-3c04983fe57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b420d1c-22ad-4172-b8f5-fe6ce03cfc5d",
        "cursor": {
          "ref": "420baaea-51e4-4b5c-aa63-b20ed6e01b58",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8ed586b6-75da-4d08-b5b8-8dfe69972408"
        },
        "item": {
          "id": "1b420d1c-22ad-4172-b8f5-fe6ce03cfc5d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "74934698-dbb5-4af0-9dcb-57a6dbf90cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c8c756-f374-4970-a4ca-2fb7c63b14f2",
        "cursor": {
          "ref": "473361b4-c7ed-40df-b5d9-6f3a6bc2c9f4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "29a8efbf-cc66-42e0-814f-2073d55b7011"
        },
        "item": {
          "id": "33c8c756-f374-4970-a4ca-2fb7c63b14f2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "723b691f-190b-4d99-875b-840a707f08be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cacbaf-1a0f-4551-b96f-60f4a0e40075",
        "cursor": {
          "ref": "889608a5-5309-4d87-b70a-375c59a43eb0",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "db285568-7bd5-415f-a5d2-976c32d2bc30"
        },
        "item": {
          "id": "41cacbaf-1a0f-4551-b96f-60f4a0e40075",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "16a12dd8-40b7-425f-8cf7-57d1f6b3db82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f908555d-514e-4c96-ac16-6f560653852a",
        "cursor": {
          "ref": "6f521baf-a22e-49fa-ac1f-c6fc65651a5f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bb300940-14b2-479f-815b-d5a79c4024f5"
        },
        "item": {
          "id": "f908555d-514e-4c96-ac16-6f560653852a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3e3c0ee0-aedd-42cd-8fd7-158f15ab5be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb09289-7f98-4e5b-b66c-4bfabfcad2af",
        "cursor": {
          "ref": "8577f6fa-1220-463d-b919-5467251d822c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "37529fc0-41ca-406d-9781-e4f4dced1952"
        },
        "item": {
          "id": "4cb09289-7f98-4e5b-b66c-4bfabfcad2af",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "68f3b5fa-5e04-4f89-8f4e-b2d54d83e274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53720cc8-ebc7-4ecb-a398-c564f7b2ba6b",
        "cursor": {
          "ref": "0c5a9b99-e643-4528-829a-3aeb5159ed71",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "250b8e49-6ecc-458f-8aa0-a0d618d36552"
        },
        "item": {
          "id": "53720cc8-ebc7-4ecb-a398-c564f7b2ba6b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "84f56a89-0e83-4c4e-b165-90ba6535eed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa6049e-f168-4500-937d-5a8c4f495c1b",
        "cursor": {
          "ref": "8951478e-c1d2-4cb1-aafd-5d54077e6bd2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "601806fc-f6a1-4a78-9308-feb58fbcfca3"
        },
        "item": {
          "id": "7fa6049e-f168-4500-937d-5a8c4f495c1b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e8d026ce-21d2-4103-8523-bec32da6abc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e88e29-490e-4e02-aec5-d32059eb8c48",
        "cursor": {
          "ref": "5c716309-06e6-442c-b846-88f11f0e358a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f7730a7d-54c9-417a-98e3-eb704762e55b"
        },
        "item": {
          "id": "80e88e29-490e-4e02-aec5-d32059eb8c48",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d5b8a060-e6f6-4796-a349-60261009cc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b68a5e-8979-483f-9384-673d41d33e6a",
        "cursor": {
          "ref": "c5e79f34-67f3-48e7-a470-9c80a2aa21c2",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6738a957-42b2-42b8-ab8d-92a6fd0c7d4f"
        },
        "item": {
          "id": "26b68a5e-8979-483f-9384-673d41d33e6a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4f18c4c-001e-484f-a08c-bbd75d9e5394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c55438-06d1-4bf1-be23-2708beaf4546",
        "cursor": {
          "ref": "286341b3-4000-4df3-a5a8-5317c39a9f46",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0f3cbba9-935c-4ed5-a3a3-da7458036c61"
        },
        "item": {
          "id": "95c55438-06d1-4bf1-be23-2708beaf4546",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0afd796c-18e2-433f-bee5-e000dd965921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e80426-8be4-4160-b9b7-3db52547652f",
        "cursor": {
          "ref": "6a2c3abb-5e5f-43da-a941-dfba1897d53b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b998770a-6950-4800-a0c8-9d4014c3bc99"
        },
        "item": {
          "id": "f2e80426-8be4-4160-b9b7-3db52547652f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f41c0b00-f7d4-4dc4-a3d2-7378a432d9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607208aa-b9f1-4b58-a760-8891b301f202",
        "cursor": {
          "ref": "48c56fb7-0790-40e2-887a-1cd2a176e149",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1c7ab256-68f6-4038-ad98-633413487a00"
        },
        "item": {
          "id": "607208aa-b9f1-4b58-a760-8891b301f202",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4700e353-f123-44f0-9b86-080faa88f087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25fad0c-599c-430b-a6bd-b8756de1567e",
        "cursor": {
          "ref": "eba2a4ae-5512-4479-9d18-b9d57e6dcb1c",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5f38ba5c-a998-4887-b380-c4f9b04278e5"
        },
        "item": {
          "id": "c25fad0c-599c-430b-a6bd-b8756de1567e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0e957845-7d1e-4b30-9dcf-3a8fd8e72bf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "281d923c-a95b-4805-ad4e-7e6920a1b73f",
        "cursor": {
          "ref": "a5d5cdac-7526-4e54-a8ca-160f1374a7cb",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "17770e04-2eaf-4790-b3e2-64d394eb75cc"
        },
        "item": {
          "id": "281d923c-a95b-4805-ad4e-7e6920a1b73f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f6f7286d-b232-4251-874d-2dfe73fb5cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d5369b-5558-410e-abb7-0d27394d2e60",
        "cursor": {
          "ref": "9810e4b1-9cbb-4322-a1b9-0c4ab698797f",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "471b95b2-34c0-411a-a0d5-9655ce23cb14"
        },
        "item": {
          "id": "b1d5369b-5558-410e-abb7-0d27394d2e60",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3ddb8a00-688c-4145-b1b3-7317c664bde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15bf4cb-bb5f-400b-b9af-0509d57bc7f6",
        "cursor": {
          "ref": "2de3c7c7-d851-460b-96fd-142114de39f4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "66ce1f5e-26a2-4134-88c3-d65fa1e93182"
        },
        "item": {
          "id": "e15bf4cb-bb5f-400b-b9af-0509d57bc7f6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "49fe6c22-59af-4300-aa73-864d8316462c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7d1689-4b83-4d47-a97b-8300702476eb",
        "cursor": {
          "ref": "8a6c8e39-1b33-422c-b2e3-881d62123dcd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "644101a9-53bb-4875-966a-ca8e8a20ec5e"
        },
        "item": {
          "id": "0d7d1689-4b83-4d47-a97b-8300702476eb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3eadb2d2-bac9-4f8b-9877-5fda04194e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35347590-57eb-4abe-9eb9-a3bcef9d2941",
        "cursor": {
          "ref": "ca026c82-e063-4e8b-b489-f968d62668a8",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d0f9eef8-54a6-4dcf-8762-47c88d01905f"
        },
        "item": {
          "id": "35347590-57eb-4abe-9eb9-a3bcef9d2941",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "16238925-2cd6-4b62-b126-8fee3ab68909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1e13a5-391b-4e74-8f11-090baee952ba",
        "cursor": {
          "ref": "a95d9847-1d79-4761-ad64-e008dbe6ffec",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3c0b14d2-cc99-4c29-9643-0920dac59e30"
        },
        "item": {
          "id": "ec1e13a5-391b-4e74-8f11-090baee952ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "590345af-379c-4d3e-8c57-dca729754b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6bf5f6-40a7-4b39-8fa0-5bdd3961ef99",
        "cursor": {
          "ref": "5371accc-adae-4b38-bb70-f7e415b7e5f6",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f322b5b5-a80e-433a-9566-caf7bc31b130"
        },
        "item": {
          "id": "1b6bf5f6-40a7-4b39-8fa0-5bdd3961ef99",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "67f8be7b-db08-43cc-9cb4-a63ae3de9d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d59f78c-b993-4ed6-83af-2d87bb9410d3",
        "cursor": {
          "ref": "83b04928-3aeb-4706-8f5e-72d31cda824a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0d2d3ac9-8dcc-4639-b47b-0d11a967d2a7"
        },
        "item": {
          "id": "1d59f78c-b993-4ed6-83af-2d87bb9410d3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a73c699f-f9a7-4b8b-a018-d6a9d1a59fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7477a92-5762-4e3c-8e24-2215eed6644c",
        "cursor": {
          "ref": "59f0834b-7374-47a1-bd28-3f6484f4b77d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d0d64cce-ee88-42cb-bfe9-eb324c16529b"
        },
        "item": {
          "id": "d7477a92-5762-4e3c-8e24-2215eed6644c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c1087dd0-c365-440a-a8ad-d6fb5ad13b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3835ac6c-e726-442e-87f4-c436eb83b915",
        "cursor": {
          "ref": "c33f8e2f-ee56-492a-a254-4dbc7993e906",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4f65cfb6-3526-47c2-975d-34f861100c50"
        },
        "item": {
          "id": "3835ac6c-e726-442e-87f4-c436eb83b915",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2845fffa-f8db-4b38-9a20-ef3636357fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20a3446-c54d-4c1c-b5a5-f184917b73e1",
        "cursor": {
          "ref": "11b3aba3-4553-40ba-b1a9-d25f2222627a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cd9f0690-771d-4549-b626-be9b9fabaa3b"
        },
        "item": {
          "id": "b20a3446-c54d-4c1c-b5a5-f184917b73e1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3a4c617e-341d-484e-a24b-04ab38aaa2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21fb2c6-9c8e-4919-ad49-7a258e0ced9e",
        "cursor": {
          "ref": "9bc829ae-63f9-4772-a398-0a69372424ed",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "991dba2f-c237-41ad-bdfb-cb926743b352"
        },
        "item": {
          "id": "a21fb2c6-9c8e-4919-ad49-7a258e0ced9e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d86ee808-4a78-41c6-b670-5d049b88dfa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae72921-33ab-43a1-a164-ea885e1d5745",
        "cursor": {
          "ref": "17e84853-c5f2-4019-bb49-0ca6ec29f303",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "859dc40b-8d50-494d-ba12-091245e783e3"
        },
        "item": {
          "id": "8ae72921-33ab-43a1-a164-ea885e1d5745",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "43609262-796f-46fd-bd69-b0d5d07785fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40541a4-19ee-48bb-aa7e-9c5413277ccf",
        "cursor": {
          "ref": "28f02e85-11ac-4936-98dc-e75685840f98",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6444163c-9ffe-4da3-a9e5-7bfc23c5fc57"
        },
        "item": {
          "id": "e40541a4-19ee-48bb-aa7e-9c5413277ccf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1738ab36-f666-4e37-ad64-71bdc89a2d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69a6f50-1206-4832-8a28-a3329a9afbc9",
        "cursor": {
          "ref": "19813ff6-43b9-412d-bc11-50a640c6bbd5",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "25a3f69c-5abe-4c7d-93e5-1fb44d6d568d"
        },
        "item": {
          "id": "b69a6f50-1206-4832-8a28-a3329a9afbc9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b45eebe9-5c25-406c-bb12-6e25d147e933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39d366c-c29e-465f-93df-5cfa6d0602fe",
        "cursor": {
          "ref": "2649e7dc-75b9-433b-9668-cfb598181851",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "86cb2e2c-ff2b-4c79-a92f-ee9042f11e5f"
        },
        "item": {
          "id": "a39d366c-c29e-465f-93df-5cfa6d0602fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e1b1b8a4-ffd9-4cb7-987a-28786d5dfad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfe112c-08dd-489c-aff9-35f9a20f2160",
        "cursor": {
          "ref": "266b05b1-b137-4e58-aaa4-a5c807df0334",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "83115421-1c94-430f-b901-ce84f6709ab1"
        },
        "item": {
          "id": "2dfe112c-08dd-489c-aff9-35f9a20f2160",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9c65eb1f-f890-42b1-81eb-329411882bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa9cb7b-ae12-44c1-9422-62f4fb8f8923",
        "cursor": {
          "ref": "e2b35860-b548-4ae2-8a05-586dc65a0340",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1b82fce8-09db-4d78-b568-6fa1b9aa9071"
        },
        "item": {
          "id": "6fa9cb7b-ae12-44c1-9422-62f4fb8f8923",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0dfc18dd-e239-4fe6-9a0e-dd14b7d1e922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21408c4b-0ffd-4913-861e-4726ce4a12b6",
        "cursor": {
          "ref": "89755b24-7a30-4859-91a6-afb449d5da3a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3247fa41-4960-4a3c-837c-7a4a3bba955b"
        },
        "item": {
          "id": "21408c4b-0ffd-4913-861e-4726ce4a12b6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7121a0e7-9b37-46d3-924c-c0bd48df762f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395ad0c6-59e5-4ef0-819c-8f68eecb7986",
        "cursor": {
          "ref": "ff7c05c0-f707-4681-ab82-3392db9ecce7",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a0e91b33-2694-4f0d-bb5c-1dfcc85de74d"
        },
        "item": {
          "id": "395ad0c6-59e5-4ef0-819c-8f68eecb7986",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b6118327-99b4-491c-aa82-f76ce90586de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05585f81-d5df-49f6-ab1c-b4fc26421ebd",
        "cursor": {
          "ref": "1e7ed9b8-f532-4b85-9585-46099be78d34",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f17d00ef-508b-4de7-a106-c8e88e2ea020"
        },
        "item": {
          "id": "05585f81-d5df-49f6-ab1c-b4fc26421ebd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "96542a13-f3d7-4933-9b15-0d3fddf4e1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c1385b-0ad6-40b6-a6aa-4e36c1450b03",
        "cursor": {
          "ref": "595fc806-d179-473c-bf1a-89b75ad9d117",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c2517cd1-dfad-47c2-8637-0fabe64f9a7a"
        },
        "item": {
          "id": "48c1385b-0ad6-40b6-a6aa-4e36c1450b03",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2324aa79-5a13-4dac-bec2-5f26dff8ace0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2ce9bb-c46c-4455-9b05-9cda149e5d25",
        "cursor": {
          "ref": "eb2a0951-8757-4f12-8960-3e26c77e85e7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "59c9f082-6549-43db-9f54-198815dfbdb4"
        },
        "item": {
          "id": "5a2ce9bb-c46c-4455-9b05-9cda149e5d25",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2aa9dac0-457b-483e-bfcd-3d6b10708454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924dad70-a2dd-4e27-bc42-bfdcbc21d572",
        "cursor": {
          "ref": "0400f754-a9b0-4b20-afae-6374326683b9",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "367b52ca-3368-4de7-9c0f-53c06250e84b"
        },
        "item": {
          "id": "924dad70-a2dd-4e27-bc42-bfdcbc21d572",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "383eda99-df37-43a4-a889-68f2aefa9030",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491e1c9c-1536-4441-b183-188b7a58e71e",
        "cursor": {
          "ref": "2c72a994-4e88-4c44-8f9c-5c80fcffa486",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d7e7982d-0364-473a-a49e-992bb62161c8"
        },
        "item": {
          "id": "491e1c9c-1536-4441-b183-188b7a58e71e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "50f99870-f440-4c33-b244-2eb17b44f5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c1ffb1-70e9-4bf9-b83b-42f23e97e0f6",
        "cursor": {
          "ref": "4694ef28-b730-4598-8494-f62c1e66c879",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "193f3fb4-8a4a-4b79-ae9a-d3b1d6842966"
        },
        "item": {
          "id": "b2c1ffb1-70e9-4bf9-b83b-42f23e97e0f6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1d302dfe-0582-45f4-8355-21c85007e64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb41e29e-5aec-4361-8aef-73ca3e99367a",
        "cursor": {
          "ref": "f72c648a-6fcb-4d73-adfb-5b245c75d63c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7a53d00a-0267-4841-b24b-e25ee585ec58"
        },
        "item": {
          "id": "fb41e29e-5aec-4361-8aef-73ca3e99367a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "678c8ec1-85bf-477f-ae38-9319584a20d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6190b0ec-be9a-43ee-9867-f2b4d82d7c1d",
        "cursor": {
          "ref": "7553fbad-51f4-4546-ba6b-2807fe997d31",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "62892984-4c38-4ee2-a54e-3d1235074455"
        },
        "item": {
          "id": "6190b0ec-be9a-43ee-9867-f2b4d82d7c1d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0327c88c-f452-4d5e-8a9a-bf03504f5d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc7a1b0-861e-46cc-9e98-20ba31664f4a",
        "cursor": {
          "ref": "7dcd607b-3eb4-4f51-8f15-84ce7157af63",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "512744c3-8aa3-44d8-8ae0-426fee64edb7"
        },
        "item": {
          "id": "bdc7a1b0-861e-46cc-9e98-20ba31664f4a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6c71094d-8045-4200-82f3-7481e6c4ec6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97897762-89ea-4b9f-99d6-f7e375c10bf8",
        "cursor": {
          "ref": "d475eac7-80f5-46dc-9cc2-8f906ca24cfe",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d683956c-ef94-4df2-b4e1-1e05bd4d7595"
        },
        "item": {
          "id": "97897762-89ea-4b9f-99d6-f7e375c10bf8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b3b71d65-c120-4d8e-bcfa-0ebe5c34ca7e",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "570746a8-d613-4280-a320-ccb047143ac9",
        "cursor": {
          "ref": "b049f3a2-ad49-4c4d-8da3-21c5389d1331",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0bb79a4c-25da-41a1-b256-214430501838"
        },
        "item": {
          "id": "570746a8-d613-4280-a320-ccb047143ac9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7081f007-b68a-4ce8-804c-7331b092627c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42701c7b-5202-47c6-8504-8584b6b6e6db",
        "cursor": {
          "ref": "bcabb4ce-b20c-4703-8669-970c5eddfc21",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7f154ad2-1895-4e6a-a1bc-c55c8a0c8d42"
        },
        "item": {
          "id": "42701c7b-5202-47c6-8504-8584b6b6e6db",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b5d11318-b2d3-4f9b-aaea-52246e7756e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ea8c1d-933e-43f5-99e6-273e01098c6f",
        "cursor": {
          "ref": "d0ccfffe-6bcc-406b-be47-1fa1150dcef9",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a465efa2-583f-4b63-8138-050d4910b226"
        },
        "item": {
          "id": "e5ea8c1d-933e-43f5-99e6-273e01098c6f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4a816799-05a4-4b88-ae11-460cddd13c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a088e6-757d-49cc-9f1b-aa06ac078405",
        "cursor": {
          "ref": "7ba79973-8508-4585-8b4a-bac11431a78a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f414e54e-e0a6-4067-964b-383b8895b93a"
        },
        "item": {
          "id": "39a088e6-757d-49cc-9f1b-aa06ac078405",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "611e6364-53d5-4e85-888d-5d555dda1615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8beb50-17e2-4114-b6f2-438a597ee915",
        "cursor": {
          "ref": "74a8c426-7e74-42e9-b76c-5ca11e21176d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0a2512e3-2f7b-4b96-9863-01fd0dad33dd"
        },
        "item": {
          "id": "fd8beb50-17e2-4114-b6f2-438a597ee915",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2aa5e858-a3b1-4f8e-a6b2-7851e67ac3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce29043-5f54-43fb-9574-1a91bcfa0e8c",
        "cursor": {
          "ref": "ab3f2be6-305f-4e1d-b87f-7eaaa87c84a2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e1d1c7c2-3253-43c1-8ad2-3156062e190b"
        },
        "item": {
          "id": "7ce29043-5f54-43fb-9574-1a91bcfa0e8c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d5503789-8997-49e9-b6b1-19fbbaedd7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1a1549-054b-4cfe-b272-90f878c3876f",
        "cursor": {
          "ref": "3a1e68b8-c24b-4daf-bf3a-7fd938f96068",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "efafc802-fba6-4358-84c5-3122a4b39c14"
        },
        "item": {
          "id": "1d1a1549-054b-4cfe-b272-90f878c3876f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4fb9b341-a606-4f05-9c30-2a94945171b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2a8bae-f76b-4de7-ad67-7a987882bd96",
        "cursor": {
          "ref": "9d1072a7-e69e-46d6-9fb7-32a98862be7f",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "367f374e-2770-4b58-af58-a542327bb7c4"
        },
        "item": {
          "id": "4a2a8bae-f76b-4de7-ad67-7a987882bd96",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1ced9a48-814d-436a-8270-8994c54ca3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129113e4-2cf8-47d7-9382-9e7c21f42e79",
        "cursor": {
          "ref": "fa2d7916-4425-41a9-bc37-ae23f2dfe939",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "93519427-a649-4444-ac2f-0401dbb4bb78"
        },
        "item": {
          "id": "129113e4-2cf8-47d7-9382-9e7c21f42e79",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2e7ad72e-b4da-405e-9e85-87887b5d534e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcd4fa4-06c8-4665-b24f-ccad64ae05a9",
        "cursor": {
          "ref": "2cb0a461-0671-4b5f-b45f-c264ece26ba3",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6b2515e5-a402-4c22-8182-b5ab1a40f76f"
        },
        "item": {
          "id": "fbcd4fa4-06c8-4665-b24f-ccad64ae05a9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7435cbcc-c92c-4e5e-ade7-e76f3c884708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88772383-cff8-412f-88c3-b851946d0bff",
        "cursor": {
          "ref": "2a6ca1e6-f1c8-42ca-af0e-69044db009b6",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b54548b7-d950-4ab5-a48b-bbef0eb0fd9f"
        },
        "item": {
          "id": "88772383-cff8-412f-88c3-b851946d0bff",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "11da3234-38b2-4ab4-9e62-32266cda68f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc84e2d-6aa1-453e-8503-d93dbc14bc82",
        "cursor": {
          "ref": "73224238-e74a-4cca-a887-d628aeceb0a3",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e67675e2-7582-48a7-a8aa-f704723eff1d"
        },
        "item": {
          "id": "bdc84e2d-6aa1-453e-8503-d93dbc14bc82",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "755d1fcc-656d-44e4-99b0-cfe608818863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d38f1b-2f91-441e-9241-07fc14f6bdc2",
        "cursor": {
          "ref": "0279a4f3-31be-47e2-921d-4d6f521894b6",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "38330afa-1cf6-49ca-905e-8ba039a06444"
        },
        "item": {
          "id": "91d38f1b-2f91-441e-9241-07fc14f6bdc2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2b65f69f-a192-4fbc-8a72-9115d20f3e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1050c6bd-7d16-4e51-ac6e-d67f369df957",
        "cursor": {
          "ref": "96fbcbc8-3704-4513-9f19-4e95f72604c5",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ea0524b1-5c44-4cf6-a1de-dc54aef95acd"
        },
        "item": {
          "id": "1050c6bd-7d16-4e51-ac6e-d67f369df957",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "147941b7-1ea0-4b41-83c0-930c3715f087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0082565f-b988-4ab9-8f60-5ca60c5ae28f",
        "cursor": {
          "ref": "8cf072f0-8409-4d1e-8350-d730bb6c1e9f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f97bc0f9-ed17-43e3-b6c2-12c99096b8e8"
        },
        "item": {
          "id": "0082565f-b988-4ab9-8f60-5ca60c5ae28f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1e9051ad-fe21-4d49-9e4c-9d6946cefb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641a6600-f580-4923-873f-8a6536cea240",
        "cursor": {
          "ref": "2fa8ea71-da21-468e-bfad-750cc7e526c8",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8237b9ad-6577-4d01-ae49-f00d4e62df10"
        },
        "item": {
          "id": "641a6600-f580-4923-873f-8a6536cea240",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "71d5a3cf-3eab-4a55-99a6-e4565b7c35d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a36a476-2ef1-4056-80b9-c1179a55dbe9",
        "cursor": {
          "ref": "2f77b277-b38c-4a51-a58f-3c9774b7f16b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f287aa3d-a5a1-4914-a9b9-ad3164f2b77c"
        },
        "item": {
          "id": "3a36a476-2ef1-4056-80b9-c1179a55dbe9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c3be6ef5-72a5-4b95-85e2-7fdeb98db3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ba6d82-a00c-4f27-93a1-8a86093c9574",
        "cursor": {
          "ref": "8c1ff29b-a00a-4acf-84b4-9f9518c3f9da",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3223f59b-0d77-45b8-86b6-7fd011477088"
        },
        "item": {
          "id": "e9ba6d82-a00c-4f27-93a1-8a86093c9574",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "11680249-8b8c-4fb7-b159-e36a4e51bf35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661b7c2c-7c8c-4732-9e1a-0d8572e01a17",
        "cursor": {
          "ref": "9fea7aaf-fe32-4022-a41c-df3188973598",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4e243ddd-a0ff-47e8-8c94-82e144c59b8c"
        },
        "item": {
          "id": "661b7c2c-7c8c-4732-9e1a-0d8572e01a17",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f1d8b363-0fcc-4e18-a332-ce2d18cc0aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae7872c-6ba2-48d3-8070-463df467fda1",
        "cursor": {
          "ref": "a990966b-d89c-4a32-97af-1f7aba1a0b31",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3fdb0e99-ae52-4330-a3c4-a15c3461c979"
        },
        "item": {
          "id": "aae7872c-6ba2-48d3-8070-463df467fda1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e46d6f2f-078c-4b94-8ed3-0c56b90826b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b37828b-c7b7-467c-b44c-bbe55547cb7a",
        "cursor": {
          "ref": "425d29f3-4556-4ef7-8094-d64577c8c283",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a3f957ec-a25a-494a-a759-7c6dd8d7d85b"
        },
        "item": {
          "id": "5b37828b-c7b7-467c-b44c-bbe55547cb7a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9b9d8966-1e39-4306-9d48-1140225047dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1664c155-8dfa-4ad9-a6e7-3dbcfc1ae578",
        "cursor": {
          "ref": "53cfa536-0e65-48e9-88ed-bec0467fd9bf",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "02b5bccf-74e4-4974-9056-a6643503ea9f"
        },
        "item": {
          "id": "1664c155-8dfa-4ad9-a6e7-3dbcfc1ae578",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c47660ee-ae2e-4e59-b902-0c935aa17754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102ed1fb-8318-4d81-b495-a79cf5aaea1c",
        "cursor": {
          "ref": "9ee57c3e-8897-47ca-886a-f23fbe70a029",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8e054e66-9d6e-4f9c-89b9-36401095de8c"
        },
        "item": {
          "id": "102ed1fb-8318-4d81-b495-a79cf5aaea1c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0969c2fe-c521-4f64-9038-6b2bb1051c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adf046b-4532-4877-ab24-0e28a40bd0ee",
        "cursor": {
          "ref": "c27fc866-0c72-4bdf-8613-5abdfa36a87d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ce531da9-694e-44e0-85cd-61820c789873"
        },
        "item": {
          "id": "3adf046b-4532-4877-ab24-0e28a40bd0ee",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e6358b61-ca0a-44ea-bbde-192726beb516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749bd3f0-2ccd-469b-87b7-99e721a97bfe",
        "cursor": {
          "ref": "53742ca2-6031-4234-b06c-5c0177de2242",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "602b650f-e10b-4889-b7f8-4a05bd590933"
        },
        "item": {
          "id": "749bd3f0-2ccd-469b-87b7-99e721a97bfe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "53cf003e-f7bb-4589-8c89-1bb321db32c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafe42e8-47c7-414e-b81c-462e36570e20",
        "cursor": {
          "ref": "d03884e4-b4d7-4451-ba80-1d748ff3a878",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "58bcf7eb-d691-4aee-8111-f58914dae2fc"
        },
        "item": {
          "id": "eafe42e8-47c7-414e-b81c-462e36570e20",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c060de44-3680-4e1f-9cc6-9f84655d1ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8831d251-92d5-40e0-aa0e-ef60d8a3601b",
        "cursor": {
          "ref": "41fc99a0-0c01-4a72-870d-094a49e0248e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7aa0a47b-8767-4612-8cae-a22db678ffcb"
        },
        "item": {
          "id": "8831d251-92d5-40e0-aa0e-ef60d8a3601b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "535723e0-2d6d-4727-b701-e855db4fd0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a0498f-8e42-4ac9-b1f6-255de59f2e90",
        "cursor": {
          "ref": "e69c6db7-2c7e-4990-8c20-36ba0f0bea4b",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c9b3dcb2-ee18-4203-ae62-2948cd225f54"
        },
        "item": {
          "id": "86a0498f-8e42-4ac9-b1f6-255de59f2e90",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fcc99d7e-f7c9-4928-b4c7-3c56e21115ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250da636-1e74-4ba2-95e3-606a4b7cae5f",
        "cursor": {
          "ref": "144a7e1c-0cef-4fc5-9def-ee0e12125cc9",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "62f4aea9-b9a4-415b-b70e-99e2e2e7dd09"
        },
        "item": {
          "id": "250da636-1e74-4ba2-95e3-606a4b7cae5f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5ab3640e-5998-4f18-b03c-e3b1162bfe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af670337-06c4-4c1c-8418-274a3d639324",
        "cursor": {
          "ref": "3c14376a-df55-4e04-b95f-2b6fd895934d",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "02f20240-7448-4342-a07b-71d5bf0e062b"
        },
        "item": {
          "id": "af670337-06c4-4c1c-8418-274a3d639324",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "211c9fd5-bca4-4c08-be94-0a1988380e98",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "da2169bd-2212-464d-ba7c-ad64980e1565",
        "cursor": {
          "ref": "31ab3166-119d-44cd-b623-e067c7ec5732",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "97428934-6003-4cec-8673-086c10c892fc"
        },
        "item": {
          "id": "da2169bd-2212-464d-ba7c-ad64980e1565",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "829292b7-acee-402b-b278-dbababbf35aa",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0eb6d747-46e4-48fd-b479-913452a9bda9",
        "cursor": {
          "ref": "d7ac41b4-b7e0-4f77-922c-eeae4f11e754",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9a41b1ba-d1e9-44ec-a0df-42d374df6c34"
        },
        "item": {
          "id": "0eb6d747-46e4-48fd-b479-913452a9bda9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "657f6c84-59e4-4c7f-b1b4-c711c10e2ee0",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "de48d0c5-f584-495f-9434-2625d37900f5",
        "cursor": {
          "ref": "38fadbd3-e436-4137-bb84-b4673ce0b2d8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c890b8a3-3ea7-437d-8fcc-5c4de1121bb2"
        },
        "item": {
          "id": "de48d0c5-f584-495f-9434-2625d37900f5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dbb438c2-41b0-49c1-af7e-ba40a7ae45c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b37696e-d701-404b-ba2d-458fd9a63e05",
        "cursor": {
          "ref": "e2d25185-e3be-4eb7-a69f-7e795ac5493c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "80fb408e-8e53-4762-89f1-b7f345354d25"
        },
        "item": {
          "id": "7b37696e-d701-404b-ba2d-458fd9a63e05",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "84808c66-c219-4fa7-9e95-cfe66c8d5f93",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "796eba63-8022-4089-9ca2-9fb78e1ece86",
        "cursor": {
          "ref": "3814ba60-da7c-427e-a029-fb19d6625185",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "da67cb79-2ce7-46d6-a568-8a3361b60eab"
        },
        "item": {
          "id": "796eba63-8022-4089-9ca2-9fb78e1ece86",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "274e769b-f119-4de8-af24-20760ebb994b",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "12c45fb5-6c9f-4555-bc7b-f8ce0e6a8281",
        "cursor": {
          "ref": "bca16022-f8a8-49a7-a5f6-daffc56a553f",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "40f2b624-4a21-4192-bee8-d98c85b75dd9"
        },
        "item": {
          "id": "12c45fb5-6c9f-4555-bc7b-f8ce0e6a8281",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "93e0d76d-18da-4213-95fc-e3f68a3723e4",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9022caed-2ed0-4d05-ad1f-7415a36deb48",
        "cursor": {
          "ref": "1fc78b5f-c845-460a-97b3-7f96c0fa701c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3e1952f2-401e-403a-bedf-c8b6c93ad221"
        },
        "item": {
          "id": "9022caed-2ed0-4d05-ad1f-7415a36deb48",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "05de0202-99a9-4a01-b48a-daccdbb7f90b",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f4114412-1130-4243-86c2-45f2caf0b8af",
        "cursor": {
          "ref": "92974c6c-3180-4837-a110-eb7fdcd1e342",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cc96e986-a209-436c-b936-563ae6c02517"
        },
        "item": {
          "id": "f4114412-1130-4243-86c2-45f2caf0b8af",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b3a41f78-db8c-42ab-a645-831e857860f8",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "027adc90-04af-4792-ac9c-f738af7f7a7c",
        "cursor": {
          "ref": "2abb9b75-5cb0-4c61-8ec1-e24934a3c806",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1217feda-529b-4b94-91f8-0d01e2e3a1c8"
        },
        "item": {
          "id": "027adc90-04af-4792-ac9c-f738af7f7a7c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0440a6cd-a123-42e1-930b-cf4f1610d346",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e1c3b2ae-38ba-473d-8597-cbf44d084aa5",
        "cursor": {
          "ref": "2ffc5d92-02d3-4f12-b962-a70b259986b7",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "331159bd-6744-4106-82d5-fe322e57fac3"
        },
        "item": {
          "id": "e1c3b2ae-38ba-473d-8597-cbf44d084aa5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "44fa863c-af4b-4ebe-861c-bf330f980f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cd0164-5906-4b0a-92d1-7a88e86a889a",
        "cursor": {
          "ref": "a35172a3-3ff2-4183-9528-cb483c966990",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d0cad444-c334-47d8-b95c-4b83860f2443"
        },
        "item": {
          "id": "21cd0164-5906-4b0a-92d1-7a88e86a889a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "80767f32-e4bd-4129-91a1-f9e136462831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33708c1a-563f-464b-9e8c-7aa6840cc4fc",
        "cursor": {
          "ref": "045d3d1a-c46d-4724-b8ab-7d4d7603260b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "698f016d-09a8-4863-94f7-027e74755a0e"
        },
        "item": {
          "id": "33708c1a-563f-464b-9e8c-7aa6840cc4fc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dfa37174-2b7a-40a0-93e0-f51cccb625d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8633d3f-1da7-4adf-a5ad-ca0d5ee5bebf",
        "cursor": {
          "ref": "5a797012-f2e2-4a66-8647-0f0289de4b63",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a2bf10df-de2f-486d-855a-e57ef12a1ff5"
        },
        "item": {
          "id": "c8633d3f-1da7-4adf-a5ad-ca0d5ee5bebf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2f998bcd-9623-4faa-af90-a1f43c85df00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3805792a-8b4c-45ed-b186-9e80249d1f17",
        "cursor": {
          "ref": "5697dc00-ecfd-4118-bc00-7744fd2a191c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "535b194f-57cd-42a1-8384-4fcf3094667c"
        },
        "item": {
          "id": "3805792a-8b4c-45ed-b186-9e80249d1f17",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bc3ab319-accb-4017-8676-8de67e568d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5896ae-d1a8-4c92-a24b-1a7578678f3e",
        "cursor": {
          "ref": "38a8cb14-d11e-4d44-8993-77686020aa47",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cf7dea02-7e12-4736-8638-390f7bafbc8a"
        },
        "item": {
          "id": "cc5896ae-d1a8-4c92-a24b-1a7578678f3e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "02589303-58e2-44a3-9760-9f75e843f3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c55008c-c292-4fca-85b9-5fb1ff2d3aa7",
        "cursor": {
          "ref": "581fe9dc-8780-424d-a688-625691398be9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aefdbb28-f0d5-4213-829e-69b448f41e23"
        },
        "item": {
          "id": "0c55008c-c292-4fca-85b9-5fb1ff2d3aa7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9a9734ac-1f31-4397-9d7e-7a79e0f79b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5088aa18-289b-4801-bf6e-cc26d4d8b72d",
        "cursor": {
          "ref": "c707a3c9-4dd7-4e1e-93d9-f5674b684a7d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2f571c3d-43fc-4566-962b-16301fd17042"
        },
        "item": {
          "id": "5088aa18-289b-4801-bf6e-cc26d4d8b72d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "71e99e3c-01f1-4666-bd33-55ba48a6c59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ad8a70-666f-46aa-9579-18fcaabf1973",
        "cursor": {
          "ref": "ccf73823-20e2-4951-8c3e-3e69d8e209a3",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "70b8aa68-e0ff-439c-94ba-cc3a22c6e30a"
        },
        "item": {
          "id": "b6ad8a70-666f-46aa-9579-18fcaabf1973",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7a0c4574-71d0-4b93-9407-805242787a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655dc344-d1cc-4bcc-b8fd-3e9ffe4415c5",
        "cursor": {
          "ref": "4596e448-f208-41c6-8848-31a1de1d8cb1",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "facef921-3789-4b90-a1d9-dafebb86c03a"
        },
        "item": {
          "id": "655dc344-d1cc-4bcc-b8fd-3e9ffe4415c5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "486fd04e-b9b5-4294-946f-1699e4fe59de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15389881-ffe8-493a-b5c6-8ce919f4a736",
        "cursor": {
          "ref": "9e2313f1-1a98-40d9-80c7-7835c6d16716",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c5c40412-f296-43b9-b31c-27c0a50161ab"
        },
        "item": {
          "id": "15389881-ffe8-493a-b5c6-8ce919f4a736",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "71603fd9-d53c-4762-b145-ce3d2d49cb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e8e33b-49b1-4fe4-9fec-ec54cc7a22b9",
        "cursor": {
          "ref": "332640db-58c0-4397-9630-301366f97bd0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "97a6e534-991d-4f2a-b4f4-947077dc102f"
        },
        "item": {
          "id": "f0e8e33b-49b1-4fe4-9fec-ec54cc7a22b9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "79ee6aa0-44de-44ec-babd-5e93a8c3a759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b296d7b-43f8-4bef-aa38-040dd522a4c7",
        "cursor": {
          "ref": "29f7fe11-c0ce-4d5f-b8d4-c3f00761c289",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b7a12b4d-9ff0-4411-a7df-6e3529b7147c"
        },
        "item": {
          "id": "6b296d7b-43f8-4bef-aa38-040dd522a4c7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7d47b3e8-18d6-4769-8469-92a5d75a7fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cad96f1-6a21-4ffd-b9bf-6ed7bdf18a33",
        "cursor": {
          "ref": "1129ae7c-6994-4453-9dbd-594a085420cf",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e5075f5b-0350-49d0-bf27-5b5dae338430"
        },
        "item": {
          "id": "4cad96f1-6a21-4ffd-b9bf-6ed7bdf18a33",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "132d0834-bec7-432a-b6d9-21d993c64be4",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "128f81ed-93ee-44ba-ad2a-3ddf0b5aec2f",
        "cursor": {
          "ref": "5ec3040f-51db-4136-830a-4273651982a6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5098d77f-045e-4db0-947f-c7c63f4e2829"
        },
        "item": {
          "id": "128f81ed-93ee-44ba-ad2a-3ddf0b5aec2f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6664c109-dd9c-4c15-ba83-43978d1e5242",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4e7db9d0-6f37-45e8-959e-8adb47353192",
        "cursor": {
          "ref": "7c653baf-6b04-4b58-bb31-b1289e101509",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9e05cf28-a275-4a29-a4a5-a7836cd72d0b"
        },
        "item": {
          "id": "4e7db9d0-6f37-45e8-959e-8adb47353192",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d4cd1886-9df0-4112-af67-15f27cc78a75",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "53c5ff6d-24d8-44b8-9430-505c1ffb58a1",
        "cursor": {
          "ref": "a716b204-3517-4d92-90e9-818718f931fd",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "700007a4-a893-4ee9-b0db-a453396424ce"
        },
        "item": {
          "id": "53c5ff6d-24d8-44b8-9430-505c1ffb58a1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "45ff4d3d-029b-4a8f-ab64-e4c0da5d3d60",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1e1fb1df-dffb-4716-b486-1dd11b1411b9",
        "cursor": {
          "ref": "cee6160f-4770-441b-97ad-8132b084767a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bf68bbb2-55b8-4780-87e6-bae9786bf9b9"
        },
        "item": {
          "id": "1e1fb1df-dffb-4716-b486-1dd11b1411b9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b3d0c59f-7a7d-447b-858b-72be78109bec",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4a9f568a-b767-4d09-871f-1199581b2097",
        "cursor": {
          "ref": "0beef655-2436-42b4-a1e6-8a90b2322ead",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8487b1a2-263a-4022-a0a2-78f17e7faec4"
        },
        "item": {
          "id": "4a9f568a-b767-4d09-871f-1199581b2097",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "894122eb-72b9-4bbe-9b3d-882450b61722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d80fc37-35ac-40b1-bf34-3bb86c1f780f",
        "cursor": {
          "ref": "fe342262-74a4-48aa-8e87-5e482914b208",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6b1b0551-f111-4c95-a658-0fbfc2597e30"
        },
        "item": {
          "id": "3d80fc37-35ac-40b1-bf34-3bb86c1f780f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1a97dd9e-4cb6-4666-a9ce-05f559c605b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af93d1ed-f9d8-46ca-949a-8ebc6e44c569",
        "cursor": {
          "ref": "6646fdfb-d400-4583-9e6a-8bf2efa86cbc",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c91d9bb4-bcaf-489a-b31a-24bb88cc9ccf"
        },
        "item": {
          "id": "af93d1ed-f9d8-46ca-949a-8ebc6e44c569",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "abcb7a8f-f523-4094-860e-99e84282e920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc25e211-8fe1-4863-90fd-870137998a0a",
        "cursor": {
          "ref": "5b63a41f-ace6-4f98-8f8f-957d92cd6c24",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c843061-2875-4261-85e7-462fd2ffd830"
        },
        "item": {
          "id": "dc25e211-8fe1-4863-90fd-870137998a0a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e4111d49-36f0-4fa3-963a-4400f7ec310b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf46e58b-ba7f-421d-97c9-ac8f86b6747b",
        "cursor": {
          "ref": "7ee49f7c-d6b5-4f1b-b1b8-b64983f357df",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "29dd600a-25bd-4ab6-ab9b-0e3c21c9c72e"
        },
        "item": {
          "id": "cf46e58b-ba7f-421d-97c9-ac8f86b6747b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "972b74a3-6729-49c0-8080-e4ef7925909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378020a6-4892-4aed-8529-1a3ad1c84ba4",
        "cursor": {
          "ref": "e883dcb9-f7ac-4ea9-bbd8-4c2d2cdb8335",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0b2115d8-a13b-4178-a8cd-ae234ffe3cc6"
        },
        "item": {
          "id": "378020a6-4892-4aed-8529-1a3ad1c84ba4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "176d4899-f23a-45d5-a6a8-db8a9a027a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed93864-58c9-438a-89f6-b5ea3a0c35af",
        "cursor": {
          "ref": "7c17c1c2-e0df-48e3-9c42-4497c1ff8f92",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "dbbc92f1-e92f-49ca-a37b-ad92fb64bc3e"
        },
        "item": {
          "id": "9ed93864-58c9-438a-89f6-b5ea3a0c35af",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e7d86fd7-875a-4de3-8fdb-3a044d9345eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c920451f-6755-437f-b458-9f75b06ea606",
        "cursor": {
          "ref": "32703f63-9f19-4a81-9197-79eef8219a64",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8f01261c-dd94-456e-8038-13c6fa760f28"
        },
        "item": {
          "id": "c920451f-6755-437f-b458-9f75b06ea606",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9989b53b-4907-4dcc-a516-26d902b88891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aac716b-63a0-4a6a-803e-4a6b8d5c59b0",
        "cursor": {
          "ref": "c2ea3ffd-de0e-4215-b6d4-dbe5d4d71956",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3abdc6b3-c8bb-4126-bbbb-4ca00ea25362"
        },
        "item": {
          "id": "4aac716b-63a0-4a6a-803e-4a6b8d5c59b0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "883e21c0-6f10-4754-9841-db95f907e9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f535c000-5d07-4add-8d36-e9ec181ca284",
        "cursor": {
          "ref": "ba65051d-a487-498b-90a8-0e1694602641",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "00ba8e55-19f2-4094-96a9-6593249deb37"
        },
        "item": {
          "id": "f535c000-5d07-4add-8d36-e9ec181ca284",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f1f1c6d9-1242-4ef9-b950-510af9a15591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f137e5eb-5509-4d76-aca0-8816c3fdcaa8",
        "cursor": {
          "ref": "5c6ced77-e4a4-4071-99d9-e3ccfe005c63",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "72679ae7-ebae-47d5-b26a-fa962e4582b4"
        },
        "item": {
          "id": "f137e5eb-5509-4d76-aca0-8816c3fdcaa8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "89a4652b-cc30-48b6-80c9-216f7dc43820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d493a2-302f-48f1-a0d6-40333d51d42b",
        "cursor": {
          "ref": "7c92c50b-d33d-4c5d-9c64-4bc9a764de8d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2c6e5290-b167-4e86-adc6-04e03186038c"
        },
        "item": {
          "id": "e1d493a2-302f-48f1-a0d6-40333d51d42b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "00da37f8-489a-4b9a-8405-24d4416e76ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e415981e-e8f6-4b54-9b0f-e7eaeb9e9080",
        "cursor": {
          "ref": "aa7f8c10-687a-44c6-ba38-608999935562",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a535d29a-19c8-4035-bdc3-ba58dc8d9d56"
        },
        "item": {
          "id": "e415981e-e8f6-4b54-9b0f-e7eaeb9e9080",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1920e368-2990-47b3-b260-438d1cda7faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cca115-dcc1-4686-831c-4b36cc081fc3",
        "cursor": {
          "ref": "c52a456b-0b68-4fac-bbda-8a3c9f9f4be6",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "91209c1a-8d7f-4a9b-8fed-326e4382d08a"
        },
        "item": {
          "id": "a0cca115-dcc1-4686-831c-4b36cc081fc3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c4b8686e-4e44-4814-8140-7a78a629a415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60cc50a-cda4-48e6-b09d-a96fb7489f42",
        "cursor": {
          "ref": "6edadbf6-58c9-4e53-a8a5-36d27a34164e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "19760b0b-fc70-4c6d-a7de-61b5ad456fbe"
        },
        "item": {
          "id": "f60cc50a-cda4-48e6-b09d-a96fb7489f42",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9cee6576-c99e-4080-b058-8beeebd6c802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789788f2-3f9f-47c2-9593-f58293dd8fb3",
        "cursor": {
          "ref": "cc7958f6-f7cc-4477-99dd-5cab1209c51b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "70a940e8-6bc4-463b-81f2-fb427527cc76"
        },
        "item": {
          "id": "789788f2-3f9f-47c2-9593-f58293dd8fb3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "695b02d7-f625-4ad7-863a-502b086246a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49867d6-dd4b-41be-95d4-1cb6bf077df9",
        "cursor": {
          "ref": "27922173-136e-4b38-85de-5555f9531356",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a4337809-ab13-4864-b4f7-e5b100a7571f"
        },
        "item": {
          "id": "e49867d6-dd4b-41be-95d4-1cb6bf077df9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f3b9c54a-5440-4bc0-99b3-a2de537f5093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e01935-a54b-4e0b-9c8e-33403a30e64d",
        "cursor": {
          "ref": "8512c48a-a9ec-40c5-84dc-1eef2362ad08",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "184fb9dc-a7e0-4a50-9f20-f47443d7e9e1"
        },
        "item": {
          "id": "43e01935-a54b-4e0b-9c8e-33403a30e64d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "252173f6-9ed8-40d2-a1ab-576cad5385f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea0a1d6-8661-4314-89c6-1592a1bc34f8",
        "cursor": {
          "ref": "d8babb53-47cf-4092-9c46-785b0a20567f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "48c9f0d4-de17-4f4a-9ed1-d391c98b084e"
        },
        "item": {
          "id": "2ea0a1d6-8661-4314-89c6-1592a1bc34f8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fdb7b076-1545-4512-a11e-bba5601f0737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896e21c1-a133-4e97-8578-5bc8d952b2ae",
        "cursor": {
          "ref": "a86e5750-5cde-47d1-a052-e9332e97c9f2",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cf83a70a-059a-4f92-8b95-786619de5ab9"
        },
        "item": {
          "id": "896e21c1-a133-4e97-8578-5bc8d952b2ae",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ea1a9174-7acd-40a2-a0c9-5c92ce91fb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94df494c-c874-4fca-bcd7-abde15bfc8f0",
        "cursor": {
          "ref": "98b1e531-ba22-474c-8d65-f01e0c862df7",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d18a5c9a-ede2-48f3-b147-729b14180add"
        },
        "item": {
          "id": "94df494c-c874-4fca-bcd7-abde15bfc8f0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6ada0791-d653-42d5-bbb9-9d895aca856e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc628d44-ce56-49f3-9148-43738191ad7a",
        "cursor": {
          "ref": "59ee8d8b-18e1-4345-92e2-7def01db1e3c",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "53c7c20e-7a58-485c-a58d-fde702913c51"
        },
        "item": {
          "id": "fc628d44-ce56-49f3-9148-43738191ad7a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e0289933-d205-4115-91fe-e2c0c28a88d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c20ad2-8b35-470b-847a-c86ed6e0d1b9",
        "cursor": {
          "ref": "9355cf8e-ecd6-4193-861f-5b9af8c0468d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "31655251-ddb6-473f-95d8-81507d646901"
        },
        "item": {
          "id": "e5c20ad2-8b35-470b-847a-c86ed6e0d1b9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b79708f9-d5d4-410f-bb07-e57e71cc5af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd73ee32-e4ac-49f0-9969-4cecf0437b86",
        "cursor": {
          "ref": "ebfef0bd-6eed-4275-935a-f5b615ca864c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d9625249-19e5-4123-832f-0d48d0ca8554"
        },
        "item": {
          "id": "bd73ee32-e4ac-49f0-9969-4cecf0437b86",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1c10a422-c950-42a6-9971-03554cd704ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435a16be-8122-4cb9-8efc-f6270989ec25",
        "cursor": {
          "ref": "17c16008-3462-490d-affe-a23b9e7fc5b7",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "edcd2c4b-9287-435e-b683-804f96022ec6"
        },
        "item": {
          "id": "435a16be-8122-4cb9-8efc-f6270989ec25",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c1c74446-9fef-4175-881f-79618f63e1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8a3c52-71fb-4e43-87e0-1e0064bae954",
        "cursor": {
          "ref": "70b93adf-ffe7-4c19-9b4f-e26010002c7f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9b696a87-9f7d-4276-8e64-add5ba9fb763"
        },
        "item": {
          "id": "be8a3c52-71fb-4e43-87e0-1e0064bae954",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cb3d3ee9-d5c0-4c6d-99c9-8e0f34c7b7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500856ce-3c9b-4199-8e7f-323ee7673f60",
        "cursor": {
          "ref": "ebfe62ba-525d-4a83-8ba7-850e599efd0d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5a1fe7a8-7484-4581-a502-2f80789c9f7c"
        },
        "item": {
          "id": "500856ce-3c9b-4199-8e7f-323ee7673f60",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9147b982-2fa7-4bcd-b565-8a9413a88240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252fd066-5e5b-4e9f-837d-4973171a3aed",
        "cursor": {
          "ref": "df8d6ec8-67e9-4e33-9bae-a09cb243d64e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "63af1627-ff31-4552-bc57-05affd415bd8"
        },
        "item": {
          "id": "252fd066-5e5b-4e9f-837d-4973171a3aed",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "43bbcb4f-f1bd-4263-84a8-5423ed5527f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02333352-e6ed-4d4c-bf6e-f3fc8126cd25",
        "cursor": {
          "ref": "e5ebefb6-f8bf-4382-aae1-9aff57d18f5c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bc8e449c-bf25-4405-944f-6b5da5edb6f4"
        },
        "item": {
          "id": "02333352-e6ed-4d4c-bf6e-f3fc8126cd25",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "64180dd3-45df-4faa-95c0-9986bc8989fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e71d3-8766-470f-a1cd-9f74e22621fc",
        "cursor": {
          "ref": "48c08ff4-721a-4420-89d5-9726882b006f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2340dadf-b8fc-4bb9-bb2c-e07e6383b2f7"
        },
        "item": {
          "id": "a17e71d3-8766-470f-a1cd-9f74e22621fc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "72b54fcc-180b-4752-ab48-242af674e339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21789607-8231-4e39-b1c9-f0e5d5987356",
        "cursor": {
          "ref": "9a85706c-389d-4cb5-8638-b4b0c534a471",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7b78520a-c7cc-4e05-87a7-d62bfa68c04f"
        },
        "item": {
          "id": "21789607-8231-4e39-b1c9-f0e5d5987356",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "333e5cbe-4c6a-4d92-a552-3e1550395efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ba8286-0bc5-4aa0-8de9-fd8a97326d37",
        "cursor": {
          "ref": "83756fec-547f-4d05-a58b-6069e9ee9f41",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f2448b3e-7548-477f-885c-e175ec68172a"
        },
        "item": {
          "id": "a6ba8286-0bc5-4aa0-8de9-fd8a97326d37",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "daf90c96-9d40-4129-b0af-ebb1784f147a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46f7004-a677-4c60-9186-6764357ed30c",
        "cursor": {
          "ref": "ca8d1eca-fc0e-438c-a655-1d9029b6e7b4",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "19794727-ae1c-48db-b4f7-ddddc04ef872"
        },
        "item": {
          "id": "d46f7004-a677-4c60-9186-6764357ed30c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9aa35966-2d07-4374-a8ac-b11fa7c7fa66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a98406-6245-46e4-a586-df88b94c20bf",
        "cursor": {
          "ref": "4a1ff136-0566-4d47-afc4-297fef55a338",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "10736a3d-240e-4bca-bc65-96de0e272741"
        },
        "item": {
          "id": "f2a98406-6245-46e4-a586-df88b94c20bf",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ca6bcdc4-0586-43ac-b5be-fd5a184a2b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898eebf3-8317-45c2-ba67-19061728cdc5",
        "cursor": {
          "ref": "500fdb85-118f-4506-9b58-8b940b5b65ea",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "22800d0e-a8bc-43b1-968f-d35a628d6ed4"
        },
        "item": {
          "id": "898eebf3-8317-45c2-ba67-19061728cdc5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5b9faa5d-faf6-4a18-9a6c-a5c1c539699d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64ab195-2273-42f3-a20c-15f09f8b6642",
        "cursor": {
          "ref": "0b646c04-c2ff-4b2e-a1c3-f252f09098bd",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d2d960c5-7fbd-438d-a9a5-026cd18e701e"
        },
        "item": {
          "id": "b64ab195-2273-42f3-a20c-15f09f8b6642",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5e5a1cd1-0ea2-45ca-a96e-df3cc41bfeab",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b6154773-0a4b-42c9-abcb-12adcc50ad34",
        "cursor": {
          "ref": "bc96c0df-039b-42d5-b647-b96037eba5b2",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "408a7eff-7cb6-4b70-9516-1cc290fc71cb"
        },
        "item": {
          "id": "b6154773-0a4b-42c9-abcb-12adcc50ad34",
          "name": "credentials_verify"
        },
        "response": {
          "id": "31a448fb-e24b-4ca9-b678-dbda7fa94c9f",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb43e1e-9bfa-4885-ad2f-7d10db09162b",
        "cursor": {
          "ref": "ac349cca-fdfc-497b-bf4c-089c729de931",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "564a0ad4-585f-4a23-a7aa-21aa7c37dc65"
        },
        "item": {
          "id": "8cb43e1e-9bfa-4885-ad2f-7d10db09162b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "edd1a718-8a75-4c61-b85b-9248313b005c",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "789d5c6e-209d-4936-857b-ebe397a6bb4b",
        "cursor": {
          "ref": "bb32b7b6-c3d2-4227-8630-ffd9f8cbc4c7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6764e363-b3c1-49e3-847c-95fb8eeac584"
        },
        "item": {
          "id": "789d5c6e-209d-4936-857b-ebe397a6bb4b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "671d0af0-892a-499e-aba4-3ba400d3e736",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789d5c6e-209d-4936-857b-ebe397a6bb4b",
        "cursor": {
          "ref": "bb32b7b6-c3d2-4227-8630-ffd9f8cbc4c7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6764e363-b3c1-49e3-847c-95fb8eeac584"
        },
        "item": {
          "id": "789d5c6e-209d-4936-857b-ebe397a6bb4b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "671d0af0-892a-499e-aba4-3ba400d3e736",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a4b97f-b78e-4a80-b031-3c866d29359b",
        "cursor": {
          "ref": "3ee53047-0831-4ed7-adee-6e8b7d8d47b3",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a450ebab-4d58-42fb-a5ae-b78784c47537"
        },
        "item": {
          "id": "a8a4b97f-b78e-4a80-b031-3c866d29359b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4b25968e-1c84-4da1-9d66-db802d630d3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c355d4-6290-4f30-9028-2253d62f0a44",
        "cursor": {
          "ref": "97cb6054-dfd4-41be-b334-3a28a01dc151",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f0b25012-3fd4-40b6-9292-0edd4766d720"
        },
        "item": {
          "id": "10c355d4-6290-4f30-9028-2253d62f0a44",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "18405958-7b6a-460f-9fe0-0376d30a458e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}