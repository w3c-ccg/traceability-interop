{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "948c57f5-c919-4321-baf8-8b0308673aec",
        "name": "Clear Cache",
        "item": [
          {
            "id": "974ab2e4-1e82-4d36-a70b-8f2e2d56b556",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a33b54b-4b1a-4a94-80ee-9634b025e07f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d8888c76-8cb3-4ad3-80e6-7ee9bedda6a2"
                }
              }
            ]
          },
          {
            "id": "a95f8242-56ca-4911-9e53-970f803c24ae",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b26191f-8d56-4d17-a909-999a4e913afe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d901c873-fdb1-41c1-8145-9c4cdcfe10e1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b822f594-4d15-4faa-a1e9-646461a3b731",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cbcfdf49-ecdf-4737-81d4-bbd7f4177dee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cc9a511e-5807-46bb-80f3-d45b8f119c4e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b879ad4-4be4-416a-8d88-933a5c87e9a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c4d091b-401e-4e87-93fc-b2102fd244bb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4dd018d-7cfc-4509-bbc5-663360821ecd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0cd8b488-7597-4467-8e39-dd64e47439be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "538d98e8-6864-4331-b8ea-56a583020c6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d115b108-a1a5-49be-bf07-3d6b5be02fde"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db0f1aa4-0053-477b-b64e-da3aac54ccab",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "88f3b9ad-5832-41e3-86bf-565255557b99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d816c50-f5eb-4442-96f8-6348dd4de0e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db7f8dae-ec15-4f62-ad5b-32d5880f5926"
            }
          }
        ]
      },
      {
        "id": "1651c9f5-1767-463f-af20-36bbeb41afb3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "43443b4a-501e-4900-9d94-9f8f07d3ee4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbacc34c-1764-47ab-acba-cadaf1674fd5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4c52c0ff-383b-467b-b686-75c622f0c74a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8ebcea-8486-4ad4-ab52-11c32f51bc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e5c78f3-2676-4dc3-9994-c9d3645839d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843e4a98-2e79-4230-a96e-68e722e02971",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fa1960-a7ec-4eed-8cab-9c58dcc8ae01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43ed2cca-068b-4ef3-ba63-1d2828da13eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01cf5aa-d3c3-4383-9837-c2019ab3e0d1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ee2659-073e-4bf1-8304-24cebe58d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad346423-4b57-40a0-9421-caf5f583daa0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d10225b0-283f-453c-b36b-1c5c357f94df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5d2bc46-8792-4673-81a3-db7fa8d9356e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340129eb-b27d-4e0d-b327-98d1d42990e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "626c6e94-712e-4e2a-805b-57127d2d9545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2458e15-9348-4c2a-a7b0-00856c47ef5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b929c9ff-e46c-41e9-a8f9-7ca696207edd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c8cfc0f0-6baa-44bf-bcd0-4851a38b8d18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "791647bd-ba66-49e6-ac19-1718b12bee43",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1acaed77-762d-4081-ae1a-b0a0d40eead4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0db4e4aa-0246-42e6-880c-abf1b816fdbe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1506c669-8392-466d-8f03-b7fec1c58d06",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "897320e3-261b-4e57-85b4-ce429bb7a43d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9e7dc8c-3cfb-4bd7-af37-a437a89f696b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edd4c23a-ebff-4511-a6a7-89616a43547b"
            }
          }
        ]
      },
      {
        "id": "1ada14ff-5239-4f56-851b-3e3bbc769139",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ff5198ee-87df-4d88-9586-decddea7cf9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be5a0550-33c2-4e2b-879a-88f5d0a763cf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "628564d2-3f10-4bdf-b4b1-952249e552ec",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92355e46-0120-439d-9c3d-655cfd662727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1983a1-3e18-48ed-beaa-c3981a23f3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5643a8-2c20-4fd8-8d89-4c179a45628c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31b496e8-5b75-4951-a10c-c86db6482205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0cf567-5dce-4967-9b37-3b256b043028",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8774e67f-0a04-46f5-b936-7c24784e037a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567ab004-bd5e-41eb-bf97-da9b7c9f5353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab971e0-9da5-42a4-b042-f851e94a847a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bdf803c-2293-4275-8295-e8d98024f665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1749fa52-1cd9-49a3-95c1-0396ed388c9d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365fe4ca-b7ad-4778-96b2-d621ab592178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5879a679-b563-44b2-af7f-8bed92024114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7250db-56c9-443f-868e-f5f107d9cf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7bbebe2-7c38-4788-b671-0a43a17bebee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87614070-f459-4562-bd96-6c4e4c88a03f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3546fe72-85f6-4330-98d7-8535c602d66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30add57-2a49-4cbb-8c13-53d28e7eab4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b31f49-b39b-489c-afe9-780ccd0ddfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96dfc6a9-8928-4002-b5eb-2cd52e2e4a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b7346a-812c-4bef-813f-e9fe6ee2536e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b03ad38-fb49-4b10-b20e-41ac13cf1ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0053620a-11d2-4786-8889-0958e6ffa318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb93495-d9c5-4f16-bcf0-8eaa1cd137e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ff81b70-201a-4241-a81b-d4ec1897add9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afce8fc-12d1-40ee-b3f5-94cb9039b65f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7e4710-7b0b-4383-aa00-7dab533e6a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616a527e-ea9b-4251-afc9-9383135cfb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5dbb64-bffa-4f4a-aa5b-69484fc954d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "009ebfaf-946e-4f3d-b2b5-e8b7c70d30ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e1c918-595f-4fc6-9b7e-9163c68992d9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc4ed01-70a4-4095-98ae-2a5ac15449a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de0eecf-c159-458b-b772-1314ab38aa4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f26f100-090f-44a9-9787-f89dd22d168b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1f7dd49-8493-452f-8ab4-936418440b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f6c1f9-076d-4c91-983f-f30c301a84ea",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47f6883-7e16-4732-869a-0e9861f9a0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178a83e5-7f47-4d0e-8972-49ad36329cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb95229a-1fbb-4a15-8bcf-700b5a9f3d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c36f0dae-392a-4b86-8769-fcbc777a4b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da677f89-8219-47e7-a071-0a77be2451cd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fb7ee2-735b-44ba-abf7-ad42adc49bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b68c69-fa58-487f-b56d-d5d01c65c795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b1a65d-5ba1-4d6c-b7a8-5a955e42c19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7071010a-baa9-46f3-992b-0b0b587c1bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b3a0ae-eb7b-446d-b71a-93898d02a7ba",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6dd022-4918-4d69-bbe7-f14202ec689b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7471707e-5b2c-4f44-9cdc-f4977da7e6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8850ffa1-58ca-4e65-9bb1-858e29aea420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd040965-6463-4114-9453-9ae25c54c1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21958c9c-765e-47e9-9565-d8b34b3c734d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5dae8b-2c3d-435a-8704-9f113e9274ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5edad40-86e2-4d96-afc8-c31ef3f599d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b0579c-1356-4e50-87d7-4684e4a8b546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2248d396-5fd0-4e3f-9325-52f3643c3ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca43333-80a7-4b41-9e85-b43db2f5c815",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5565a6ea-7785-452c-a690-9c128d84953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad1068d-478e-4179-a401-72847cc840e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b46a615-3f49-45c8-a284-b344ad34e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67b32428-5a0c-4e54-ae52-9ae70339b4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa249b7-cb23-4f76-9d54-efb189ffd302",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e9dfa4-f5a8-4087-afbf-7be0af48aefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f61b303-1f77-4037-984e-c79422cde66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff50e0b9-235e-4a59-95cc-82148598c76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c25baa0a-6a94-4bd2-aa3c-bf4dc61c1129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241d82a2-80ea-4d5e-ad5d-e8ec0acca24f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260fe972-7c0b-4268-be30-930bde2a6bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56e6c3b-dba9-4caf-9ef1-9389248ed9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882d207d-e6be-4318-96e9-a2ffce6a2f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "680f11fc-1a06-4dca-93b5-4b8bba43369f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e8dd89-569b-4d75-ad60-f7ba1a793bc3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99268ad-4dc4-4778-882d-20bd3a5d35b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0e6c7c-8291-441f-9815-35d41a019082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297a68f2-9b75-47b2-84b1-16479b5bdcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fed55cf-5c62-4bd0-8b53-d5435d8b1440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f018975-5b9c-4c84-88ff-68a63ab4832b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0781ed-58a5-462f-9a20-59e9cb780850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07af4c3c-bcc8-4fec-b767-e6757918896e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5d9af9-f3c7-41d9-bc15-12d3ec9e6896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f647cf25-4c9c-449e-b480-7fce325c7313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea87017b-9e16-4537-b156-1d04c8aa5ee5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a68bc8-72e3-49fd-b487-c6f9e0e3f392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5201f96e-7fc4-4838-81d5-202b247ef225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e4166d-1bd1-4bc8-b905-27dd1b520216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29b76065-0e67-4864-ad78-b47cef9061e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302796ba-0366-4cb2-9b48-825cb58481d1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac91b0d5-1fc9-4890-b66a-d72523743553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108e3976-ac1c-4fbf-8f26-362b6eb83185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0247da29-2d53-4d65-a908-003409e3cb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf613d8-0bb4-426a-ad4e-e6c05c3a348b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6108aa71-4116-434a-8d2d-228bf15d15d9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff9d644-db71-4360-83f1-494d0048638f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd23e17-9b21-462a-825c-71ff813f1cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c561f35-6158-4d83-b7ec-1e1aaa4f1462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01bf7ec-f545-4c0a-9b4c-0c005d629c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348f52be-2967-45e2-847b-ad300a9ee739",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b34ff7-fe42-46b9-aeb2-4e86596d0733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4f42c2-002c-487b-9022-7300d6dfc473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb83f31-5108-4748-8d7b-4b48354e9284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e32647-bff1-4a73-86e5-ec2171e272f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcf23b9-2261-46d8-a331-a5a76ebee9d4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03516b0c-18cb-4103-b45d-0ade88735a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7075e03b-9f2f-4eff-8c1b-cbd243a7d8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9972277-6027-4fb4-9533-69c81b1d957d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3d7cf4-e840-437c-8dbf-a2dc81fe327b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70f2ac9-fdc3-4812-89eb-79ad580b035a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c0a987-d1ac-455f-8938-b88cbc9680f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841ec788-6f3f-46fb-9081-b86d61d5542a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9fa97f-0150-4ebd-9fb9-40b5a6c75d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff23c1dd-454c-4405-af4c-42a646657f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4110f4-e634-45ab-9e22-b7192dbcfff7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60286d1-0626-4bb9-aea5-aadbff854ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e198f40-ace6-40b7-9936-f5edf5b4bdc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d23f5c-a667-45c1-8270-5e4922da15cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6125a7b2-232c-404a-8ce3-0459b9fc8f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d477ee3f-b97b-4c2c-afd9-36d4225c5b0c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfa500b-0eb0-4d5b-900d-58059ed1dd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d79d259-7eb7-448b-b174-0eab37c5b6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9915e0-d26e-4791-84cc-5c3aa61d3648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c7f927-3127-480a-be8e-be0e3afe5c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17329cc4-d4fb-49e8-ac5f-6db1146d1cf4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172fc8ec-69ce-4305-9280-69359d29f45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f17d94a-fd1c-439e-9454-b6499bb87a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15580206-411d-4a46-a88c-316587380f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f554f55-7c88-40c2-b50f-652f7487cd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc479e7-508b-4eef-b8ad-475ae12fb3c8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ae79bc-571a-467f-afdf-6e7316f24a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab343d3-fc06-4139-b1fc-205e4a4c6c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f124eae4-ba9c-470d-86c3-e5a709d27091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ea2db7-7fcd-4304-a3cd-ae7a50057fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4009df-681b-405a-9264-a07fefd4e744",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc7b3c6-8833-4b7d-b3d8-4cfae411814e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3973aec5-cfa4-464f-bc2c-15cd264004c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c488a42-9b20-486c-8a1c-8d729a4ad38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62860495-4afd-4520-a4af-eda39d8aa6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695eae89-19d7-46bd-af16-ab5cc86cbcfb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bb9f6d-3672-4af6-91d1-517760f5230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe54836-4d0e-4948-bc0c-ecf717539662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be725a0f-1c25-40de-936c-e4a50335ca59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d85c49a-d5a6-4ab6-bd97-a42aa17480bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69982a6-4788-47d1-a0f3-50573def3388",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e54166-cbed-40ef-b39c-d53fbff38e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47400ebb-725a-49b3-900c-9a34434e142d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff6acfd-5bd4-4174-986d-ee59805c76e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8447ef4c-63db-467b-a365-79ab2d9d8160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89adfd82-5c54-46ba-a5d0-a75a25fa9723",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2dc6cb-9ceb-4987-8e8e-0373e8dd48de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cadd7ce-d825-4c19-99d9-c0b795dab6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f0ce16-5fb6-4e35-877f-b6dc01f92666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1940269a-9ed1-49a2-bd1e-f5d518f3c801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6619b5aa-11f3-4d7e-b05c-944e41be8f18",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab28ee24-461a-4385-b8a1-1e26f056b91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1823b0f1-5bbe-4aea-b3db-20959ecc0b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5104cd42-52e7-4b1f-ac31-d6ccdf41dd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6388cdf-1caf-4e10-9999-2a8cf50a3a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf95db7-966f-4dc1-998c-aec294d6fa6f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9e4220-b486-4cf4-a891-26de00951f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48994b1-b32c-47ca-8dfd-7f973a7aa0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf16619-fd10-4611-acff-0fd5e57c1249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a4719b-d57d-4383-a64c-a0225ff0dace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a053f20-149b-4902-bf8e-daeeb0df6389",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1195840b-107e-4445-a932-a21eda52dc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9402c03a-1e8c-4255-b587-177ac26cc872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d16d76-9289-4b25-95a6-2cdcbfe9ebab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b73d3cd5-3342-4acb-879f-d8b22155eecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bbd81f-a581-4f64-8bd7-4d1cceb9ec8f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5857116-9102-4525-8739-454407dbf354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c08c71-ef97-4baf-89d5-08c389872951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03579baf-86fd-4b8f-b7e2-755b19c83793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "886216f6-dcdb-4d06-a88b-c19a9ef86384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afdf1ef-8f31-4bdb-a9dd-45be4c78b038",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d29407c-6de9-49bd-8c57-e606fbf15922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54301620-e69e-487c-a4df-741ed2b38fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5729f6-a1d3-4aa2-8e04-43e69b38269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa91baa-8ee8-46e7-970c-8cac80e4fc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c5ec36-c3fb-452f-8cb7-62b9a74cb0e7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f65d2a-477a-4dec-bbbd-af3acafd1eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4a9b922-64e5-407a-ac3c-9d255c5486d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b977cea-ae3a-4a2d-9a49-40cfed5c7ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5709751b-847e-46f0-8f3f-bcaafaf3bb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20783e5f-ce47-4278-931e-9a304f6b9626",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ad9ad7-e427-45fb-9538-1fe5a2c6feef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf07bb4-7339-42f8-a0bd-f52cbc66bf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8afc67-16d5-464a-8eff-8d65f8f2a4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa8cd569-51a9-4927-8033-2ecee1f6cf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a8cddc-1838-4758-ad8b-20ba6cafa88e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2367c717-a4a0-4953-bdc4-afc332dce186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138427b9-2ba6-4d91-b910-7222ee3c6491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282198d0-f185-47a0-9d4a-0f9247e344cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b643c61-d1c2-43bd-923f-9200bdfb3aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b7f8e9-e679-4fc7-ad83-261e423de023",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f62dde-da9d-4804-9931-7a00727b67a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f01966-e02d-46e3-9e73-b28f7c2782b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e60c900-08a6-4028-bdbc-3ba97014968f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf4d365-3cee-4b14-a3fe-6dfa7966e36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea2ebd4-7052-4b0d-aaa9-5a0ec120f5cf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c511eab1-9364-47d1-90ec-bfd9440a6a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f94150-cce0-4af8-9416-1b8cede8aefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb99ad2-ca07-4ee7-bafb-b641d319ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "601cebea-ddb3-4c68-9df9-278e5f3028e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf17789-bafb-466a-a8af-fd4284f96865",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7b7239-d5b5-4f3f-a94f-77e5429f4125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7cf73fd-22f8-4641-b218-975fc1084640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61565a26-f35b-4c27-822d-eef7af4b325c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9612936-7e5f-456a-87e0-f5b1dd69fa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1461c4e3-e993-4a07-b51a-a9664eaa5a7f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1eb09c-34e2-4254-95b3-2cf851671360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac02991-57aa-4c5b-aee6-e3571fe1137a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dffbe93-ac30-4646-8d8a-e660f89d4393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2018a826-be2a-4d34-a3c8-3aab77ca32d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7919b119-91f6-4e41-bed1-6ec66667edab",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd78feb7-abfa-49ab-8f20-475cca5a330a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f344e43-b107-46aa-8931-a0c278286089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2dcd5e-aec7-4e00-993a-43c388b109ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "74d4b6e7-76df-4614-bf41-895dba8b539b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd6805a-13fe-4f8a-b0d1-25dcc5fe9bce",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a364b546-c9bc-4832-83b9-eaec23632c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3892f4d3-0057-48ee-a9cc-a00bd9fef2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7048a973-7c6d-411d-a216-1bb868cb6619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fad205d-893c-42cf-bffe-575a7d0141ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b476be-7278-4789-9111-5692f01a1728",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2568f81f-361f-4440-bee7-8c47c9dfe3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eaf5478-b09a-4a30-a5df-5fc476f18ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2789872f-e72c-40a1-8eba-8b56ec7c8651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c58617-f769-402b-b330-be0fccd82c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213bac6d-f0ff-4a77-8a3a-9b810fd37eff",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f272f7-d179-4869-a8d2-81f3eee256c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f39433-1fed-4035-932f-b05a96eeadda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caf4354-f8af-4cba-8efe-ae3ec3491001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "735cf7ff-8a46-416a-9500-d124e099d22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16413456-6a23-4685-8f57-3a13f9bcf351",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ffca1c-cc3c-439d-a197-cfafc986d574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec82739e-93dd-4302-8c60-5ca42de3699b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d71f41-0e81-4f3b-865b-f1a68a645c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fc3899-d289-4da3-96aa-9b32a46eea7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f70c39-77af-4b54-aa1c-790f20c0c3dc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c810834a-990e-4c3d-a4df-81fff14f6676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f59b7346-2bff-4697-987f-f164f1a01149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3fb1bb-b6af-408e-8f8d-1055f04a3217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0961c8b0-cc12-43f3-bdaa-95436613047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341c5630-4dff-4af8-973a-4dac240fad3b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809e1cf4-7846-45ea-aeff-1e36b7b3a738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff159f7-59cd-455f-b0f6-acc163e29095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78509b74-ab44-4254-9af9-5972548410a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f4f475-2f97-4bfc-8d4f-0c10ad993f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dcfd23-97bb-46a0-b77e-97a6590d4c79",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05648776-69d7-44b1-858b-c51615a932f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5803ca-9e43-4e5f-abe1-ce60b4aa4584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a1ab95-e631-4964-a051-f7e2d624b009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdaa78df-36cd-48ad-a476-b4000320430b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30592c5a-3786-4293-949b-fd442c7fe65e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0500701c-daad-48c3-8a49-c9404b813ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6517ddd1-bcec-4459-a304-813d474679be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5338eb93-a9d5-42a0-8c7d-4bb7bdc7c906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1c8c43-dee9-45c2-86b9-8dcba36b575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ce79a2-03b1-43a6-887f-0b59582e722f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4975b33f-d05b-4e34-ad7a-cc40a959a5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd1a3a4-032c-43ac-8f4c-75450ef0df00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a26945-fddc-494f-9845-089d2ff3e326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bfbe75-b153-4254-a0e5-2fba5b29aa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e93164-6e16-45ed-9b7f-115d0d6f8958",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaf619a-2cfd-4326-a7d0-3c9426068158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7419eafd-825f-4626-a40a-d9f5c065b462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61a9840-f890-4a66-b8c0-75acf69670ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff82fb48-2960-4ee1-9255-3ac6aa3aa267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06061ddb-5d94-4591-ae03-0d9de622b23a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78824522-98c0-456e-8f40-4ad7e7005ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ef6c82-7276-4400-930a-76d6995f27c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06be80a0-0a93-402a-ad34-20a150759a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f547cc-c247-41d4-9026-a59c907ffcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5f9fc5-bcb4-4bdb-b33a-e20814db6773",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "963fa090-f4cb-4eb1-9eed-f68dee983cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72baafe7-c4dd-4960-a331-8037034d75c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdcdd5f-55c7-4902-a4a0-3f85d3b6d7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "553045a3-0a59-4762-91f9-d929ec9aae65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d674fd-6690-4569-a3f8-fca553965cbd",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3755bc8-1883-40be-be46-c30db83e38dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7798b0-712b-45dc-b2df-8bcdcb0772bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da776a5c-88ee-458f-bdc0-1522ddc16eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "496e12d4-f728-44d2-b33d-f4bd10b3e16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16416bd6-5744-4404-a439-81d0055477c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7920999-95b8-438e-861a-fce9ace5d196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7ae2b4-723c-4b90-acaa-b9401d2cf68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e39eab7-14da-4db3-b0e5-2cb7b9b10b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45d68a83-1814-4ff0-8423-7e169c39c65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f3335b-6fbc-46b7-9475-e822340a6040",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d479bd-9cdd-4339-ba0c-a4bc12bda0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8440bce-82c3-4482-922e-9de47e53d271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b02d686-6d05-4d3b-857b-dde26c8810a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78183ab5-371c-457d-ad61-4e7eb80e1edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79781e0c-a7f2-449b-9195-a69827a426a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c004e825-fb36-49f6-bc53-2b740c96c9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0687f6db-017d-48d2-962f-9f0be92ddf3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d27dbc9-db49-4d2c-9a4e-ed8ef722737b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "34c25d01-7039-4c4f-9882-b06e89836799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fda0114-7be0-4ba1-8630-2785f99156d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d622482-28d5-43aa-a004-cd78cfba3330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8f601f-ac10-46f1-abd1-18dfe5006f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310f8331-9f43-4385-b3d7-37eb7f7919ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c21ca5-ac42-40ca-8bad-a96aa0afe4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2c95c8-833a-4357-a284-382f293309c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81436d66-2d7a-4c86-b24e-6d8a6b91408f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944fa92f-003d-4e82-89b1-e0b2298ab525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a835fa7-5af8-4c32-b7c2-4e0e9892e740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5d6220-7651-4dc8-925d-7f9bae3668b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a012249e-fe8f-412b-9dfc-0626fa542bb2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee40937-b5a8-4a5b-88e7-d56d60108891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76709123-7d7d-4d2d-8100-bd4685e30c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c940f9cc-ea52-499f-a853-0360fa362c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e96ae2-9c93-4506-b1bc-acb39a57ef2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860f8fe5-a586-4e0e-bff3-c7a9e2310093",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26567c69-6268-43cd-98ff-6072e41b42bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078470f7-503b-4ad7-a817-9e4b08d4ef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41b7366-5ff2-412e-aafb-3d81af47af04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed4447e-c60c-46b5-8d66-65d8447fcad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843afdee-997f-4626-94d0-ae288fc95a1c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f789c3dd-6c01-4a04-9c10-0549d07f41b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69e79b4-8435-44ff-a536-2033b442761c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa695c9-84ea-45c0-8fa4-7e08106493b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9d97b3-62e3-49aa-8cc0-030faca86da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cd8445-36d1-4dc8-9f67-f4c0903a5a96",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abcf845-4ece-41c2-b5fd-07114e81e838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfc6e6a-a67d-4fd5-b8c6-7f253a609e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11caef3-061d-48b6-84be-203cb279645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f841800-a8ae-4ee8-8db8-1ec1960150c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e264bb31-23a5-48de-9a49-05e9877a854e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41bc999-fda2-4485-86c2-52bd9e678c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c8444e-9721-4a14-9cde-c6debdda2a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff15a71c-5aaa-4d4b-9bdd-aab713fd7a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "517eee82-8e50-4cf0-9f58-c39f1a39b9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694be92d-fcb4-4392-81ac-453978d0f828",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e38601e-46b4-4924-85ae-f23652d88c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f22dbe3-33f8-458f-818d-daa243d0a27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9f06f6-265b-4da0-a0a5-196c2ea1e45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c93343fa-f76f-4a1a-a87b-c379ebcadccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e11e0c-4852-4173-9ac1-ad3353b5ac22",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cab949-fb36-47e5-804a-333752c8ad02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff564c9f-05f7-4b65-930c-ac1b7a96032e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cf7d48-9bfc-49d5-96a8-e9e62a3788e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb72cd9-605b-4f99-956b-878962113879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691c658d-55a9-424f-96a1-ed5112f6fb68",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a903e45a-bbd1-448d-8470-038157ef6c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb45400-2b9d-42d2-9311-bab6c9b06ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b35c1f3-4310-4ff9-b46a-c30b71dd5775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ca785a-277b-486d-9b14-c820d5a226ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08919c73-7173-46f2-89e3-97cc04e18dd4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c2f782-a368-433f-96a1-1fa87a31db99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68ffdd0-fde4-4278-a979-df36f374d665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767af8de-e5a8-448b-bcf5-40b40fcadddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfe0377-1a84-4c1d-a519-5d920813e99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1109d234-9e05-43b5-8c00-a84f47da52b5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d109442a-2a41-42ac-97a4-405033afa5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4378e9-fdd0-47f0-a431-d70f933333c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda4cc5a-4b50-4bec-b560-0c8e8644227a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e707aa3c-ca16-42d1-bf74-f52f719222ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3eca87-e517-4682-ae94-4616f430dc5b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bbd320-052e-4c0b-b0ae-e65e7ab69c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2083bf-2cf4-4362-9cfd-c85772ae8e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500b9964-479e-4303-ad60-b357ff214601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c55896f-cb41-478a-b889-8c0f2eadd60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55557b58-c894-4ce4-9bbc-4e634473d42f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae6101e-59c4-4580-a210-d889a8f78fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfee934d-5048-4d2e-81ad-61248cf8d846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ae4d14-5458-462a-a916-58fc7558ef8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86f73509-c02d-4810-a87e-3951f587228e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf02d05-e7b5-4e0f-a488-0f08c227642b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a21dea-0275-4594-afe8-13bc27768f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ae8643-e0f5-4497-aa1c-b67c96edb7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bb3106-87b7-463f-a71a-81ac7a32907c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "911d0ccf-3c03-478f-957e-e345b05f6095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2251c23c-26db-41fd-9383-02a781ef1358",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f23bb93-6f1f-45e6-ab83-ae3b83571866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60ff62b-174a-4766-8e93-5d923556dfb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b32d4bb-de2d-452d-abe5-54fc622cd755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de360b42-7a01-4ad4-831a-5b9d229cffe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df90ee6-cc4a-49c0-a324-106b4687dd4a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50e4119-7850-4e0f-847c-8e7abfe956c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762cd13c-c90c-4b6f-8b4b-1654a06564d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4ce271-6914-4925-9b7c-ab5a40db3cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5da938-c9a6-4927-826c-36fe9a839dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c887ef1b-bea3-42e8-bcf0-ccee953473c0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087ef6a1-3787-4e99-9c95-967b32847a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13489993-dc57-4388-9b7b-b85990132196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc67e4b1-fa33-49f5-9e5a-cf3fb8f478e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "503dede8-8390-4f77-8367-60ad8e70c9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a6be22-9719-4bc0-91a9-2172e3f1d53c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823d2e70-a367-4a00-a5ea-d677809db87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be956e0e-8f7d-46d3-9107-20bb689fed0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae08537-cce6-45e7-9c4e-227007f152b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c6b2db-6597-474e-91e4-8d2ebd18ef17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7006b5c4-e603-4d09-93a2-71256839b8ad",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d4e06c-36c5-46a8-8d8a-1bd69b57af29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea777f6d-2c85-4d50-9c4c-79da910efff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acda9b9e-6d04-44d3-a10f-f84e957470db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a235790-0b32-42fb-8050-3ed615125be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8a491e-1d0f-47cf-9639-56d379c07345",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70239297-513f-4dcc-963a-16c6147672c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad81d98-3b72-40d6-aa10-ef892cc89d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0084c2da-6974-4fff-a863-838181db27f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a65959ff-87ab-4e65-94dd-32757da6b9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8f56bb-0c1c-4497-8a05-fdfb237b3a13",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe0bd11-5f5d-4090-b51d-47c9e20ed050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5fbeee-d7b1-42bb-b6e3-581db26de610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9e3dfc-bd31-41a7-8015-db7982600c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a763d1-45eb-4643-b537-d5c9e1ad3084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becea1a0-079c-4a20-8639-0a460ecd7719",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409089c6-4eba-430e-9481-2ec612996291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3da968c-9728-4abb-bcfa-d4c1459fd1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da360e10-f538-4855-b358-c25a21ca4d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e460a6a-57b3-4395-862e-d766f788d160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c89664f-3f55-4f5e-8a26-6c412d46aa08",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d787a3a-5e94-44b7-a96e-72318c896a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c90137-c9fb-4d35-a608-0f1f4e203691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abf2815-76a1-4289-ab18-e62e9a14584b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1222398e-2c0f-4916-b297-cece02dc935b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898408a2-f095-4779-90ee-48ac9c7fbbee",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2b8321-d743-4f5b-b91c-167f54ab4363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e9cb04-d3bf-44e7-a67b-b3a086d4c4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d009012-b687-4cc3-9dff-46f9a716ef1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83283b56-b27d-4e6d-9779-1505f7b51a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e215d7-e17c-423a-a6f0-08a6002c907e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f090eadf-86eb-4c8e-a344-734335c037e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e58b34e-bd1d-4e7a-91fc-0c245a5ffce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94278c12-950a-4dcc-8776-10b969c5fde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b19148c2-b09e-4763-be19-cba6ff1bf569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f725a6b5-39b3-4290-b608-e6635226b94f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133c44ff-31a7-4c1b-8554-e3193ac3d176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2699173e-29f4-4c42-ab0c-9276329c2c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1125322-98d2-4bf2-a945-6e4a96c47ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34accfe-5b74-4542-b3fb-1cf66ebdfdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7fd0d3-b18b-447d-b8df-210f9237129c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93a94bf-f194-46e0-b2db-04958b0fdf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db2bf78-87b3-48f8-b66a-de18fcc418a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47a6e70-0a0e-408a-a825-3e8d9c855361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f10df3-edda-4c17-ac6e-f983ad06204b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ae5fa8-8c3a-44e3-a4c7-30864988d3ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3325bd6a-938c-49d6-8856-fc363d7e111f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71353fb8-ca09-408e-b3b4-af6299fd084f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caba05f-6108-4ef0-bf07-a5fed5f7953d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "89a75055-ee10-48f0-a2c0-365719e6cf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c008b9-19ab-46d7-aea6-bd3b26ee752f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfffd2a9-0f2f-4a6c-a255-f0a1bc78e6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d76e2e-23eb-4358-add9-686837acf17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b2940a-041f-4bb2-86ee-5b5272cda5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "77306628-8f08-4366-b69a-6a8bf4738496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87e5668-a3e4-4d6f-8b92-813cb992bcac",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4405d58a-ac3a-46e3-9ddc-6429bb69c6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fae5b13-a6cc-4921-9323-1fc3624a1dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a50810-814f-4b26-84a0-e4b1692e2e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5254895-ddee-48e3-97b0-215455dfcc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48164efe-52fb-433b-9b7f-68e289acabc8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bde0c1-1e00-4115-8273-06cf0fa5782e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf669e7-dd38-49c3-bdd1-312f54067c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67552d10-921d-4c57-9655-aed6ab2ae369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "84210f04-3372-431d-9688-e73f7559b9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9212d4cd-6a81-449c-a250-3251bd4f3e96",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d276d8-3346-4ef0-870b-295b38138fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "173f9643-2907-4a0f-8069-1fd188080ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fff838-0cff-4861-93cc-2717e99a9b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d32215fd-128f-4ff8-bca4-c0f5d051d5e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6cffc806-b3be-4540-a0c6-bcfe473d3841",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f713f2ca-becc-4593-9b7f-c1bfe39582ad",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f651c0a-0d49-4a41-8808-1dec22412bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17126ec2-d3b3-4134-8058-45cc70228b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d62ab-be47-4a71-8d09-0503d96e0f1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90093479-4376-4227-a22d-2ef7525ff688"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be68ef28-8404-42cc-8155-83541e8cb673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2c1d05f-06f3-4e8e-80cb-4cb734151a8e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a5c089-047c-4cea-9704-40dd65a4c092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35712a06-4247-4c33-858a-3fefc90afed5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ba26a2c8-2823-4ffe-b274-3702e7300d57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc943723-bc0e-4e45-84d8-cba34279751f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "327f829a-e1a4-4060-817c-6c591c258a21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f5b282d-aea2-461b-afd1-c44157cfece0"
                }
              }
            ]
          },
          {
            "id": "49ce00c2-c01b-497e-abba-db277cd80d1e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b3e8bed-76d7-4766-8deb-87ef3f561958",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be7b6974-f88a-40bb-b6f3-387d80c274e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da9ab669-55d2-44d7-9d4f-67fa33b45066"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32578e04-f32a-4ab0-8455-39045f249a85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c8e47f07-e93e-49c5-a98f-84d2cb985804"
                    }
                  }
                ]
              },
              {
                "id": "3cc1b25e-c0ba-403c-851d-f14f035699bc",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6492a4f-23d7-40e9-89d1-e5916c5a2d43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aaa77c9a-4741-4903-b64b-0bc41ea52e27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fec9185a-2761-4228-b136-279c20e84d8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1030b3a1-e559-4641-b02a-3609a3ed0db6"
                    }
                  }
                ]
              },
              {
                "id": "9ba7ae2f-f3c1-4767-8fda-0ef0fe080edb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e469854a-04e3-49d0-9a7a-a7f58bd38425",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91079d7e-405b-4044-abd9-2f6892f2b34b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3980d435-f271-4cd9-b426-f3665641e745",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ccf10bd-ca4c-4d0a-9269-8e15af80017d"
                    }
                  }
                ]
              },
              {
                "id": "4bb1cd11-e49a-403f-8616-b007f739f05f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65b52d14-a48a-4f10-9d92-70af0dcc636c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3fbe1e3-a3cc-487c-a0d8-b3bb5ee63ad3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bb02233-16cc-424c-9533-10448359b88d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "15ef8047-f1c5-43dc-ac5e-2aa41c3db0c2"
                    }
                  }
                ]
              },
              {
                "id": "5334bc0e-c778-43a9-9421-2f3e4ea9944d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0c75989-ca07-4227-9417-ff395b86fe1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8acec739-7855-4061-af4f-fe675f204f7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e99d8c5-4d0f-4835-8142-c0274dca3dc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b3dfc6de-eca5-4125-a3b4-b5e8ba8a82e1"
                    }
                  }
                ]
              },
              {
                "id": "ffb2350b-cca0-43d2-8b5c-62895cdc17d6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "221c20cc-c470-4005-ab4b-c1f53fc48be5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9be9c7b-5211-47a3-93bc-357c20057c32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c8d131b-21f7-4bbe-a47d-63c92646fc9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "515e66b1-a1cd-4d81-916f-b985a5a30251"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d2ea7cb-c493-4e76-ae10-24227d8872e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52191755-c42d-4277-a64a-cb337c3fb7e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "648a7c4d-ecdf-42a3-985c-2e3174eb2248",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "79a3d8b3-1067-4ee0-954b-f38b0dbc93e8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3501920f-4ead-4e32-94df-805a14cb627a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ef97e790-e57e-4ef7-b2dc-8a6467e357f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ee31351-01f9-4d1f-8191-12b96e7225e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1ac2160-30e6-452b-988c-821e70a40088"
            }
          }
        ]
      },
      {
        "id": "5eccc990-1b4c-49f0-9d0b-6d4e1ee8f12e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f09037f1-b979-4752-9b60-88b20565ba23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ba36382-fea6-4b08-8046-01f69ce90bcb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4dc9a58-138b-4db2-86f3-10a79002ee13",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad17560-0b76-45ca-85ff-2e114055d1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3bc6cf-45bd-4618-9641-0dd9cd99555a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363417d1-bf85-470c-afa5-80d8693e9130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8784e3-4574-4356-b5b1-ae45f17bef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fb4f10-d7b7-4aa0-bd56-c910b72c931f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aae516f-da97-4f62-9de2-0cbd26216be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe41fbe8-4ad1-4e68-a484-e05a147187e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2841c3e-e695-4597-bedb-7ece8a875649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "defcbe4f-8442-4046-bef1-3ce6cea528cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ad284a-3bbf-44a2-868f-b109d05516de",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69918fe-deda-4bc2-a75c-8ab4e79c7a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47eec06-8c4c-41e1-936f-5147ebf6dc18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d10d02-076d-4a00-95e2-42ff0ed812f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a423ca-6f1c-43a5-988b-43b0318f1408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fde5f50-8d35-46d6-8668-b372112fb9a1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d09502-e9e0-42dc-8a0a-d3ad4d6c21d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b61ddc-ecb0-44c5-877f-47f6784381e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c28e0c-77f2-4d0a-88a5-fb1646caaa1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1223256d-5582-44e4-bf26-928e21a20c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb95d96-cb2f-4377-8fb3-c21d4011a515",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94135bbe-61a7-4522-a0b0-6079bfcfebd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df26e7d3-c994-4d77-9917-81ef272e6d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853cba93-a3fe-4e56-9eaa-038219bfe024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34ed767f-d247-49d1-a4b9-701ac2d7bc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f183d7d4-86d5-4291-acb8-c72d2de20141",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7876743-b7df-41dd-8d7c-2a03d7a63098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3998ba38-6dc6-4e17-ae61-75f3af683483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a6f04d-d015-43c8-b0a3-2edeeb220ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "655b71d4-b48d-4319-9d0e-393f29ab4eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763ace4d-7b54-49f1-9e46-30e35f49d15f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23b3921-74d3-45cb-85cc-fa545961290f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d7a8d1-398b-47dd-9aaf-348e8cbc6dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960264a8-151d-485a-8887-50b4698c3e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe17a1b-e74c-4041-aa55-a2e13614af99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8546549c-da45-4d15-9be9-dd2e6783f84d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbbe18d-2873-4dfc-9167-26d792896bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca90d8f3-af7c-43c5-ba64-a76b3486bb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7766ee84-98d0-4e3e-ab82-82b1c0a28a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bad67fe-d0db-4b30-9887-31f302c13721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde25ccb-06f6-4e48-bf32-2420b099a986",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b97c5d2-4ce3-4f33-8caf-57e5c39a9d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0741c5a9-6871-4069-bcfd-8aff8d621c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3037bf1-54c4-4cc8-bfe1-06432a8d546c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e5a891-918b-426b-81ac-3f1fc318314d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920d5c79-ff74-443b-82b6-a7c753dc4f3d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb49057-f269-424c-95e8-04f9c86ca8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef504ab-dee5-4c34-8d2f-da5a9858ed53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b82de03-a3ea-4886-aea9-411672d69c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "daad7def-d04c-4736-989f-eb66af7e652b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a60a4c-2ffd-4204-9451-beb200a7472e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3321448-05b1-427e-80f5-3b078e230a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34cd295-b021-48d8-8a6c-3de81de60f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7cdb60-8d7b-4e12-88fd-616d9e797fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "300a9038-3dce-4347-8bc1-f8e8800401d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f740e7-26de-487c-9af8-8922553996f1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1def248-b2da-4ed0-aa58-f71169bbab63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30eb74d6-81f0-4079-8ecf-43a25e06e354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e5b88b-7946-44b2-82b8-fcd9ed7c71a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b4cc53-06f8-415a-81c2-00fe640a99f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bce360-21a5-404d-9cf1-9ee3a2166f7c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee4f978-6f9e-42e6-8e01-603118cd3205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf5ae10-4618-413b-8eba-c2cc9ead26a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a02005f-3231-4a6c-b623-26f0b9f1f934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ade84ebf-87e5-46a9-8798-3991783111ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8814a487-3b72-4c04-a73e-54dbf2f08ab0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f65bd26-acbe-4abe-a441-428ed1658c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40ebc1f-0451-4153-8648-bfc494ab41fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecf94dd-58d4-4150-8352-301f6d01c2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "117fabbc-0841-4d1a-9384-0cd0662653c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6460e9d-7b64-4ab8-bb63-417ef2a5cd00",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8273a9b2-4dd1-436f-96c7-fb2005839bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e45af3d-e156-422e-b3ef-7b2f9f299524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499e2646-c9ab-4169-bc4a-53349df813ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "be255fcd-597e-411b-b916-470aa7fc0ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702b7ece-8490-48eb-a891-379cdd8b03a2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a6517d-f34a-45c3-8642-70f992700c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8a7246-c781-4182-b47f-5c727e32b78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8410c3-0338-404c-a31d-0201ba0da57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e469329-8f89-47d5-afb4-0cc0de49ccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fc373a-82e8-4a22-bc34-02c7eff40fe6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a05fed-418f-4b9e-803f-d2c1be66daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be20f9ec-5d6a-4bbd-bd4b-59fdb9b1681c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5fc259-247e-478f-b671-cfa2785087f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a54cea-3f91-46a5-aab8-502a7f1ac4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002420db-21ad-40b9-b293-7804db38fdcd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb992bf-5bde-4310-b5cb-6f05f0f0fb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e8594e-7612-4ef0-877a-4dc9607aaceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab98edd-6d9a-4097-827c-2c04106e8151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48814e6e-b91a-44fa-a5e9-7ac87808040e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421958b9-f36d-4f89-88ad-2c5cd3fbbac1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28509283-e80f-40e7-ab70-3c6dfdd05bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4c4b62-d670-4bca-932a-4eaf40093c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091b8be6-5d18-432d-9946-0d9a29475e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d373b0-18e0-4c8b-9190-37a239f88936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ada04ee-d40e-4c81-862c-1429a8c54a81",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e7afbf-2657-4583-bc05-0e1c8287748e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fdea708-2b9b-4c28-b459-918b6531dcc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50239b0-ebd8-42d2-8c6f-f6bee8fda712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caadea07-4894-40b9-9d87-37d1b9108483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e7325c-982d-4ab4-a362-4030725e7e23",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05128ef-a23c-4a1e-b3ca-43731441a76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7eb8683-3c8b-40d2-b4ca-5810967b90c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c136cd4-dd03-4927-a07a-fa455f0b3fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4b15e5-5d8f-49cb-be21-3f5272290505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e0d50d-cb3f-454b-8b50-0e08a737338b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b1dff6-3a33-4625-9e5d-167c7e7f29ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da34e45e-5e1f-4f8e-aa5c-5a3d41562617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ebdd59-e3f0-4f96-812e-6ebb60166116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f8e92f-4145-4af9-81fa-a2a22a1aa773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2db603b-3e04-4691-a05d-346a1ba35a30",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fb0d0c-bfa3-4021-970a-b73fad345114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c1de3e-5706-4eb8-898e-8e8e7d03f6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82345dea-39a5-4607-af6f-69d380d2c6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66877804-1140-4333-827a-2e802e4170b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41467110-8130-4b36-b6ef-b4fa2ad54b2a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421c4a40-e753-490d-bc53-73eb44767558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22957877-a5f4-4820-9bee-92de7a5c1db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3517ae-b634-4f78-889a-d8f62226781a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f87361-8f22-483c-8fa5-637c56b16738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb400bf4-3839-48e7-9396-d65e5db1f521",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbb2f53-80e1-4425-9dc8-aa5a242c75b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e30f10c-eb46-43a5-8dc3-099c37a1245e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97b2a6f-612f-4a56-b0d8-e392c212f938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d145875e-40cc-4cbe-9a7e-3ef66f7b05c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacad958-36e2-4653-83f8-3f31d3ddf0fc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0bc409-75bd-4672-a5cd-50d1ef246609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711c2d08-67e6-4d6c-8c60-56aa19ec3b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88805e8b-b078-4cd7-accc-efa7121447ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae93af4b-b586-4ef5-801d-474c6a8c9916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a251f3-a3a8-41e5-89d1-187b298f97b3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14049451-15b1-44b0-89f5-15d3e4df10cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a40b7a1-390b-4d27-aab7-b4210ccc93c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd95de3-2619-4a32-b0b9-0b27827ad411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e33408-d9b7-45a6-b256-c67ba404f867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4496efb-6005-4598-a8ac-2f5a412c2111",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b3ffc2-9694-4d0a-a795-17a01dc183dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8097249-938f-4229-97bb-5a2a08f3285b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccf0376-6abc-4986-b7d4-f7eb3e55e1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5c5aa2-b07f-4ffc-90e7-8bd5a6c54758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0380b221-0096-4a7e-b4de-80e03b890c70",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a0eff0-646d-43f2-95e1-795746f8ffa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c57eee-4e5b-47a1-a5d4-58519153cafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa94f1e-372d-4e89-9f51-f475bf67471d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f57e2bf-41b6-403a-8ae9-0e7138aaf69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0405c5fc-11a0-4f53-a9ad-f26c919c5150",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ae50e6-9344-445c-8053-10c9e795d98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f26fcd-6c7d-4018-a5a7-5aae6d29e0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03525df-f30b-41b4-9e96-a99ee3600b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "702bf5a3-2140-4164-9a45-69f4a1f3b4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dd8007-399c-4342-9f13-dad8cac60214",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9ac491-0f43-450d-aa7d-06723b3b31ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553a69a0-9bd3-46ec-956f-8a8e66db44b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7656cfce-04c7-4b7a-9784-0c67e60befd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "912052cb-77ec-421a-8d84-4abbd39e3fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48444941-a967-40b2-ab2f-c6f7a473951b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d0e2a3-14a8-4cff-a39d-03b5f8b9494f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb714d44-6e1a-41f7-8b7d-4dd1bbebf789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73319454-2cec-489e-a8a0-591f12a05ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21c8b4f5-4a8b-4fac-8b91-62c21c126058"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cc3a08dc-fc28-48d6-af63-3e58a425c0f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "927bf424-d4c9-4c00-976f-3d9c64d066a1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3611b2-6cf7-4727-969b-09915714438e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dcbfaca9-1a50-4a19-ae00-52d324a2ac98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c7c181-1bef-4832-8ffa-679bbac76409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b804de43-ef37-43bf-aa91-f6e26c7e1d3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98dda776-ef72-456a-b364-7850844a0360",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9868bb5-2a27-4ad1-a9d1-80cd2ff4a7e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad4296b0-b3b5-4b8d-b760-fa780410db00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f954f06-c23d-48ab-b369-7af475e25b8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7aa95c6-31c0-4cbf-af72-1a944b7a3961",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "593e5c14-3562-4c4b-8d3c-e1e0a802cc72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4107e492-f051-4c92-9424-a2d675d4c6a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a82fdea-b3a3-4faf-9d65-97ebfbd01f14"
            }
          }
        ]
      },
      {
        "id": "4ed87fde-4c16-4290-afc0-6afc9e6facf4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "975decba-c06b-4328-9e4c-e4b6d8ea5348",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb5b2a05-b044-4284-803e-bd7df52979c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5d047e52-f67d-4a71-9072-cc393ad75e36",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8f7feb-9afc-4186-9e7a-cac727943a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4554b8eb-5353-4981-9748-7d3e8d9495a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605cddf6-ef0a-4534-b831-b507a8629a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad395cf-fc31-463a-ad68-b657f31d53f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93946fc2-c3b8-488d-8946-2ca5353ecae3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63917e11-740e-4dd5-9306-c243c7d74589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50215aaf-ae52-450b-89ca-cb3d7cae34ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170e8304-1355-4981-82f5-d0609d4595f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d48b1cc4-2924-4ab0-951b-afbc5d637346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5a0e87-763e-4e34-bf9c-184280cad7ac",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad87ed35-a79c-48fc-a99f-16b5d595ecd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8dd320-5828-4011-a154-a74dbe950758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e103cfc5-ba91-4acc-93b8-12868336bb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ff0694-0f81-4e60-95fb-e0961eb0cbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e28f05-ae62-4943-92af-3268bfb6852b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1dd654-2cb2-4d7a-810e-29c49b7b5016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1e85c4-f6ac-4496-a17e-caae1dabaa24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb2b848-ef0c-4162-8ce0-6b880c752c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd90826-5c83-41e2-a802-6190d71246c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df6b9d9-cf71-4dfe-9d5f-68917c4586e7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad069421-6e3c-49c4-87ea-e57692beea53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bf7002-0297-4370-9377-603513e2f912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fd4468-8631-44ea-8592-d6e1e6dfbae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4abe7f06-b0e4-4bf3-baca-042b26dbbb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa62e38-9fd3-4bb8-8e3a-724e9a485b03",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2197a72-937e-40f5-8e03-fd0393420478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f27046-d686-4404-b840-23e56abbc3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe41cf89-4d77-4d38-8179-36aeed26a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f497be87-4ce5-4c2a-ab3b-1b3662472d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3abf911-b655-4e7b-a5cb-0ee6b12a776d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c69411b-ad5f-47eb-81ce-c9ab27b41b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687d91a8-61e3-4a12-8f83-beb299656723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084f858a-b55b-4673-b036-0087e2966812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "38d4ec94-68f4-44ce-bdc1-1e7f24542a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe4854a-fdb0-4d45-ae2c-a162f58ff823",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccde1742-df62-405d-bf9e-16692d05a833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab28cdd-968c-417c-a05c-68c9a186b68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4678cdd7-e965-47e3-8275-a0c9d38b6825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "561f3f2a-dd65-4c2f-ad99-ce0d180fc0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d168d48-34e2-4189-b18b-a16b858460a9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b72a0cb-86f2-48b8-86a9-ce272e36bdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94654257-f927-4b59-bcf2-816c909bfb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d074ffe-df0d-43ca-8bd4-fc57fc5a00ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54ab5f6b-ba60-4e89-931a-fb1509bc443c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1dc825-3952-4a44-965c-bcf1faf01348",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be9cd8b-e4b1-45ea-8477-fe0ca6a6dfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6f5efb-f5fa-424f-8604-aa12f67edce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf287894-e7c1-4491-964a-d46e4a246880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e69c1de-d28a-4977-ad89-aa0f3c98bbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afea84ba-800f-459e-8a32-1ed57a562b9b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a83424-e02c-4252-9952-0e38a08e39f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a315320-e889-4a0c-8c71-fb0314b39746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbba8c4f-ed6b-421e-9493-bd52e389ca66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "68309701-76fc-4ac0-abae-406b96f3cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e311192-cf27-42f7-a606-9491dd10a9bc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b485604-cb8e-4c49-a9b9-fe870ebce6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d12abf4-7abe-4753-8bf3-721a730c7dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d2c491-f998-4ab9-8aa8-97ee1486652b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a54c7681-1ae4-429f-a068-353657a39cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7117dc3-9239-4e48-aca7-b994d194ca58",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a60016-ccb6-44da-8c50-528b58e0991a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7186ac1-7637-4145-9b75-0b743080fcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c040a52-a8ea-44be-9162-caca385514ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcbe16b-e4d5-4f66-ba0c-91d17283c258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962856bb-3286-4dc6-8ef1-7a4190ac03c8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2da7705-7dd3-4c30-b3a2-eaa9a4c4b0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2feeae38-bf4d-431f-874e-3027a38728d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f372162d-292b-4c0b-b511-0f71fc287cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8362f76-bfda-42d3-9eaa-be2730e1f840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c397cae-178c-489d-b92c-0ba0b6469920",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecb0139-526b-4ac8-b349-8754fc403a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fd7a64-2a45-4eb8-9a76-4302134f21e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289a8fa7-c2d5-405f-beff-ef1c6e7cd5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d927944-c1dc-4c4b-ad70-d80b4e1a49d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba03d688-7b07-4a5c-95c4-c402bc857cf0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dc1c25-9014-4922-9314-b93d9f18adce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6ce27b-e959-4a99-a311-40ad7b4d4c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c26517e-24b8-496b-af01-c21ba31ea6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2743f57d-3378-4343-bb2a-5343ba07a34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffaf6e61-0f84-4eac-bae5-0dd9e050e98c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3859259-b972-4378-bb74-3b6b21846193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02df29d6-e1c7-428e-ae9c-eb6f7c727e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7fe7da-80f7-40dd-9c06-779a7afc5244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5207faa-54e5-4f42-8823-17676d2470a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc0a343-fb45-4b25-b9de-6549b2e6c226",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a4bc0b-b92f-4771-a1ac-9acdde862d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428882ac-5a40-44fe-a081-2e7b6f8fe3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b79932-fec7-409a-a9fc-640a53aac9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd4b2cd-f8a5-45e9-9321-393782b88b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8c355f-f2e9-4c9e-82ee-fad3812daaec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f601e350-24ae-4a42-92dd-64923640bdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac50e2c-25d3-4ef9-b64d-eb9d793b600b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc931d25-ed1c-43c7-adf9-5811b9667106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37cab6df-847e-4fa1-98ee-d91bcbbee969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968d1fff-3645-4139-850f-f38cbc305676",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cb17bf-c5f9-479c-acef-395c13db748c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f240ba-ee15-4317-a862-85e1faa15f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4ded61-e9ab-4e6c-99ee-e0460fdd0848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "403f6506-1f1d-4df0-a707-3cfe8bda7b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4458fcf5-93dc-4950-b1de-68e249ca5c4c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2679fb9-43e7-49f7-9f14-1439f564e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe20248-4c15-46d5-9f86-0bc9191e6846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3585ff74-9dd6-4c1a-824f-1ff56404f3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "518c5811-c730-431e-895f-5c61367a3e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b864577-2ee5-4f46-8c0b-463d877f4538",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1a7614-a1be-4674-b43a-3221608369a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d527d3e2-e477-49c4-a2dd-1562be42de7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2861c03-eed4-47a2-9889-1f107f86cca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "799eba82-10a5-47a5-a0b5-b897caaceb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e1f623-fe27-4e63-a2bf-82fe40cfde1d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbcdb72a-0d93-43fc-b09a-2f73e95d0d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df138a66-7186-4486-a166-22e1d6e15b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659d3763-55bd-44fc-8d5c-7d3e19182037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af92d5dd-4932-45a2-a1fe-691e63ab81ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d095e40-e799-4393-ac7f-f24869fbd4a7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be042215-73fc-45e7-9cb5-aa1c9d9d7ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66372809-52cb-4fae-a4bd-fe4760262595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7f7f50-16c2-4f85-a313-8547187b1b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a215bd02-55a1-40b1-bd37-fbe5ffce914c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53201d42-bed1-4b49-aa76-17c00c2229ff",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99787d5-4e92-4835-91be-3788c361e20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8ace9a-e2a8-499f-92eb-aa278f6804a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa5299b-54da-4502-b14a-19b796a9703e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b63c40d3-44b3-4218-9f53-4d696429fe75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf41f8b-33b8-4742-b022-70033356f2f3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd1a036-b6fa-41bd-9964-f026084c89fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63201d9e-8d5e-4b5d-98dc-58c7a08000ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bd210f-7010-45bf-bae4-6ae3785108b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7269ba3e-a059-400d-a722-75376b8212d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9becfd7c-6e5e-4067-a88e-03398f2bcecc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d05a78a-1064-4866-9df2-059625800e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66da5400-d9a5-4b90-85ee-ab5548a984bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ee2439-80c7-4cd4-af46-2165cda8f8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce88a57c-a8e2-4c53-be0d-87810624171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1873ebd-d3e7-469c-9959-59717215bf4f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0c49bc-e5a8-4b66-b9f8-cb9bb10633da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5fbfb7-ce5b-469f-9bbc-9fcde9de758d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60599f67-15a4-4744-9815-ae3ac84f225f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a20bc7-b9e2-417b-82d4-0e2223692055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2d4f6c-3167-4dec-9e38-7eb2590609b8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477b76e8-17ff-43aa-92e4-9c074c3cf70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f062b9d-286d-4aa5-8cef-3e2e228f14d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17ed8e7-b701-4af2-b27d-45d8b20ebc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02ef6e02-e19f-41a7-969a-701db5d526db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f50124-c5ee-4ccf-9f94-9dd153929b7c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281e77e8-720a-4e3e-896e-cc1b89f2ff4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a645d456-3ce8-42ec-b398-b378058b6918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a988960f-849f-49fe-b729-9cc206c50cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08756050-74c3-4de1-828d-5299813c94b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b664a4d0-03a5-433a-9232-14349f0a58e1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f4f279-09db-4fa0-9bc1-e31d3c742c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e503cc01-042c-456c-a590-46ae8a45cbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337971f6-6c50-45c7-81f9-63cf320d3589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52e62432-bd3b-48c4-b655-d049a730e8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa457c34-3965-470f-9a81-8c0071cb84d0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cdfea0-be24-45e5-ac68-bfaff55f3357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9934b6a-0881-44dd-856b-47ffb4aa462a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a43166-2aec-42e4-8b15-4f93fde3c08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ded842e2-708d-4ff5-980a-207e6f357686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aaf60cd-0a44-4af1-a4cf-d43a065d1c3d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d104608-fd5e-4d9a-904a-88fafe5e1ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278923f4-b0c8-4999-ad07-a3e38e56c079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2d1f6d-1d61-4798-805b-31b47e440da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87895c98-7369-487d-b97b-2c226dfd2f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5a88d2-81d8-4539-ba96-b4310f2beb19",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccc4185-7672-4bc3-9ed1-9bc08c754dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec0c8cf-e95c-4944-84ed-de9cc9bc158b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71474d0-c0c3-490d-8767-3d544d81b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "404c128a-c34d-4689-ab89-06541b8fc2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3b12d1-001c-4f24-8575-f05a87ad11c0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac51a49-bb20-45b9-8046-b34f9220731f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64af845-5eaf-4f86-a038-84a172a6a19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cee51b6-141b-4991-81a9-af68021d722e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aad4ee5d-b388-4c6b-87b1-b83d9692ce1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73722f11-a4e2-46de-8bb8-76ed605c84f8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ba2407-a6f5-435c-8953-9bab0b920696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c916057d-dfe7-4ff3-a347-192319df0cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28fc962-434f-426c-b0de-2849a0fe4876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb666300-f942-452e-8d17-5eb2537f0d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbcb0f8-a0b3-4987-871d-5dc502dfb3ae",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9a3aa5-bf70-4c33-bb3a-496ff91968b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4754574-8503-4b30-b178-659f60e70770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e33c6da-2b8b-4c22-a813-442b4951342d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b64bc829-1e30-44d3-8549-3836c39e2a8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b9f5ab72-25cb-4677-8def-f93c75f13105",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d72fb14d-4002-4946-a4ad-92f34f7a766c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43baf45-a05d-49ec-9114-1b8860395a2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "120c7817-8455-4539-877e-62ba744597d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b47455-eb5c-4457-81d1-3d6280515e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f724c18-9655-4238-ab13-9b4ab2fc33d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66e9211f-ee00-4a59-b124-0bcadb90a694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a67722f-487d-4b8c-89af-fcefb695ff26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c893821-b468-4586-9428-d3f249f555ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54c712b4-b2bd-4dff-a589-4926bc0ed55d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "381b37c0-05f4-4057-a0f1-7fe860f35a48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b7842f7c-563c-45c6-a8c1-b217e0f22270"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14a5f013-83c0-435b-919e-f5f4c57b8918",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a134e2e-79d6-4c08-a23f-fd72d739b48b"
            }
          }
        ]
      },
      {
        "id": "2b4c92ca-480a-4bb7-a544-6cd58018d638",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3cb137e5-150c-4a59-9295-fbd3ef6c3402",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1890fc75-a5dc-4e2e-9676-3a465350919e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8702977e-bf3f-4e3c-80b0-728dce3ab446",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400d3acf-0dfc-430f-a735-ce61b58a1a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4a425f-d9e8-40fc-b815-2599dd482d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b497e6-b725-4d9b-a3db-a99334bb32f0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35eeccd1-36a6-4783-807f-622297601fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3919f9-182d-4e6c-afcf-217d9df2dfbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67035b1-1828-4d2b-bf05-c50c95bb37f1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be14d80a-05a5-4882-9e9f-0bda25028bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0acaf07-e098-465c-8039-3d5e8d9a2454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea56f729-55f4-45ad-8352-b6df4bb0d8b5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c727cc4-935e-4e80-a12b-6925f69628cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8aa851-3352-4bde-aa5e-52c85f853a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79106a67-0013-4fa9-93b0-106e1dede7fa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d8c276-9501-494c-96d5-d70de04cbed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888163ef-6dc7-4ebb-96b6-ee694fa279aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66dfade-2bd5-45da-acab-c0fab4ad95f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd095240-8f21-4ded-9efa-9556a22addc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855b62aa-25ae-4a63-a96c-a92026622eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0967b368-a2e4-49b0-896b-e338a7a4efbf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e035e33-2f03-4fd2-9e2c-0a190cfe9058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94a3f15-5264-4aea-8980-4d485f6bea7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53646731-129f-4005-a12e-592e411c9bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f273862-1dc1-4016-b303-16b5ce8df4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93abb55c-923d-4eef-8300-79e653ff2b81",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fcadd9-cd7a-448e-800f-1bf6a6e349ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4dab388-3c24-450d-8f0c-4c9d0f59a20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a62694-6b06-469e-b975-2b7202e41d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d193ca-bbcc-4677-9517-6b5e063fb63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c765826b-6ab7-48bc-a45a-5b7162fcc248",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9901ee9-eee4-4395-a247-a5d6076fae11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b2575e-a9e9-4450-af18-97e5dd5c40dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee49af2e-6238-46ad-ab42-fc756e42576c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4b7682-e67c-4e2e-abcf-133a19aefb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7cac78-335f-4aac-a0d1-2297032476ae",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d699256c-408e-4436-99bb-fa0c6faffb7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8447a1c-4e9c-4185-ada9-dee2e7e090f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf60df1e-66d5-4e7d-8434-cbdd6fd39994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a7929d-f542-4180-8b7e-e61329e9418e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17aa2865-b4e9-47fd-8367-b1b539fb40c3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d84458-6a06-47db-b1ea-7f6930d02c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c3c592-f0a8-4ebc-bfbb-a0076fa49b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4f727b-b0cc-4eb3-a1ec-aba1ef57a0d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0500b049-99bd-4d89-8201-d725de40d3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1ac7e6-c891-49d7-aa5c-3afa50b216c8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2068a340-e05c-48d3-9d82-4a22b02a26ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c256ef-9f77-4056-a8c7-a9a3f3d478fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3885e1-80a3-4334-a591-82ca2226ff3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cece76df-b682-4681-9218-db907885a20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d74d1a-5623-41c9-893d-8dc7a06bdbfa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9eafa6-f442-4a12-bc60-fc088972abcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d035370a-ab0f-4400-a331-b53198a66adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e94f917-e1c1-4055-8e0a-13044f817749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb44146-30fb-437a-a37c-03fabcf0ad84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3764891b-7fba-4448-92e1-7ec5f152ba33",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329dc910-ec48-4fb3-83ad-613ef36360e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b52d08bb-bebe-40cb-ae8a-a1b3863cb320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3db3c68-ab59-434d-8961-09b2f584d439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c5870b-656e-46e7-9ca8-a000267aae4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f9add6-c615-4bc7-adbc-b94b504105f0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87376c07-ae40-44f1-b986-4bd6a02bdfe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2fe612f-d921-4dd6-b9e4-e3d74ce44a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51a709c-7a81-408c-afc4-009901c22f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9b9c41-772b-4df3-9440-58860fe2793a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b3dec8-d543-43c0-bdaf-8a06e7ed931e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239b84d6-956e-4bd5-9fc9-0eed6755a8fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660279b0-1729-46ec-a354-215d86dd2689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e05205-a3a9-4588-9e3c-961346ec6c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74341c52-3a77-4fb6-b913-0381fcccbff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c65c5d-a56d-4a28-8635-bbcf92663075",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f9f519-9cf8-471a-b26d-f525586591b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5c7b18-470c-41a4-96cb-2b5aa734e221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a70de3-d116-4cce-b6b7-595044443e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dff6df2-2030-4a28-b38d-87f7faf65608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d208efc2-8585-4af0-97a6-5594fa683dc1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a4e470-b3c0-4c90-bbda-1ead82fb7b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628cae1e-2a59-4796-8906-94854afeb6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8101fedb-8175-4d32-87a3-db220cf48805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4e7543-dab5-45c1-9f21-436793598eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848300e8-b66d-4c27-83e2-ae5958d5cd58",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff40c1cf-b31d-4958-b376-33b1d9c6decf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ae1d2d-43b5-4146-a643-48079767ac0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3fd913-3878-4ed0-be9e-23ac304175c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948ae30e-2151-43f1-aa16-e7b41cf36ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df07fcc5-3cf6-488c-ac89-c3c33f2a6382",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6610be-c08b-4e6a-a8cc-977c929a6261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3eed94-c554-4683-90a5-64c3bb95d1fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a332e83-6f11-426a-8dde-23c721eaf254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc6476b-909e-4603-8c40-92c33cd11ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac74efc2-ddb1-410f-9d8f-181ef1c5ad93",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0b2041-5563-4ebf-92b9-4b1da6d78e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5485e7-2fc6-49d8-9180-003803b81922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db563eb8-0aba-4567-89a8-b3cb58eca8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a10f141-0214-4c0c-905a-b27258fd6d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19734422-f55b-49a4-baf4-251b091d00a5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ed9def-73f0-4dd1-8afd-94e2dea4b41b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0637b02-8e0a-4fdd-acd4-bb523f630dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0dbf96-0e54-495d-948a-325ae54be5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099d1d95-3ebd-4ca2-b9c7-7e378c06ad47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36528f63-bc71-41da-8ad1-0d932e4fc0a8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab365061-10c1-405b-b68f-292d5cbcb92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a1e69c-c27a-44a6-93ac-f15c63a1e0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e26beb-036e-44d7-8dd9-4f3692e1f049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca15c3e-6745-4797-a707-28be9d845743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672c8a98-19de-4e6f-853e-bdcfb7a65cb4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82d2745-6c0e-4aad-ab8e-bb8a5f255e32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fbdaf2a-e897-4593-9681-de1e86042136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99097436-7a6c-41db-8c12-fe2f7d82b885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412bd12f-1857-44c3-8ec7-d60835282c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e953dd-d5ee-4eec-a7f6-9180d7030cf4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942e35f4-ab94-4ebd-8363-792d23befccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d71dfe6-85de-4533-9a66-b5da83166250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f70b67-85b8-4d15-b98b-e4ac7ce8097d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa40b03d-3952-47e1-a5ab-13c9b3d59db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163ead51-f2f4-4217-8b12-62a5be8e1593",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4858aca-8609-456c-adf1-4c64822a7603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f1de21-16e4-465c-82a4-4b5fc0608d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb747759-edc3-4e93-a187-78984d1a8edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbc73c9-09e5-4b83-a1a8-4988a762cd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ab55d9-7fdf-4580-a3f4-50471afa2797",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bdd742-e3b0-4bd2-a07a-70e6902b58b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e7067b6-0143-4ee8-bec1-8c6c8a6f8ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495650b0-06f1-4701-a4e1-e90003a0c901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc725f69-cb12-432b-8c8e-9ab0a7342e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b793a34-f3e9-4620-ad50-85e8d9fd2c18",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a9581b-4ad3-4ff0-a3f5-49c42a0bd0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19bced6-c42d-4c26-b61d-823dfde41964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6688d6ec-8543-4d11-9016-250f1715a35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4cd3aa8-ef02-4ff9-bf55-1c2912676490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7aa0e1d-7b65-4801-b312-6677b418759e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39e06d9-2ddd-440d-8436-807332ad3a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e12b7a4-b20e-45d5-a370-9cc19b613ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519f669b-fc4a-4059-a76a-149d0f644a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f27b6e-6cc1-464e-9c08-e7dbfcab4e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad4939c-082d-408d-8ca1-251e678923af",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6851c13e-9f6f-41fa-ac25-2bbc5ee0c039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcdf1c9-301b-461c-9d45-fdc0952dcedc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4189c110-3246-437d-bba7-58aa3e111fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32c6057-6294-4446-8f6c-7eda52e9beb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cddb79-4645-477e-ab9e-cd513f10524b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20535cf9-add6-4dbe-b5ff-0e2f6c6c1fcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f33a89a-3885-4017-8485-05b269651935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2cf7fe-500f-4784-b243-74264c25f5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dda41c4-3d9b-4880-80d4-0fa2e49ece38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66d0e9c-341a-4d8f-908c-c4a3502eba9f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083f2155-6698-40d6-8747-3420a87d3bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "067a9727-2e9e-4bd2-bd29-850631493165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076102a3-afc0-4848-872b-db7d8c6d78e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d3666e-47ff-4f24-b1b9-955c00db67da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd9b40c-0907-46ee-8923-d3ee6e55c488",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0aceb23-f339-4a9b-aaf6-dd03bc1ea640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92962269-e610-4df3-a611-d75adf580d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcaba29-92cc-47cd-9196-7a54cd38423b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8daba2f6-4eda-4336-9dc4-4f203b274ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d516de7d-9987-45a4-9c98-7af83e0bfc00",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea72648b-542f-4be8-b6de-ab9ddb75ae12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "788fa7f0-816a-423a-9e5b-2614f49e8fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8120cf-d676-479e-a8d5-f431de574b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8df660-7666-47b8-a83d-1b14fc7570b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefd45ff-65af-45bc-9f39-16ecd83a9310",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb7b731-d0b5-4bd1-b280-2791d1267a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119273b8-15d0-409c-92f7-b76921a6561e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb718706-38ec-4ee9-9ba2-09c32bbf9931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e5f6c1-7fa4-41f2-8188-d6c859bcc087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2b316e-2c49-42cc-be88-2d2eea4156cb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ac1937-184a-41bd-8233-2f171fa75fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf59b29d-af4d-47e1-bd6f-9fc27da13a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf937db-82d5-40d4-95df-5258c31b4fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf05148-dc45-4c39-9009-ad75ca8341dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3617b343-8451-4544-a547-4d8c93465a59",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897e213b-1194-4893-aa72-987254f26579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c211e8a-bff0-490d-ab54-5d2e7e454ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85be6910-99c8-4a2f-b684-78420fd21334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee75b396-9757-4e77-a7d3-4fc33f3a9923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf24afa-e8e3-4e6d-b7b8-f83e07325470",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f564b6ca-66ea-477a-b59f-8df2ae283e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0910517b-2f63-42c7-8111-0cdf5aed2a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b2b64-1dc4-4db1-9f7a-147e9062f436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c14f850-b3ab-41fd-98b2-4b2008487f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f2fb23-765d-4f4d-88ac-b76e3cbed00b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d43525a-2355-460b-a8ad-8859c8cc2d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4faf3ed8-a296-489d-b1b3-d72b494e30dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572cdbc4-2ba3-4029-83ad-a1257421076b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ac19ee-3b3f-4bee-b0a9-72f5a72251e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70970ffa-1caf-48b9-986f-8002a06578c1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b409f6-2d11-45d0-9815-34ac5e0a65e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631daa51-dce3-4f6a-b8c0-3fa909eb1946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69aaea7c-15b8-4ad4-a2d4-2b7f5f163a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa5c7d5-a252-4e3f-b480-1605c5d2e56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0085c824-fdc9-443b-8dff-b30d46d623c8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84139fb-7633-4e56-80c2-81656317b61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6164395-3ee4-4b1b-9b0b-4793d8ccf91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6947d218-343f-4225-9749-9246673aff3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c65fd1-8c11-4c6c-b7f7-aa4b37ae770f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08197e9-642f-4ab0-859a-c830dbf4b2bd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d43bab-35b3-4ec0-97de-51e77390dd8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f6fe59-7986-44d7-95f7-38101b58a8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1ebf15-724c-4f0c-ae40-90df404b1b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc8a1c4-c888-421e-b774-a19908a9535c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5348dd-894b-44b0-b8d6-981995391b71",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bdc8ef-d16c-44d0-a9e9-f9a47dd30529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c523db2c-a71b-4a6b-8419-c0c998757373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c69689e-dccf-432e-ac53-6cb3383ab433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cce124-15b6-4d94-bbee-178f26638eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dccd80f-7d77-4b37-b43b-25e9342fa16a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20a8cc5-bbfa-4205-a9db-2916c59b60ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921a2c63-3384-4ce9-b811-505e2db583d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96f0189-b560-4c70-bd8b-36cc5a1f9378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7f73dd-ff51-4f8b-88df-78e4720c31b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e634b3-5234-40f1-af15-7d05922788dd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c0b3f5-cb4a-482e-aa6f-432b136fdaf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e039c133-26ac-43cf-8234-3a1238b467bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32699486-8780-4eba-a467-b9ba487415ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45bacf2-2283-4803-ac99-795a210a0e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0dbaf0-cbdf-4e8a-96f2-8b79c793e3a3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31dbf70-bfdc-4f69-84cc-00c96af527d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ede183-1359-43e0-a0a2-660e085eb467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7979319b-48e0-4b5d-b034-b80b9cf62a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5359c21-e7ca-46ed-95da-d348f3019d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fa6336-7d57-4c99-8c6f-a5cc79c23818",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afbdebd-5388-4586-90ba-0855381651e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c196ccdc-1a94-4549-8430-bb478dc0806b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e184d9-dacb-498a-8839-961810806bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c82d57-3eba-4693-99ae-679b00b873e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460c4aea-f59f-479b-974c-91222fff112d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15641ab4-778b-412b-948f-ac26f2384fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd91c7a-6a9b-4dbc-b955-83505bf82078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4786b115-31f3-461b-89be-5199a70be3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06d7633-ab89-46d8-a98a-74f4819875df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5298a9-44e6-4cef-a449-e6b8746b29bf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bf5ce2-51e5-4b9f-9562-08421bdfa4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7dc1c5c-fbca-4beb-9fb3-753e4bb80722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaebb99-6e04-49b0-ba1a-1d24e5b6070d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e60657-57cd-45dd-b7e6-2b6eb674060d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b3be1b-4740-4346-b4df-c80cadacb214",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037d2819-65ac-4ed6-9fd3-309b3c223dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ff3c7c-7183-4b20-b63e-49682cc7209a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15030a0c-d1d8-407d-834d-a4ae91948851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7b581d-6321-4403-9048-a5702c8fb884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbc196f-3030-4423-8063-b365013ecf3c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a8fc72-3b87-4228-88cf-602b2e3d82df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79139e0c-148b-4e65-8ebc-c1df1f3d2e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71984cb7-47a5-4e08-b6ce-2a65a999bfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c8d406-cfd0-498e-9b2d-64de97c571fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418cf7f4-0d04-4c78-81bc-0e03dbe61587",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccae652d-7631-487a-a877-583d4cef94c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee61210-5d1d-4276-9f5c-6eeb1726fd51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f282de3-fd7c-48e3-a67e-4c7f75bc858c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f153d2c-75f8-4832-baf0-aea0c57da1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb927eb-bc7d-41f1-9b67-dab3d84157b0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b49d55-b401-427f-8701-20e4bfeda41b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da67776-c5f9-436a-837e-6659b8e9a9ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea71ef0-0696-40b2-86b2-9158e301c077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee6a0ac-36de-4c89-a356-35d45df1331f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae6806a-6f84-4cf6-a8ca-718e43f66829",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1e2c65-bd5a-448b-ba19-f8affeefdc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889789e9-5ccf-4357-b6dc-d41eb3b633e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78009321-7d84-4bbd-85a0-88b5f3e9ff1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c725c041-7b41-4fd5-80b0-610cf68e5ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4439b1-1a06-4f66-b19e-0d244a3ac86e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08763b3f-fede-49a9-b1dd-9ca44a46da55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecaaf058-a725-4198-a509-5316834d042c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198abfe4-1ad7-4afe-bca6-70fb7653684a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623fea30-c190-4e02-8c10-6ca8f42dbfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af13f0c5-010e-4d57-b3b5-12b709b2763c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf34eb1-5808-4622-ac84-a8f9422a02ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d478e14-0191-4125-8b5f-9a911036f047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04df5bf-e7db-4ecf-b442-20d26b19fec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23644d27-62bc-43e1-8ad2-0ff8837830a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6413b2b8-d438-4cc5-97f9-4353b524fbc6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb54f1f-766c-4013-ae82-330b7c2cc6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc2d57e-354e-4903-ae27-0902d05d32c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9059eb55-ef2c-4943-8f29-34c4e6316215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9d74e0-4621-4577-8300-301c1e6d2e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c75a597-0e4b-4522-be11-8343b4338c75",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c5c134-e347-49d3-a232-1dd9938d37c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61feb8ba-206c-4ebb-a9b9-ac6d517b1310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a60c0e7-c43b-4630-9499-ce68426ec52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d822645-5066-4cbf-a8e8-7574aa5a22e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e34c6f-7c52-4089-b861-f1598c9605b3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a51951-9418-426c-b14a-1bd4cae02bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8434a59-5779-437d-9668-f4f40d29dfad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003edfd7-8574-4680-aaa1-b694a79127e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fddc1c76-ad59-453f-9763-f45ec3747f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3320fb62-a2c3-497a-8402-7fc861997e20",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088def26-51e6-49d5-97c0-ecc8ef9fd4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82182717-5b4b-4c32-8892-0f797a559107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2ef3e8-93e8-4013-aa12-1cae2c57568e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f70d6a-2eff-464c-a267-7458b76f9a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6ca204-185c-4ccb-ba1a-738d9c747cb1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52351989-c51a-4282-a03b-34e81640320a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46dfe23-ad6d-438b-b68c-fff28f1d62e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b38ed7-2183-484c-840d-c9651e9e903a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db78dee9-55ff-437a-b502-0566ec7fa5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb716c-d857-465b-9d40-7a287f93cb8a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56243a56-0788-4bb7-b9fd-2657404efd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97de38d-c498-49a1-a75c-ddeb55096e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58367180-a7ff-4fce-8735-0ffccb0b40b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780f54d5-8782-4b62-99e6-113bf4514300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8894ce-723f-4039-a0e3-ee12f2865602",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253a0713-589b-42c0-aa12-04a53c3c0058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917ae7c6-bd07-4d23-8f4c-89dda6ef4963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0480f58-25f2-426e-a7d4-f41cef94d3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f821d31e-50b7-4af9-ba3c-182c732a37ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337f5409-4e09-41e6-8cac-f84bd11f83aa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72b3aac-aabe-4802-9340-de2b953383dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c62ed4-5b92-46c6-a91e-4f9963f1356b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a367bb99-3359-4575-b2d0-1b9c0973b6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bee41af-0d85-48d5-a1fb-f0b0926fd885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d22cffc-47d6-4e3e-bde7-0e8d4868d628",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7325b893-9cbf-4540-96f8-d61362f9d0e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ad0c40a-f063-4328-99f9-1d71f9342084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de46eeac-b8a4-40e6-9a27-2fa5e2a8df24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23ba397-2e38-4923-bd6f-3fb73e99e8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d215ea-01bb-470d-9fb4-4d84a4689883",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aace16a-d3e4-4560-9b19-2a133fdd568a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f45701e-1c19-457b-a69f-4b22d4eee941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4e6181-e527-4295-b2bc-fb559906d666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b0a0c1-1c12-46a6-9b29-f54f9ad399cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f843151-62e6-4d0f-beb3-8fc9174eb54d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b11b679-5534-4f96-a95b-a71830100dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b3b43e-506e-4826-bc4f-94de99fcbe30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b536807-be91-47b5-89e7-a2b6a527cc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b39b66-cf06-4a59-913d-2df298c0c106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d2ce37-98da-4eba-ac24-cc95618afa2e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8b003d-61c7-4b4c-83e5-b6c9b4d53350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068d42b9-1368-4611-b468-02a0e961ed55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af8d1f0-1345-472c-aebf-e3a9691673d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc02cbc-fd9a-47b0-a9f7-ea8d0125d4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ba0445-3f9a-4b1f-a6d5-6d86ca0c8216",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981c4f30-e9d1-48b5-a242-b94bfa2bd08e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec386ae2-cd99-4a9a-9ccd-5ce4cfd1254b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afa33b0-57a2-4467-9b17-d70821d2c447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dc5362-889b-41ff-a36f-b014c4cd9ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242aa327-1f2d-4aad-b5d6-89e04c63f754",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ad5568-5a29-47df-81df-d380710dafa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18216931-d03e-47ac-8dab-76793810a68a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d7b03e-b383-4160-92bf-fd7bf6104edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1706ede5-ca92-42f9-b121-013e15e88231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bab0a5-0e01-46e7-876f-c3a57cf384d9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cc406c-66df-431e-a8dc-31d61f115487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b887ab-2b0b-450b-8383-c07a81e2d43c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5d9a71-d68f-4d62-8d9c-6e7ecf445233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea9c051-5773-4286-af2c-3b3e108eee9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbb3da5-b97e-4923-ae03-0de18dfe9ab6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183cc0ec-50f3-497c-a591-8f225b359ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23d5d637-ea9e-4d01-856e-1d526fe9052c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c188f9-ae11-49d0-80eb-e149ed8198f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483e9640-2812-4fba-b614-d661f3b59698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e02fb0-5fed-4f01-8cd2-bdb9127f2af2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82ddd91-2b2d-4f29-8bb9-0fbb0a56fd81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb6e6589-c351-480a-ab8c-6420fd92b8b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c960d01d-4985-41ba-929f-8946bc6096f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e892a189-d9d4-4784-9a2e-52626bef5881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6e0fe6-cbab-4e5d-9107-ff62bbc1f044",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a57620-53b8-4dda-b4af-0f92e6f03992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "695eaefb-d5b9-486b-b039-db8c5356ba79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73c5a36-ba72-41f5-b544-84974822d94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf46abf-1795-4be8-ae12-7eab215767c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef74067c-db39-44fe-88fb-5121c0ea83bc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b2ef16-58fb-4eef-9ba4-3599ffbab295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d01bc5-10e6-4363-9275-2496082f07b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7868a12-80da-468a-8e5a-e4cb9857aeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352d1dee-24f5-4e41-b5e3-d8240ad1f0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200096d9-c6f7-4dc8-b72d-3c40ac85f21a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fd8dcd-e04a-490c-9d3b-16f8a0eab141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e3846e-7526-4441-8c5f-9d21bfdb8766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d3c17b-9356-4433-b744-3509bd082540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc2d7a7-f802-4a1b-8d18-b5ab9593b5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ac1f32-9857-4dae-b6db-7b1c014d9880",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2397639-ca35-4140-be6f-b66a2ae4225e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e4b3bab-ba5f-4cc0-9c76-b084da41ae8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1f8833-1aba-4014-922d-ca27d56b2b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2345882-c5d2-462b-ba7c-c505ba752b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5eea528-5ae1-4509-9c11-8024ee91bc53",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775b110c-db37-47d2-8320-4b4763675fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40b835f3-6a2d-4233-a286-aa20798a3c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8bb2a3-b4f0-447f-93eb-2a5a49620871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308127b0-012f-43a8-a4c5-08648e650e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32bbaaf6-9145-45ea-8ec9-0cb9fb13398b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0aa14a7-6139-41dd-a0e9-7fd44e04ceda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b492036-931f-4e72-90ec-f683a6aff352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3abdb3-09fe-4227-8f4b-5dacbb07402a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c80a8fb-f298-4edc-a467-d8be6d3df6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc54651-82f9-43a8-9e32-924c09f2ca2d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419eb1ee-79e9-4039-a77d-3f63926f906c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b655c5b-2579-4384-8784-30db750740df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c2b1a9-f67b-45a0-8e04-db6c33e03a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0de950-4764-4226-8898-e9bc2d2cbba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef57d72-4239-4625-a546-5124893b2bf4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98fdde1-d3d8-44b7-87e8-f65962983302",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16d81d3-4d9b-4851-9791-9e38ba47f6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3fe859-505b-4047-a111-ee3882922b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37417f28-9e43-4c57-a98e-875042272a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039793a6-4e68-43de-b1f8-66726495f99f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdd38fd-c4ab-4fa7-bec2-a015be788d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a820e71-4eac-470c-9004-595d1890d880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea2962a-033e-407e-bea8-1ad724035106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e1233d-30fc-4a32-842f-bd5a583838d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c0e47a-d4de-486d-9712-76af94504363",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81e4ad8-90d0-434d-b04d-7227dc408f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55e5a083-d914-4cc5-b32f-a6c27adfba87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ad5c0d-4716-4a44-a1c7-0ceecb361bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224da565-cfa5-460f-815c-394807882000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd41d5c3-6a19-48ae-bd1a-2132228f32c2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d5d929-0791-475f-bd0b-f53eb3f7ba51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024b6c7e-c88a-457f-9f22-0f4cc80416d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2023099-a7ae-4859-a64f-9b0755e45bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e596ad-9b00-4ff7-bbed-25ecfd2de823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8002cb-0431-4f20-a439-f07c795a6305",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36d564c-e668-425b-bd76-c851c9f24912",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f52e5d33-df9d-479e-b5f4-90b94028d1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553a12c6-e1c4-4638-804e-3e7e971ae1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7ad62f-604f-405c-814d-af6474ba6dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e9a2e4-f540-4ccb-b40f-b086cf0f1869",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62153543-7b32-4a04-8bc2-d861e5a20baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b651177c-0a19-4508-ab33-1ca53211cb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "783ca0fb-11a8-4301-bdc1-03bde1bedb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3423f5a1-eb1e-4e9d-88ae-b65d9ec2fc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5fa29c-0ef3-4825-ad54-66c6f7c23f2e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c7a650-46a2-4701-b3e1-ea25e94cd918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7ce5810-41c9-4f3e-ba89-aa17f49ae019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c8fbe5-df6b-4fd4-bcd6-e01036425d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734cb4ec-8b79-4657-9234-360a413ce235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cdf435-de1b-4cc5-b3cc-630dc76f82fb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22401b3-50f2-4d76-9faa-bf176f224e15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d620919-f5ad-4dc3-b0e7-531405588a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df111e3-9827-427c-97de-b7bc9f54dc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781e21ad-d72d-4d75-92c6-e253c2dd3c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f9b7ef-b181-42d9-8516-348810ae6317",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de4748f-1871-4a4b-b293-b7cc225b20da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf6c12b1-b070-4d98-aecf-0937d2092ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aaac1d-57a7-4529-9054-ee24cb5e17c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cb101e-b27f-4968-9e35-84268371727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11ba501-63e9-4feb-ab24-6b9d570fdb2c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda73912-9171-4f6a-81f9-a6e821e99928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89b97f77-9500-452f-badc-42c6450baa4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d3d15e-b39d-442c-95c0-0aca0e88daeb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af00299-c8de-4a91-9bc1-ef7fdeb0d1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d6cb9d-a267-4e6d-9a00-ab689a07716f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6a155b-0adf-4472-a8c6-9ab046376eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f146a66-13f9-488a-9234-485e72758352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07087cff-8e8e-4f63-b18c-8a03f46480e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3664cd7f-9867-4d2f-b2d5-5c1f2ae2dc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13858029-08d1-4e67-8d58-b179bd826459",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb06cd24-95a8-4e9f-a22b-df233ee3da36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5856b68-abc4-4e57-8737-ab7058a8899c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c49cbcb-206b-488d-818b-3a13fc0a968e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff24af26-a931-417f-bf99-20e05e1fb62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c12e7c-84f7-482e-b6cc-efaa98b40419",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad339d2c-044a-45a5-9ef3-fda21412a9c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e7ef8a6-a6c4-4e9c-a035-c31333e43236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d303235d-b24d-4513-b879-3f55120b024f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def814af-d92b-4640-83f6-dee904b111c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3452bd4b-1fdc-4a06-9f61-e83417d0d085",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18baa0f7-13ce-4b1d-8237-05fa3d758eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d7e7de2-8abb-4cdb-a9c5-4a6ac4571ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a2c049-3d8f-4673-8229-c8eabf3f34ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd4f916-57af-4554-a826-00ea0a4712b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7b51b9-e29f-468d-aed4-bbc96bf86e4d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663d1e37-1d39-4592-aac3-8e24bdb06e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6a83d89-d00d-43f1-bef9-ce8d0a2caf5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a15212c-f596-4950-ba45-a816980ce102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2459328e-e058-4848-b40f-e06dfdbfde80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef38eec-34d3-47dd-a695-97775f450496",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a95ec4b-bcdb-4979-a45e-e7a0dbed03ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceab39d3-8cf3-4097-bb18-7f45b33d4cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cc68e7-eae4-4226-9468-2fd28097577e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e467dd5-3280-49ae-abf5-aef1195aaa89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f72256-2370-4825-9208-ce7d8a9fe549",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2824be05-ad89-4282-b9b2-b25f3e7764f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa512ed3-03bc-4fb5-9814-2089c2728841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb2358a-2354-4664-851e-af4ec079c715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1244daf6-4a69-462a-b13f-eb8fec684764"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b8f095f-dd57-43f9-a463-5983b825243d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd9b84da-1f76-47be-b76b-e4c93f92d297"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cece578-33c9-428b-be8b-938007912cd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64cbdce2-c384-4fdc-a34f-d5afab6f637b"
                    }
                  }
                ]
              },
              {
                "id": "8fadcfc8-fd40-4736-8b57-2fe6d966463e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d2cfd3f-f060-44f5-b2a3-bb9ce2442092",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc790dff-ad9b-4354-a34f-2b14d9ccb121",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1f12825b-8e11-4a60-a79e-9208128399c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a77bff1-cc4c-47f3-a7ed-4dbbf8106cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "766820ac-2c10-48c8-bab4-89ea143a61c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ca6f8ce-1922-4aa1-ba08-f62425252b3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da99d2b2-5ed0-4671-80bd-0b9c9c1026ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "042726b7-8929-440e-a17e-700da5d8b3c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89ab4b38-9197-4038-8554-5a4cfd1413d7"
                    }
                  }
                ]
              },
              {
                "id": "33703e43-ba2e-4bb6-9e31-f63e8023f02b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "83491d90-b976-4057-87f6-ea511fa44a2f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b058c96b-26f2-41ed-b683-d6ff5251ac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6c12398e-11ec-4385-b709-690e53ac3b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8414ba88-f13b-4ed6-8a0d-247a4c651a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6037d0bd-f50a-4a7e-bbde-c53dfcb10cb9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "48fa99ba-c91e-4ca7-ae8a-876adbd953f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ca3e94c-689c-4470-897a-ed0da466d1a9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83c07832-0638-46f1-b3dd-d1fd2286414c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8d34256e-1f5f-4464-b917-0ea913f7e938"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "754b3f83-f203-4563-abad-3c2438726c4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3489a67b-b773-4c33-84dd-c684f142ffaa"
                    }
                  }
                ]
              },
              {
                "id": "a8b1a36a-b4e6-4128-90df-6d2a3a116db4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86bda618-5a31-4789-a29b-b8ee2d43dc26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0a2aeb95-e8ba-477f-adef-96ab6da30a07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6741b6d9-f80c-4b35-b222-23baaec123d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2783576f-7311-4b41-8121-3b5f667757ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec8f8246-445b-4d0f-b0e0-8b46fd5d2da3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "607386d1-a4a5-4c63-a0ad-4bec4ef7e30b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e2c9032-885b-415d-ab34-d6428d2e4f8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1daa1be-1b02-4746-b7cb-50917db6ea86"
            }
          }
        ]
      },
      {
        "id": "2007049b-a40a-4789-b907-52affd2265c3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "853b13ed-6ff6-43e7-b01a-7c5bdbb3bf7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a6d3a33-b3ee-479f-91f2-76d2f7e3e5f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6393cb3a-b01c-415b-aa8d-9b6164de6ed7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2087f7-27c3-4b53-bf40-1f2612db75b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e21a3290-bc20-45e9-adcd-cfd7aa2a2274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7af8cb-0dc8-440b-a148-e93d194853d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb042eab-a0ff-4cd5-af2c-2713d1d11db4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8712c76e-f33c-4db8-a1a6-78f127d805ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "738a71f3-211f-45d5-a2c8-a7e2d9bb4f25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1fd9af6-a07d-4226-bab0-36eaacb4af24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bfe8212-0d69-4be0-83cf-e959ee6e1a17"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "989624e9-6db2-4a2d-b369-52a4e66f2751",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "30522f50-adee-48d0-a81c-06176b14815a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d57df3f-d30b-45b5-ad72-0cb51ed038a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87ab1606-82eb-4f65-bc19-0c7e1f91b26e"
            }
          }
        ]
      },
      {
        "id": "b1bfb3f4-83b9-430b-9195-bcd640fa35c0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "03f9c601-d67c-4689-a047-082e4ed9ddd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b7c3855-219f-463e-9bd9-d69221ea0d85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03f79724-95bc-4f4c-8098-009d50fdf6fb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86191661-4fac-4358-b361-0cb23f2ac447",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18522653-e56b-4c34-897c-2178b175214d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7328eee-aa04-4a23-a67e-bdbc37cc7499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79977c50-a6be-48ca-ad40-1f0156135947"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6fb5e44-2dca-4f72-80e3-c78c08b9d479",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b949acc2-f7d5-49bd-b739-c0a0406b77ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8191abb-5a90-431e-80e2-136a53887254",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7fb6286-8853-4f9e-88d8-78d3eabb6d75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffce01ac-5cc0-4bf3-bdd6-177c57516b7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "910235da-f382-43aa-9811-3987d6c28f65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94b29df9-06c8-442f-a48a-de3d48ffec81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "566fa09d-3a66-4347-8a37-0f63812d9a36"
            }
          }
        ]
      },
      {
        "id": "1649d573-9b23-41c7-85cd-c8652a2c48e6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "93f17397-df0f-45d6-8928-5db36bb5e5ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7bbc816-956d-485c-a91b-b137b19f18d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a57077ea-52f8-4e43-afca-b0c98049de19",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b389645d-b35c-4037-a53c-d2de582f7c1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e86c205-8a57-4fd0-8457-007bb802e3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6470b102-6898-4448-be95-549b70b0b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad925dca-97b4-4524-bd6c-3c32b1d8ce7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0872495f-1a32-4cfc-a03e-f9656bdc1e7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62a17d3a-0fdf-4cc3-809f-b8a43e676fa2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e9c27b9-f2aa-4a15-a5bd-4e9e91382e8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d66364c-12b1-490b-983d-e7e511323d6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59ee9c5f-5c73-4158-88c8-01f68e3b3013",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1a1a6ddc-7204-4965-a41b-0b32b17e1886"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f5456f9-25b6-403e-bdb7-5af57bc5bed8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e96e166c-4553-4bd2-802e-c72ff8d2f9b2"
            }
          }
        ]
      },
      {
        "id": "22b77927-3522-4606-b1d8-37629fc944b7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0aaf22a4-8d0c-4db4-92ed-dc52e2805ff6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "434996d6-8355-4069-b6df-44d7bdc91063",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "493c5353-a0c3-4f07-bea1-00b0adf9c2e0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23a4eb41-cbce-4dc1-940a-58a76986333c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "173de7da-ff30-4cfc-a79a-992a0ba89e27",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 84.81690140845066,
      "responseMin": 6,
      "responseMax": 1947,
      "responseSd": 228.3677729329213,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692750704140,
      "completed": 1692750740162
    },
    "executions": [
      {
        "id": "974ab2e4-1e82-4d36-a70b-8f2e2d56b556",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8439b025-9f6a-49bb-b70b-aae595780934",
          "httpRequestId": "0e544e53-424a-4bc2-8388-ca9b76b67dfc"
        },
        "item": {
          "id": "974ab2e4-1e82-4d36-a70b-8f2e2d56b556",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9fa39a1d-3531-4345-b320-516c9260dfe3",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "a95f8242-56ca-4911-9e53-970f803c24ae",
        "cursor": {
          "ref": "b0c02b17-c6dd-4cc7-b86f-585900959570",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "88710e6a-f92b-413e-b063-25ab63867b5e"
        },
        "item": {
          "id": "a95f8242-56ca-4911-9e53-970f803c24ae",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1e2884b8-f911-4a75-8dea-acde8a198c98",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "cc9a511e-5807-46bb-80f3-d45b8f119c4e",
        "cursor": {
          "ref": "36c15837-26bc-4037-a678-5dd4e132402a",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4aaf1a72-3db0-4c74-9db7-73ed2e6a4ed7"
        },
        "item": {
          "id": "cc9a511e-5807-46bb-80f3-d45b8f119c4e",
          "name": "did_json"
        },
        "response": {
          "id": "086b65c2-25df-4044-aada-6915c2fcee5e",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c52c0ff-383b-467b-b686-75c622f0c74a",
        "cursor": {
          "ref": "0d3e7fe1-e852-4b33-acaf-dad5d127908d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b483e6ed-aad4-484b-b203-becb158095f4"
        },
        "item": {
          "id": "4c52c0ff-383b-467b-b686-75c622f0c74a",
          "name": "did:invalid"
        },
        "response": {
          "id": "5d6341e4-43b3-4483-b44d-38c40ac0b757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c52c0ff-383b-467b-b686-75c622f0c74a",
        "cursor": {
          "ref": "0d3e7fe1-e852-4b33-acaf-dad5d127908d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b483e6ed-aad4-484b-b203-becb158095f4"
        },
        "item": {
          "id": "4c52c0ff-383b-467b-b686-75c622f0c74a",
          "name": "did:invalid"
        },
        "response": {
          "id": "5d6341e4-43b3-4483-b44d-38c40ac0b757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843e4a98-2e79-4230-a96e-68e722e02971",
        "cursor": {
          "ref": "be4af3d2-039c-43db-8106-af1f7ee95639",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3bc27a2c-f4a8-4c3a-bbe1-8e50e740184f"
        },
        "item": {
          "id": "843e4a98-2e79-4230-a96e-68e722e02971",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1b898905-6145-41b1-bee5-205d9090bd30",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01cf5aa-d3c3-4383-9837-c2019ab3e0d1",
        "cursor": {
          "ref": "ce6f6144-c89b-42ca-8ade-f780cd0384b4",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b6cb9c7a-65c1-4e00-aafe-0a0ee29be0af"
        },
        "item": {
          "id": "c01cf5aa-d3c3-4383-9837-c2019ab3e0d1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ae90dd92-0168-4b0d-95e0-84aa5b29020b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d2bc46-8792-4673-81a3-db7fa8d9356e",
        "cursor": {
          "ref": "c43a05f5-988b-4a74-ab49-eabcf8bdc420",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "70715a0f-6c06-4493-9ca9-68779f47cbdd"
        },
        "item": {
          "id": "e5d2bc46-8792-4673-81a3-db7fa8d9356e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4b8c31dd-9da7-40cb-a30a-76007eb1de56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791647bd-ba66-49e6-ac19-1718b12bee43",
        "cursor": {
          "ref": "a32cdb45-b4b1-49e6-95c4-3b6906d8f56f",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "763e7a76-5fdb-4bbe-9c67-e12fe44bed30"
        },
        "item": {
          "id": "791647bd-ba66-49e6-ac19-1718b12bee43",
          "name": "identifiers"
        },
        "response": {
          "id": "96daaef1-e3ac-403e-b0a0-d574ec276476",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628564d2-3f10-4bdf-b4b1-952249e552ec",
        "cursor": {
          "ref": "b6651029-5cda-4e0d-8470-2e8d07c5f80a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a3482871-66a7-4738-8044-35916dfaf833"
        },
        "item": {
          "id": "628564d2-3f10-4bdf-b4b1-952249e552ec",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "71514dc7-a6db-4513-afa2-7c71cff6b04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0cf567-5dce-4967-9b37-3b256b043028",
        "cursor": {
          "ref": "acfffe00-03a5-44d1-8252-38e392099847",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b240931c-1a2b-48f0-94af-a2f154d26412"
        },
        "item": {
          "id": "af0cf567-5dce-4967-9b37-3b256b043028",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8a9de31e-c3fc-47f4-a15d-e46e41b7cfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1749fa52-1cd9-49a3-95c1-0396ed388c9d",
        "cursor": {
          "ref": "8555c31a-40d3-4c90-a41f-48becb647037",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dd968d8b-dde8-47df-bf96-38fcac992bcc"
        },
        "item": {
          "id": "1749fa52-1cd9-49a3-95c1-0396ed388c9d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "21e5a681-95f1-4732-8907-38ce90476c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87614070-f459-4562-bd96-6c4e4c88a03f",
        "cursor": {
          "ref": "d490fd66-a347-415b-863e-ecefafa9f08a",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7920c654-652d-42a3-8e31-a115df6c86fc"
        },
        "item": {
          "id": "87614070-f459-4562-bd96-6c4e4c88a03f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "67b91164-72aa-440b-b59f-073b3dfe82b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b7346a-812c-4bef-813f-e9fe6ee2536e",
        "cursor": {
          "ref": "dba60cb4-20a5-45bf-ba30-63f6301502a4",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b2ee861b-6fd0-480d-bbe7-89be89e0cdfd"
        },
        "item": {
          "id": "36b7346a-812c-4bef-813f-e9fe6ee2536e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8d54c71b-2770-4b7e-a20d-b62fb535f691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afce8fc-12d1-40ee-b3f5-94cb9039b65f",
        "cursor": {
          "ref": "bd914462-b2d4-484e-a143-3afe5a30513a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c864fa72-da6b-423a-9896-fe19ae765784"
        },
        "item": {
          "id": "0afce8fc-12d1-40ee-b3f5-94cb9039b65f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "af839fe4-2395-4f4d-8c6e-763baf84c262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e1c918-595f-4fc6-9b7e-9163c68992d9",
        "cursor": {
          "ref": "8b7f73e6-0384-4678-99f9-26af37ac2901",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f5573292-57b4-4a8c-bc2d-9b31d6c3d132"
        },
        "item": {
          "id": "d7e1c918-595f-4fc6-9b7e-9163c68992d9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8f044f71-266f-47c1-9c94-15b862c2c7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f6c1f9-076d-4c91-983f-f30c301a84ea",
        "cursor": {
          "ref": "7dc106ce-e0b6-4a81-9376-e220360da055",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ba83b49-b9fd-4cde-a254-46a033ec90b9"
        },
        "item": {
          "id": "07f6c1f9-076d-4c91-983f-f30c301a84ea",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "301daad2-28be-4234-ae49-8d0dbdf6df3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da677f89-8219-47e7-a071-0a77be2451cd",
        "cursor": {
          "ref": "54841419-6270-4a2d-87b7-287403262b4b",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3f210132-86e1-4a2e-b65d-34a5a55eaeff"
        },
        "item": {
          "id": "da677f89-8219-47e7-a071-0a77be2451cd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ea9d00b1-39ad-4941-9dc6-a55e0c268c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b3a0ae-eb7b-446d-b71a-93898d02a7ba",
        "cursor": {
          "ref": "2996b7c8-208b-40b2-bbdb-3548503258a3",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3747518f-0f02-4b06-b461-858f6c699a3b"
        },
        "item": {
          "id": "e2b3a0ae-eb7b-446d-b71a-93898d02a7ba",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d7ae756d-b345-44a3-ad85-20e350cfa147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21958c9c-765e-47e9-9565-d8b34b3c734d",
        "cursor": {
          "ref": "9bd853d7-c8d9-4f41-8562-c081dadd8118",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8bbfafd6-9d89-4911-a11c-ba0cabdfd14a"
        },
        "item": {
          "id": "21958c9c-765e-47e9-9565-d8b34b3c734d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9e40026f-72df-4120-abc2-61f751cfc6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca43333-80a7-4b41-9e85-b43db2f5c815",
        "cursor": {
          "ref": "04a940e8-59a4-4634-b493-9fa76573d741",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e13fa373-cf55-4722-973a-1e62f4b309f5"
        },
        "item": {
          "id": "7ca43333-80a7-4b41-9e85-b43db2f5c815",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cbe95399-de38-4729-a1d7-28b9d87709c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa249b7-cb23-4f76-9d54-efb189ffd302",
        "cursor": {
          "ref": "f39100a6-92af-471c-9d88-1402d5c396a9",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f48be36b-0c09-4844-b0cd-edb8a937ef3a"
        },
        "item": {
          "id": "daa249b7-cb23-4f76-9d54-efb189ffd302",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c9a9dcec-1c66-4e9c-8aed-68b678f857f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241d82a2-80ea-4d5e-ad5d-e8ec0acca24f",
        "cursor": {
          "ref": "2217d8dd-cca4-460f-89bd-564d6493517c",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2efe011f-7887-4fd4-a825-d364eb9c24bd"
        },
        "item": {
          "id": "241d82a2-80ea-4d5e-ad5d-e8ec0acca24f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bf7f1384-8495-47f3-847c-172c41fcf995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e8dd89-569b-4d75-ad60-f7ba1a793bc3",
        "cursor": {
          "ref": "3bd117f6-2a4e-415d-9e76-6ac908d111ab",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "37208dd0-c6b1-4e11-b9da-4413bacceb55"
        },
        "item": {
          "id": "31e8dd89-569b-4d75-ad60-f7ba1a793bc3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7e36d325-5922-4f2b-9e25-560c8dc70182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f018975-5b9c-4c84-88ff-68a63ab4832b",
        "cursor": {
          "ref": "a139f5ef-5514-484d-8605-9ec2f9be52e8",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1a647200-518b-4539-b5b0-34eddb6738f3"
        },
        "item": {
          "id": "2f018975-5b9c-4c84-88ff-68a63ab4832b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "91b782f9-839e-417b-86c4-f3d57b67a818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea87017b-9e16-4537-b156-1d04c8aa5ee5",
        "cursor": {
          "ref": "ec02c8b0-7ba9-44c1-a8de-00165f358881",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "60e17069-7f82-4def-89b0-7776450df6cf"
        },
        "item": {
          "id": "ea87017b-9e16-4537-b156-1d04c8aa5ee5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "62ee84d6-c6a0-4bc4-9c00-74a209e1ed86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302796ba-0366-4cb2-9b48-825cb58481d1",
        "cursor": {
          "ref": "5035466c-b7a5-4431-8834-b1177a302b9a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7d012eb2-7170-4506-b2d8-59c66be50de3"
        },
        "item": {
          "id": "302796ba-0366-4cb2-9b48-825cb58481d1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "849b8901-125d-4aaf-965d-3ebda0d12f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6108aa71-4116-434a-8d2d-228bf15d15d9",
        "cursor": {
          "ref": "7eb1fd90-62bd-4e39-aec9-eed4993ac170",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2e32cf3b-1b90-4e74-92e9-6e135e154e5d"
        },
        "item": {
          "id": "6108aa71-4116-434a-8d2d-228bf15d15d9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "566cb9a8-9df7-4bcd-9188-5e815ca9eae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348f52be-2967-45e2-847b-ad300a9ee739",
        "cursor": {
          "ref": "8e2755c3-d154-43fb-adab-2ec197edcf5f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0a4834ea-b2b7-4253-8808-bac6fe821225"
        },
        "item": {
          "id": "348f52be-2967-45e2-847b-ad300a9ee739",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "156e638b-8b36-4552-9bd4-7b6814cd0732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcf23b9-2261-46d8-a331-a5a76ebee9d4",
        "cursor": {
          "ref": "27029245-edec-4b6d-8b53-6573560b8a97",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a5dd9a2a-1773-43bd-9adf-d0fcac8eac5c"
        },
        "item": {
          "id": "0dcf23b9-2261-46d8-a331-a5a76ebee9d4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3a2ebe1f-2df3-453e-a6e8-355ed8d5a623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70f2ac9-fdc3-4812-89eb-79ad580b035a",
        "cursor": {
          "ref": "f811d36e-f0bb-4cd8-89c5-c2669a9d92b1",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "29ab6cc5-6c28-4c46-97fb-8152af87adea"
        },
        "item": {
          "id": "c70f2ac9-fdc3-4812-89eb-79ad580b035a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cc3f6b93-8344-4369-b35e-e9bd73beee0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4110f4-e634-45ab-9e22-b7192dbcfff7",
        "cursor": {
          "ref": "f5e0eb01-2709-4ec5-8f40-e30368f1f3d8",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7f13d273-15ba-442d-a642-79acc84a67b1"
        },
        "item": {
          "id": "eb4110f4-e634-45ab-9e22-b7192dbcfff7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6036a203-4a01-4c31-825a-96647d858f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d477ee3f-b97b-4c2c-afd9-36d4225c5b0c",
        "cursor": {
          "ref": "ebfa4a61-cad9-4153-b59e-838a6a709240",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b17070c2-3560-4f30-aeee-0a4af104074f"
        },
        "item": {
          "id": "d477ee3f-b97b-4c2c-afd9-36d4225c5b0c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "85c90cfc-8887-4c45-b1e9-3c7c19a0b8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17329cc4-d4fb-49e8-ac5f-6db1146d1cf4",
        "cursor": {
          "ref": "b152bef7-4448-4ad3-a8ce-8ed42c9e0488",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b7260ca7-ea86-4cc3-97d7-ff593083f304"
        },
        "item": {
          "id": "17329cc4-d4fb-49e8-ac5f-6db1146d1cf4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a0d4dd34-373a-45b6-b90b-a0367e34870e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc479e7-508b-4eef-b8ad-475ae12fb3c8",
        "cursor": {
          "ref": "b5a9de4a-95aa-4606-bc02-bea13bfe99a0",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "810314f0-a2ea-419b-8480-a1910d8377f0"
        },
        "item": {
          "id": "abc479e7-508b-4eef-b8ad-475ae12fb3c8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "31167598-f473-4b23-ad63-a76c44eb8e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4009df-681b-405a-9264-a07fefd4e744",
        "cursor": {
          "ref": "75756bfe-c48f-43ac-9a3b-391d83ee1daf",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ed7076e0-b823-49e5-8f13-4ec271e6622f"
        },
        "item": {
          "id": "df4009df-681b-405a-9264-a07fefd4e744",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "142d4847-2a04-4d93-82f6-bab73f75f31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695eae89-19d7-46bd-af16-ab5cc86cbcfb",
        "cursor": {
          "ref": "d586a7f5-9678-4c7d-a014-1536e9ce5e59",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "db2daac8-eb46-45b3-9ed7-503397ce1daf"
        },
        "item": {
          "id": "695eae89-19d7-46bd-af16-ab5cc86cbcfb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "736bc530-8347-4d1a-b425-9dddc70937a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69982a6-4788-47d1-a0f3-50573def3388",
        "cursor": {
          "ref": "027b3a87-7791-4bcb-abbe-3a9c2fe41890",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "52caeefd-e3d9-457d-b23e-37569dd83c16"
        },
        "item": {
          "id": "b69982a6-4788-47d1-a0f3-50573def3388",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ea469408-1600-4be9-8bf5-45fc011f2fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89adfd82-5c54-46ba-a5d0-a75a25fa9723",
        "cursor": {
          "ref": "5fe06115-b572-4318-9e61-b3181e34907e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "839be72b-7d8a-4f36-a23c-8f72bda0445c"
        },
        "item": {
          "id": "89adfd82-5c54-46ba-a5d0-a75a25fa9723",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "35439897-e25f-4824-bfe7-b47c2f13173a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6619b5aa-11f3-4d7e-b05c-944e41be8f18",
        "cursor": {
          "ref": "bc6f363f-6082-4fa5-9385-9de171190b24",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3f466cb8-3019-4dff-9d2e-656372812754"
        },
        "item": {
          "id": "6619b5aa-11f3-4d7e-b05c-944e41be8f18",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "99b19fc6-dd66-4f55-9e4e-dbb9dd55ff72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cbf95db7-966f-4dc1-998c-aec294d6fa6f",
        "cursor": {
          "ref": "1690209f-0723-4da8-b228-7a23526ee3e7",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1f8dd146-cf8e-431d-8bca-38f368015bf4"
        },
        "item": {
          "id": "cbf95db7-966f-4dc1-998c-aec294d6fa6f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2394cc43-7000-4b3d-9d1b-1f53c19ef718",
          "status": "Created",
          "code": 201,
          "responseTime": 1947,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3a053f20-149b-4902-bf8e-daeeb0df6389",
        "cursor": {
          "ref": "55e7c814-c4e1-4998-ab16-13955005b61d",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5077bf9e-46b9-4769-8b45-9da6938aa13a"
        },
        "item": {
          "id": "3a053f20-149b-4902-bf8e-daeeb0df6389",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cb1c5422-fc78-48a9-ad8f-8783af85c8bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "45bbd81f-a581-4f64-8bd7-4d1cceb9ec8f",
        "cursor": {
          "ref": "477ceb70-96a2-4a12-9c5f-80f3be031140",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6e0706b6-7a1c-4f1f-895f-ba7f6a5ce0c4"
        },
        "item": {
          "id": "45bbd81f-a581-4f64-8bd7-4d1cceb9ec8f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "383b1afb-cf32-4535-b158-1881e382c287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afdf1ef-8f31-4bdb-a9dd-45be4c78b038",
        "cursor": {
          "ref": "0b3ac828-23ed-49d8-9331-1f65a6a2e6ee",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "97f8d3ce-225d-416c-b51c-5201d66134d8"
        },
        "item": {
          "id": "2afdf1ef-8f31-4bdb-a9dd-45be4c78b038",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4549ebbf-317f-469c-a7ed-c7587c5b413f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "91c5ec36-c3fb-452f-8cb7-62b9a74cb0e7",
        "cursor": {
          "ref": "9b33f49c-b8ae-4627-82b3-99c40f00238c",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "887c8beb-7883-4484-b9a5-f5cd28c8ad94"
        },
        "item": {
          "id": "91c5ec36-c3fb-452f-8cb7-62b9a74cb0e7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8f5dde2f-dcea-48bd-9680-f1cbdc867882",
          "status": "Created",
          "code": 201,
          "responseTime": 1413,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "20783e5f-ce47-4278-931e-9a304f6b9626",
        "cursor": {
          "ref": "8096f0e6-2739-4aec-8170-d745917486a7",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a7a55010-abaa-4a0e-abed-7a4893625ffd"
        },
        "item": {
          "id": "20783e5f-ce47-4278-931e-9a304f6b9626",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0ca1b94e-fdcd-45d5-88cd-cae864583cc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "45a8cddc-1838-4758-ad8b-20ba6cafa88e",
        "cursor": {
          "ref": "fbff4682-9723-4fd8-b11f-4809a58df81a",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d0f02847-8989-4e67-abec-7a1daf5dcc81"
        },
        "item": {
          "id": "45a8cddc-1838-4758-ad8b-20ba6cafa88e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d8f69f3a-42fe-4082-8d96-0769eb39010a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 696,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "27b7f8e9-e679-4fc7-ad83-261e423de023",
        "cursor": {
          "ref": "fca7bc72-714f-4ed8-b78e-d913e3301ac5",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c324f004-f54f-4be1-b504-2722bc23548e"
        },
        "item": {
          "id": "27b7f8e9-e679-4fc7-ad83-261e423de023",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "879b0a92-6176-425e-9d0a-0c2b40ec16de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6ea2ebd4-7052-4b0d-aaa9-5a0ec120f5cf",
        "cursor": {
          "ref": "78b49305-d022-45e0-b03a-1f0c7a75cde1",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ff2ea268-76b4-49cf-ab12-2a567c55b919"
        },
        "item": {
          "id": "6ea2ebd4-7052-4b0d-aaa9-5a0ec120f5cf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "83d31ab2-9077-40b2-9da5-c2b40fa8838e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6bf17789-bafb-466a-a8af-fd4284f96865",
        "cursor": {
          "ref": "73f52f11-c823-488c-aeaf-163aa449f59e",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "96bdb4f3-9728-40f6-841b-fd9c7d6f60e5"
        },
        "item": {
          "id": "6bf17789-bafb-466a-a8af-fd4284f96865",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9f3c2819-090b-49e0-b4aa-fb701ff1be56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1461c4e3-e993-4a07-b51a-a9664eaa5a7f",
        "cursor": {
          "ref": "870ef1de-a746-4b7e-ac89-5a0fbc0886be",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "20b55451-6ea0-48c6-b9e8-fe9f64a0fe2e"
        },
        "item": {
          "id": "1461c4e3-e993-4a07-b51a-a9664eaa5a7f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4883a67b-8c7f-48fd-af12-15e252b75269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7919b119-91f6-4e41-bed1-6ec66667edab",
        "cursor": {
          "ref": "171504b5-ebbb-4d87-8875-a8789ab3182d",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "10fa91a2-0753-44d0-ac6c-667e5e450b19"
        },
        "item": {
          "id": "7919b119-91f6-4e41-bed1-6ec66667edab",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "20c346f9-0428-4a17-abc7-7fa1af8da33f",
          "status": "Created",
          "code": 201,
          "responseTime": 959,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "afd6805a-13fe-4f8a-b0d1-25dcc5fe9bce",
        "cursor": {
          "ref": "18b5627a-c89f-4262-8de9-25d3acef5f44",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "22bd110d-b232-44ac-a51e-f400d512910f"
        },
        "item": {
          "id": "afd6805a-13fe-4f8a-b0d1-25dcc5fe9bce",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d76cff87-4057-4941-98df-5f9c2dbabfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b476be-7278-4789-9111-5692f01a1728",
        "cursor": {
          "ref": "73fa63dd-af45-4407-9a05-ce31f6844065",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b9cdd414-bf92-4559-bbcd-2415577362bc"
        },
        "item": {
          "id": "02b476be-7278-4789-9111-5692f01a1728",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dd5f1c3b-f686-48db-b7c8-e06e12f05f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213bac6d-f0ff-4a77-8a3a-9b810fd37eff",
        "cursor": {
          "ref": "c87c7755-82bb-48ce-9b0c-dc3151aac7ee",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "47039695-083e-4cd2-ade7-4d52ebe0f8ec"
        },
        "item": {
          "id": "213bac6d-f0ff-4a77-8a3a-9b810fd37eff",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e0c180fe-5cc8-4a0c-91b8-00aa5da929f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16413456-6a23-4685-8f57-3a13f9bcf351",
        "cursor": {
          "ref": "5babe347-b29f-4b59-8560-32e2b5acc670",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3e7c6e9d-8548-4eff-8def-9e21e9e3daae"
        },
        "item": {
          "id": "16413456-6a23-4685-8f57-3a13f9bcf351",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "25b87baf-5aae-4b7f-8b6c-5cdfa6a5b7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f70c39-77af-4b54-aa1c-790f20c0c3dc",
        "cursor": {
          "ref": "e7e47c3a-924f-4d77-8194-3f3dc412ed70",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0e88006a-abc8-462e-b75b-11a227ebe35b"
        },
        "item": {
          "id": "a1f70c39-77af-4b54-aa1c-790f20c0c3dc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "83b3abef-51cd-4c2c-b48c-f235f6ff7266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341c5630-4dff-4af8-973a-4dac240fad3b",
        "cursor": {
          "ref": "da289ab3-aa9c-4432-8aee-60f03b290b1a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cbec0bb3-5e5b-457e-8281-f6e5c5a58e58"
        },
        "item": {
          "id": "341c5630-4dff-4af8-973a-4dac240fad3b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "80984ba2-45b5-4598-aea7-12582f8c60ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dcfd23-97bb-46a0-b77e-97a6590d4c79",
        "cursor": {
          "ref": "f21237d7-8b97-4d15-952a-e65ae58f4758",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b1a045da-b412-45b9-b73d-4fe0f6a0da5f"
        },
        "item": {
          "id": "78dcfd23-97bb-46a0-b77e-97a6590d4c79",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "451d1267-1c25-4351-bd9a-771a73164809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30592c5a-3786-4293-949b-fd442c7fe65e",
        "cursor": {
          "ref": "ec501d46-cb35-4ae4-ad6d-c34d61f98976",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "89c04bd6-dee6-4857-82b7-208eb3d3d058"
        },
        "item": {
          "id": "30592c5a-3786-4293-949b-fd442c7fe65e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "180d374c-672e-4422-ac1b-05546620c10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ce79a2-03b1-43a6-887f-0b59582e722f",
        "cursor": {
          "ref": "7c7fca1b-0e5a-4e97-bc7f-2ef99ecdb387",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cf7ec921-6d34-40a3-bfa8-71d4f1aad0ca"
        },
        "item": {
          "id": "15ce79a2-03b1-43a6-887f-0b59582e722f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "797c1a9d-1f13-4ac5-92de-8382059d952f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e93164-6e16-45ed-9b7f-115d0d6f8958",
        "cursor": {
          "ref": "a2ff434b-bf59-42ce-af7b-f2a81a660274",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6ed55bc6-5197-4814-960e-30a506fa0fac"
        },
        "item": {
          "id": "a7e93164-6e16-45ed-9b7f-115d0d6f8958",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d7686aa2-fc6a-4721-9c0a-d5997b488c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06061ddb-5d94-4591-ae03-0d9de622b23a",
        "cursor": {
          "ref": "380034df-add8-4d15-b019-ab5f522b5c64",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9c821975-837a-4923-9ef3-7fe27d9c7d9b"
        },
        "item": {
          "id": "06061ddb-5d94-4591-ae03-0d9de622b23a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a5144419-0969-4cc0-8a82-082139622338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5f9fc5-bcb4-4bdb-b33a-e20814db6773",
        "cursor": {
          "ref": "5a0b9c85-41aa-41f7-b140-7d5ba88cfc1a",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a2523dc4-f6eb-4391-8b31-5af3c9d0acb9"
        },
        "item": {
          "id": "6d5f9fc5-bcb4-4bdb-b33a-e20814db6773",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8d24f33a-3487-4b8f-8f25-6de9b14cd7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d674fd-6690-4569-a3f8-fca553965cbd",
        "cursor": {
          "ref": "4958ef3d-a57c-4f52-aeaa-53f0a3955daf",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "43db45cf-f482-4eca-b97c-73adfdb86ad6"
        },
        "item": {
          "id": "54d674fd-6690-4569-a3f8-fca553965cbd",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fc4cfe20-2f52-48c7-a4b7-1b7076454651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16416bd6-5744-4404-a439-81d0055477c1",
        "cursor": {
          "ref": "7ee93d29-ddc4-46e5-84f5-c82cc32ea7c6",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4f983ab9-af81-4464-b2c9-272e0b6c717b"
        },
        "item": {
          "id": "16416bd6-5744-4404-a439-81d0055477c1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dae0d48c-7d7e-4811-8c76-8e0285bc4c07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 769,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d3f3335b-6fbc-46b7-9475-e822340a6040",
        "cursor": {
          "ref": "2a215cbe-c3a2-4e86-91c5-ec74ca04795a",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f798a08a-75ed-4efc-9a34-d09ae0dd3784"
        },
        "item": {
          "id": "d3f3335b-6fbc-46b7-9475-e822340a6040",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d062d354-ab75-49b5-a1a5-1452ab22b445",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1169,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "79781e0c-a7f2-449b-9195-a69827a426a5",
        "cursor": {
          "ref": "b56f32f6-b698-4d51-9049-de7a2fed22cd",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d4f0e7c8-b99d-464e-a9d7-16862a8132e6"
        },
        "item": {
          "id": "79781e0c-a7f2-449b-9195-a69827a426a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d1e136e7-a167-448f-b19b-ac44be54c905",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2fda0114-7be0-4ba1-8630-2785f99156d4",
        "cursor": {
          "ref": "c65f814a-5e26-4a7f-b6dd-a3171a9e0d83",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dc5bb07d-a2b9-41d9-9337-ba3d30e94cf0"
        },
        "item": {
          "id": "2fda0114-7be0-4ba1-8630-2785f99156d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "38902fb9-77aa-4783-ab93-d928e263fec4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 728,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3e2c95c8-833a-4357-a284-382f293309c2",
        "cursor": {
          "ref": "3011fb19-d752-493d-a0f4-1e9e8586fe20",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "46c7e405-bb16-46e8-a035-b67c41018c6c"
        },
        "item": {
          "id": "3e2c95c8-833a-4357-a284-382f293309c2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d6bcbca0-e945-4068-adae-1efaa151a44b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a012249e-fe8f-412b-9dfc-0626fa542bb2",
        "cursor": {
          "ref": "a775c068-5fec-440e-a7b1-ec60f83f0a90",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "eb990a03-5456-407b-a415-1590065c7790"
        },
        "item": {
          "id": "a012249e-fe8f-412b-9dfc-0626fa542bb2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ac43a117-d377-40df-a552-7bd4b979340f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860f8fe5-a586-4e0e-bff3-c7a9e2310093",
        "cursor": {
          "ref": "377e0261-1ce5-4d7e-a3ff-c3f652b49d29",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ddb268f2-f985-4784-8107-c036ee4e5056"
        },
        "item": {
          "id": "860f8fe5-a586-4e0e-bff3-c7a9e2310093",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9a0a65df-490c-47b9-9f2a-b74a797a9232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843afdee-997f-4626-94d0-ae288fc95a1c",
        "cursor": {
          "ref": "17d782aa-bad5-4cae-b915-91567864c935",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "282aff08-21dd-49b3-a200-8f626709050a"
        },
        "item": {
          "id": "843afdee-997f-4626-94d0-ae288fc95a1c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "268f2886-e46a-4e37-9025-508eb9ed16bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cd8445-36d1-4dc8-9f67-f4c0903a5a96",
        "cursor": {
          "ref": "e02615a1-2dc9-408b-a33c-e70cc145b68b",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8e94acaa-ab23-4886-9398-c971f614d7f4"
        },
        "item": {
          "id": "03cd8445-36d1-4dc8-9f67-f4c0903a5a96",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "edb039df-9599-40c6-847b-7ce5119a0777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e264bb31-23a5-48de-9a49-05e9877a854e",
        "cursor": {
          "ref": "40aabb79-d5ba-4fbf-87ed-e598d218a9b4",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e2d57a0a-bc8f-4e60-ac83-75b4c44f7156"
        },
        "item": {
          "id": "e264bb31-23a5-48de-9a49-05e9877a854e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "213f5f00-a7a2-495d-82b4-8fbcff5455e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694be92d-fcb4-4392-81ac-453978d0f828",
        "cursor": {
          "ref": "0b687eea-de0f-4de9-a7ca-41d2600e9ed3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9a52ddd6-7cb2-4259-9a2f-4970ba062369"
        },
        "item": {
          "id": "694be92d-fcb4-4392-81ac-453978d0f828",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "52187e00-ebe2-4650-8f73-c79fe73e4f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e11e0c-4852-4173-9ac1-ad3353b5ac22",
        "cursor": {
          "ref": "63b9e7db-20d3-4e96-805f-147d1491aa2c",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18244e07-c8bb-4e56-b52e-111faf657ed5"
        },
        "item": {
          "id": "f1e11e0c-4852-4173-9ac1-ad3353b5ac22",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c857bdad-e372-4705-9559-b7945678047e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691c658d-55a9-424f-96a1-ed5112f6fb68",
        "cursor": {
          "ref": "b5497b7e-2ba2-4d46-9b7f-1af8ea031bab",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ee9b809e-74ea-4ab4-915d-dac61d5773fb"
        },
        "item": {
          "id": "691c658d-55a9-424f-96a1-ed5112f6fb68",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b1a211ec-22e0-463f-affa-752ec133baa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08919c73-7173-46f2-89e3-97cc04e18dd4",
        "cursor": {
          "ref": "4cbf9986-0d64-46ce-94c5-7afe988c991f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a71e4d0a-0516-446a-bc68-a96dc94357a1"
        },
        "item": {
          "id": "08919c73-7173-46f2-89e3-97cc04e18dd4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0e60adab-33c0-447b-97a1-b14f78335dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1109d234-9e05-43b5-8c00-a84f47da52b5",
        "cursor": {
          "ref": "b2a9ea0c-2ecc-46d4-a27c-393a3a7a008f",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "37b4f8db-632f-44a2-bee2-decf5ff59f89"
        },
        "item": {
          "id": "1109d234-9e05-43b5-8c00-a84f47da52b5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "00f9ae05-bba3-43fb-83e5-f0f13ef5c2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3eca87-e517-4682-ae94-4616f430dc5b",
        "cursor": {
          "ref": "708223ac-f991-4f1d-acb5-b824b6771275",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c758a3b4-8e43-49b8-b002-794376881c96"
        },
        "item": {
          "id": "fe3eca87-e517-4682-ae94-4616f430dc5b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3f74311a-047d-412e-890e-f7b712f0699a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55557b58-c894-4ce4-9bbc-4e634473d42f",
        "cursor": {
          "ref": "621fb53a-f393-471b-9810-d7ed732f3a08",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c85d37a6-a6d0-46ba-9bc5-48982115582f"
        },
        "item": {
          "id": "55557b58-c894-4ce4-9bbc-4e634473d42f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8d0c6527-c525-483f-821a-80ed57525801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf02d05-e7b5-4e0f-a488-0f08c227642b",
        "cursor": {
          "ref": "2f554e48-ce60-4db5-8710-eea365ce60e1",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f7cc0dc5-7b78-4bb2-87cd-3255d74cdf90"
        },
        "item": {
          "id": "7cf02d05-e7b5-4e0f-a488-0f08c227642b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e36f1125-ab56-466a-aa15-3a449665ffe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2251c23c-26db-41fd-9383-02a781ef1358",
        "cursor": {
          "ref": "08edd93e-aa93-40e4-b87a-5461b0108c08",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a5aa1853-387f-444d-92f1-a4dec7fa4ef5"
        },
        "item": {
          "id": "2251c23c-26db-41fd-9383-02a781ef1358",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "100d9c0b-77ab-468b-a75f-24a3970c49d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df90ee6-cc4a-49c0-a324-106b4687dd4a",
        "cursor": {
          "ref": "e42ca6b3-c76b-466e-9fde-90a7aaee17a9",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b8ae8abd-b6aa-49b8-b921-2ec4763e5c57"
        },
        "item": {
          "id": "3df90ee6-cc4a-49c0-a324-106b4687dd4a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a8511559-4295-4126-be00-5f496fa45bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c887ef1b-bea3-42e8-bcf0-ccee953473c0",
        "cursor": {
          "ref": "4dad4976-de67-4057-b22b-7858302a9e34",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "446e67ba-8dd9-4801-b672-a7e0da166cca"
        },
        "item": {
          "id": "c887ef1b-bea3-42e8-bcf0-ccee953473c0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0995dfa0-049f-487f-8c53-8e6b760d95c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a6be22-9719-4bc0-91a9-2172e3f1d53c",
        "cursor": {
          "ref": "d0ab977f-5315-4be4-8e52-d629d947d68d",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1c3df2cd-c0ae-486d-92bf-6a2e1337dc7d"
        },
        "item": {
          "id": "c7a6be22-9719-4bc0-91a9-2172e3f1d53c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f2ca9f3a-267f-4e98-9838-0fc22fdffd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7006b5c4-e603-4d09-93a2-71256839b8ad",
        "cursor": {
          "ref": "b61a371e-21f9-432f-b459-b875aac651e6",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "687a241d-221e-43a4-81b4-2a7c4f56841e"
        },
        "item": {
          "id": "7006b5c4-e603-4d09-93a2-71256839b8ad",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6a3734a8-9b87-4919-8332-a12b1fbee4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8a491e-1d0f-47cf-9639-56d379c07345",
        "cursor": {
          "ref": "fac2dcb2-1c13-49f0-9649-29e707a6811c",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4f8f12bc-c90b-405e-a982-402a6cddf0a7"
        },
        "item": {
          "id": "ef8a491e-1d0f-47cf-9639-56d379c07345",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3795da6a-5180-4bec-b62a-984209b8ec91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8f56bb-0c1c-4497-8a05-fdfb237b3a13",
        "cursor": {
          "ref": "77b19a54-9fd0-4f64-a6ca-125e5521f016",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8abce3ee-d3ca-433d-894d-4e225b9e6e37"
        },
        "item": {
          "id": "9a8f56bb-0c1c-4497-8a05-fdfb237b3a13",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "91b832a9-b1e5-4723-967e-83afa1c66436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becea1a0-079c-4a20-8639-0a460ecd7719",
        "cursor": {
          "ref": "f044c1ef-cc99-4d28-a7bb-3e7f97512788",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "744a69af-d80b-486f-8728-a9a1e14aa548"
        },
        "item": {
          "id": "becea1a0-079c-4a20-8639-0a460ecd7719",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fe6c4570-e786-4fd3-93e0-32c57c638d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c89664f-3f55-4f5e-8a26-6c412d46aa08",
        "cursor": {
          "ref": "03d64afc-ad26-4486-af1f-940e0a255104",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "55532b00-80bb-4db0-b260-b009a060f571"
        },
        "item": {
          "id": "2c89664f-3f55-4f5e-8a26-6c412d46aa08",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4d62992a-62b5-4425-93a1-74f720d3c196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898408a2-f095-4779-90ee-48ac9c7fbbee",
        "cursor": {
          "ref": "67f8847a-19d9-439a-88b8-278042830391",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "46246095-664d-4949-89ef-6dfe64d03242"
        },
        "item": {
          "id": "898408a2-f095-4779-90ee-48ac9c7fbbee",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4e1a9a54-23c6-4610-9354-46f2bc4e9a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e215d7-e17c-423a-a6f0-08a6002c907e",
        "cursor": {
          "ref": "2a27dedc-1a02-46d9-a397-33880e9c1434",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "814bdb33-e920-40e1-ac92-240489dd4d85"
        },
        "item": {
          "id": "b2e215d7-e17c-423a-a6f0-08a6002c907e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "41c72a4a-66be-4f76-aaae-1a72a410ba20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f725a6b5-39b3-4290-b608-e6635226b94f",
        "cursor": {
          "ref": "84fc437d-7e6c-4b71-b7a1-f639d6c37818",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5f414324-b06e-4c06-acad-a3b5d3a67246"
        },
        "item": {
          "id": "f725a6b5-39b3-4290-b608-e6635226b94f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "27ddfdd9-2adf-4d42-a3b7-50d2fa4e13b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7fd0d3-b18b-447d-b8df-210f9237129c",
        "cursor": {
          "ref": "8d2cb1a2-780f-4a9a-abaf-939b76e2da1e",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0acf78f4-b6ae-48cc-bdaf-c8717419698e"
        },
        "item": {
          "id": "ad7fd0d3-b18b-447d-b8df-210f9237129c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ad598651-4a96-4418-8be1-17bb7b184ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ae5fa8-8c3a-44e3-a4c7-30864988d3ee",
        "cursor": {
          "ref": "f658a37d-8d12-46cd-9479-e5a68ace5c83",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "80dbc089-8ca1-4c21-a35a-a41bd92c2424"
        },
        "item": {
          "id": "e9ae5fa8-8c3a-44e3-a4c7-30864988d3ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4cfa185c-8f85-4d13-aafd-87e05eb9d3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c008b9-19ab-46d7-aea6-bd3b26ee752f",
        "cursor": {
          "ref": "53d02b64-88a9-4b8d-986f-4caa9d51d8c5",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "566e8f01-205f-4c02-ac0c-acb3b31f7ff3"
        },
        "item": {
          "id": "98c008b9-19ab-46d7-aea6-bd3b26ee752f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7756283c-4e86-4286-ab59-a120460b782d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87e5668-a3e4-4d6f-8b92-813cb992bcac",
        "cursor": {
          "ref": "86ff123a-3322-4139-8c4e-5de5241520d5",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dad7256f-2f8e-41e7-9eaf-eabe345be8e8"
        },
        "item": {
          "id": "d87e5668-a3e4-4d6f-8b92-813cb992bcac",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c2861d55-0216-4061-b2b4-3aa41c2f42e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48164efe-52fb-433b-9b7f-68e289acabc8",
        "cursor": {
          "ref": "a39d2bd9-01a6-4591-b6c9-d724119efd38",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "de8a1be6-b64f-4e34-b0f2-2da113609da3"
        },
        "item": {
          "id": "48164efe-52fb-433b-9b7f-68e289acabc8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c13e3dc3-03f0-41a1-8675-8a1518b5632d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9212d4cd-6a81-449c-a250-3251bd4f3e96",
        "cursor": {
          "ref": "b975633a-d065-41eb-8128-8b3f8efeff96",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e40f7fbd-20c2-4bcc-b279-7a71b05ef745"
        },
        "item": {
          "id": "9212d4cd-6a81-449c-a250-3251bd4f3e96",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fc82b2d6-cc11-4dff-aa54-c4976e4c5ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f713f2ca-becc-4593-9b7f-c1bfe39582ad",
        "cursor": {
          "ref": "03c00a78-3406-4d4e-ab35-fe894157c36d",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c8f1fef7-6ee7-4e64-ab4b-2bd628bab5cc"
        },
        "item": {
          "id": "f713f2ca-becc-4593-9b7f-c1bfe39582ad",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "84e18c9e-cf0c-4e47-8a36-c37e716c60ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3e8bed-76d7-4766-8deb-87ef3f561958",
        "cursor": {
          "ref": "a7cb7ff7-e76f-4434-9af6-0821c2f035d0",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e21126ac-522c-44a5-8e0d-097220e26eca"
        },
        "item": {
          "id": "8b3e8bed-76d7-4766-8deb-87ef3f561958",
          "name": "credentials_issue"
        },
        "response": {
          "id": "caba0f51-f47f-4f9b-8826-20ed4bc069f2",
          "status": "Created",
          "code": 201,
          "responseTime": 1091,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc1b25e-c0ba-403c-851d-f14f035699bc",
        "cursor": {
          "ref": "120deef1-6329-4d5a-9c1e-3a95736f3943",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "13fde922-d4fd-4b9b-aaa2-042f0a899a3a"
        },
        "item": {
          "id": "3cc1b25e-c0ba-403c-851d-f14f035699bc",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5c8a5630-7963-4cd7-8176-1d754f93504e",
          "status": "Created",
          "code": 201,
          "responseTime": 963,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba7ae2f-f3c1-4767-8fda-0ef0fe080edb",
        "cursor": {
          "ref": "312eb195-2225-4b0b-9eee-11af19dae0b4",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "540a4f2a-9f74-454e-a758-ce4ef3880911"
        },
        "item": {
          "id": "9ba7ae2f-f3c1-4767-8fda-0ef0fe080edb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "21e9ad45-186a-4a44-9d5d-9ac329538318",
          "status": "Created",
          "code": 201,
          "responseTime": 942,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb1cd11-e49a-403f-8616-b007f739f05f",
        "cursor": {
          "ref": "8e05b6c4-720d-4e5b-aa96-77a8652b8991",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e20c5bfa-cf44-4101-a793-0e766de27b9f"
        },
        "item": {
          "id": "4bb1cd11-e49a-403f-8616-b007f739f05f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f29c1a0c-3034-46b4-a3cb-3b3f0c797dee",
          "status": "Created",
          "code": 201,
          "responseTime": 931,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5334bc0e-c778-43a9-9421-2f3e4ea9944d",
        "cursor": {
          "ref": "65386c93-ccd3-45f2-8f3e-68e0e4b430d8",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "edbe2e5e-487f-4c2e-8998-906aa5710fe6"
        },
        "item": {
          "id": "5334bc0e-c778-43a9-9421-2f3e4ea9944d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "14726cd2-56d3-4e3d-931e-c0341e7bb35a",
          "status": "Created",
          "code": 201,
          "responseTime": 1390,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb2350b-cca0-43d2-8b5c-62895cdc17d6",
        "cursor": {
          "ref": "c753808d-574e-4279-ab82-20fa6489f498",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "55294fcb-dba8-4507-a130-9b4d806cc629"
        },
        "item": {
          "id": "ffb2350b-cca0-43d2-8b5c-62895cdc17d6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cb0f4cc8-2cbd-416c-bb0f-0606fa9d4fdc",
          "status": "Created",
          "code": 201,
          "responseTime": 944,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dc9a58-138b-4db2-86f3-10a79002ee13",
        "cursor": {
          "ref": "d85a59e0-70ed-47dd-9388-a01fb4ad9b02",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0892967c-9250-418f-8270-131b935c0813"
        },
        "item": {
          "id": "c4dc9a58-138b-4db2-86f3-10a79002ee13",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5be6667d-9916-4f0a-9f80-0360f4240fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fb4f10-d7b7-4aa0-bd56-c910b72c931f",
        "cursor": {
          "ref": "06cf83f4-e47a-40cd-a4fe-c3f95aaaa473",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "77524d9a-325a-4f33-b681-a6b734247b0a"
        },
        "item": {
          "id": "44fb4f10-d7b7-4aa0-bd56-c910b72c931f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8eaac687-27c3-49df-a535-cdb14b072979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ad284a-3bbf-44a2-868f-b109d05516de",
        "cursor": {
          "ref": "3e5fdf52-21d5-4480-9ed8-35165575dbe9",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e38ad560-4a74-4701-8097-9084830d3003"
        },
        "item": {
          "id": "c9ad284a-3bbf-44a2-868f-b109d05516de",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "360413a6-24e3-493c-83fa-0a6ea6467fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fde5f50-8d35-46d6-8668-b372112fb9a1",
        "cursor": {
          "ref": "a5c26a7b-740b-4f41-ae01-d15b32656c50",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1dbeb525-f82b-4acb-ab2a-65c80b0c90f0"
        },
        "item": {
          "id": "7fde5f50-8d35-46d6-8668-b372112fb9a1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dd279f1e-74d5-478a-a80e-647826431454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb95d96-cb2f-4377-8fb3-c21d4011a515",
        "cursor": {
          "ref": "02d8fe57-47e0-42c8-96ba-fa9d2492bc12",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b8b41053-89d1-4a6d-acec-759d9d85c002"
        },
        "item": {
          "id": "5fb95d96-cb2f-4377-8fb3-c21d4011a515",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51032e71-57f8-4f14-bed7-24e3b3aeca29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f183d7d4-86d5-4291-acb8-c72d2de20141",
        "cursor": {
          "ref": "09e84b79-9b9b-4463-8865-da435bb13722",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e5c7030b-2320-4ec8-8347-ad52dc894e5d"
        },
        "item": {
          "id": "f183d7d4-86d5-4291-acb8-c72d2de20141",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "be154215-d64f-4268-a807-ef9c8c4be439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763ace4d-7b54-49f1-9e46-30e35f49d15f",
        "cursor": {
          "ref": "636fbe15-14c9-4805-8f22-3b709ec912fc",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "62773ac7-d99a-4574-8ae9-5b3d57cee5b5"
        },
        "item": {
          "id": "763ace4d-7b54-49f1-9e46-30e35f49d15f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ac869a4-7f59-44bf-bef5-b71b3f944229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8546549c-da45-4d15-9be9-dd2e6783f84d",
        "cursor": {
          "ref": "597e3ca7-864c-4e5c-8277-b25b70277936",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2e27d72d-6b31-4e98-b669-1a7fb4ec0276"
        },
        "item": {
          "id": "8546549c-da45-4d15-9be9-dd2e6783f84d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b8f060b2-7e5e-4fa8-8f9b-f19b5b47348d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde25ccb-06f6-4e48-bf32-2420b099a986",
        "cursor": {
          "ref": "5864ddd4-ffb2-4632-b144-ee312da625dd",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "408d6d5d-0be3-4b1f-861a-af4882bb1fc3"
        },
        "item": {
          "id": "fde25ccb-06f6-4e48-bf32-2420b099a986",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6a6f3c07-a2a8-4453-bfb8-85bb2235149c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920d5c79-ff74-443b-82b6-a7c753dc4f3d",
        "cursor": {
          "ref": "5f19e638-2d11-4190-bc06-65ce66406404",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2b632776-5473-4eb9-9552-417ea17f573e"
        },
        "item": {
          "id": "920d5c79-ff74-443b-82b6-a7c753dc4f3d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2ff4c0fa-b4ae-4fdc-9322-4466ba79a830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a60a4c-2ffd-4204-9451-beb200a7472e",
        "cursor": {
          "ref": "fffb51b2-8fe4-48b2-b8dc-7eaf280f4dd9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3e585e88-cf83-4e90-b184-ea68e59ff8e8"
        },
        "item": {
          "id": "a4a60a4c-2ffd-4204-9451-beb200a7472e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "42eeb5d7-236b-4a30-bf07-3ccad859d87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f740e7-26de-487c-9af8-8922553996f1",
        "cursor": {
          "ref": "c3cbc169-7fb5-4ae9-9951-ceab52026ac4",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "92c221d8-ca7d-4c56-9b8a-f28de311746c"
        },
        "item": {
          "id": "81f740e7-26de-487c-9af8-8922553996f1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ff0aea0b-d87e-49a5-9394-8da56478b9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bce360-21a5-404d-9cf1-9ee3a2166f7c",
        "cursor": {
          "ref": "434e4cf5-6f13-4da4-8050-e2a35172b782",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "295187b1-a157-4360-b922-65993595aa41"
        },
        "item": {
          "id": "d3bce360-21a5-404d-9cf1-9ee3a2166f7c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "27988b5b-a6b9-40e4-91a3-f9d129d0a97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8814a487-3b72-4c04-a73e-54dbf2f08ab0",
        "cursor": {
          "ref": "71cca208-f8e1-4477-a83b-8871e3ea1553",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "29317c8f-b491-4193-b165-461e9ddbbe6b"
        },
        "item": {
          "id": "8814a487-3b72-4c04-a73e-54dbf2f08ab0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1d101e19-9e02-47a0-9029-4c8e7901f41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6460e9d-7b64-4ab8-bb63-417ef2a5cd00",
        "cursor": {
          "ref": "700967f4-eb63-40bb-b178-cb71a417bbfa",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "71869a78-3534-47b8-8b36-3df542672732"
        },
        "item": {
          "id": "f6460e9d-7b64-4ab8-bb63-417ef2a5cd00",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bc92fa2b-8c27-4ad3-a140-09524594dd9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702b7ece-8490-48eb-a891-379cdd8b03a2",
        "cursor": {
          "ref": "7b492cfb-5328-4084-a49b-8f81a707b652",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9bf26fc0-8f73-436e-826b-da181a1ea6e2"
        },
        "item": {
          "id": "702b7ece-8490-48eb-a891-379cdd8b03a2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d1a2de2a-e999-4799-abe8-8a549f41e092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fc373a-82e8-4a22-bc34-02c7eff40fe6",
        "cursor": {
          "ref": "a97ab144-b85d-4d36-b4a0-132c72de6040",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9ae632ae-8f00-4de9-9e9b-d456ee6f4993"
        },
        "item": {
          "id": "45fc373a-82e8-4a22-bc34-02c7eff40fe6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aa305884-b980-4e33-997f-ed1f70e9bf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002420db-21ad-40b9-b293-7804db38fdcd",
        "cursor": {
          "ref": "3d04d582-1d13-45a0-934e-dfa73ec18ff9",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "96640d62-49b7-4492-a9ed-454692ce0dff"
        },
        "item": {
          "id": "002420db-21ad-40b9-b293-7804db38fdcd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e8e2e6d2-1599-456e-b677-400ad5351c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421958b9-f36d-4f89-88ad-2c5cd3fbbac1",
        "cursor": {
          "ref": "c08a9c59-0c71-4c37-b291-ff8871f67ef7",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "25ac296d-4393-4b9b-9879-0aaf92b40336"
        },
        "item": {
          "id": "421958b9-f36d-4f89-88ad-2c5cd3fbbac1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7dcf97e6-c256-4139-a7ff-f306df9b5868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ada04ee-d40e-4c81-862c-1429a8c54a81",
        "cursor": {
          "ref": "55a8552a-be01-447a-a5ca-c979f356db8b",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "82397dcc-6fdb-4423-a6be-091567997875"
        },
        "item": {
          "id": "1ada04ee-d40e-4c81-862c-1429a8c54a81",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "729c3e0f-4df7-4fcc-9742-882492de26f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e7325c-982d-4ab4-a362-4030725e7e23",
        "cursor": {
          "ref": "0cf22e43-f10b-430e-9e39-0bf51a45a21a",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d612a5e0-07ee-4c50-a11f-cc9eb6aec127"
        },
        "item": {
          "id": "16e7325c-982d-4ab4-a362-4030725e7e23",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6906534d-7a67-437f-8e08-d29774e54f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e0d50d-cb3f-454b-8b50-0e08a737338b",
        "cursor": {
          "ref": "58cd0654-3bd9-4ccd-b487-da986378e962",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "39b9bcf5-df7b-4d7c-8222-be6d0f4b00ca"
        },
        "item": {
          "id": "e8e0d50d-cb3f-454b-8b50-0e08a737338b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c7f78f6c-1260-4114-8ce6-36c556d74d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2db603b-3e04-4691-a05d-346a1ba35a30",
        "cursor": {
          "ref": "e2857476-45f6-4528-aa12-448d52d63a7b",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "11bb090a-bd74-49e7-bbb6-7380740491f9"
        },
        "item": {
          "id": "f2db603b-3e04-4691-a05d-346a1ba35a30",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "939fa0bd-ef97-4339-abd9-fde765c6ce52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41467110-8130-4b36-b6ef-b4fa2ad54b2a",
        "cursor": {
          "ref": "c164391a-bdb6-4427-b409-4c11b48e3f8e",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6cebb193-e70a-4374-a767-09e48e4debd6"
        },
        "item": {
          "id": "41467110-8130-4b36-b6ef-b4fa2ad54b2a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7ddeb100-99fa-4198-9c56-662087f15c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb400bf4-3839-48e7-9396-d65e5db1f521",
        "cursor": {
          "ref": "9a8ddfae-e685-460a-86ae-b9d524dac06e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "37e689b8-39cf-4a9a-9d61-474923b68a59"
        },
        "item": {
          "id": "fb400bf4-3839-48e7-9396-d65e5db1f521",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d6707b5a-564c-4ab4-aadd-d2f461d4f9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacad958-36e2-4653-83f8-3f31d3ddf0fc",
        "cursor": {
          "ref": "f796a160-3b31-4c2c-8fea-a9f616c191ac",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "232e0c11-71c9-402b-bb04-afeeabe3f000"
        },
        "item": {
          "id": "dacad958-36e2-4653-83f8-3f31d3ddf0fc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cf16778d-1f85-4961-bc70-0a9b910f3747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a251f3-a3a8-41e5-89d1-187b298f97b3",
        "cursor": {
          "ref": "544861c7-1a98-4b5b-8b52-fb9423063652",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f0ecc87b-41d4-4235-96a6-70e489e4f1be"
        },
        "item": {
          "id": "13a251f3-a3a8-41e5-89d1-187b298f97b3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "59c2e6b6-17cc-4f34-85df-0a00c4487f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4496efb-6005-4598-a8ac-2f5a412c2111",
        "cursor": {
          "ref": "8a8f02b7-5599-4aa5-bb3f-02beb9e00ad4",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a459ad71-1f93-42a2-adef-0684508b2329"
        },
        "item": {
          "id": "a4496efb-6005-4598-a8ac-2f5a412c2111",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "80994767-c61b-4eb3-95be-508baba5ad15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0380b221-0096-4a7e-b4de-80e03b890c70",
        "cursor": {
          "ref": "74db288d-06c0-4618-a936-fa02f5adcc24",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9cb0d44d-9da7-4b47-84af-906ef7bf8007"
        },
        "item": {
          "id": "0380b221-0096-4a7e-b4de-80e03b890c70",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4b8ce842-da80-4adb-8192-6bd0b09ebac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0405c5fc-11a0-4f53-a9ad-f26c919c5150",
        "cursor": {
          "ref": "67918ba2-835d-41eb-9e33-35555b26568e",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "840fd8de-2556-4795-9722-f726783bc30a"
        },
        "item": {
          "id": "0405c5fc-11a0-4f53-a9ad-f26c919c5150",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "57b3c02c-1a77-4e91-b55c-32aa1d0bb83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dd8007-399c-4342-9f13-dad8cac60214",
        "cursor": {
          "ref": "9429613e-0f0f-435f-bbe7-9c0817928fcc",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "58109bc4-9118-4c6a-9cfb-25c05574c556"
        },
        "item": {
          "id": "69dd8007-399c-4342-9f13-dad8cac60214",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1128b624-41c9-42b3-abd3-dcdc7c134c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48444941-a967-40b2-ab2f-c6f7a473951b",
        "cursor": {
          "ref": "57d3e0fb-a169-4b59-949d-8b56b1c41d9f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eeecb9b8-564e-4d71-b870-a9912da2f9e7"
        },
        "item": {
          "id": "48444941-a967-40b2-ab2f-c6f7a473951b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a4f95973-2708-4f13-87a4-5bbb4b519955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927bf424-d4c9-4c00-976f-3d9c64d066a1",
        "cursor": {
          "ref": "4cce0089-d6f7-4cea-ac09-33ad9f372748",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f2931284-e714-4a78-8656-964b3ce51d31"
        },
        "item": {
          "id": "927bf424-d4c9-4c00-976f-3d9c64d066a1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "36d308be-e575-4c7f-986d-cd99b0956231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d047e52-f67d-4a71-9072-cc393ad75e36",
        "cursor": {
          "ref": "aeb0d31d-1dc8-4ce0-be32-748908fb73ef",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d34c1a5e-f9a1-474c-8b8f-796a422e8ec2"
        },
        "item": {
          "id": "5d047e52-f67d-4a71-9072-cc393ad75e36",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8ec53233-c409-4428-894d-70caf62acffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93946fc2-c3b8-488d-8946-2ca5353ecae3",
        "cursor": {
          "ref": "8254b89d-b0f9-4e36-a349-188da2e44fbd",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "20ee0133-77d1-4174-b279-15d09df9c603"
        },
        "item": {
          "id": "93946fc2-c3b8-488d-8946-2ca5353ecae3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "94612214-4338-4e46-b33b-9474a2ca5094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5a0e87-763e-4e34-bf9c-184280cad7ac",
        "cursor": {
          "ref": "8addd4ed-97bf-4285-8ffe-dcd1c9cd0b00",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a05e3309-13ac-46b5-a47a-a363b7a35d74"
        },
        "item": {
          "id": "6d5a0e87-763e-4e34-bf9c-184280cad7ac",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f47caac1-5f99-4d7d-9ed4-53595dfeb15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e28f05-ae62-4943-92af-3268bfb6852b",
        "cursor": {
          "ref": "521d6972-ce91-42b3-a800-ea6a8c0be10e",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86e2a238-707e-467d-95f0-c1681d992ebc"
        },
        "item": {
          "id": "73e28f05-ae62-4943-92af-3268bfb6852b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7e32adb7-6b11-40cd-b321-467f83e83dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df6b9d9-cf71-4dfe-9d5f-68917c4586e7",
        "cursor": {
          "ref": "c69e263a-c7e9-48b8-9515-a915e5dd26da",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2d03c2d4-52cc-491a-a5c2-e2696002c0f4"
        },
        "item": {
          "id": "1df6b9d9-cf71-4dfe-9d5f-68917c4586e7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "82a13ceb-0cda-4ae0-b574-5ed638d0c3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa62e38-9fd3-4bb8-8e3a-724e9a485b03",
        "cursor": {
          "ref": "86142122-c03b-4334-982d-048effbee10b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "13611e4b-86f8-4071-852a-bfbaf40fbfa4"
        },
        "item": {
          "id": "9aa62e38-9fd3-4bb8-8e3a-724e9a485b03",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4f7a7452-fe60-4a5b-8dd3-c82fe268a47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3abf911-b655-4e7b-a5cb-0ee6b12a776d",
        "cursor": {
          "ref": "15c81796-c55f-46be-b6ed-06eaf24d9158",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2721ff90-d6cf-4cf7-968a-c8906c2d6b3e"
        },
        "item": {
          "id": "f3abf911-b655-4e7b-a5cb-0ee6b12a776d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9d57e4d4-0674-46cb-b1c4-0a6c11fa3fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe4854a-fdb0-4d45-ae2c-a162f58ff823",
        "cursor": {
          "ref": "195e8d08-0763-4089-9e43-b62a670ee09c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d6d704a-16f1-4f43-a5ba-c144565ac109"
        },
        "item": {
          "id": "ffe4854a-fdb0-4d45-ae2c-a162f58ff823",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4b6dd207-6416-42db-b102-cfc27e5ddd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d168d48-34e2-4189-b18b-a16b858460a9",
        "cursor": {
          "ref": "514c5db3-6269-48df-8d58-f2cb66bd6d91",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7453c23b-1383-47ee-b157-b3e207ec5378"
        },
        "item": {
          "id": "0d168d48-34e2-4189-b18b-a16b858460a9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "82103005-8e68-4057-9c70-ffa02b7231fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1dc825-3952-4a44-965c-bcf1faf01348",
        "cursor": {
          "ref": "5a304514-b873-45f6-9dc6-ef7a80ee5ad2",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9b3c3905-b218-4132-b2d3-d3a27716d50b"
        },
        "item": {
          "id": "5e1dc825-3952-4a44-965c-bcf1faf01348",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5cbb4060-1ccc-48f0-848a-8758d5b31c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afea84ba-800f-459e-8a32-1ed57a562b9b",
        "cursor": {
          "ref": "6684c428-9cf7-4dc0-ade9-113081d73150",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "abf3434a-0791-4e2b-8509-6d6d0b92140f"
        },
        "item": {
          "id": "afea84ba-800f-459e-8a32-1ed57a562b9b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bf4487ea-3464-45be-91e5-06cbaaacbe10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e311192-cf27-42f7-a606-9491dd10a9bc",
        "cursor": {
          "ref": "7d1a43c8-71aa-4ecc-be6d-27f1e2efa05c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "84d34ef4-b15a-4e09-b8e0-f04c21a7e098"
        },
        "item": {
          "id": "6e311192-cf27-42f7-a606-9491dd10a9bc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "baf8e38b-06e3-45d6-9488-638be4b3a290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7117dc3-9239-4e48-aca7-b994d194ca58",
        "cursor": {
          "ref": "a137d2d4-9a91-4372-8c59-8704e1a41f93",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d658936f-8d40-4a61-8d7d-76b9ef4c23e2"
        },
        "item": {
          "id": "b7117dc3-9239-4e48-aca7-b994d194ca58",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "42afbd3b-38f7-439f-b384-a0620f8e61e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962856bb-3286-4dc6-8ef1-7a4190ac03c8",
        "cursor": {
          "ref": "0e1ec59c-0ae8-45e4-bcc8-a70bba60e9a3",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "24175ebb-35fc-4d36-bf16-ed9e99e9df99"
        },
        "item": {
          "id": "962856bb-3286-4dc6-8ef1-7a4190ac03c8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "eee07751-408b-455d-8b55-e13776624b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c397cae-178c-489d-b92c-0ba0b6469920",
        "cursor": {
          "ref": "4311dd63-9bab-476f-9f75-5e480a9a1fda",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ccdf3158-1628-4996-b861-f5a91869885c"
        },
        "item": {
          "id": "1c397cae-178c-489d-b92c-0ba0b6469920",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cf7388db-4107-4ccb-9b0d-e41646664084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba03d688-7b07-4a5c-95c4-c402bc857cf0",
        "cursor": {
          "ref": "a51345ec-8419-467a-8578-8a647f3f1ca6",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "31ac33f1-61d2-4015-b6d0-fa9090409bb0"
        },
        "item": {
          "id": "ba03d688-7b07-4a5c-95c4-c402bc857cf0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eccca99c-7ee5-40bf-a992-66ea1c297180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffaf6e61-0f84-4eac-bae5-0dd9e050e98c",
        "cursor": {
          "ref": "f4775ac8-ed60-4928-acf4-5183ed02e541",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "25e27444-d4e8-46d2-9463-adc4048e7d5a"
        },
        "item": {
          "id": "ffaf6e61-0f84-4eac-bae5-0dd9e050e98c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7cac485f-788b-4123-8176-9f35479ba3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc0a343-fb45-4b25-b9de-6549b2e6c226",
        "cursor": {
          "ref": "9f71e534-d2d9-4185-81cd-432ff508c51c",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c85473a0-43b1-4409-8793-f294c10a0491"
        },
        "item": {
          "id": "4dc0a343-fb45-4b25-b9de-6549b2e6c226",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "38b97eef-8a5d-421d-8a6e-87eac0f4e707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8c355f-f2e9-4c9e-82ee-fad3812daaec",
        "cursor": {
          "ref": "d7293eca-7a63-43f6-ab57-678baf2dc432",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "24feb7aa-f3fc-4aa9-b078-b62ac738f2ab"
        },
        "item": {
          "id": "cf8c355f-f2e9-4c9e-82ee-fad3812daaec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4dbaa456-5d40-4035-8ac1-85d286f1f70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968d1fff-3645-4139-850f-f38cbc305676",
        "cursor": {
          "ref": "da733bc8-0603-4417-b537-16d8905e94aa",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "519dadaf-2aca-4e76-9a2d-f45d0c7964ec"
        },
        "item": {
          "id": "968d1fff-3645-4139-850f-f38cbc305676",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "12aefc7e-236b-423f-a6c3-c0e1f85538b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4458fcf5-93dc-4950-b1de-68e249ca5c4c",
        "cursor": {
          "ref": "b13d16c2-3ecc-4066-b8fb-94373db2983c",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f057ead-ab00-4736-b26c-295b4f3684cd"
        },
        "item": {
          "id": "4458fcf5-93dc-4950-b1de-68e249ca5c4c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "02dc3141-8ba1-4524-b9b6-bd561e3e3a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b864577-2ee5-4f46-8c0b-463d877f4538",
        "cursor": {
          "ref": "735607b5-2060-4d9b-86ff-d4b01ba80e03",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1f462280-9af7-407f-ab20-c0a8a40c7721"
        },
        "item": {
          "id": "3b864577-2ee5-4f46-8c0b-463d877f4538",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0a598ae2-7968-4dee-aba8-72c5af101f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e1f623-fe27-4e63-a2bf-82fe40cfde1d",
        "cursor": {
          "ref": "d7795348-6cf6-41a3-85dc-c901a1645539",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f079d18d-ee24-4e1d-8138-ed9e31774f4f"
        },
        "item": {
          "id": "18e1f623-fe27-4e63-a2bf-82fe40cfde1d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1782c4b1-1063-4f24-9c1d-b3eb41d41312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d095e40-e799-4393-ac7f-f24869fbd4a7",
        "cursor": {
          "ref": "1111e0f1-6ada-4957-84c0-008166d1824d",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "15f88976-d2a4-43a1-a3b6-fc0f890998d5"
        },
        "item": {
          "id": "1d095e40-e799-4393-ac7f-f24869fbd4a7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e2768cc3-d81e-4d6b-843d-0b1ee6682fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53201d42-bed1-4b49-aa76-17c00c2229ff",
        "cursor": {
          "ref": "e7c925ab-8a40-45fc-9815-87e3aaa9d12b",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "834e1266-6632-4be9-ad7d-4bc9bb799e98"
        },
        "item": {
          "id": "53201d42-bed1-4b49-aa76-17c00c2229ff",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce44d8ab-09b5-4430-8e96-3e77dc40d31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf41f8b-33b8-4742-b022-70033356f2f3",
        "cursor": {
          "ref": "f037985d-5580-4eea-95d7-340e89719580",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "da799ae0-f29c-4b45-bdd6-b0a0aab078e2"
        },
        "item": {
          "id": "2bf41f8b-33b8-4742-b022-70033356f2f3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "94345ac9-5b38-43d8-8167-35af8e5f3262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9becfd7c-6e5e-4067-a88e-03398f2bcecc",
        "cursor": {
          "ref": "aed18e95-752a-4b84-8a5f-c96c12d6aebc",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4720189c-bf4d-4114-b260-bac538622a42"
        },
        "item": {
          "id": "9becfd7c-6e5e-4067-a88e-03398f2bcecc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "55772842-fd35-4cc4-be0d-59e3db8a2614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1873ebd-d3e7-469c-9959-59717215bf4f",
        "cursor": {
          "ref": "579cb6fe-a72f-4b1a-89fb-70b60567a824",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4f6dcb2a-8fb9-47a7-9a74-514ba8e1d977"
        },
        "item": {
          "id": "e1873ebd-d3e7-469c-9959-59717215bf4f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e9ddc4f5-2dad-4795-be87-fef19f830ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2d4f6c-3167-4dec-9e38-7eb2590609b8",
        "cursor": {
          "ref": "921d35e5-f6d5-4520-ba0d-55c336a48ecb",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bec538c1-78a4-4cf4-9eab-9d5b721b6df8"
        },
        "item": {
          "id": "bf2d4f6c-3167-4dec-9e38-7eb2590609b8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fd1ac036-7f4f-49a3-b362-6ee0540c9e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f50124-c5ee-4ccf-9f94-9dd153929b7c",
        "cursor": {
          "ref": "8b1e20c6-cb7d-4ae0-a6f1-55ff356346d3",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "52f66b34-e4b2-4259-b8f0-36110a8cc0eb"
        },
        "item": {
          "id": "e9f50124-c5ee-4ccf-9f94-9dd153929b7c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0d9b474a-f80b-4e8a-9166-cdc162a3c939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b664a4d0-03a5-433a-9232-14349f0a58e1",
        "cursor": {
          "ref": "9068a428-838f-4410-9eb2-2f231010cab9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9df9e256-ffd0-4424-9978-96b30236fdd3"
        },
        "item": {
          "id": "b664a4d0-03a5-433a-9232-14349f0a58e1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3b63eb7f-da50-4f90-b762-fe08b3400f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa457c34-3965-470f-9a81-8c0071cb84d0",
        "cursor": {
          "ref": "241d4d83-5c90-44a7-a4c1-2c975d343c35",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4ba60a52-aad7-4179-ac43-f4e35881cf52"
        },
        "item": {
          "id": "fa457c34-3965-470f-9a81-8c0071cb84d0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b91c52dd-fd8d-4fc4-828a-f50c8d69a279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaf60cd-0a44-4af1-a4cf-d43a065d1c3d",
        "cursor": {
          "ref": "103b3f35-0fd9-429b-bce7-a5e3bee562c5",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "35f56218-2ec7-4900-a8d5-d3096479a5d3"
        },
        "item": {
          "id": "1aaf60cd-0a44-4af1-a4cf-d43a065d1c3d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "78030d29-2cab-4b51-a1c1-7e7a969f4dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5a88d2-81d8-4539-ba96-b4310f2beb19",
        "cursor": {
          "ref": "07d57847-5936-4ac3-9e44-3ee9ff480816",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "caf3a451-1499-45b2-85c4-9db9dee80414"
        },
        "item": {
          "id": "7f5a88d2-81d8-4539-ba96-b4310f2beb19",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e994df94-b592-4203-9fa9-dab9397ddcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3b12d1-001c-4f24-8575-f05a87ad11c0",
        "cursor": {
          "ref": "ed5527fb-ba47-4c56-afb3-b1070e9aca52",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1e7adf42-e200-4165-a465-4e1f7f54767d"
        },
        "item": {
          "id": "7d3b12d1-001c-4f24-8575-f05a87ad11c0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "83d1f33c-a618-426d-a041-d3752926b5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73722f11-a4e2-46de-8bb8-76ed605c84f8",
        "cursor": {
          "ref": "560496ea-a757-4855-8977-56bc0f6b9482",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4862bf03-df88-420e-a0ba-07c9ced6a891"
        },
        "item": {
          "id": "73722f11-a4e2-46de-8bb8-76ed605c84f8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "40e3647f-0baf-434a-99ae-1d1fe6f312f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbcb0f8-a0b3-4987-871d-5dc502dfb3ae",
        "cursor": {
          "ref": "3fb031e3-98f5-4e0b-8f28-3223eaabba8f",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af8a2bc5-d97f-4b3c-b9ae-933fc1a8b88e"
        },
        "item": {
          "id": "4fbcb0f8-a0b3-4987-871d-5dc502dfb3ae",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c9c21b29-f3df-41eb-8105-2230eb01dc83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72fb14d-4002-4946-a4ad-92f34f7a766c",
        "cursor": {
          "ref": "d6d76dd4-3508-4fcf-8388-09a1ae2d57a2",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4c2f0ad1-190c-4f7d-b5fd-8a9567be0d31"
        },
        "item": {
          "id": "d72fb14d-4002-4946-a4ad-92f34f7a766c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fce0a130-0ef7-4238-a864-1c63cd5900a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8702977e-bf3f-4e3c-80b0-728dce3ab446",
        "cursor": {
          "ref": "7409c6ed-1ef6-494f-bde7-f7e1cc8c4285",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "62badcf5-294e-4461-a640-ced29518821d"
        },
        "item": {
          "id": "8702977e-bf3f-4e3c-80b0-728dce3ab446",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "18a18e45-7858-43b8-b9ab-fa5a1cb742d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b497e6-b725-4d9b-a3db-a99334bb32f0",
        "cursor": {
          "ref": "dc499f3b-877b-40a3-b225-2426e5aa7c19",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "72edb036-adc4-426f-820f-9cef6515b918"
        },
        "item": {
          "id": "56b497e6-b725-4d9b-a3db-a99334bb32f0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eed84f5c-7a7e-443b-923b-9edfe1d9b61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67035b1-1828-4d2b-bf05-c50c95bb37f1",
        "cursor": {
          "ref": "dd1a15a7-ce74-4edd-96c2-4b54dd64527b",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0d7e2a17-8744-401d-80a8-676e227268cf"
        },
        "item": {
          "id": "e67035b1-1828-4d2b-bf05-c50c95bb37f1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "511a8b06-93a1-47b8-9804-2cf4ce5367f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea56f729-55f4-45ad-8352-b6df4bb0d8b5",
        "cursor": {
          "ref": "52f93ad4-d434-4b11-8357-925b65c30766",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3749a01b-bd7f-4c3f-9a29-8c8c5070cb7d"
        },
        "item": {
          "id": "ea56f729-55f4-45ad-8352-b6df4bb0d8b5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "67b5b6c5-8b88-4c36-b649-64591016608d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79106a67-0013-4fa9-93b0-106e1dede7fa",
        "cursor": {
          "ref": "a423da41-7155-4c52-aed0-4815ebfb3fe6",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "325505b9-4769-414f-b6f0-8469cf95cf94"
        },
        "item": {
          "id": "79106a67-0013-4fa9-93b0-106e1dede7fa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "455a857f-6d68-472c-b0f3-b180a2c41118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66dfade-2bd5-45da-acab-c0fab4ad95f5",
        "cursor": {
          "ref": "f42288ef-108d-4e1e-a9c8-7a9827f582fa",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a373d6de-fd9a-48f8-8256-e1b131dddaf4"
        },
        "item": {
          "id": "e66dfade-2bd5-45da-acab-c0fab4ad95f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "54213afc-45ab-4d2e-975c-bbca16e75c0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0967b368-a2e4-49b0-896b-e338a7a4efbf",
        "cursor": {
          "ref": "845db37e-dfd0-4665-8fa0-fabfe377927c",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "13c01a1c-8a35-4dac-a5fb-97b5f0d89fe9"
        },
        "item": {
          "id": "0967b368-a2e4-49b0-896b-e338a7a4efbf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ad900879-f4f2-407e-95ae-bd91156bcad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93abb55c-923d-4eef-8300-79e653ff2b81",
        "cursor": {
          "ref": "153f7362-06f7-4dde-8cdd-9505859b3fcc",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "83f6e0c5-3915-4154-aac6-0d730baae15c"
        },
        "item": {
          "id": "93abb55c-923d-4eef-8300-79e653ff2b81",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fada69b9-25ca-4c75-86c7-0969a6a8dda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c765826b-6ab7-48bc-a45a-5b7162fcc248",
        "cursor": {
          "ref": "7fd8fe87-1eb3-4720-bd9b-512852256e2a",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b48751fd-3c90-46d7-9710-8614e4b85a1e"
        },
        "item": {
          "id": "c765826b-6ab7-48bc-a45a-5b7162fcc248",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d9ab45b5-be55-4437-a7df-9ccbb6671cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7cac78-335f-4aac-a0d1-2297032476ae",
        "cursor": {
          "ref": "2cf29633-018c-432d-a456-4a027d381011",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "34afc981-e747-4aea-b144-02370848388d"
        },
        "item": {
          "id": "0b7cac78-335f-4aac-a0d1-2297032476ae",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "05d7c121-98bb-4304-adeb-7ad14ff29dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17aa2865-b4e9-47fd-8367-b1b539fb40c3",
        "cursor": {
          "ref": "8403a79f-e381-45ec-ad11-8b29032c81a2",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "04d04a62-b63b-4b66-9213-6977a8b1c0df"
        },
        "item": {
          "id": "17aa2865-b4e9-47fd-8367-b1b539fb40c3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "900a3314-8103-471b-8f64-5d7130effcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1ac7e6-c891-49d7-aa5c-3afa50b216c8",
        "cursor": {
          "ref": "b10e4e15-0ed4-4004-b65e-caaac1dd2b39",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ae2b7bb2-73b5-44e3-8e3d-e4e457ca12b7"
        },
        "item": {
          "id": "4d1ac7e6-c891-49d7-aa5c-3afa50b216c8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c93f2e2d-d27f-4ad4-a0e0-8ce224003ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d74d1a-5623-41c9-893d-8dc7a06bdbfa",
        "cursor": {
          "ref": "4ec2842c-6b32-445f-a9f8-4a98a1e2bbf7",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "69da6e7a-db3b-4ae8-98f3-7811704eb418"
        },
        "item": {
          "id": "79d74d1a-5623-41c9-893d-8dc7a06bdbfa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cb2cdfef-495f-4b1a-8f85-d551831e4a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3764891b-7fba-4448-92e1-7ec5f152ba33",
        "cursor": {
          "ref": "1450d68c-58b7-46df-af4f-f22d9abcb57f",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0a7f4e87-75a1-495e-bfe8-dc58d4de1194"
        },
        "item": {
          "id": "3764891b-7fba-4448-92e1-7ec5f152ba33",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f641d169-4101-47eb-adbc-a3df7e88a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f9add6-c615-4bc7-adbc-b94b504105f0",
        "cursor": {
          "ref": "a219c6e3-39c7-4d6d-8272-5d80712ea1fe",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8942cfec-4b0c-4834-8f61-638e7d578a7f"
        },
        "item": {
          "id": "12f9add6-c615-4bc7-adbc-b94b504105f0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "126623cb-686a-4f3a-a5bd-3fded3564f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b3dec8-d543-43c0-bdaf-8a06e7ed931e",
        "cursor": {
          "ref": "b6f4b477-fdab-4193-b10e-c39df5fc1128",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "36d3ec54-25fb-4ae1-a4de-21b7bb2a3914"
        },
        "item": {
          "id": "78b3dec8-d543-43c0-bdaf-8a06e7ed931e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ad1fef21-bc2b-4433-8977-aa0688870e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c65c5d-a56d-4a28-8635-bbcf92663075",
        "cursor": {
          "ref": "54df3174-bf28-46f0-a4a8-6ab33e008338",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7ba5a920-7a2f-443b-bd73-07ac24941c57"
        },
        "item": {
          "id": "42c65c5d-a56d-4a28-8635-bbcf92663075",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "104eecab-a685-4536-9839-7b63abe376af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d208efc2-8585-4af0-97a6-5594fa683dc1",
        "cursor": {
          "ref": "b9d1c223-f74c-48eb-94f9-f40dd9fbf585",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8f23388c-bb71-4109-93fd-b7d3cfcfbd60"
        },
        "item": {
          "id": "d208efc2-8585-4af0-97a6-5594fa683dc1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ed5c8371-cba3-4e6f-ad90-2a265ed69917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848300e8-b66d-4c27-83e2-ae5958d5cd58",
        "cursor": {
          "ref": "32d08875-750c-4d19-9cb3-bf7076b9ed9f",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6740fde6-31f8-41a0-bbff-dd96d70fccc0"
        },
        "item": {
          "id": "848300e8-b66d-4c27-83e2-ae5958d5cd58",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ca4d4e55-4171-4a24-aee7-8e1d3d3761af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df07fcc5-3cf6-488c-ac89-c3c33f2a6382",
        "cursor": {
          "ref": "af2be525-8947-4924-bffc-fbdc87794d43",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6e6ef52e-1df4-423a-ba11-51cf29148bc7"
        },
        "item": {
          "id": "df07fcc5-3cf6-488c-ac89-c3c33f2a6382",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "14c7cc0e-72d3-4e1b-b6d7-730ee8c1126a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac74efc2-ddb1-410f-9d8f-181ef1c5ad93",
        "cursor": {
          "ref": "b4d20383-fb44-4d8a-a9e6-eb3e202f8c40",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "90826757-1959-4154-8804-5c43796fca31"
        },
        "item": {
          "id": "ac74efc2-ddb1-410f-9d8f-181ef1c5ad93",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "046abb1d-9a22-4b5d-bfbf-d6747ad33e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19734422-f55b-49a4-baf4-251b091d00a5",
        "cursor": {
          "ref": "28a9675b-e995-448b-a850-79743cde2413",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ed1c6624-7dad-4e00-abe7-0de07dfe672f"
        },
        "item": {
          "id": "19734422-f55b-49a4-baf4-251b091d00a5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "31210b26-56e1-42e3-af79-e2ab85fb4009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36528f63-bc71-41da-8ad1-0d932e4fc0a8",
        "cursor": {
          "ref": "8f17f407-0ce4-4e12-b12c-065459ac14df",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "80aab1e5-5ed5-45e1-99fe-37ec580cc9fb"
        },
        "item": {
          "id": "36528f63-bc71-41da-8ad1-0d932e4fc0a8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8c4361b0-db17-4912-a3ff-9e4644f7175a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672c8a98-19de-4e6f-853e-bdcfb7a65cb4",
        "cursor": {
          "ref": "9b7faca0-8d83-47b6-bb69-c7f96e04f757",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e971a711-1029-408f-8d81-6c6d5b95e837"
        },
        "item": {
          "id": "672c8a98-19de-4e6f-853e-bdcfb7a65cb4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d072b9c5-fc17-4f49-9a47-4f4775584726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e953dd-d5ee-4eec-a7f6-9180d7030cf4",
        "cursor": {
          "ref": "1c132105-0321-404c-b1eb-0f0a6531a812",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "39028ebf-f4cf-46ff-8f1b-bdcd1367f6b0"
        },
        "item": {
          "id": "64e953dd-d5ee-4eec-a7f6-9180d7030cf4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "700fcc1f-932c-4aa8-a0a3-71504f9d00f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163ead51-f2f4-4217-8b12-62a5be8e1593",
        "cursor": {
          "ref": "723053ea-6c95-48f7-88a9-b24aabd64de0",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a925cccf-f17f-4bd0-bfbd-301878e1fc05"
        },
        "item": {
          "id": "163ead51-f2f4-4217-8b12-62a5be8e1593",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cd026d14-bd53-4d25-981f-74ed3a518ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ab55d9-7fdf-4580-a3f4-50471afa2797",
        "cursor": {
          "ref": "bd87d15c-d3e8-4ae0-a1a4-63abbb0ef224",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2159617d-43ce-43ef-91a2-177536c7f97a"
        },
        "item": {
          "id": "65ab55d9-7fdf-4580-a3f4-50471afa2797",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3df77bfc-dadc-44b2-a925-07455afe5973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b793a34-f3e9-4620-ad50-85e8d9fd2c18",
        "cursor": {
          "ref": "c61b4b6d-0099-496b-8e04-36a1d8c46fda",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "331e2359-3359-431d-a633-3b03e3ebb7d1"
        },
        "item": {
          "id": "8b793a34-f3e9-4620-ad50-85e8d9fd2c18",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "974661c6-beeb-44fb-a35a-33177f0e9aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7aa0e1d-7b65-4801-b312-6677b418759e",
        "cursor": {
          "ref": "61394b8e-fd49-49f1-98bc-c3cd25cd6c50",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a5efb055-aa42-4b6d-8f5d-474671c52249"
        },
        "item": {
          "id": "c7aa0e1d-7b65-4801-b312-6677b418759e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1f8898b1-ed90-41f6-bbb5-def1fff738f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad4939c-082d-408d-8ca1-251e678923af",
        "cursor": {
          "ref": "5e417792-9e1a-4059-8b17-b3cc923249e7",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9ee6d81b-4a4e-4c4a-8a14-ce35f410c4be"
        },
        "item": {
          "id": "5ad4939c-082d-408d-8ca1-251e678923af",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "77994ef7-8402-4d1f-9cd8-21e92c76fa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cddb79-4645-477e-ab9e-cd513f10524b",
        "cursor": {
          "ref": "c056f882-f114-4b3c-bc61-40d1f5f995ea",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3c8d0355-6771-4056-8ef3-b43adc8799b6"
        },
        "item": {
          "id": "e8cddb79-4645-477e-ab9e-cd513f10524b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "df7aacf1-ca9c-486d-a1cc-720da71ac9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66d0e9c-341a-4d8f-908c-c4a3502eba9f",
        "cursor": {
          "ref": "256029f9-bbe1-4dd2-91dd-0801a52fb5fd",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ad373786-023e-4d56-8664-58a5323c45f7"
        },
        "item": {
          "id": "a66d0e9c-341a-4d8f-908c-c4a3502eba9f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "97dbd3c9-ed0d-463c-810c-2e385e80930f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd9b40c-0907-46ee-8923-d3ee6e55c488",
        "cursor": {
          "ref": "3cb4b30d-3820-4034-aa31-2914c5f9c8b5",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "442d175d-8300-4589-828a-ca1eeefabe81"
        },
        "item": {
          "id": "4dd9b40c-0907-46ee-8923-d3ee6e55c488",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e34485a7-06b1-4c16-9e99-abe5f514585d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d516de7d-9987-45a4-9c98-7af83e0bfc00",
        "cursor": {
          "ref": "647fd010-24dc-4fcc-9a29-4d806144ec3d",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "85b0329e-0add-4c59-a9a4-52276bafa279"
        },
        "item": {
          "id": "d516de7d-9987-45a4-9c98-7af83e0bfc00",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "33a87a4c-81c2-4c2f-9b39-c180f671105b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefd45ff-65af-45bc-9f39-16ecd83a9310",
        "cursor": {
          "ref": "87d1948c-9044-448b-9f54-b4a1086bf840",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "586fe21c-1736-4eda-96ff-d89dba75b1de"
        },
        "item": {
          "id": "eefd45ff-65af-45bc-9f39-16ecd83a9310",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "27e9e7b6-04ba-473e-b078-bc8fd22e33da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2b316e-2c49-42cc-be88-2d2eea4156cb",
        "cursor": {
          "ref": "3eaaf5f2-bd9b-4d06-93de-600ff5b54a8a",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9a027097-3cbb-450b-8f5e-eeec0e6c8317"
        },
        "item": {
          "id": "ed2b316e-2c49-42cc-be88-2d2eea4156cb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "54e878c6-49c5-4517-8708-de1677ca1a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3617b343-8451-4544-a547-4d8c93465a59",
        "cursor": {
          "ref": "df6e1711-8264-4404-af03-1e9e1faa880b",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "762d214e-0ae4-4d75-a9ac-f16a41a90f19"
        },
        "item": {
          "id": "3617b343-8451-4544-a547-4d8c93465a59",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f65d0fcc-1494-411a-9d07-7022f05a48e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf24afa-e8e3-4e6d-b7b8-f83e07325470",
        "cursor": {
          "ref": "5d56d446-3e57-4db3-934d-e30d3f8817a2",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c7cb714a-b7db-4326-9062-95c884088d97"
        },
        "item": {
          "id": "7cf24afa-e8e3-4e6d-b7b8-f83e07325470",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bb32fca9-a59a-49c2-a73d-db079d01a0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f2fb23-765d-4f4d-88ac-b76e3cbed00b",
        "cursor": {
          "ref": "85efb08a-aa4a-4b1b-afd2-28e347af75df",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f8bb6514-c961-42b9-8ded-125b9d62f994"
        },
        "item": {
          "id": "a1f2fb23-765d-4f4d-88ac-b76e3cbed00b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7a4f3e33-0e87-4389-9773-3fbd63ee5f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70970ffa-1caf-48b9-986f-8002a06578c1",
        "cursor": {
          "ref": "f1a68694-0e6c-4b5c-bc0f-04f7e6eba33c",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2962846b-0242-4a96-9c12-09cd02deea63"
        },
        "item": {
          "id": "70970ffa-1caf-48b9-986f-8002a06578c1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6963886b-5ea7-4c34-824d-6bd42a7500a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0085c824-fdc9-443b-8dff-b30d46d623c8",
        "cursor": {
          "ref": "abd19cfe-a870-406d-94cb-f7c7651db14a",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "937ae6cd-9441-413d-b3a1-9807b915a8d6"
        },
        "item": {
          "id": "0085c824-fdc9-443b-8dff-b30d46d623c8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dc020e58-b998-4ecb-931e-9f65eef0a476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08197e9-642f-4ab0-859a-c830dbf4b2bd",
        "cursor": {
          "ref": "cfde6590-ad77-4e2f-b511-6ac18de04f0a",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a506f80d-4075-4d29-91a7-7ff914e9faa9"
        },
        "item": {
          "id": "b08197e9-642f-4ab0-859a-c830dbf4b2bd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "35d0457f-f81c-4c81-8e5b-7385a7b6cfde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5348dd-894b-44b0-b8d6-981995391b71",
        "cursor": {
          "ref": "e6e8445f-ea28-43bd-8c1f-18ed075b6213",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1a46ecbe-32af-42b1-990d-2ebaada527cb"
        },
        "item": {
          "id": "3c5348dd-894b-44b0-b8d6-981995391b71",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8956200d-04d4-4e48-b77c-d2ff59fa3838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dccd80f-7d77-4b37-b43b-25e9342fa16a",
        "cursor": {
          "ref": "915b1ebb-a82b-44fe-a851-70f25ef14e09",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c075149a-1dc8-4973-965e-2eec9f985de2"
        },
        "item": {
          "id": "4dccd80f-7d77-4b37-b43b-25e9342fa16a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "28b14d12-6499-4827-ba67-06847cb24749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e634b3-5234-40f1-af15-7d05922788dd",
        "cursor": {
          "ref": "a5417620-528f-41e0-a56c-c29a743db30f",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a2d11d96-7939-46f0-ba53-000f96e2280e"
        },
        "item": {
          "id": "77e634b3-5234-40f1-af15-7d05922788dd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2b83187e-86bc-4aba-883b-5ea63a11a2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0dbaf0-cbdf-4e8a-96f2-8b79c793e3a3",
        "cursor": {
          "ref": "7e7be809-6dba-4cf0-a026-2c93c52b5dae",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5217aa27-9d7c-417d-9f94-96906f807002"
        },
        "item": {
          "id": "0a0dbaf0-cbdf-4e8a-96f2-8b79c793e3a3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "df77aa5f-e51b-4f5d-8769-65478381f7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fa6336-7d57-4c99-8c6f-a5cc79c23818",
        "cursor": {
          "ref": "ef5a8d4c-2312-4d04-a68a-c39b5910da1c",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ac6734e7-a77e-4648-959d-b4ee7ce993c7"
        },
        "item": {
          "id": "b2fa6336-7d57-4c99-8c6f-a5cc79c23818",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bdccf52f-f366-421e-88a8-4f07caca5d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460c4aea-f59f-479b-974c-91222fff112d",
        "cursor": {
          "ref": "2aac310c-0cc3-49af-b22e-a98795235322",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "34674836-d9d7-49d2-9b5d-436962cd9ddb"
        },
        "item": {
          "id": "460c4aea-f59f-479b-974c-91222fff112d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7d7658e3-b1e8-4401-b7bf-3b9235231910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5298a9-44e6-4cef-a449-e6b8746b29bf",
        "cursor": {
          "ref": "4f4f33ea-9c6c-492a-baa9-5774e14c1ec3",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a0382a98-7b2f-422a-a211-bb51492f6064"
        },
        "item": {
          "id": "1b5298a9-44e6-4cef-a449-e6b8746b29bf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "980fbc3b-8257-44b0-8b50-9d0c8ff3b73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b3be1b-4740-4346-b4df-c80cadacb214",
        "cursor": {
          "ref": "e26074bf-e0c8-476c-8635-8cd8719895b2",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "06c502a2-a6f4-42b7-b368-dae8a63e7428"
        },
        "item": {
          "id": "c5b3be1b-4740-4346-b4df-c80cadacb214",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b7af879e-e016-4c35-873c-a906c32e62d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbc196f-3030-4423-8063-b365013ecf3c",
        "cursor": {
          "ref": "6ca71659-e5fa-447c-8614-e6710653ed5d",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c09fb2d1-e01b-4019-b7d1-2ac53dc6f424"
        },
        "item": {
          "id": "7bbc196f-3030-4423-8063-b365013ecf3c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8d484534-d0c1-453c-ace4-19e0bd5b369c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418cf7f4-0d04-4c78-81bc-0e03dbe61587",
        "cursor": {
          "ref": "4af3087b-2bbc-4564-802b-7c0669257d00",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e6a2d300-4855-4312-9cef-b87ef0aed90c"
        },
        "item": {
          "id": "418cf7f4-0d04-4c78-81bc-0e03dbe61587",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "511032fa-af20-48c3-8e4e-c77cfddc6cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb927eb-bc7d-41f1-9b67-dab3d84157b0",
        "cursor": {
          "ref": "0523956a-9714-4d75-9b5e-a48a425c1faf",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e838d688-6dfd-491a-b356-81063ff5bea8"
        },
        "item": {
          "id": "abb927eb-bc7d-41f1-9b67-dab3d84157b0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b2be1dfd-25ca-4cec-9461-1b3999a65115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae6806a-6f84-4cf6-a8ca-718e43f66829",
        "cursor": {
          "ref": "b39ac8f6-384d-47a0-8fb7-ac24506ddba7",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5a9446cd-1de3-4fdb-954d-f4b555d8ee82"
        },
        "item": {
          "id": "1ae6806a-6f84-4cf6-a8ca-718e43f66829",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1d025426-c03b-4c18-9d7b-a6df81120117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4439b1-1a06-4f66-b19e-0d244a3ac86e",
        "cursor": {
          "ref": "99d063fe-bf3a-496c-ae3e-a00d808da086",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8569e92f-f2f7-48ae-a464-b7f54f92ccb7"
        },
        "item": {
          "id": "1d4439b1-1a06-4f66-b19e-0d244a3ac86e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "71549179-d707-4873-af08-8813ab29a22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af13f0c5-010e-4d57-b3b5-12b709b2763c",
        "cursor": {
          "ref": "fcb0d97b-bebf-4d13-8f51-c57170deb217",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0288525d-2068-4858-a870-42f18aaeadc0"
        },
        "item": {
          "id": "af13f0c5-010e-4d57-b3b5-12b709b2763c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a89861b0-56de-4415-82b5-7ed0740914c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6413b2b8-d438-4cc5-97f9-4353b524fbc6",
        "cursor": {
          "ref": "b92fdc82-e691-4405-ba71-eba8c8bff66e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1766fd78-368e-4a6f-9a5c-bc4e22dce3e1"
        },
        "item": {
          "id": "6413b2b8-d438-4cc5-97f9-4353b524fbc6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0f7e89b2-b85d-4f83-839a-29bfaf3847c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c75a597-0e4b-4522-be11-8343b4338c75",
        "cursor": {
          "ref": "27b70431-1b49-469d-abcb-ecaf06272b84",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "35acc96a-a677-45bf-b82c-330d6db42f7f"
        },
        "item": {
          "id": "9c75a597-0e4b-4522-be11-8343b4338c75",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "341b95ee-393c-465e-8f0f-114d80db1419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e34c6f-7c52-4089-b861-f1598c9605b3",
        "cursor": {
          "ref": "7217053d-3599-4b6d-831f-2fbd912c64b5",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "522a429c-2cf6-478b-a358-c7134cf71915"
        },
        "item": {
          "id": "67e34c6f-7c52-4089-b861-f1598c9605b3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "688bffa8-b6dc-48c0-9ca4-fa630cb85a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3320fb62-a2c3-497a-8402-7fc861997e20",
        "cursor": {
          "ref": "0d7bc033-64c6-4db1-a327-85b10623fd16",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "762b6fc2-824e-4d39-bbf1-9b7443dcc40c"
        },
        "item": {
          "id": "3320fb62-a2c3-497a-8402-7fc861997e20",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7d29347d-07fd-42f4-b180-a99b2fb069e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6ca204-185c-4ccb-ba1a-738d9c747cb1",
        "cursor": {
          "ref": "f399ac3e-a0e1-45f8-93a8-2aa99a08e77f",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "85bad71b-3aef-4e4f-94be-d848db049780"
        },
        "item": {
          "id": "3a6ca204-185c-4ccb-ba1a-738d9c747cb1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a76993d7-f6f5-4d5b-88ee-e3dee0905b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb716c-d857-465b-9d40-7a287f93cb8a",
        "cursor": {
          "ref": "9edd706f-a6da-47aa-9115-7f5056b14342",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dca0fc02-623b-4a1d-831c-b3e915b88d01"
        },
        "item": {
          "id": "cdeb716c-d857-465b-9d40-7a287f93cb8a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "11992adf-d3ec-4aa3-be44-2a6faad6d563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8894ce-723f-4039-a0e3-ee12f2865602",
        "cursor": {
          "ref": "dab06a03-b25f-45d3-8cb6-95e3b91eaee6",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f1288c93-241c-46d8-9f10-f222f8b78d8f"
        },
        "item": {
          "id": "ec8894ce-723f-4039-a0e3-ee12f2865602",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "61dbb8ec-8fa8-4261-a04e-679b39c3731c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337f5409-4e09-41e6-8cac-f84bd11f83aa",
        "cursor": {
          "ref": "3f18edc8-0775-4e18-a937-007062c8b453",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ff7cbdc4-de81-4ba6-9bf5-90767c7b878a"
        },
        "item": {
          "id": "337f5409-4e09-41e6-8cac-f84bd11f83aa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "021d8141-7873-4ae7-8a6e-01580b7b07ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d22cffc-47d6-4e3e-bde7-0e8d4868d628",
        "cursor": {
          "ref": "7e4ea009-0549-4284-9d94-e7ae494015c7",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0923ccf0-3286-42f9-87e1-0780dc3b5505"
        },
        "item": {
          "id": "4d22cffc-47d6-4e3e-bde7-0e8d4868d628",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c8d29674-0828-4471-9fbf-c65ad8ea0188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d215ea-01bb-470d-9fb4-4d84a4689883",
        "cursor": {
          "ref": "78173bc9-4e75-437a-b8bd-8e33033e76be",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "107f4dd0-a2de-4369-af7d-d337d3a09215"
        },
        "item": {
          "id": "c3d215ea-01bb-470d-9fb4-4d84a4689883",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "45dba5ef-f5e6-4c72-a6bf-7466c99891d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f843151-62e6-4d0f-beb3-8fc9174eb54d",
        "cursor": {
          "ref": "bbbb10eb-29d4-4cec-8e4b-4e865384610e",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cb5ad420-3eb9-4984-bde0-723cb0f951c2"
        },
        "item": {
          "id": "1f843151-62e6-4d0f-beb3-8fc9174eb54d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "39736095-c1e9-4a3f-a90e-45c1a6c98e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d2ce37-98da-4eba-ac24-cc95618afa2e",
        "cursor": {
          "ref": "08dab4d8-d446-43bb-8ca7-cf459101f2e6",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a0019bb2-9ece-4a0d-88c8-21bc43baa25a"
        },
        "item": {
          "id": "02d2ce37-98da-4eba-ac24-cc95618afa2e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c83bb88d-0ef4-44a8-9e43-81a90f33f71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ba0445-3f9a-4b1f-a6d5-6d86ca0c8216",
        "cursor": {
          "ref": "fc2cf1e2-7b62-4d84-9e82-3f8830c7b3ad",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a39cbdc8-eca5-4dcc-b478-3b4380c38130"
        },
        "item": {
          "id": "56ba0445-3f9a-4b1f-a6d5-6d86ca0c8216",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f5a7820b-55c7-4891-af57-b9d2a6a86553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242aa327-1f2d-4aad-b5d6-89e04c63f754",
        "cursor": {
          "ref": "7f509081-a84c-4f96-885d-2c8be4d04784",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c4ac8afb-1ce6-4cb8-a477-bf1dc709952e"
        },
        "item": {
          "id": "242aa327-1f2d-4aad-b5d6-89e04c63f754",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4f3781aa-9ecf-4674-b7d7-a9ff30bd8005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bab0a5-0e01-46e7-876f-c3a57cf384d9",
        "cursor": {
          "ref": "9cf198fe-a1b3-4193-8818-c32e9def0af4",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7e1858dc-7ce5-46e2-b9ab-62fad29b7990"
        },
        "item": {
          "id": "92bab0a5-0e01-46e7-876f-c3a57cf384d9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9fa12964-9fc6-4a8d-a0ed-3537f4096c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbb3da5-b97e-4923-ae03-0de18dfe9ab6",
        "cursor": {
          "ref": "ed23089e-bcaa-4249-b48a-543c1e32b79b",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4832c777-8be0-4d56-9bb8-d90f044d67c4"
        },
        "item": {
          "id": "3fbb3da5-b97e-4923-ae03-0de18dfe9ab6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3d6403c8-35db-4c8a-a451-72e9e9e9037f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e02fb0-5fed-4f01-8cd2-bdb9127f2af2",
        "cursor": {
          "ref": "dccd5f02-65ec-439d-84ee-aa0f4b9583a5",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ffb5b9a4-ddcf-444f-bcc8-59f3ee53b8fd"
        },
        "item": {
          "id": "77e02fb0-5fed-4f01-8cd2-bdb9127f2af2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "04f81d7c-f802-404e-9954-ca5aa147b2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6e0fe6-cbab-4e5d-9107-ff62bbc1f044",
        "cursor": {
          "ref": "c23212a7-2f56-446f-b38e-5860b4f700f4",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "277f9b41-00f3-4faf-b4ff-b3536c0c7460"
        },
        "item": {
          "id": "5b6e0fe6-cbab-4e5d-9107-ff62bbc1f044",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f7e40700-6522-445e-b45d-3e4fc8f5545b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef74067c-db39-44fe-88fb-5121c0ea83bc",
        "cursor": {
          "ref": "da80c367-886d-4461-b86f-ea9eb7524b3b",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "541ba802-8198-46bb-a804-c7d88bd0ce08"
        },
        "item": {
          "id": "ef74067c-db39-44fe-88fb-5121c0ea83bc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "839a4599-b583-4e78-999c-2ac3ddd5d352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200096d9-c6f7-4dc8-b72d-3c40ac85f21a",
        "cursor": {
          "ref": "1e44df7a-cd53-482e-9036-996c6dad4b48",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f05de475-d569-4e6f-9068-b685c9d2fae6"
        },
        "item": {
          "id": "200096d9-c6f7-4dc8-b72d-3c40ac85f21a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9178d4fc-c5bc-4f7e-9935-5966f07368fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ac1f32-9857-4dae-b6db-7b1c014d9880",
        "cursor": {
          "ref": "21ce9380-96a0-49a0-8216-da67a2b04648",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "304f1601-b174-44e2-9563-05d9a6afbbea"
        },
        "item": {
          "id": "c5ac1f32-9857-4dae-b6db-7b1c014d9880",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "19dc30a9-9034-4bc2-bec6-162551645938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eea528-5ae1-4509-9c11-8024ee91bc53",
        "cursor": {
          "ref": "9a85b247-b7fd-4721-9310-394899bcf494",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bdcf86f8-7f49-4f66-afc4-f7be20273543"
        },
        "item": {
          "id": "b5eea528-5ae1-4509-9c11-8024ee91bc53",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "44f227a0-ed01-4c03-ae06-3d3a2398b7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32bbaaf6-9145-45ea-8ec9-0cb9fb13398b",
        "cursor": {
          "ref": "5febdbad-e9da-4e2c-9e08-f088f7731f85",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "896edfe0-431a-4f7a-8f37-0ffb1f583a6b"
        },
        "item": {
          "id": "32bbaaf6-9145-45ea-8ec9-0cb9fb13398b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ece26114-bb74-42e7-b71a-29ebb6c985f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc54651-82f9-43a8-9e32-924c09f2ca2d",
        "cursor": {
          "ref": "1b4a408d-c660-4c68-9a2d-d2cecf8ab2e9",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3580d532-2cd1-42ef-905f-1b3603dd728f"
        },
        "item": {
          "id": "dfc54651-82f9-43a8-9e32-924c09f2ca2d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "64ac111d-8034-4cb9-8799-8f219e8f5e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef57d72-4239-4625-a546-5124893b2bf4",
        "cursor": {
          "ref": "54bb1d2d-3bae-4b37-8c07-ecd5201be65c",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "eaa920c5-4159-4191-b633-ca0114ba8cf9"
        },
        "item": {
          "id": "cef57d72-4239-4625-a546-5124893b2bf4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1cb49e80-93cd-47ad-a279-f18a927b7d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039793a6-4e68-43de-b1f8-66726495f99f",
        "cursor": {
          "ref": "03b49af0-7430-4960-9610-db2cfabb8aa3",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "551f0285-9c36-47c3-833c-2ceec02c2699"
        },
        "item": {
          "id": "039793a6-4e68-43de-b1f8-66726495f99f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c489fbce-b2d1-4e58-9fdb-7d775cb4eaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c0e47a-d4de-486d-9712-76af94504363",
        "cursor": {
          "ref": "9ca61644-cd78-48f4-9b3c-2ec567778f9f",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7e6909e6-b498-4b8b-a5ad-dd368756eb2c"
        },
        "item": {
          "id": "52c0e47a-d4de-486d-9712-76af94504363",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e050bc48-1c2f-4abd-b235-ed57ba0cdac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd41d5c3-6a19-48ae-bd1a-2132228f32c2",
        "cursor": {
          "ref": "866f5a2c-2719-44c2-86dd-01cd01998ef5",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "49a05576-432b-43a5-a7b4-d926c57311db"
        },
        "item": {
          "id": "cd41d5c3-6a19-48ae-bd1a-2132228f32c2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4375cd2d-3e16-41e5-949d-17583fdc47ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8002cb-0431-4f20-a439-f07c795a6305",
        "cursor": {
          "ref": "9f638b0b-b016-4e26-aeb7-1ff8cbd7ba66",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fffb6e5e-2d9c-4cda-b1e3-b165f1794640"
        },
        "item": {
          "id": "ca8002cb-0431-4f20-a439-f07c795a6305",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1a007232-8d06-47c7-85ed-da8eb83ca562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e9a2e4-f540-4ccb-b40f-b086cf0f1869",
        "cursor": {
          "ref": "1bfda802-fb58-4c3e-85cc-f5f83d99f217",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "fe48bcda-c4ce-4250-9fc4-1169c63eb77e"
        },
        "item": {
          "id": "b5e9a2e4-f540-4ccb-b40f-b086cf0f1869",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b890c486-4aa2-4cf1-96fd-22d125cb8ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5fa29c-0ef3-4825-ad54-66c6f7c23f2e",
        "cursor": {
          "ref": "a2b1cabf-83ec-4cf8-870e-2502d063a2b8",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "eb45854c-dd65-48be-8866-7daee5b1118b"
        },
        "item": {
          "id": "2c5fa29c-0ef3-4825-ad54-66c6f7c23f2e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fa8b904d-73ce-4dfb-9f27-5a6ab0115ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cdf435-de1b-4cc5-b3cc-630dc76f82fb",
        "cursor": {
          "ref": "804b9fd8-524b-4eab-b2d2-1e8187943730",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ea633cce-41fc-497b-8cfc-9c18083267f8"
        },
        "item": {
          "id": "f6cdf435-de1b-4cc5-b3cc-630dc76f82fb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4b946665-cfc5-4724-b2d2-f27613c43b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f9b7ef-b181-42d9-8516-348810ae6317",
        "cursor": {
          "ref": "dab3cc55-0a26-4231-8441-1478f7dc4e58",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1690cf4e-fcd8-4285-8b90-f4034c7019f4"
        },
        "item": {
          "id": "93f9b7ef-b181-42d9-8516-348810ae6317",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2c309624-b07a-46ba-9b99-15fc59a26a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11ba501-63e9-4feb-ab24-6b9d570fdb2c",
        "cursor": {
          "ref": "fc86e3e3-6afb-4d8d-99ac-4c8d4d83306a",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b3a5e8b9-a1f2-4d17-aeab-c58f0c263f22"
        },
        "item": {
          "id": "c11ba501-63e9-4feb-ab24-6b9d570fdb2c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "902d8b61-0abd-4aa7-b96f-489612ca42a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d6cb9d-a267-4e6d-9a00-ab689a07716f",
        "cursor": {
          "ref": "0fbbb169-cad6-4d61-afe3-962d9eaafecc",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5e751154-1b45-42d3-a207-c63a542c8cf9"
        },
        "item": {
          "id": "e0d6cb9d-a267-4e6d-9a00-ab689a07716f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "63b94e1d-8614-42e0-a496-a960ac0deadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13858029-08d1-4e67-8d58-b179bd826459",
        "cursor": {
          "ref": "6429e11e-81cb-4b9a-b69f-c7996173b5f0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "081503c8-aae2-4604-9ffb-10a71eed3978"
        },
        "item": {
          "id": "13858029-08d1-4e67-8d58-b179bd826459",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "df530903-d28a-404d-9c87-961f8776f889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c12e7c-84f7-482e-b6cc-efaa98b40419",
        "cursor": {
          "ref": "ae2c40be-f658-4e6f-a35a-5cbbe31573f4",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "677f1f1a-69b4-4246-9820-d9efa5976ebd"
        },
        "item": {
          "id": "78c12e7c-84f7-482e-b6cc-efaa98b40419",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f62476e8-3fe9-49d2-a7f8-9a8af300ff99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3452bd4b-1fdc-4a06-9f61-e83417d0d085",
        "cursor": {
          "ref": "0ce4ba3c-aad0-4b41-87f8-c6d25e0214c8",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4f567e18-d964-424a-aece-f0959f225848"
        },
        "item": {
          "id": "3452bd4b-1fdc-4a06-9f61-e83417d0d085",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c4591a4e-88cb-4599-bd41-22ac901ad2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7b51b9-e29f-468d-aed4-bbc96bf86e4d",
        "cursor": {
          "ref": "13e2a591-7718-4536-bb7d-8f1ee66936a8",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "e321a5e9-eddb-47ab-a803-b03aa1a77864"
        },
        "item": {
          "id": "3c7b51b9-e29f-468d-aed4-bbc96bf86e4d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "32c29e57-352c-4dec-b62a-3aec6ba8b755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef38eec-34d3-47dd-a695-97775f450496",
        "cursor": {
          "ref": "4dc3ce3c-ae49-4658-b3ae-3ef1d13cfe59",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "402062d9-eacf-4a45-a2c5-7788fb26f166"
        },
        "item": {
          "id": "cef38eec-34d3-47dd-a695-97775f450496",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d461607f-3894-4bb8-8356-603c28c65d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f72256-2370-4825-9208-ce7d8a9fe549",
        "cursor": {
          "ref": "3b1139f7-1499-47a5-91d9-ea2e7d256bc8",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f13c15a8-823c-43d0-9cf4-a72072185a36"
        },
        "item": {
          "id": "26f72256-2370-4825-9208-ce7d8a9fe549",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "07a1de87-79a2-422b-b279-4351676fb5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2cfd3f-f060-44f5-b2a3-bb9ce2442092",
        "cursor": {
          "ref": "c2004e10-58c8-4e61-ac74-4c50c3683fd4",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "50795836-0b70-4b39-9ce5-242b11224e03"
        },
        "item": {
          "id": "6d2cfd3f-f060-44f5-b2a3-bb9ce2442092",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0168147c-68b5-49df-9d9e-7dfc37230fdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83491d90-b976-4057-87f6-ea511fa44a2f",
        "cursor": {
          "ref": "caee068e-0a15-4470-90d0-040a32ad18a0",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6341a90d-3333-40c1-b190-010a49adeee4"
        },
        "item": {
          "id": "83491d90-b976-4057-87f6-ea511fa44a2f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "76749510-4b30-4470-b25b-a65fb4430cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "4ca3e94c-689c-4470-897a-ed0da466d1a9",
        "cursor": {
          "ref": "89ce0bab-7218-4182-a974-b6496095d791",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4cda378f-3d99-42ad-ba60-8c65d1457c3d"
        },
        "item": {
          "id": "4ca3e94c-689c-4470-897a-ed0da466d1a9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8a79a227-af4d-4b4e-9d0a-d950a485df7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a8b1a36a-b4e6-4128-90df-6d2a3a116db4",
        "cursor": {
          "ref": "c06456f7-e30a-454f-9226-5b1637dc61ed",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e2808b39-16b8-45fb-8c95-fd6399e3e58c"
        },
        "item": {
          "id": "a8b1a36a-b4e6-4128-90df-6d2a3a116db4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e8c73c70-d035-478e-bcb5-cf8641f3814c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "6393cb3a-b01c-415b-aa8d-9b6164de6ed7",
        "cursor": {
          "ref": "a70a4357-21d7-4e15-ba62-5ed65e8b2bf6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "205da292-3340-42b0-9953-83fd014fbf3b"
        },
        "item": {
          "id": "6393cb3a-b01c-415b-aa8d-9b6164de6ed7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "90dbba21-400f-45b5-9791-f3eb2e5c1866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6393cb3a-b01c-415b-aa8d-9b6164de6ed7",
        "cursor": {
          "ref": "a70a4357-21d7-4e15-ba62-5ed65e8b2bf6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "205da292-3340-42b0-9953-83fd014fbf3b"
        },
        "item": {
          "id": "6393cb3a-b01c-415b-aa8d-9b6164de6ed7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "90dbba21-400f-45b5-9791-f3eb2e5c1866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f79724-95bc-4f4c-8098-009d50fdf6fb",
        "cursor": {
          "ref": "ea96d19b-7dbc-4dcd-8a34-11934e197208",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a2c08060-209f-4ef6-8131-b2f30723bd04"
        },
        "item": {
          "id": "03f79724-95bc-4f4c-8098-009d50fdf6fb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "04061d01-9b38-4e38-b61d-f9bd72851b4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57077ea-52f8-4e43-afca-b0c98049de19",
        "cursor": {
          "ref": "7987c9a6-e640-4490-82db-70c4f372793c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e26dff24-ca27-4ceb-8901-660bfded2ace"
        },
        "item": {
          "id": "a57077ea-52f8-4e43-afca-b0c98049de19",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "01aaa0b5-42dd-4e58-b196-697d3879843c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}