{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9f86bbfe-a847-46f1-82ab-534eb93363bd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "adefc7cb-3c39-41b2-aaed-b3872562cdc5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a528546-fe8f-4cec-8c5d-093b5f3a4b09",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "261565c1-6445-4991-836a-3df3682b9471"
                }
              }
            ]
          },
          {
            "id": "3490e97c-adf8-49bd-88d8-a5dd7d3878a7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89258a65-64ee-4e8e-8c79-f49272b3472e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f838fc4f-1b9c-48ce-894a-c89484021b45"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b3e89120-d565-425c-a421-ec0c1f483cda",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "00b01f4a-11d5-4cff-983a-177e49845999",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c54f2ee3-46be-4f62-affe-52abcf024261",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7319a18c-9e7f-4eb1-a7ac-62e19ce3f316",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec151b5c-e6ae-4a7e-8149-133f24f197fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "63df1fa6-560a-42ce-b639-e0a70a04d004",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60fcf6f2-072a-4e43-910b-61f6305595d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7a780b90-e760-43cc-9c25-95b7bebb895c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aaf72565-2f6d-4699-b778-19f224cd8944"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b525a89-587b-41ae-9dd2-413bc8bd4e09",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "27b04e58-dd62-40fe-a8ae-1078a3b05632"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1822139-f2fb-4fb8-9bf3-97dfb741f40d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62801212-51bc-4ced-8c09-74601e03f7f7"
            }
          }
        ]
      },
      {
        "id": "6e7315ec-45bc-48e6-81e5-370058ca3b76",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e52a1075-575c-464c-9136-7adb679e68fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "169d236a-0627-498d-9bb8-7906cadfb5cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20091cc5-fead-40b6-adf4-13e85b5fc90f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a84589-9b82-4d5d-a40a-d2013289113e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ae6ecba-c670-4ff4-87b8-3657b5fa21c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d630a20-4c43-47f7-8294-11e4356e0884",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085f3be7-a46e-4f6a-9498-8732a60a65a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e4a8623-7447-4727-ac19-eb7aaa370edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b9edae-2409-48ff-a31d-a23fee8bcb21",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39f184f-772b-4fcc-ae98-ffd6cff118f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39233783-b28e-4523-80d0-b9d11d64a169"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bcbcf6cd-f9b4-4969-8650-8ca7a54ebb2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2c83fc4-78bd-49cb-97d5-e8b16b607ecf",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3374bb-156e-4d55-a79c-cbfbbfba3c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40f96515-5317-402e-b702-e8bca6c6753a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf5398c-308c-45e9-86db-cda09f1d4fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c09257-f66b-4b8d-b779-f895831e6ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fcb267-ffb8-471c-9aab-d1b13ea3f466",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd514fe-a3bc-44e6-ab1f-8bdf888da70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c113d2a7-5a8a-4bb1-8f3c-85075ad8a13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a7b024-bc8c-4b40-9cf0-4938d44d3d06",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7ffe63dc-e5bb-47c2-a7fc-b3e895bbe562"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "733b0f84-e8d4-4db3-9e55-641a05f1d382",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ff6fd3d-276a-4c20-83db-c55c2fb44102",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98001e24-b6b9-4cda-87c2-532544f3c76a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "32252779-63ca-4f94-91fd-9624d1279e23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e223b81-3238-4c58-a574-5865a59a064b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d2767f43-52db-4b69-b5da-e2a77424de52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c952edc7-d1ba-42d6-833d-a3a0c0f84676",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6cfa63b9-c30a-46a1-8bbf-5e4f6203fdae"
            }
          }
        ]
      },
      {
        "id": "676191c6-3894-452a-a733-eaba4e6df826",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "32c525bb-0160-41c7-bad7-6d76bd0b2c3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb391b38-206f-4d2e-97d5-55d53c40d54a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "09ba9c68-4b28-4609-a09e-bf12b8d2e9be",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed757e86-6b78-4b0c-bb24-085343292438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f38e57-4937-4303-ac4d-fcf099beead2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4e1ff1-9240-4a5c-be77-713b66136ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f82e960-91d7-4834-9582-48e863983fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98ffcff-cd46-421b-835c-ee7befb2b1a7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98800c7c-3886-448f-bf25-013342412e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf8fb44-38c3-4cad-83d9-9e0553f355f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba36689a-bbe3-4789-88da-97ef91e53416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e50024e-ffdc-458e-99f1-33db7202b0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32704dce-7623-45da-8801-96876c1676bb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfa3fa2-098a-420c-9712-78eef9d2602c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57d375b-f796-49c3-aa7c-72246579881d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeba25fd-8c7e-4bee-a2ca-455f878f2d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39a80753-b3e5-458c-bbf1-149163270604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5a9244-3d9e-45eb-a9ac-ec1856eeb5dc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49174f91-b140-478e-bf8b-f5bd6390e0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897756b2-b63e-4ab3-a759-4968badfeacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e539ed34-5201-4764-9ad2-db9cce60efd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9637c260-dcd4-402a-9159-f677aa15e024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405021ab-aae9-410a-b769-525d51004a11",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a25e436-859c-4091-a0cd-ad0c6e43775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92939f43-48a6-4efb-8a36-42c79427c715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8705cff8-9822-464e-88ac-f2ce765bd1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f40585d-598e-438b-8099-985cf0431172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1481b3b-e246-4421-9607-1d831dba94e5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3c3422-a09d-4716-a47b-055d06b89b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7de0f81-63ac-499b-bd6d-e038adf6238e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d58fb13-aa0d-4c8b-864c-fe18de5e3fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d75ec0d-0607-421a-9894-25b9e43303df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8843d59c-51ef-4c4e-84e9-a2da7a9432ca",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343974a7-5036-439d-a6a7-3ba9eacd85f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c79a31-a809-4476-9ad0-896dd44758df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c5c904-b569-41ad-a297-c37eaf09e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62610892-1469-4c7d-afd8-d5ba65f63057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceddfa9-e702-446f-8522-9dd74ce89cd4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046a1ea8-826a-44e5-b01c-71202ef17aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24991345-0d6d-4850-9f88-2114861966a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4154e7-066c-4c56-a770-41e21081d3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe3c9e2f-61b0-4251-b4e6-aa0321982a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497f765f-2c82-4eb3-87cf-e54c10c100f4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1deb51-a019-475b-8c33-e42183651990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb070204-3be7-4382-b2e6-edc54c6c4575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d71513-5f89-4d8e-a4eb-c45e907f96d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c355fb5b-7699-48d9-aad3-cad3351eb88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b28b4b1-5a44-48fd-9411-3f9f33242e69",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416a676e-7fe7-4b5a-a09b-7f70d4952871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1737b5-51fa-46b6-929f-aec197541c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b2dc71-7748-4eb5-9ed3-235fb3cb4171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39387e37-c698-4348-bfa7-06804319671e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b485b30c-23d3-4e23-811e-5b88afa785af",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91479f36-6ec3-4df2-9bf2-98bf56e1aed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd602a3-9508-4de8-8cf2-d6c1d866b364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae4ac47-0189-416e-ba3d-bb30f2d64b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be1314fe-7dca-4187-a092-a0ee1751130c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9dbb92-02e1-4192-9c90-94c07dc151ad",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f995fbe-9324-43f8-9924-aab8dc447d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4b92a2-1212-4c0b-8559-58e42917d7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1bac21-fde8-4e35-ac1a-1b3d73c4a70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "252c10b2-ab83-4f98-8b93-a22b81c990b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a34a0e-159a-4331-aa3b-4f1d5c43bb04",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce17e0a-ae18-4c64-9f7a-6b099acd607e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a7022d-1a3c-4d30-b114-db6084944098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607c52d8-6936-409b-a853-631038943feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29d354ec-5888-4b2f-bb9c-f165a307a32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d00b12b-705c-46b6-a008-ab70a4f81965",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaac2d6c-97e3-4831-a5ec-4ea1dd8b2ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8ed664-755f-4e79-8ff0-b0b3858de16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba74b5c-e4ba-4dd4-b961-efd294a1315f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d568224-1dd7-493b-916d-b22b60665bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb9fc1b-9e3b-40b5-b02c-0e8e6d7d2726",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ade9f-d193-41a1-b095-fe594d2a03b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe56a1c-e071-4e0f-bf76-546e29f3e1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da57e28-c3c1-4d2a-9dc2-25b028974c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76913166-2372-463a-a77d-49c2e9cd6c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e253847e-bc37-4ef5-90be-edab58e97d5a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5d39e4-27c9-42e0-91fc-c9df50789f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc50a31-c4f7-49c4-a839-602e6c1f7ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f47a0fb-8bfa-412a-bac4-0a93d2576be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1071415-dc16-4e15-8425-c768ca8f68fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b92f09b-480d-4a95-8699-76eb17921d00",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8df3d22-c25a-4c85-9813-043e0a2f5e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96936c55-769e-4624-9c76-71c9a98f0118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b61c125-bd64-43d0-89f9-b3c2ced52342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5ba551c-8025-438f-9b14-d3c7bc4f9e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773a00f9-ca50-44fe-a4f0-fb67ca6e0f69",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90753124-e368-43a2-a6f1-f42d8dec99eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be360a76-0c18-47cc-93ce-5393433e6ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b761bd-2461-4b48-929e-a568ac97f8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1edd5b8-75ef-4b93-a801-604d2d2600a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e594592-7cf8-4e55-b2ec-69203a960ada",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa60a6e-4ec3-4933-9a1d-2705568cd4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b262248-c197-42f1-8ba5-3e6e41f908e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48572cf2-09f7-4600-8778-2f01c418e711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3f9d88-97fb-4b9e-8af6-2de4eeb9c8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f12078-e4d4-479e-bc0d-fb6387943616",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca69c2ea-d803-46e1-8fff-b8295e512739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2763a3b9-298e-4566-90ba-ba7fe8630c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfac72e-2b19-41ea-bd13-067697982c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac4fba7-9b1b-40ab-bce5-017f2d523607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fb4333-b608-4970-b860-2522b72c57ef",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd754549-036a-4b1d-95d6-19bbeafa33b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d51bdfe-b8c7-4484-bbb9-4002a4802a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca6cbc9-22ba-48b7-a271-844123111ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4007d53d-1da8-4215-b7c0-1dd94be48ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b908fb3b-10de-4b25-b8ee-82e15b9741af",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa010a2-9a59-46fc-905a-b896c14e4581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cc8ff9-c8ec-4ce6-9701-1356a607b607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39464150-6462-4f29-ad52-78f644864335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "968a237a-7da6-42dd-ab51-5afe24c5dcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57346d8e-5a0d-4097-bbb9-fa75214f67f9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af86f54-5141-4b7b-8e4f-c69bc57e8903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b9b19c-0476-467d-b784-f9bbb465e4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c80fa1-6aa8-4b83-bc84-b58c58481573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3bb3bf-22e4-4a6d-9dfb-6dba59fe4304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af412c4a-b9f1-4e17-b2b1-9e2ad9f22058",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627e285b-20ba-4304-a329-a1198ffc6f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dff42a-1c25-46a5-8c9f-37f2ed4df03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4fcbcd-a298-45be-a95e-14b62dbc8177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b5a537-f2c2-4120-8304-16e3bcfcd6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14510d4c-e29b-4e7c-9abd-3c7b5f33cfdd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20553854-569a-453a-9530-5ff5e5c0b0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e549849d-3e59-4c38-bbbe-a468f516cd81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec9e01a-4105-439a-9169-9f3127678983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "869a7d6f-3690-48b2-96c1-bb3da0c66182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2419d5be-78f5-4ea9-9c05-dbc8d2053095",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8222676a-3473-4510-b498-99a06ebf6c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af5f3d8-6b2f-47a2-b93d-b46e0b549268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b3f2f5-5987-441a-b7c5-a2bcfd01e042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "79f9cddc-02b6-4e37-afab-76f961a01658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017c25bc-75ee-4842-9395-8e0ec29cada3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0254e355-3c49-4ca7-be00-3624188a3fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482d79fe-9dc2-48bd-bf0e-683d1984693b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc536e0-6dcf-4ab6-9ea8-e77e00843ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05dddf7f-6aa9-4fd4-bb1a-24b40987360a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ca9271-2ed5-483a-9fcf-bb20a31c61a2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c32498-7525-4833-8d7b-3ee1f70214e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e4a169-ae65-437f-a011-d0d4beadac8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5de4c46-659e-4643-8a96-77c914d072bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebb8c13-91ce-4766-8457-742b50659c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3d96c2-81c1-4f80-b260-18fc4af24bad",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbfa676-91d0-4b8a-80e0-5f829bbd3c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0a7b6c-5ab8-4716-b9f8-72fc1382b22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d3f7cf-f7b2-498d-b581-6c849d2ee243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "392b93c3-e99c-4363-aa34-bb81f6332a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971b1f1a-679c-4ba2-a605-21a0a9d33874",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434f0020-36ef-4ba7-ab11-18c119bb8075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02493685-04d1-4ec7-9b3b-d1c915e4b454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09845be-567c-4fe6-aa58-cd5449ad57f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab03a6a-1195-4fca-9b2e-ab0bb582bb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05351c3-31c3-485f-8509-5a6bf459552a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd73516-d92b-419b-8d78-dc623e41c230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c28b54-fcd7-47df-9810-15f04f57631e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de28f437-33be-4be3-97e7-9e988fb8d65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "881c7daf-580d-40d6-a5e5-ffc3eab4b6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338bbc7a-5966-4932-9d85-c97f26b58819",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0247fe02-3f22-4aef-9093-1e071c3daa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de311434-5f63-4367-a0ec-1ece600713d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69803b14-2bba-45bb-9ef5-1da21d96e925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b98b418a-38bc-4d07-85bb-638756084cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b1f5e7-3fb0-4939-836c-2c2da6af3310",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc30bd1-df7b-477c-925a-a66c65a315dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f36e3a2-98af-4cbc-b809-a7f65761352b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6041fe-2fdd-469c-8edf-11d1eea351c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "425d6a7f-5589-4075-a0e1-f8de95feea4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030c9150-d55f-43c1-aafb-5f6fcd76edb7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63242c8d-f282-4108-ba68-39acc795993f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22dddcd0-1f70-4700-8189-34525b6d1ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffa8113-e7f4-4773-8b6a-f2c38c2e350d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24368d7c-e029-4936-9a62-e6fdecdd2617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869562a4-67e2-4e1e-86d5-805cf5998e12",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9adb84-3e97-4a24-94be-d48c8249b29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c44a346-c814-473a-9eda-6ce8bb0f5975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c591e2d-a71c-4fc1-b876-fd955cef7010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "950e47ed-1620-4db4-a2c7-07414c4de90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc6ca21-5651-4967-89c3-f8fd59393aa3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ad0f6a-9428-4f42-ae95-317e1c6ca7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fe5d172-7dbd-4f44-b9b2-80ab7664a707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c893a166-d289-4e04-aa69-f8518555f576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e03a672-1b1d-4889-8a85-3eed3cdde8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bfd4c2-6f1f-4e05-b216-c87c08eba82d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50096be-b0b4-46b9-94de-8bb596d1ac73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d6e39f-8173-41c3-bb97-19fe08def600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af9d8d8-7541-4c22-ba75-027e2bc07333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1bc944-4526-4f88-a633-d63f359af25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4d6997-bc56-4820-bf62-93a941f0cd7d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621e0566-cea9-4140-a1b0-f5b5b78de6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6fc56e-f836-4965-8b64-254603792f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22e8af7-1242-4585-96a7-61ff487c3ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9960d26f-c1c2-4036-93cb-3b34941dbb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80e16d5-4412-482a-af43-6ec0140f27bd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf5285b-6d81-4756-a02d-1a6ab96f47d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328b4e3c-0b7b-49d5-8917-882a7f1dc910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7320281-2937-41bc-944e-d8b70a436144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "40cef99f-f32e-48aa-b97f-d3c6515621ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5c567d-9663-4b4a-9317-07a5a973e246",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa367b1-7d9f-4e39-84e5-80f23b24db3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e51159-c479-4f81-b43c-ee10fe08ef01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9318c2fe-9ff9-4c32-b437-5bcb247049e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ba065a-d0fd-4f50-add5-29aaf02899c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfae03f-0fcb-4eb0-8980-91c1a049f1d5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cd32bf-1a9e-4d43-a1d2-532651efdc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc477ed0-c326-4f94-8e1c-e743f01938ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddf03c7-e5b2-4c86-bc71-d85253f3243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19e8e15d-e660-4c8d-8c74-ca6704dd70c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7149e46-346e-490b-b076-cd0ab072d04d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43b29fd-d393-480c-852d-035e89827708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2b073b-bb23-429e-9432-e683840173ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc8edd1-e861-4285-8ff0-6cd363db3a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb42ae7-ddcf-41d5-92ab-8da78d850016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc61a3b-700b-42d3-bf08-155c7ff7f8c1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20548fd0-e39a-45da-a31d-86050dc80b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdb60f8-661c-402d-b1bb-9420dcc01cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e619c75e-5a29-4434-8ef5-201785a00b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac6e1f6-35be-44ba-b4da-adc598c7e12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa9b2fa-f794-45b1-b38d-fd47a84c0f0b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae03e88-5bf3-46e9-84af-c4898adacae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8ae7dd-1ebe-4795-9fac-0ca9722c4fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b98882-523a-46a8-a0ad-231edaa057e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cebb638-3b33-4886-a022-86372e89bd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d887fd3-7f57-4b5d-89c4-549514e07455",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4572fc-5a6f-425b-82a7-d621069cbb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e723ae-30a5-4137-ab83-84d00039d6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c598da62-d1c1-44f3-b206-36f473acd78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b9314d-f4f8-4221-bf43-b9a3932a5847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f5d8fc-84cc-4702-b3f0-a2149acad6f1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bca757-de2b-4e4a-9f8f-bcab3a0380d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d892c6a9-750b-44ac-b251-2a24f948497d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367ef336-30fe-4a4f-9fca-c2d0d2d63ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3fa655-5baa-48f2-901a-b377e954feaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9ed20b-4b73-480c-8c86-4f5a5982c3f0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2980a4-f044-4c06-aa53-737a640c841b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0a89e7-8be0-4da4-9503-f656c8ec574a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e005f59e-7fab-4d62-acfe-6c31e3b712a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "316018ad-b4cf-49e6-ac63-2f75b19c83b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a652f8d-ce63-47e5-8499-3cf880e84b78",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c404b133-6cb1-4677-b0ef-39ac33c06a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03569b4d-03a0-4da2-abfa-07396118a121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5acf3a-e0fb-4338-b6a1-52e49d5014ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a27ba529-d4ec-4587-b5af-5a91904131df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912a1be1-79b9-4dfc-ab92-ab1e0eaa3358",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43e5043-b618-42cc-a248-d34893461c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99127835-6f72-4b3d-b2e6-ac3ed1d9482c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f7c132-12d8-4dd4-95f2-c97a4ada3284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2ef0cb-9cdb-4c85-b272-9ebff1c360c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cef4f0c-a321-4533-b39b-c5c756b46f8a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480c8f3b-2b57-426b-aabb-edcc627a8b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34c5baa-89fa-4a65-a6b5-27ef2d24dc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b539b25-b36d-4530-b727-2387af5802ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd89323b-f809-47eb-a461-22cbae40b4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b74cba7-31af-46a7-9099-a8bd5bc7f2ea",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e63ca3-c9dd-418e-a0b6-1a3bf89db915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23ea1fc-2b1a-433b-9313-10d2bfaf9c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fe6952-2a7d-43cc-aff1-fbdd3ee013ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b92e631-aa6f-4073-ad9f-3fdb7d67f367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403aa258-bf6b-47ca-9679-455c21b9b80d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a69cf6-4c96-4ba2-8315-e497cc101428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a48d7c-07ee-43c8-a2af-8907c5d7cd9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747dc409-6f83-4b67-a9ac-dce4c2758faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25922b86-b95e-419e-aca8-d841646330c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f774e1-2d68-494d-aad7-f4620f7c6a87",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfbdf7f-fae2-4354-9602-0f45b252237e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6afc95f-66cd-4c32-9b63-f9e2097f39c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60b26ac-7280-44ca-983a-e78775a17504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df5a42e9-c04e-4fe0-88b6-482cc1dda29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680d2f63-c641-41de-a3b2-07cdc49041cb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976ab93a-281a-43e7-84b2-ee1c7fe26c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e1938f-2f04-4e70-b46b-8509d8bb58c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6de5a5-8c55-4641-ad34-3705ce36021c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97ce2c72-e4da-49e7-a5c4-6fef9a8c94fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bd0a91-42e0-4c00-af8a-c9acbc72a62d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4f3fa9-ce62-4f64-a027-7124c879eb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f402a0ce-c523-4ce1-9126-bdfb204e53fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb799a58-fae5-4421-b4bb-7fb18322f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21bc8e96-7a8e-4e97-baa8-dab4e665f7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac76f8f6-6864-4d78-823f-8e45aae82dbc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc563f77-88eb-4536-bee1-012ea75dc940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0919222-4ba6-4561-b254-a8072cbbad28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dafd1dd-b07b-46f0-9c4c-cba02efe131a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c0621898-0388-4f1f-a26a-444b6c47f92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad981da-cfc1-4d90-b02a-5260aba6b311",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b9c93f-c5d8-4727-bdc3-6ae058a41994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34baa2a-f8d8-414c-877e-599753549a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cfc2ed-ddf8-4def-b015-5c30f0863f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6441036e-5786-41a1-925b-4b76a29324ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bd10ae-7cf4-4c37-ac49-2a9791587558",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76b7925-6755-4a6f-a078-d3894ebde523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3ba67a-ea7b-4b7d-812f-d3b85fa96582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01f5b40-aa98-4088-8db1-65a20a835ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fece37ae-4b1d-485d-a165-945be2e27ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9015936-fb6f-4f21-9b36-bc48c3e9bbcc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9396888b-44b5-4b9d-a604-21fe532e394c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954b1d37-7d60-4560-bded-11c45a4f7984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1da435b-9083-4e0b-abb3-cdd3617d7fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07c6dcbf-987a-442e-a1d3-4b81d8c10758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfd9bba-337e-4f7a-8940-d73e4989eb59",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1de9bf9-726c-478a-b91c-f899f55ebd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc4113a-0a36-463b-be99-b80cd44248e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457ac336-b92a-4605-a85c-3d1f171dc2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "85d6411d-e926-4198-87a5-a71e2a89dc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9cc058-e555-40da-821e-1097678fb7fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d0a91e-e18a-4daa-bb6b-ed73fab213ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145d9800-7ae9-4433-9237-3a5d515e5352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c739f85-eebd-4afc-93c4-6fcdbd610923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "64c396a0-e2d4-4631-b552-34a4fd80bcd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96c99b7-5c6d-4d71-8f48-5b756f2acdaf",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b8ecec-c060-4ba7-9f73-faece13116fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718a3c18-278d-418c-8583-8effd4ae4de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23236da4-149f-4a2d-913e-92c4eeff752b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d39cfdaa-4d84-4425-94e6-934481d79120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee41b139-be7c-4aaa-b4e1-cd5afbaafc20",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d00764-3b41-4775-83e1-3c4d10db8a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a32cbf-cfdd-4de8-b58f-ef18d695ad3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003f93c8-c04f-4397-b2c1-ecc2f65849b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "92008275-97d4-4fce-9054-b8ea28bb8448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9197a2bf-7bde-4b9b-b8c6-a3022f6a598e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce10bcb4-1782-41cb-840e-c91add7f9865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b08489-a821-4a55-85ce-936b801623b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecee51a2-9697-4254-8e59-1f1b115923e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14bdbb72-efc4-4118-a68e-5ee91dcb466f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a61c1af-f895-4a01-b82c-32b73367e8f1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1be1d25-eec7-4620-8d30-a0d703420212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6650b493-1ff1-4b35-b9a4-c3cb23efd119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9cb70b-fd67-4636-aed3-7c4cdf22aa1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f358078-918c-4c37-b1c9-d9879de09a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dc6f65-8c47-46c1-8d8b-1170c1cc8f44",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c241280-9ee9-4bde-b765-7b466bf1b377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77032e9-5052-447f-8281-58aa9a8dbcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6d6d0b-ac9d-4b9a-9fe2-2f5e092e1bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf383f00-792a-4b5b-aa27-626398c724e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263d6174-c302-4ee3-ac56-949c04256736",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70146fd-d0cc-40d6-b08d-0fb9979ae3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cd761d-e201-4ab9-8695-947fe484d2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59607bb0-2a93-4fe9-8a67-0030f8dff911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "427c0fa5-cb26-46ee-9ca3-b3aa186d4ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fae88d-f9ac-4598-ac95-a58311bfef39",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621da9c0-a6a1-4c8b-ad5e-f636ac86bc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2c5ceb-e2a6-4192-b5d2-d0c0e4df042d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d323e9f-5741-4f36-a22d-aa007a211bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d957a415-671b-48ea-90b4-500cde27581d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50215cf8-9edd-4d18-b0f2-b05194ad4f1d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a1017f-e24e-47f7-8eb4-296509d69ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b49829-f279-4fc7-baac-ee28aaa71425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6069037e-7f03-4042-b8d4-027c6268d72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9016b50-e5a9-45c0-9eaa-f405340acd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e91349-341a-472e-ad5e-65b4c383c8c8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069ce3d4-204e-4e5d-937e-623d399331d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b722b7e-1ad4-400d-8d78-6d6934645dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d174e7d-2d37-4708-85b2-c477190b630e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddce8bc-66d3-45e8-89f4-2c93735bcfd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3518b61-6f07-417b-a94c-b98bee62da2f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d7964e-7e13-4daf-bc49-cf8c60dcee55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbff00d7-bcb4-4d7e-ab3d-29e466da02ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b167f54e-e0de-471b-b9b8-769dcc0c196f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13485f54-06e6-445c-a578-320180cd98ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dced8c7c-a5d1-4d38-9bdf-b051bd4bf61b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a9880e-ddba-452c-81ea-6c82fde02f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f815a470-9081-4cf2-961e-951a2afae76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f55713-d8af-4024-975a-5a998ef541d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d04a6ad-447b-4481-a1ec-76b1513e676e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc79459-2a76-49e1-b797-e81e498a0678",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54595b4-7895-46fb-bc87-9bba2364586f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3448b84f-1eed-458f-897a-b6ebf02c9ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcc1bd2-88ee-47cb-9d2b-09039b5ff54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ba6042-00a5-47ba-bafc-4daec5b299c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b6e241-17c6-4d12-b1f4-32a9623b2b1d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb20b3d7-de73-4bdf-af9b-086f5f9f294e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8662bc8c-0bbd-4cc4-acc7-025399771311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f9a6f1-6277-4120-b443-b2e889e4577b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1473c495-4bad-435a-a315-e6d7617d7a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d338499-492a-42ea-878a-e5504c9bcc25",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e22e75d-08c8-4d3a-8d03-96b65b73e9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eab526f-4729-4361-9653-026e98761f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bb53f1-86b6-4f80-9416-28bba1145b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec42ff0-fe06-43ac-821c-ae91588c0753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34493d99-5511-4656-b5b3-e831b5534cb0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b496b333-b8bf-4d1b-b999-6e32d966f443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6795ac-24ef-4922-a828-2406a7f2be49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a37322-d771-4d0b-a5ef-1a325f95c22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70173d58-baf8-4d30-b8f6-a7364e4ac4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0a1e34-f5ed-4fa8-839f-e197f035a19c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c072c818-0e44-491f-8654-84fd967371bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f19a7a-bc5c-4a3c-aede-55e76c6d1f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c363019d-e3d7-4ad5-b785-fdb38c0bb2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9087ed3e-6b5d-4b17-9194-ac898a94d5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738951d9-b427-45a7-a171-6d9e68223c5c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e33de1e-e2f5-4eef-9825-0cbd0a171bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbefce74-2212-45eb-934c-e22a4101679b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd16edf-5354-4665-bd76-943a90c6089f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d36c3f-c078-49d7-958c-1010b5b52e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9e5c70-c603-4290-8c2f-59657e72302d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb35953b-4e78-43e4-8993-066a715c79c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b917de27-3a70-4496-93cb-35c5185c8081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67125c3-4ec0-4e88-958a-549746aee369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5cc05a2-81f0-48cd-b7d0-335e40beb0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a09b16-c983-4faf-bcc6-93a738fe6607",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f25cc9-99dc-4a1c-9e3d-8bfc0b7546a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d188b371-07f8-4ff2-9626-ec27ba28c3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaae6ae4-7be3-4a04-8016-7ff621532e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e758a0ee-37f2-47aa-9e5b-baf6e0442d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298dc589-33a5-400d-9e53-3e519b46e8ed",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce26ffb-a9bc-426a-97be-39d4c0d85efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4b0dc6-5c95-4e4d-a553-afc15b7d7834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c4e6e7-fcc2-424f-b103-cb7d7695c1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8855a13-43de-4735-bdca-f972dd556e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90b76ca-de42-451c-bf65-62dd76ca5f3d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e857af-7a60-4554-9663-380ed4c0c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a085f4c-6893-4d51-87a6-dad3ab682ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d9d61-7d11-4f01-a994-d1fdd38fb164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84fb416c-9f06-474b-8462-5d26e69db5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4e1653-db23-4484-baea-3d41156a106c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1624bc44-dd51-4ebb-a246-d0657e7e2594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a767873-7818-41cf-acbc-537ee7bbfb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a98dd36-8f52-4e70-b11b-bad633710a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e70a621e-d6b8-4cc8-8c0b-455b757afc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d654e864-2755-4a39-9a4f-7da4ed61896e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0324bfde-db68-4e48-b96e-664c50055692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63f31fb-b606-46e7-9c0d-3eadd555e7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c144927e-e640-4677-96fd-c67a65fa7cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64679ec5-6b18-48cf-9c3a-2398830b6443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158431b2-bea6-4a0f-9c80-f554f9533483",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6878eaf-4ff4-4f3d-8ca6-6ddbd91cde9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e955c37-5e7b-4def-9689-f41ee7056869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edac2c49-d75b-405e-97d0-8becce76282a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17545e34-beef-4545-9621-ef683c78132a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae428d85-acda-4ac4-876b-561aacf606fe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f503bbe-a3e7-40dc-91b3-071ab459751e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcb67cb-07ec-4bcd-a4a9-e96c34c7879a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2846d618-ede5-4ae2-b4cd-09adf6d62fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "abb1ae49-6696-4863-b9e7-82deae6ba6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e776e73-aa19-4c24-9bc9-c2e03fdacabb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ba1e8f-a6f4-4315-adb0-fc56826184bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def71871-31bc-4845-b06c-fbe4aebc4026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503b9293-2c1c-4bae-9ff3-5b743756e160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa41f91-b843-487a-841d-2a9ca23ac1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ac9475-3344-4ef1-a346-83fb45ab666f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa3598d-6894-46be-8e70-143c54a3b955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d920adc0-ea30-42b1-a863-d7d9c77c796c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0b49ec-f5cf-43e1-883d-376248e497dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cac7fef3-b79c-48c0-a986-ade7a934acce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a298db88-fb0b-4478-9eec-013fbb71726b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b30ca7e-080f-47fe-bf19-cfd93d80377f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f4b74f-567a-4b12-95fe-9e632c834128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46357f56-fb20-4c16-b55d-f6a1f9b711b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "57dcf244-3be0-4228-a8f4-ffc83b5bed7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d07729-8081-4692-8966-9ffd0e79a419",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12ef8fa-f1bf-423e-a1d4-8f31d58098e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8914f50-ed85-4dc8-acca-c353479291b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce356b29-b980-4b0a-9608-6cb6d1fb92e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "93d48c84-a4aa-4685-b3b8-df2109d4fdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d17538-bbe8-4a7a-b781-84797f5cb438",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1731dd-ff55-4454-a52d-69679eaa306b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616e7a2b-5444-4ee1-971a-242d368a036c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e033630-141e-43c2-99c7-c9a9d5f4baaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52b88a3-0d0d-4d7a-9d32-8c67bd6dae65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495544e5-0903-45d5-b1db-1d1d6e7fd44e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752e241b-3c6c-4a79-ac73-2f3149c32c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a2716dd7-d802-4fdc-8f76-5dee57be62c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbd369e-0ba9-4fc4-9dbf-97ad1ee5b05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc3299a-d9e8-4f73-9a1a-0f962a216b75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53691f15-db8f-433b-b7b5-1de208086f2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a13b620d-a826-476e-89c2-d922a2b3250d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7125700-d64e-4d48-a656-fd98de483253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa53c6ac-da4f-4982-8191-726dbbfff4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0740e0f9-fbcb-44ad-ad29-bd70739d7748",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9da85eb6-90c8-4f86-90ec-1ab8cb7c8ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fb152f-0a36-4b98-b292-3ae5534571ba",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8fcdd2-bec0-45b7-9a4a-b06135962ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a5d5211-16c8-4bfb-8e40-3c96f3374734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f9448c-487d-4ec8-a545-625d636c0392",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84d5bbe8-06b2-4e3f-9449-eac623741bf1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1481891c-89ca-4314-b030-f3956053afe9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c3c42cb-8009-4ec9-b702-bc9e51c140c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1b6078a-d4c7-4efb-b33d-eba43fa99331",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f984e95e-328b-4e01-9c05-bd075538f6cd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1ca0d3b-676f-4d2a-bcbc-be82a7885865",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a13d6520-983a-422c-a648-3dce2015be4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32e04fb7-a65f-4c2c-abf4-45667e41b118",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7432e4d-a6a0-4492-a7ac-592fcb13ac7b"
                }
              }
            ]
          },
          {
            "id": "7bc83a20-9b6b-48e7-857b-93abf4626fed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c65261d4-f245-43f6-8f3e-31cf6017546d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7274232a-45ca-4d52-81cf-c02cb1fb5d69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13738b01-1a13-47ae-b429-237993fe0088"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68c552b8-977d-4e74-a686-91a08262356a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39c810c8-3c3a-4f47-a019-acec0b4262fe"
                    }
                  }
                ]
              },
              {
                "id": "220e307e-0aa2-42c4-9922-d616b785d0f7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07a602d8-0b3c-4f37-a3b1-356cc9cc31b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1888bb83-a0d5-474e-919b-068a43e4b529"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cad07344-189b-4efd-9cde-6cf69c94f4ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea151de1-6fbf-4829-933e-ee361a38b7c6"
                    }
                  }
                ]
              },
              {
                "id": "2dd8bd3f-5f17-4df3-a163-44edfff3ce01",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4a5c6a9-90d6-4186-bb39-8cc371de64ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30433493-e6e3-4f3c-bd01-702e458aeb79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f74dc2fc-c0b3-4df9-8bfd-a515c16914c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "370f60af-25de-4d78-b9f8-5a9fc2ef3d44"
                    }
                  }
                ]
              },
              {
                "id": "67b6fde5-d01a-44bd-a296-8eae9910a548",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "878ff037-e65d-487e-9d91-7fefb80af0e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dc89712-011f-42bf-9292-aeea1b56060d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfb0ca66-dbb7-4db9-b7b7-ec26ef596ec5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7fdab229-96a1-4e65-9a0d-b4b41f809497"
                    }
                  }
                ]
              },
              {
                "id": "d3258966-6667-45bb-a79c-2de54a78b8cc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "922356fa-0154-4c5f-a202-913a689c66a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1087381b-4d29-4fcd-a1db-f63dde2c7a30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "535195b6-6dfc-432e-bf2a-ad6bfe3cec6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d419bebe-1fe3-4c19-a6c8-302758d055b5"
                    }
                  }
                ]
              },
              {
                "id": "4c69b9f2-77c4-49d4-baea-ef98641cf328",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4923f37f-7888-406d-b840-ca73458dac04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7995a68e-acf1-48e2-8844-1cffb5d978a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5469bcf4-33f2-4245-9ae0-b31272d8cabf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a886ba9-e824-45f4-a435-8fd0ae0eb837"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "783b55ab-cec7-49e9-be6a-def266fd7d50",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e3b67b9-dbb5-4339-9a41-36868e65a69e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f25186b-5fda-4aeb-b4bc-34d5c137dd56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07fa8e7b-7110-4929-beea-09ddcfa7f6ae"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de6b3cf5-9dea-404d-b9bd-24022e37e2db",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9659a111-e219-4fc8-94eb-e1c3a2102b5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ff205fb-a690-494a-994a-22927b7da343",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "744d3563-fa4b-441c-ad83-36463c82027a"
            }
          }
        ]
      },
      {
        "id": "5d2cf534-6fb1-40ac-a83b-2b29df889c83",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e236a430-5f77-4485-bfcc-e09289956c22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8921a17f-f5fe-4c5d-b726-086765e0be85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a08383e7-495b-4e7c-97c8-ec9e5e9d0695",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd437e4-3982-47c0-80c6-caca43677a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aefa16f-4e66-4374-b1b4-4133ea2d0dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09192d46-f16b-4788-bf70-28de746561c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "01753a00-9dd8-4209-9dde-9c67099a06dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27d10bc-8129-4aa0-9e27-f9e253f16095",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361aa0e8-9116-4e3f-8771-dccbc32eeafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda5e70d-de00-45ee-9857-06dd5bf6f241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a593dc0-cdeb-4b49-a60a-9d620bd81d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a12c11d-85c4-4b3a-8083-ea441ff20d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23479ddb-b95e-4bb6-af19-c8b7221608f0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d4b420-9409-4f3f-a4db-b90f7e00a8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a00776e-0fdc-4302-9eb3-b4029f4e3d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d019b725-396d-488d-8cbb-15c115d80681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "256f5ee2-18be-4730-aeeb-a79b93cc2d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff75b81e-2971-4700-ae4b-db87fe65a248",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92f100d-1944-4029-af9b-92d6e9f94929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157f635f-8f05-4dbf-b242-b4a1f86f6f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4993e874-80a1-492f-8211-77a85b551f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffe5ae0-c426-42d5-a600-2654cb7e9753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7c831f-8523-4d9b-b5ce-d8bf324605c6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53256ba-bc0f-4b66-9e48-1e05e0b3abb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d7baca-58b8-4753-9c12-9d7609252e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b38a68-070b-430e-b7e9-59b1b0bdd71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34c7521b-0f32-43dd-b3ee-25f4514623ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5e62f7-ee57-4579-b0c5-3883c1f79a82",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a4ea88-a952-4994-8c44-a1fa981c1c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982ad679-d232-4aea-ac95-ab5e5bc622b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b9b441-3fa1-4470-bb5d-c3a2ac86d296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae87977f-48e6-419b-907c-7f7157839251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c8eb6f-357b-429f-852c-b2500a51d1a3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fffe1e-97f3-4e5b-8c50-6fe9a4984a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50316e02-e73e-4a1a-a069-3eefc96c572d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c18c09c-402a-4e1a-8867-433a6e9f9300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e38b45-2f9a-47c8-9ce6-512d2ff49e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cfb875-05a8-4730-b380-bd1e1d0e5721",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1586d15-0e0b-40b5-9467-36df5f1b9e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22af3a84-00f1-409b-9948-16deeb4245dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedefc02-9d7d-47ea-afc3-c7deb47fb2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e787b980-884b-47f1-bb95-89aa99deb878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d2e800-e32a-4f46-ba65-c0dc086f1ead",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcfd174-7016-4bae-bb09-49e39df6640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6ec2ec-2db8-424e-9870-39763fa1af9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17f38a7-64f1-4080-9256-6b0e0078013a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42483888-b5c9-44ca-b1ec-536ddbc7af83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c377f5-05e4-4110-8df7-ec83293a9fdf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb6be7e-e5a6-411a-80bc-9ab2386629b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f46215d-fde9-4179-87b9-e4d9120ddb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfdc222-c9b1-4732-a0f3-b86de9c3230c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0742a1bd-68c0-498b-af59-db1e9813c400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a630ef54-d7be-4d44-a2cb-1be531cbcfa2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4e8776-036d-4635-8bf5-25eec8ebd2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a49213-4139-45e6-94eb-220f506d9abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129efe68-8b91-4acf-a816-69f59fe39646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2edf857c-b4dd-40cd-aefc-20ddd3cb8426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcb1072-a77f-4cb2-9393-7558111d4156",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6c6fa2-d7e5-4008-9705-5902627b91c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc843fe4-782c-4bb2-b5a0-a18112f4df45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffc0c58-624f-4810-a8a3-3587130e3c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d872b13b-10c4-4a8b-8b86-4cdb4ffcb084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893bd83e-e457-4d64-b8b7-3659fd143820",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecaf4ad6-1e6b-453a-9ec2-fad6cadef55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aec707b-0390-44db-9bec-97fec4712d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5be3b02-a2af-4e09-9b35-42ec357ac737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7748669c-36b0-48bd-99f5-63042e7731a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247ac2ac-3857-4c20-819d-ee9cd9f68232",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505f7a10-e572-4411-9d90-07dbd110f86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48288089-0d87-4b37-b539-e46c3e158d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93b2d27-61bc-4f2b-8e50-a43b23980ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "897c11e7-1ab6-48c5-b14c-04bf0719f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0f9759-5596-4f93-80f5-ba4384c178cb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bce605-df8f-46a7-9c7c-b69817f39ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221eb4a0-c357-4f08-970a-4d2dd90fdf42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81579e21-8b44-4241-9184-fa3e3d6a2a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "16ec6133-f989-444c-9457-aa9de2703d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050362bd-82db-4f6c-bca9-6d6d79482f23",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1db4a65-3590-49a1-9adf-0c16ff1de53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddf9bfe-613b-4c9f-9e10-68cc363a7885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb08e7e-2865-411c-a508-6305184d1afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e72c552b-76ae-40bb-b913-efc59d75978a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0575347f-5074-4cad-b240-2862a82059d5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1331e4-92e9-4766-8cdb-b2ca79f00386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be645ec-dd81-4d17-97ff-00ea562a6b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caecbebd-0aaa-4f33-bf50-d3adf53fd7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "34276fb8-ad50-468e-a376-bba5f537d39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f4dd1d-15de-4586-a809-86089fc2054f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c212f9-b900-4513-a3ef-05aeb94cac45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2503e517-b386-4563-aeae-10df8e00a28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a95458-6710-43af-a8b2-6191c0c8e173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76ec577-70f9-4f23-b7ea-84d1f58bb3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b3dc73-f155-4073-8493-8b4c1238214d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274dc8ac-94fc-4627-83a5-471a1f7cabd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f956f858-68f7-44de-bdc5-f542b7add7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06371d2f-5388-41ff-8ef6-1b7df2e57493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8429b5c2-3c05-49a0-be2b-1c11e38e6393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74062d50-5c3a-4fe3-90f4-c3267d1a7f7a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8a0a65-1c4a-474f-abc1-e3e1ebf003ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb5b337-2c22-4755-b039-5b675738e5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29370ee7-b3da-462f-b8b6-9f2e8236038e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c04d7693-fb4f-4085-bbc6-772c727ee396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e616527-d3fb-4ade-9397-1df2790e7730",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562225d4-c4c9-43c1-9931-92f33b6a6f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3579242e-2928-489a-8bc0-0525824c4cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4995773f-be1b-4001-8fac-bb83ef2f3ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48faa00d-b24c-4bbd-b0b6-b8b9ec218148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b92754b-fa3c-4b0b-9b5d-5b10e3e188c4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f86f97-f5dc-4316-b567-bac82ea1b1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5820a26c-9eaf-4a88-be61-2757052c16c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a487cb-962e-4678-9547-1ea751c43a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c16ffb11-e7f3-46ec-9acc-334cf534822d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2d9cda-4e73-445e-b089-3e691aeecc76",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f2a79e-877f-464f-9cbb-2bc621e0b4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d92af73-0103-4c53-8e90-d46eb5c46f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab8df4a-3bcd-4fbb-8b8b-83c554185134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d961af63-2894-47cd-b7d5-fcba529d3a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ad989d-a064-4bc3-b03c-163e14845ea1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e7ea85-cce6-4300-bd93-12d1e0c7d49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975db847-f46b-41c6-b361-2cb19f535a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0bf287-b15b-4630-b0ac-626e61fc7294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "288d38ce-ae4d-4294-98c3-2fae79c21e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9399d44e-f591-4e9f-be78-4500c307f66e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f44b68-f0b0-49d2-a9c4-3bb7d497eea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b28a05-381c-4756-ad10-dc46316ccbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797e483e-90ef-4680-a84d-7808dc877f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74340530-7ecf-4b25-a4d8-367346ca1b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6accc53-1a2a-4631-9faa-d7bbf3ccffbb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7839e0b8-6a6b-4e74-b0f9-05f93194a30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f407d510-832b-4f05-ac43-e1a23b08fcc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9590482e-3a5f-4f50-b0be-b9695bbd6b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b17e5f5-b6ea-4f50-95a0-5d0fb11130b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa472bb0-d72d-49d0-be39-0355c142178a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad40be0-dec4-42c6-822b-add0f54cb074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d2d408-0ab3-485c-9a3d-56d7ac58ca8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5dab50b-f12b-4823-9dc0-02bfacd17e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6a1fed-0f0d-407a-aed0-4b904630b1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ac1c9d-025d-49b0-8386-d5f320adacf6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75074be-aaea-43f9-8229-dc611df0fbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea84e12e-0243-4356-9c3b-8cef23464966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2eb0c2-8b40-49cc-89af-c8e11d2dec98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64743d8c-6395-4c85-a80f-d483a2cb4a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd9c84a-6a5b-495b-985b-6291e0c26029",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9665599c-b33a-45c8-9f6e-2ca3b2c1eebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cae7db-9043-4308-b7f8-bbe3ddab64d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3be7f4-affa-45aa-b344-96934b44a47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "196367e1-f83e-4429-90aa-a7fe5f2b1948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf84777-0a35-4ed7-b913-7d956e8884d7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6147f0-84aa-4aa9-9863-efe965035d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb51cd40-c534-4abb-878d-d03afe135e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baefadb7-22cc-4cee-bdaa-bf7047d6cd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "955e86ec-4c70-41c2-aec7-b63ebd896d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca67a51-605f-40b9-b038-95d44092ae69",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0bf22b-fafb-49cb-be4d-0170a699804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceba736b-2561-4a75-9c96-7172695fbe95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd3f1d6-e890-43a6-a7b8-0206aa3b9bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ce8c13-2692-487f-b046-e78b95a9ca47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0e7fff-2348-4abc-8c05-35c5ea8075e9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf6e11d-ed4c-45d8-9924-94fb38d7d861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4132b0-6bed-487a-8d07-b559586a783c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5de5ec-a67a-4da3-b842-5ff012419c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9076935c-8cb8-42ae-8b16-1181db41229f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90934337-00cc-4486-8400-e5e8937ac7ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1558be40-eb79-4c5b-b6ac-c32a12fd7d20",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cbd8e0-ff65-4e7c-909f-34dd3a4c29d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "006766cb-9d6d-435e-ab4c-4a74afd7f6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3653b52-6939-480d-baf7-7bcf3ab86162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ae208f7-7554-4532-9cdc-f9ecf42867f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65c05b6-d38d-4385-9be1-c7b9d7768d9e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae218fd-ce69-4fbc-90e3-544f38d8c95f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dd12f808-b2c5-4c48-84b9-f2456579e40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849a819c-7a9e-41f6-ad72-467d3b32b482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33c7c060-c012-44d6-96cb-b3c8bfc6f00a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "685b5de7-05de-4707-8f02-105391a091c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ac6d348-eda1-4894-9dd5-d16a0c09e278"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b520fd8-65ac-49d7-9f78-3876ba847ac6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b291a54c-135e-4d6b-be4b-d67f76c100cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45392418-c64f-42d0-bc73-101c215c7200",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e1bab6c6-971e-48e5-8bf7-76f8bfbe7b63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea66d5ad-3827-4ee6-b462-5a627e0da31f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a247997-03e3-43f1-9e46-5d9471d63dd5"
            }
          }
        ]
      },
      {
        "id": "d3959ec6-d7d8-4604-9dee-f23534b868e7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c40f39e8-81af-40d5-ae78-04f5ca31eb3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "badc7cdd-4e58-47ab-973d-439f9ec788eb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57dc4756-b6a6-4f88-ab07-bd2546faf99a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a269cfc-7327-4d26-8547-04ab98ac3d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d51b46-d605-4687-92ad-a04a0a076975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472c7d07-9068-4603-81e7-d643cd031ed2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4ccebf-d3ad-4da9-a537-e9c2733df744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819aa3ad-57dd-42d0-a874-e935a9749694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf97cb14-b7c6-4f49-8d54-cc5715e40d74",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2aa8d0c-8e1a-44cd-892d-9c46cdd95621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341b8d1f-2927-4dbe-ac93-b2bc268af1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53baa34f-7de6-4166-84b9-1c2c4b78a4fd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c32c15c-03c3-49fe-9131-d0cff2fcd77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577d79f6-18a9-44d8-ad7c-acd6d975b7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2f65dd-f641-443c-8b84-905aee6f4321",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1458e8ec-a894-473f-8663-9e36af62066f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fccaff-6fc0-45b9-8869-0420d185b23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7b01b2-0b41-4cbf-b4a4-12a85b88f49a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d30e46-9fc0-45a9-9794-348273db7a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552bec3e-17f4-40b6-95c4-0b568a95111b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619cdb3c-b4c9-4c8f-824f-67bae0afa973",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79eadb85-b8f3-4699-a1a8-18a7051d3101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba487bb-6d09-4fc7-8e28-c0417f606af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d0f266-ce58-4e55-9e03-b0c455c03f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5a0dce-09e3-470a-be91-e6ffdb39c9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad1d402-75ea-4fe2-8722-22c314bb258b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8a4e78-cbcb-4625-8ffd-33d5e460bc04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "861babc8-57c3-44a9-890b-ae8586dbffa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9218a2-baba-4f7f-9250-d7f789a85a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f484782-7d9d-42d8-8673-d16b27496b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b5cdfd-9c5c-43b1-a279-8895e7bd6a2c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cab177-c9ed-4c9e-98e1-684c4ac208e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e20751d2-acbd-455b-9757-f2fc1d000bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bbde4d-b7b6-4a62-84cc-2a34535f4017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdde7a56-967c-43fe-82f4-5d5e421a599f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986bd64a-543a-4556-8308-1d7449e73e37",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa14267-1d54-418d-9a17-b555f9538d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f7f3ac-b24f-42c3-b49e-c305185e3c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a49bfe5-ae4b-4afd-aba7-626297514f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d16e1f-638c-4ef2-ad42-60c558df4312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d3a3be-0b7b-47db-9227-6c44c42d996a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663e0d9a-ec2b-419f-83f1-2ce84f1bc99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4541ad-c2d9-4030-808a-6a3d299ebb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f782014-d630-4b4f-bcf9-17dc7170cab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07102c3a-fcaa-435a-8a16-91a9da1663af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b8f9b8-2811-46b3-a8ba-0939b7395c17",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9131287-675b-4966-87d0-5f161a6e8283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56bc1c4-7bb2-45c2-a99e-223e46cfc168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e836eb9-7ba0-4529-92bc-ca8342320acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05282820-f78e-4dcd-a60b-809d09273682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6d6647-4c42-4c8a-9ca5-a12d8fee71b7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006474f1-a8b9-4987-9d76-db6c6cc805ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c02d358-5d24-4f02-835e-5691d2f12158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4695b263-2880-4cd6-bf91-e37ea3850901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e5a6ec-bf16-423c-8150-267100c288bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbbd259-5d5d-48d4-8015-018393a067af",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55a0813-cc45-4619-bc29-38ae09c01f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73dc9b65-92f9-4869-a547-f7bcc0a2e220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2ae403-8e52-4d59-89a8-7d7323751e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c0b187-6f1a-40c7-9941-febf8c86422e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe1f2c5-1a15-47e1-80fa-b795d7a7325f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffbaceb-53f1-4f75-89ca-69693a927409",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48839e0a-869d-4a6c-a04d-8bd1b20228dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62de1257-2fdb-4a1d-ac97-bcab88d6f77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba09bd0-e2f3-4677-9792-a7c1bf110c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b111e6-6249-40c9-b316-42eb5220a9e9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b54e38-ea07-417a-88b7-3a3cd42837b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03dce2cd-20a7-4d27-bb74-65262dfdf68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1199de-3dea-4ed7-9c47-d0904153b9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626348d5-4015-4c70-bdba-5e70bebc4835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94fbb00-a5d6-4faf-8a7d-610300ae89cd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4868e757-8265-4413-85c3-d7105e04b828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2092880c-c5b0-4fec-a38c-43935bc10538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945cbeda-52d4-4885-b459-de033acf94a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457958ce-77c4-4508-9dcb-bfc3a083e6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29b40b6-dabb-42a9-9235-dc267877814c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aecc6e-0e07-423c-9042-43e37cc68acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c15bda1-540e-48c5-8c39-3f029a94eb21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd880d9-3417-4f1f-a931-d576f9885cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccce4dbb-abc0-4b76-9421-0a21212312a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37c80eb-11fe-46c5-87c7-0c058b620567",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0467799d-084c-4235-8ad7-56ddf63d4bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcecaf63-f098-4cca-b5a6-311676097d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7f01c0-a48f-4b06-a889-5ab7d8ef3f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5314ef-c0f9-4c44-9ce8-80228d5d510a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759f8832-fcd1-4053-80b2-814add590027",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8892e009-5747-47ca-99a9-985498d100cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc36805-f9de-4e77-80a8-cbc1aa54234f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d89414b-e02a-4152-a9e8-911b54d6bfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e111954-914f-4b8c-ae15-9d50261c40ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca9b67a-d418-4fd5-aaa0-9a60960b8fdc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00eae0d1-cc1a-40c0-ac2d-d351a3bff27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2797d28e-d2da-4af8-9eb5-97ec772cfd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb08de2-0b58-4039-9dd7-02af553cd10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc03ecd-d3c0-48a9-b6bc-736a70ab7855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81af1d6-b52e-4eda-b6c4-1826d60ed382",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7094082-9889-4871-847e-7c9268c40f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb0fef5-8315-44a4-ae8f-bcc6595f21ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a4ae82-8353-461e-9381-cc10923d67ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81103137-546b-4ceb-8caf-779b9b60936a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c782b5e0-3929-4d35-96c6-2bf9412a9885",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecba24a-c61c-4851-ab0f-468f1695f8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6fad2a-9bd0-48a1-ac42-a5868f05f855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1888da-a334-4abe-9b10-7a3a1b8d69ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bf7e1c-60ef-42a0-9dd7-92a330e8dfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b809fbe-b3b3-416e-9fb5-5782c2d54b00",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88552612-bd20-4bb4-ad05-1e51cbb379e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "237c2df3-2ef2-4c71-b1ff-4010c787474e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aceabaa0-5c17-4814-b50a-f065ce9f29ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb22dff9-42bb-49af-8d17-e78c349901fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afb5a0e-fb12-4939-ab9a-ee33bc625d0e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a388abae-b4ee-4bfd-8a88-8903bfc3c736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cbbfc6a-f385-40f8-8dc1-78ac16b7f159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a15832-3257-4b29-8f3e-b4d5c5805a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1707742c-4445-4d64-93c1-f9b4338725b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743fa510-e088-4a25-83c5-14e1fe1fd103",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2dde7a-9f8b-4b4e-956e-45bdfeefe33a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dac46917-d32a-44b5-9fbe-2e039fc64cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b9d18b-8fbd-4390-b7c5-78352e8b5597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2d00ef-d9b4-4c48-a4f2-6fb1aa2ca99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d52410-769a-4515-a161-ae2144eb0592",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5704bbe-c458-44bf-8187-c55aa79f26d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0b0dcc-58c5-4e7d-b50e-bb264770f5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e765b44-b891-4e83-8c01-2a9e31741ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14efbf24-7f32-4254-8f73-a8ab6a2f75b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eead6ab5-4aa9-4a7f-869b-b935956ea5a1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51965d0-9ba6-4274-be4e-a65d298e9a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6986cd-a45b-46f2-9937-8cadd39f843f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0516755-a32d-4471-91d2-3ad643e47d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71cdfe9-a052-4a60-a5e9-0abeddadf2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86f8756-e420-4967-a03f-cf1875051d9e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9207fc00-6776-463e-a46d-4750635613a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0c17566-c062-45b6-85d3-55ce6d910939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb82f2b-b646-46dd-be4a-2e3f525433cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a030ab1-564b-4d12-abdb-189c46a431f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2430d23f-601c-4f55-9af6-c63c91332a5d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5a14b8-9a62-471f-ae99-3ca687300100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddaa2793-ec8f-4d00-b8d6-a0d137d5a097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7eb4b9a-90b2-4bca-976f-caa767c958db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55779395-4211-41f1-9f28-6d7e33f53e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662d9b25-4550-4b8f-a102-d3b0bbf98a2a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7a877e-413b-4b09-b2c0-c37736b2b861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b324b7-fcb8-43ca-8410-29bae3e9453b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb00f957-f96b-4705-a943-0da8181fa5f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3108a232-c766-4351-ba7d-31419e1f337d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7d637c-5e4f-4f51-b6db-c69fbb60d91a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cc21b4-0324-48ef-b14d-1e6d0fb1a358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a471de-5e84-42f2-8618-eb2a675ee268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67c5bb2-42ae-4d80-b6da-da61c58a8eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea16d924-1fae-4120-92b4-2579328039ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de79ae2-bb51-4c02-a39c-fdc0100545ff",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81534027-ee29-4293-8ab3-f94ead919c9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f82e0d8-d24e-48b5-a4c3-c8ce761546e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8798fdc4-56d1-4ead-90bc-500b4aeeda3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a84ff1-4ca5-41a2-861e-a4ea0e4ef312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4802f5-1650-44d4-8f68-f5c1f8fba23f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc7285c-172e-452b-a532-76528d4b1543",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a13aef-9e65-4828-9587-9acd01c4905d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ad9fc9-535a-40ad-9564-058f9582bb44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8d6ada-6392-409f-9364-a05cbd9b43f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefcefc7-9a9c-4798-8c3b-6fa033de8a24",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93242c0b-7485-4c38-b09c-ee3419a49491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837814a8-4bbb-4379-9c4a-81395da88d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d7ce15-2692-4568-af0f-cd9ebe94665d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74c07b0-2013-49b0-8003-c977ddf8ee06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7975b2c-8a8c-4502-aef5-c54f101df73b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a37c625-efa5-41f7-8968-fd5ef3ad7e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab127618-295a-402d-969e-c2d48ab2d157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de45105f-6702-4c0d-8df4-3d5436475591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb28827d-a45f-47ee-8698-aaa8c6723fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbe939a-8da4-47a7-a83a-85147d0366b3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e2022a-0537-43f7-ad11-2f49041bb640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32394725-b52f-4498-9cfa-ef9a0591b85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1a8afb-7e66-4eff-9edc-6a8648037581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acdcb7a-4a81-453c-b41c-71914cd6201b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7e255d-1ce0-439c-8191-7ea3975868e6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7f76b4-9460-4624-b79d-4f1bca144f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931bfe7b-21da-4d83-abc8-14ee3bbf0167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6e4f81-014a-40ce-b342-82100947e06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68cfdf80-8d86-4508-9609-2ab4dacf3562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23336ddc-f9fe-4a25-bcb5-eee3c144ee42",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681ffe4a-e314-4ff0-9bd7-308dd0b868b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1450b681-4f1c-4c66-9019-3cae1e46034a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "030e27f3-aaf4-4696-a287-15a6f7697ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6c5b15-7299-4f33-a76b-fdc74b31b404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e4d3c4-0245-4b2d-9cc0-38fe611c7dce",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f752da7a-7233-481a-848a-947f8b55ac90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c9f147-0796-4582-9a6d-b05ad77628f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd045999-21c6-4df4-adf9-735f7f0b65ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9de31e-541e-47e5-be5b-7e62d58d4680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa5b683-7917-4abe-ac1d-e7e95e2ca0d6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6319005f-1fcc-4593-9b5e-fe0828ce8699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051dd302-d5c4-4c28-a747-e8aa074b36e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc16a77-6856-4b6d-b6ca-8cedebbf5111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa763a17-db62-420a-8328-8ff5b7d4a94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8b4bf2-bbeb-47ff-a017-2dc73fefb6dc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ef621f-afa3-4aad-8539-1fe069330019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00912c23-6128-40d8-a357-2de33cb9a7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e1a558-6d2c-4c52-b5f0-3124aafc3ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d5aae0-ef69-46c7-881c-a3bc50d86c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e02435-2efa-4e9a-ac89-3613e7aa4509",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0947b2-0cf3-4d3e-8ca7-fba4d6a65e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27293571-2d88-4169-a237-30ae45186f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df91ae9-0bcf-490a-a105-eebda05baef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0710576-2624-487a-857f-8e87e5e0b2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dd7537-4558-46e9-a5fc-279f97c9a3c1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96487deb-5426-467b-91fe-198cc21e4f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f55bd35-48f5-4aaa-a5d7-ad02fdf5933e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efcecf6-3af7-4565-941c-e85c929e45c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ca1726-fc9f-437f-a6e6-f8bf6a586705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c05818-1844-44c2-8bfe-d55fe480c769",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604dd993-a321-479a-b968-1af2c485589c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4174dcb8-ff63-4633-bf8c-27ecf791f0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987060cc-c91f-4345-a1fd-69af07f72b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1a840d-666a-4bb3-a3e5-997a1a8610ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e20e255-ed6c-4663-b9fa-e675f5926cbb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5950f0c1-9f3f-492e-99cf-2152ad970501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c775d9c-c2da-4ccd-891e-4ea90aeb154d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14643b67-94bd-4a50-b750-b4468dd5862e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de63a966-ced4-4d3c-aab3-c3ac311980f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de62f2f2-f208-4a84-ba19-3d34fafaa99b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13464b76-e520-41e9-8957-8e82d03da355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088cb8a4-e727-4f4e-82ec-5943fb28404f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a6681c-a30e-4a36-b222-a6263bb9134d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782f9c19-b696-402c-9763-f87da1f93f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cece8f10-f96e-48ae-aa39-588d86b4832f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e30d2c7-e070-49dd-b5b7-cb46e58addac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f7a168-411f-498a-a0a7-6ee19a96605a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9469df19-d383-4661-af62-eb3eec65553c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2e9bef-31e7-40d7-90e8-31999d4c9d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd655ed4-d25b-4d4d-83ae-7eb8242cf191",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd58ad0b-91a8-4895-8063-cb56940ef693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9005dacd-00a9-4803-8f6c-34d82595f4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1005f2-4526-4f4c-b114-a274de02502c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a2274b-a5f6-4d6a-bb36-ccfceef66a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91b12ff-3a48-4d26-88ae-315cad554921",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a696aeb-779d-4064-8203-46f79ea38b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a022d30b-8073-477e-90d1-dbef9a6fea09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a23d54-5bae-4b65-8d11-b50391278dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01779e71-880c-41cc-8b59-00addcb6fb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac6ac9e-b657-4172-a09e-69f769cf9497",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8125da7-f8db-4bc3-92e8-4eb1b07a6313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56debb7-40b4-4036-9202-47cc6ad17913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c953315-33de-480f-8a70-291e2ef942ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3412f170-a524-4c5d-8f00-fecdb899e4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b188e18-3cdb-4ef5-9882-998acc9f685d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f95522-5416-4bfc-b464-45a878130331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acdbab0-1118-4d23-af5a-8a63913d2c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9733f162-a251-4e28-80fe-f7f7d9a86450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18994b49-f948-466a-9955-589fe0891abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5043d7f0-2e70-4d53-b64b-d407c143b631",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba550b6-b44d-42a5-9cd7-3f86c01d3ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a52a075-edf2-4c2a-bf07-aff953a6d984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7e2b19-e38d-4d50-9f27-6d5b5a5dc3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c68b87-5c5d-48d8-9a7e-f6dfc22ff807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d9504e-aa08-43dc-9955-ac476fa13aa1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d00552-afb0-4096-bbfa-5a5771e039d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0332fe-8773-4861-a9cd-e8be8f0f41a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec54ae5c-41e3-4b4d-ab12-2cde3d995fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c90b93-6826-4c35-86c6-caa9cd516016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8dd98e-299d-4dd4-b9fe-4bd792d4331d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184327b9-c3e8-4d9c-af0b-de47adada7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc53f62-f756-4ff5-8247-ca52ee8fa927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a469b08c-4943-4de9-aab7-cd87f1f6851c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9d9c52-f357-4ce0-8694-2cf1985eefda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b1b8b5-4768-4c81-ab37-103b5985fef1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4eec0c6-8cb6-4468-9924-b1ae93d30d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ea7535-5ddc-47d0-b8ac-729246bfa7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa6a251-b1cc-453f-9673-41812df9aa22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608b772b-fbc1-4be0-bb41-d529921646b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cf820c-ef0a-42f4-9f97-1b4d651eb1fd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e238e1a-5204-4762-a727-b3afe2880fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ba3050-5670-41c3-a8b4-8c31ffa8cffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8745003b-07db-4214-a94f-93ebd9369d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57f60b2-9853-483c-8fd9-f18f7236df0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204bdb1c-5e2d-44c5-b4b3-b5537ab321f2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c32e0c6-26ab-4db1-9c00-5e692f134310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17470bd6-640e-41f8-b94f-e84f130d4fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323d2049-c85e-4690-86cc-bfc17a3d42dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dffb70-a845-4e4a-91f4-6894895814af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba56317-179e-406c-ae0a-c132f54d23a7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0401162-0d85-47db-b029-7780e8db577b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed9777b-4c48-4450-a00b-e342ce3c298f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d031883c-8b22-4a8e-9919-ccb6032e557e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb3be6f-5c3b-48a4-9ee7-bb6edc62c0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e0e581-6f13-4bec-890b-f0e1b33008e0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bef18b-1187-4c44-bbb6-032e25f52d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3369a673-88e6-4c92-bb91-e3919f5a1cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf82cc53-43ad-4001-8809-62f819742774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09921421-064a-49dc-a382-4f780466077f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf562798-aab9-4aa9-beab-66a5706d494b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67501f0-d9f8-4c7a-9a72-be34d54cb2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9390c3b0-5e42-4810-afbd-832387757b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a37f3a3-466c-43b3-9a6a-d74d5ba1a8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba9a05e-038d-4b9f-b83b-2fe1257d16b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8d3801-9dd0-490c-9333-fa9b40689ba1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491acc74-12ef-4026-bc10-0f606163205d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aaa5736-0811-43c8-ae1b-2385a780f9e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffd604c-895a-49f8-a2ad-bbfc5a5d0711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ca7740-9a86-48d1-910a-5c53f694f020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9544c345-5e84-4ed0-a277-43affb2833de",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a4437d-bbd5-48da-9fd6-1de0780482da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f806bc8-53c1-46e1-86f4-a81b8269543d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e44e00-4470-4d55-965c-1e74f5de6fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52752158-f1fe-4cc7-bd65-4e2ad8095335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef878afb-9fbb-46aa-a1f0-01eb5759062a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d045ac08-3697-4ebf-9401-761415b9ad3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4d9279-ec6b-4261-a7d1-68e0eefac81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb8c54e-802b-4f84-9a89-68e257b71177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020208db-4b11-4619-a91f-e3ff82307d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec954c0-9bf2-44d9-b7b7-307c7fde3805",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2baf071-282f-49f6-8c4c-8f55ce765651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d67c3bbb-71c4-41c4-9f94-8b05e0f9527a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e41ead-b015-4dca-bcaa-7a4189318f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564cd778-97de-4e8a-9ca5-22cb45d7b95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a2aae2-85c5-4685-9709-9d9672e336aa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700f8160-2e23-4f4f-9e6c-756b9b743722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b250de9-d787-40a2-bd03-82a64b3aefbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24218db2-99d8-4faa-9692-105b08d33b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f222842-dd77-416c-bb1c-01f778fc11c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea1ebad-a867-4f9c-b338-584ba2bc3baf",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fb1f09-3349-4c9d-bd30-009c771b97cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b847987-2228-4ca7-9121-87e4247a9ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb7f02c-e6d5-4b31-b74e-e3301ac8ca8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfa107b-d315-4111-9b40-11a57864ffe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ec46c5-a3ec-44ae-b569-f7d4981c437b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c516621d-234c-4873-a610-c85ff6634c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "187121bd-e122-4249-ac76-641f83565542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9e9627-3cdb-4f62-a1fe-bb180771dc6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c20f2e-2088-4aac-91bb-3c8d6e409369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9b6ad2-2a04-4036-84b1-ced045b1cabd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc16e61-128a-4b79-a9e5-46f68890464f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75289af0-5d60-4c14-83ce-d69d36a37188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0cac04-442a-443c-8da0-6feaba6b6e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eedd5ac3-9cfd-4330-a0e6-9658c4a29dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8543302-a84e-4507-ae65-61d47dd6c949",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccf4947-ec33-481d-93be-04b56850a2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d7301f-722c-4067-9a4b-f3ba65f34447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a750a4-5b04-4eba-9252-d71aead96a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f25d6d0-cec1-4479-8184-8c0878836f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bc9252-93fc-42a6-8eed-65ee2f3fdfcc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7441d47b-892a-467d-aecb-db712ce021cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff640e5-3dba-4e37-a3fc-0407d499154c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90871a9-a54f-4101-85b4-14f850df6599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ad321e-05b3-4e5d-b511-3d5beedeced0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff810fbd-af48-4d65-814e-30484c0a2219",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17100f5a-79f5-4d6f-a187-b77997427215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e518a22b-ea02-4ca5-a52a-4b8159e84ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e748d7-cc53-45ea-82b9-936499f9f439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0666742-4eff-461f-a5e5-ed9a1a8ffde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d032d3-34f2-4f6b-bb80-6131ad21fe31",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc890ca-89a8-442d-a355-966cedccfba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33fe729d-0173-4a7d-9446-eed914a3a1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfb817d-2981-4542-ac6a-a92653ec94c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99e703b-58a6-48b0-acf3-8a6d2690ea98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aef390-10d6-438f-963f-5a8752a2631e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9564a47-1983-4e65-95d3-705d87d4226d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12506a53-8b69-4009-852c-1f862c9eeda2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486a9ff2-24e1-47f3-8291-780b52e21872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4e7d81-e882-4d35-9e3e-f1edd8a2bda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf4e395-9b78-4a33-b804-1e95de7bd020",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71ca158-b658-413d-b700-bd8212237d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f4859f-1890-47ec-8cf8-7f5f8e1fbc9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c00993-4e34-4ba2-9c4f-9007d21b7620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2ddfeb-008b-41ae-8220-a7462deaef56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7873eb2c-2b43-459c-81af-9f2ed7236de3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848233d5-8f1f-423c-a185-fa3fc4398e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "645f1000-51c8-4c62-8996-24e994eb81f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8457c321-ed4f-4916-b9eb-bfad7c8240a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e4d1bc-54a3-4c74-be39-07a6a4c29830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479094e9-aaca-499d-89dd-c022ce46a0f2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc366596-0d0f-4230-9fa2-975e1a0be5b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06ae8a35-d382-4214-a58f-334da30dd9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bd3528-617e-42aa-a111-d14d9ad85044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb88412f-f37f-4906-b59b-c1e227154834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eb4e2d-3a0c-4e57-9cce-13d876d2e8bf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213343fe-0aad-4a8a-a59a-74fc0ac93de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b71e1d60-7b3c-46be-984f-79f5cfd634d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4917062c-84cf-4fa9-b920-2d475f2a48ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98ecd21-9226-4eef-b323-603a452f638d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857266ef-9bdf-4f05-832c-a72e5dba6719",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d034587c-22cf-44be-b9cd-18dd0b26ba85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2daf0102-123a-47ea-9b5e-676a62066b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c587885-2c35-47f4-bb62-ba41ca877c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658dd6be-618c-4f36-af3c-9727ad395822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4555c2fc-cd43-49b0-ae66-83cde2cd15a6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490a5e07-d99a-436c-9546-fb38676f24d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce06f5f-c30b-44b8-b1e3-457a8304594e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5718f6e3-054b-4268-991b-9798f3628378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a97d93b-3a6d-460e-9c4c-c5412bf94c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5de7b47-f5ec-4a7c-bc0a-880a68e1ddd3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba40fe1-98b5-455c-bfa1-8adb6a1d3ea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdf30448-67af-44d1-89b9-35d94abcea40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eb7c36-400a-4882-9798-747aabdd4475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565ae612-7dc8-4b36-b6fa-4d8483b238af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2253a8f-109e-496f-8acf-b721fa945868",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c1104f-8810-40bf-87e6-bf08241e7864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0aceb6f-14d6-474d-9d60-241cfbfebeb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c8aa51-c494-4274-bf79-a539e3c219a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8a6099-34e5-414b-82fa-475ef6d02474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58102eaa-bc36-444b-8f86-700bb647c402",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930b34ea-305c-4b7e-bedf-eeb3b7815a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d88d35eb-2e22-482b-a8b0-36b27ee8dc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d590ef67-e04b-45a0-b999-574e6a563761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649fe200-a636-41b8-b4dc-f4c381b92b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbf9837-ce2c-494f-94a0-bec41abe1481",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf5f2d8-8140-4d11-920d-8817da94e206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb2b9d7-bdc9-4a87-9e72-b20a29e310a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c41a132-ad1f-4397-8e93-dfbf562a297b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb3c0b5-950c-40dc-8613-f38a2aeda319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c707594f-8e14-4c31-987b-3a41a8b891e8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5c1315-101b-4af9-8b1f-7d0141cf3ed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cd8d635-611f-4438-bad0-d3acb79167bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60003530-4301-4918-bfdc-c7063412b042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d68f04-6c2d-4285-a4ee-f63fb7e76d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60861666-aae6-4b95-8166-6fea237705d2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e891ff4f-09c8-4bbb-89cd-e8262fc67ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a88f92-2784-4ec1-adb3-37e1a46b8d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfee440c-04bb-41ab-945c-3a40dc7ded30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ceb81d-fd54-4fc7-ac19-17ebb55c8248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad38d9a-b7e9-4654-a463-647071403ed9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db9a91d-cb27-4603-9fc1-abfa355bc989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc4552a-0ecb-4dcf-85bb-f8893484378b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2086bbb8-581c-44a7-a6bd-24bf49e75084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3e5d41-aeb2-4a9a-9bbe-d9b28b2b258a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28941b70-a4d0-473d-8b59-4ffa3b792294",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d4cf34-bebd-4d16-9b44-6a12396233fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d349dfe-b67d-4775-9f97-30d20b45b767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae3e75a-b74c-4ac5-be25-84b45099ba23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdd4f92-4506-402e-894f-89bb805d7e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba23574-c259-4420-a914-b004275707a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad79ff63-8f1e-4495-8fcc-76ccfd69e1af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6051f017-3a4e-481a-bda4-6f149a0407a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584bed78-f4f0-4bf4-bf9d-560e94dcc6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be756ac6-e644-4add-812a-9069b0c2a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a8e783-ae11-4983-a3db-2f98d6163678",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfead4d-5c37-40e8-ab05-94bee049cb72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6d66df-6a18-4653-b8bf-6476bf648023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5340f9-d9d0-4237-bfe5-cae23463c571",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e61acf-24d5-428e-bbec-57c0fa83d870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe4b211-e967-4946-9798-ad47448419e4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c74f97a-f49e-4c00-a899-3ecb517e9af8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0908d22-289a-4332-bc6f-e3923775d6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8623785-44aa-4989-9eb6-01c20a8da033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266e8116-b9f1-4825-bda3-96e26a74144e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76506cbf-7672-437a-b456-a96e1f829bb3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c929585-0426-42ca-9847-f2630ce38af2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817aba18-80fb-4b4c-9fb7-29df0d14056b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cdc966-06af-409e-9d8f-c899168a7afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ee856b-8e1d-4678-996e-0d7ce0981ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446c3d85-66b9-49b6-aa41-a13b47458a6f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f4a2ab-2f8c-4d33-9e77-e6cfe29516dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8f58443-46ba-4710-8fa9-4add526847bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1d2224-a8bf-489a-b30f-36a30f39e092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1484d69-5551-4442-bd32-a9cd6cc17514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87d1ae1-9eff-4759-8a0f-2914d7ec06cb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e058cdd-94b3-446f-9dc1-d0a00582559d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a2cc4cb-21b3-4b1a-ad6d-d0373eb18f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8840fe6-21d3-4eef-95af-1ea5a81f390c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adda455-0f57-44ed-bacc-366da250e831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146fac69-b356-4626-a7e4-2168ef127a7c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669e6535-2644-4137-94cd-4a394e9ef114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "165ac345-e7fc-4d2e-bf39-c41d5ec9bc57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d02423-06f7-4cb1-abeb-564e7d041d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1e21d4-27b2-45ee-975a-14c23bc0f801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8ee0f6-0851-4ea0-94f7-786a81ebe2dc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47e4dcf-2b93-4d15-b406-1df306a27963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27b11f3c-2d13-45d4-ab82-9bb41a98d21b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b38867c-8124-40c2-8041-bd55969996c5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2120b765-4cba-48aa-9053-da06feef8b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d1457a-d308-4aec-9ade-a564984c1f37",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c88a3c-5999-4f39-b1c7-7b1fb82ac603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "712673cc-40da-42b0-b707-8ca3ed092522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5a92ec-dbc6-4ba0-8c17-83e4306efa2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e69b9a-59ab-4fcd-9f8b-89a72eb473f3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7446a4f9-c048-41a6-8c74-e9296710f2ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8281f5a5-7f84-4de2-be53-488c0906f52b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2c07a9d-dc52-4800-9fa1-7d060351b0c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "650fc189-c39d-4e93-9638-7c61e93d0729"
                    }
                  }
                ]
              },
              {
                "id": "be37e83d-a4f4-47d9-9e05-eda5e273a2ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b27c638a-98d1-40a1-a06c-5036362575e3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11dbcf9-636c-43d9-a601-50a0414f4ff2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a4f3b615-f6c6-4ea8-901d-63f67c2faa95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d59e468-979a-449e-b96b-a14b1ccf15f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d41b6683-a2fc-44e6-a229-b9b5fee2b039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd567359-6972-41c0-aa77-552ba9cd987b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8e8b9a-9713-40eb-aef5-3d15882f9ccd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f486bc24-0157-476b-ab8f-feefa7d7d6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a8e660-adf8-4f9e-b731-9fe394d99a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b39b9883-26d7-4f85-b429-5fbe81349e2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71b046a5-22de-4572-b899-aa1e1ae2cfe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8f8926c-9261-4015-b5c5-0a88e38b51d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1f0276a-9731-4fbb-90ea-79c1d53101fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cb203d3-9743-4761-847b-a1b4273c7ee5"
                    }
                  }
                ]
              },
              {
                "id": "19f9c3ae-f26e-47ff-bfb9-487686fb370c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9d2177ab-55fd-4b14-a1f4-9aa546a07fc5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2d5532-ed6f-426e-bac5-e9e940b96df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fea58926-f921-49de-9c69-9f269b0d563d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d82b3bf-9701-4c59-989b-3b55557fb3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8829a8f-779a-4a71-9c55-8fd6dfb5208a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2b5b99f9-4e0b-4cca-82b3-3a19d8e403f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab9ce024-c238-4eca-b66e-6d27584f8364",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "609f6689-8cbc-4ad1-aa7a-6fd0f1690f5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d01ce93-c335-4df6-8617-0999389887af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a8d53db-cafe-4f66-85aa-eac3d007e959",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "680f84de-3a59-4b67-887a-1f6caa47dab1"
                    }
                  }
                ]
              },
              {
                "id": "3d23ab50-048f-4369-8930-f6a2540503a3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24375a16-4a63-4ba4-9071-aa7265c922ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "38e661e5-f28b-4561-893f-1e71b23af089"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40c103b0-bc12-4d9c-a3ee-4cb34dd641a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58b71486-76cc-4cba-afa3-c2ea74e0c560"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7be0a4e5-1de7-4c51-a8a0-b00482d57f56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e2ee19ab-a8cf-4411-ba75-a21e57a86dd5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7637d53-4ac9-41ac-bbf8-1c248cd039f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de9466e2-fc74-4cf8-896d-b0ccd793e31d"
            }
          }
        ]
      },
      {
        "id": "13fa22f0-74a4-420b-8e72-39ddacb4f1a8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8227b46a-eb10-4813-9853-65a64117a215",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7abe69b-d916-4e34-9377-264b720c8cad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2b25e7-239e-4bdb-b8fc-d6995e0037be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b8fbb73-ee61-4b07-a47e-68da347c3339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4d2074-0a2d-4757-aa46-612039fa72ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb8ad55d-5c24-453c-beca-d1e1ed01ddd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dc8693-ac36-4fe0-9d16-cb1ac9eb1d80",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ed9915-03ab-406e-92c7-24249649ecd1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d220ec30-fa78-4f67-9d52-b63bd4cd1ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403d128c-4bed-4071-abcc-31665dd248bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4272cff-29ab-41c3-9508-0a837aa386fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33458465-3c07-4313-9386-452737783da6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a642834-5a28-4a11-b500-a8bd5d907f78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "138a0061-92b6-42c2-bf80-09b0c3c598d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09fb8e1a-6c93-4667-884c-0d14c89243e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e837a7ee-283e-40b8-a343-a3186bb2b61c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3c0397c2-ebfd-4f3a-9d9f-27c157295158"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11d281ac-db60-4a42-ba55-0935eb96cb82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "985deda5-a629-4511-9784-92e413e215b2"
            }
          }
        ]
      },
      {
        "id": "dc9fb3bd-fb4a-4703-a4b9-8c44e6fbe673",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "49fe13b6-be5d-4517-ba15-d13b4bf4f089",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4669c841-c525-4177-bd2c-6973ebaa0ef9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e731286-c7f1-4947-b346-8c80d4e01ce0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9447dd-da0e-4ad0-ab8e-1a1e1089085c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f043df2-b1bd-4b26-b926-46d8dbd0c23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1eb711-a7f2-49c3-8d78-7506e2576fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0ad6774-f18f-4df6-b322-c13bc9f74a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de18ec2-5dab-4bf7-b013-5614b1f8539f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed5d928-6dbf-41cb-bdd9-a7806ac58144",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "60878480-edf5-423f-a097-c80f3100e470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d1bb3e-28ae-431e-855d-703302f00e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2548c60d-c8b9-460d-b1b4-8af797ef93dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0934c5b-7d5c-45c7-9142-c121588c288f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f714e3c-321a-4b3c-b9e4-197feab3e67e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bad3149f-d163-4254-b86b-81fcec5b0ebf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5de517b-dbea-41a1-9c37-e237224c28da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c59b41f-cee5-4cb6-9fac-11e694b6918f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf1527d2-2e34-41da-85e8-37dabff9c054"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df258105-2f6c-4140-ae40-4f4520dfb406",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "838e809b-d0b4-42c3-a5e8-fb61207b6cc8"
            }
          }
        ]
      },
      {
        "id": "02fe72ed-22e5-495d-a21f-1ae0f77252ef",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b75c2eef-c3d9-48a7-b750-53ca80dccdb9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7033cf0f-bf72-4694-8f4f-dbe1cf0bac40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34b5234e-ef5e-4768-b1e3-ab377868216c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f61b1ed-6f44-4212-b386-f421a5d0b6b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a99395c1-c859-4eb2-862a-f44bc2fd06ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ba8a94-9fc4-4067-9e9f-5f7ea5939c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c4f5659-00d9-4a4f-bdc6-4fce36c9c9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c1e11e-c00c-40fe-b66a-7fbbc12b1cbf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc2e566-9a57-4b63-aa22-e791b59ee32f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "311d1d2c-6084-43cd-a87f-8b96e4028ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bacb860-cc3d-41b3-9ff4-dc398b063ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6aeda50d-875d-4dc7-ab19-8ac6f59ae94d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df0e1cd5-145e-4377-80b5-aa058c9508b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bea3c663-7627-4592-975f-6e90c04e1196"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7641654-12b0-4dc3-a4e3-1ae9fb750a98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bead70b-e44c-4f43-b2c2-91b5dc447da0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "733cc870-bcd4-4029-a0b2-dd586ccf3b2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b922b479-e059-42c9-8813-108104cb2523"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ed708fd-6002-413b-9551-5cae6e6497a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26721ae8-f4eb-4615-ad23-5dc5c5f4caf4"
            }
          }
        ]
      },
      {
        "id": "335b137a-e249-4eed-8f97-85980f845c98",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d591d5de-52f0-439a-93f5-fbc50e2d6070",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8292f71d-b0ef-421c-8cec-bb6608c1f139",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a7134e71-f8f7-4b08-b2cc-595e89ec6688",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "febccd29-fec0-479c-88ef-1bf987c3dbec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7c45641-e1fa-45bb-bb5f-8ef851caebd1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 293.4461538461539,
      "responseMin": 10,
      "responseMax": 6980,
      "responseSd": 864.6222390913616,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684024728418,
      "completed": 1684024815349
    },
    "executions": [
      {
        "id": "adefc7cb-3c39-41b2-aaed-b3872562cdc5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9bfc7a33-a50f-4853-a1d1-0aaebd4e308a",
          "httpRequestId": "d8c04741-6ab6-4463-bc13-7a0be330d99d"
        },
        "item": {
          "id": "adefc7cb-3c39-41b2-aaed-b3872562cdc5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c4372bdd-6806-4db9-a6e2-aafa7820b30a",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "3490e97c-adf8-49bd-88d8-a5dd7d3878a7",
        "cursor": {
          "ref": "18f21041-45c2-4df7-be74-6d078411a5ba",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8bddb010-777f-40d3-9948-ac34088fbfe2"
        },
        "item": {
          "id": "3490e97c-adf8-49bd-88d8-a5dd7d3878a7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bfa7e629-96fa-45a5-bbc5-65d8547f33d0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c54f2ee3-46be-4f62-affe-52abcf024261",
        "cursor": {
          "ref": "afabef16-d838-4b9f-9432-ea408c6a4785",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ee378b8-7b03-474c-a94d-4247560dc008"
        },
        "item": {
          "id": "c54f2ee3-46be-4f62-affe-52abcf024261",
          "name": "did_json"
        },
        "response": {
          "id": "70a137ae-7107-457e-9447-a1db97cb8dc5",
          "status": "OK",
          "code": 200,
          "responseTime": 626,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20091cc5-fead-40b6-adf4-13e85b5fc90f",
        "cursor": {
          "ref": "8671f1f1-3e2b-4cd7-9584-45f3eaca49a4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "46553284-aa57-4c92-aba2-36f9ecec784c"
        },
        "item": {
          "id": "20091cc5-fead-40b6-adf4-13e85b5fc90f",
          "name": "did:invalid"
        },
        "response": {
          "id": "01e73e32-0a90-4383-8f36-092d62b4498d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4026,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "20091cc5-fead-40b6-adf4-13e85b5fc90f",
        "cursor": {
          "ref": "8671f1f1-3e2b-4cd7-9584-45f3eaca49a4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "46553284-aa57-4c92-aba2-36f9ecec784c"
        },
        "item": {
          "id": "20091cc5-fead-40b6-adf4-13e85b5fc90f",
          "name": "did:invalid"
        },
        "response": {
          "id": "01e73e32-0a90-4383-8f36-092d62b4498d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4026,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1d630a20-4c43-47f7-8294-11e4356e0884",
        "cursor": {
          "ref": "5e12996b-bdb5-47fd-9f80-36a3f0265d9c",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b19e7ba-8ac5-42df-a4b2-d72e621048e8"
        },
        "item": {
          "id": "1d630a20-4c43-47f7-8294-11e4356e0884",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "02bda878-8ea3-4849-a895-745bfbce2828",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b9edae-2409-48ff-a31d-a23fee8bcb21",
        "cursor": {
          "ref": "7b194b4d-4613-4753-affc-f99324fedc80",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e47ea09b-8d45-4868-880f-d76dc9f17af7"
        },
        "item": {
          "id": "15b9edae-2409-48ff-a31d-a23fee8bcb21",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c2242ddf-7fec-42a3-8d63-03ed8cc76815",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c83fc4-78bd-49cb-97d5-e8b16b607ecf",
        "cursor": {
          "ref": "c16c819f-985a-4b58-8b73-54a60f2ad8a6",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3be4964d-2d1a-4670-b870-2dda071235aa"
        },
        "item": {
          "id": "b2c83fc4-78bd-49cb-97d5-e8b16b607ecf",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cf193cbb-e1a0-4d08-8bf8-f3df63b20de6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b4fcb267-ffb8-471c-9aab-d1b13ea3f466",
        "cursor": {
          "ref": "2e443646-4b79-4a70-9e72-c3c54c9ee19a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84e940b1-de74-4064-8d05-9278699f7039"
        },
        "item": {
          "id": "b4fcb267-ffb8-471c-9aab-d1b13ea3f466",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b3c8ceab-18b1-4b80-99ab-4a4b8f4d0360",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b4fcb267-ffb8-471c-9aab-d1b13ea3f466",
        "cursor": {
          "ref": "2e443646-4b79-4a70-9e72-c3c54c9ee19a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84e940b1-de74-4064-8d05-9278699f7039"
        },
        "item": {
          "id": "b4fcb267-ffb8-471c-9aab-d1b13ea3f466",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b3c8ceab-18b1-4b80-99ab-4a4b8f4d0360",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2ff6fd3d-276a-4c20-83db-c55c2fb44102",
        "cursor": {
          "ref": "c1e081c8-0fcb-4e77-b407-446be33a7129",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5c1a5393-78c7-4fd5-ad92-4108cbe9e4f9"
        },
        "item": {
          "id": "2ff6fd3d-276a-4c20-83db-c55c2fb44102",
          "name": "identifiers"
        },
        "response": {
          "id": "ce875e38-091b-47c6-b465-d3c47c070cc4",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ba9c68-4b28-4609-a09e-bf12b8d2e9be",
        "cursor": {
          "ref": "06f5bb8f-7ddb-4bdd-b29e-308983475243",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8ac533ea-36dc-48c4-af45-c4f23f051dc2"
        },
        "item": {
          "id": "09ba9c68-4b28-4609-a09e-bf12b8d2e9be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b89d8f65-5419-48fd-b55f-46aa7b778cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ba9c68-4b28-4609-a09e-bf12b8d2e9be",
        "cursor": {
          "ref": "06f5bb8f-7ddb-4bdd-b29e-308983475243",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8ac533ea-36dc-48c4-af45-c4f23f051dc2"
        },
        "item": {
          "id": "09ba9c68-4b28-4609-a09e-bf12b8d2e9be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b89d8f65-5419-48fd-b55f-46aa7b778cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98ffcff-cd46-421b-835c-ee7befb2b1a7",
        "cursor": {
          "ref": "8365780f-6af9-449d-9a71-d84e1be16be4",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "12ba5d0a-5d8c-4f7d-a0b2-414985d9e547"
        },
        "item": {
          "id": "b98ffcff-cd46-421b-835c-ee7befb2b1a7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "960a1388-c9bb-4c9b-9ebf-ace736218b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32704dce-7623-45da-8801-96876c1676bb",
        "cursor": {
          "ref": "6e70e922-761d-4598-bc18-6ede1bac9737",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "97e4a55b-8dc1-4060-95c9-b68ca9761018"
        },
        "item": {
          "id": "32704dce-7623-45da-8801-96876c1676bb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "77c058a2-8df9-4e29-89a6-3d489b3eea12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5a9244-3d9e-45eb-a9ac-ec1856eeb5dc",
        "cursor": {
          "ref": "3462d4cf-aec8-4905-83c3-fd5df0f2213c",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "43cf571c-32e3-4def-b080-a7fad9492866"
        },
        "item": {
          "id": "aa5a9244-3d9e-45eb-a9ac-ec1856eeb5dc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5e946f4d-5bf0-4979-847c-44e9d5f122e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405021ab-aae9-410a-b769-525d51004a11",
        "cursor": {
          "ref": "098d67cd-5d36-4209-b9eb-e95efe595637",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2ff64597-0060-471c-8e68-9f07b353ef9a"
        },
        "item": {
          "id": "405021ab-aae9-410a-b769-525d51004a11",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6ba25ad0-54ba-4fd7-baaf-171cf2eb7fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1481b3b-e246-4421-9607-1d831dba94e5",
        "cursor": {
          "ref": "a29e68cf-46d6-49cc-ae2c-7ef94a313a30",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4e3b99f9-92c7-478e-bd71-66140b2c255f"
        },
        "item": {
          "id": "c1481b3b-e246-4421-9607-1d831dba94e5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bef964c7-213f-43b4-8adf-08467dc5692d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8843d59c-51ef-4c4e-84e9-a2da7a9432ca",
        "cursor": {
          "ref": "82561101-8c31-47bf-b6dc-6ff4ae647005",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6669834a-63a0-49c0-b006-85b15cb83ae5"
        },
        "item": {
          "id": "8843d59c-51ef-4c4e-84e9-a2da7a9432ca",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2214c559-5139-4a6b-8c8b-59c1c720287d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceddfa9-e702-446f-8522-9dd74ce89cd4",
        "cursor": {
          "ref": "26e8e2bc-c937-4efe-9f79-5d46f498ac42",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "42b17942-f983-4f12-aa02-4389a9cff9ee"
        },
        "item": {
          "id": "6ceddfa9-e702-446f-8522-9dd74ce89cd4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "93cb355c-24b8-43cf-b67c-acbc3708d934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497f765f-2c82-4eb3-87cf-e54c10c100f4",
        "cursor": {
          "ref": "a64d2036-7ffd-4b2c-9f5a-2b035a2ed223",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0cc39a1a-c546-49ce-9ea8-d89fe69cf47e"
        },
        "item": {
          "id": "497f765f-2c82-4eb3-87cf-e54c10c100f4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fe7c61ab-d820-4ab6-a084-6304134fde99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b28b4b1-5a44-48fd-9411-3f9f33242e69",
        "cursor": {
          "ref": "58127069-1260-480c-b8db-f3ef0402b940",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "82133b3e-69c9-481a-9b2a-9149bb1c5563"
        },
        "item": {
          "id": "4b28b4b1-5a44-48fd-9411-3f9f33242e69",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "df86c136-552d-4d02-8151-941c0612bd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b485b30c-23d3-4e23-811e-5b88afa785af",
        "cursor": {
          "ref": "2ce6dbd4-7895-4d38-b69a-7e23398c41d1",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4772ddc6-61ef-4601-9294-5191069c258b"
        },
        "item": {
          "id": "b485b30c-23d3-4e23-811e-5b88afa785af",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "323d9261-7583-47db-9c5a-93510f93ea29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9dbb92-02e1-4192-9c90-94c07dc151ad",
        "cursor": {
          "ref": "bc41854e-436d-46e4-93e5-e702f876412e",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9130b43e-bbd0-40a8-8294-dd6f9987bf6b"
        },
        "item": {
          "id": "6e9dbb92-02e1-4192-9c90-94c07dc151ad",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3d3abf44-fc4c-43ce-8cd4-e16dcc957f1a",
          "status": "Created",
          "code": 201,
          "responseTime": 1100,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c6a34a0e-159a-4331-aa3b-4f1d5c43bb04",
        "cursor": {
          "ref": "773f2ea9-fc21-4423-994b-ded5908900ee",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e133da85-0799-4978-9bb4-f5e25b353b01"
        },
        "item": {
          "id": "c6a34a0e-159a-4331-aa3b-4f1d5c43bb04",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6c3553e8-346e-45e3-9fa8-7c2a91bc93e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d00b12b-705c-46b6-a008-ab70a4f81965",
        "cursor": {
          "ref": "8061ea0a-c9b0-4989-9859-3263097ef824",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c32bfccd-a3d4-47cb-ab3b-b2e64bfb5f08"
        },
        "item": {
          "id": "5d00b12b-705c-46b6-a008-ab70a4f81965",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "eb7ef48c-a079-4d87-b047-f59c9768db3c",
          "status": "Created",
          "code": 201,
          "responseTime": 5885,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "aeb9fc1b-9e3b-40b5-b02c-0e8e6d7d2726",
        "cursor": {
          "ref": "31b0c5db-f285-46d9-b767-498a03c16a72",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "433f2537-b588-4bd6-b8ce-0d943015dcf0"
        },
        "item": {
          "id": "aeb9fc1b-9e3b-40b5-b02c-0e8e6d7d2726",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "382223ff-c2cc-4031-93d4-1d7967eb8d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e253847e-bc37-4ef5-90be-edab58e97d5a",
        "cursor": {
          "ref": "51582723-7233-44d1-a630-caf32801ae6b",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f90a10e5-b2d0-4bab-8e0d-aa138975b759"
        },
        "item": {
          "id": "e253847e-bc37-4ef5-90be-edab58e97d5a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1e034857-8461-4ecf-a182-b02b4a0867ec",
          "status": "Created",
          "code": 201,
          "responseTime": 4646,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1b92f09b-480d-4a95-8699-76eb17921d00",
        "cursor": {
          "ref": "85a425c1-896e-4538-83d3-db43153b1c49",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "294bfabd-aca0-42f3-a12e-a3cf60fdc4b3"
        },
        "item": {
          "id": "1b92f09b-480d-4a95-8699-76eb17921d00",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bd59e303-49c4-4739-935d-1abf9108f31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773a00f9-ca50-44fe-a4f0-fb67ca6e0f69",
        "cursor": {
          "ref": "7dfa2935-b768-497c-8dbb-bd5153d382ee",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "628e6dc3-199d-49cc-a4f8-5465ed892973"
        },
        "item": {
          "id": "773a00f9-ca50-44fe-a4f0-fb67ca6e0f69",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "04281c28-380c-4474-9aa3-fea329e717c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e594592-7cf8-4e55-b2ec-69203a960ada",
        "cursor": {
          "ref": "df63aaa9-436f-4cdf-8269-eb98d7c4dbe3",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3a977760-9a23-4600-bb01-3250d7bea567"
        },
        "item": {
          "id": "7e594592-7cf8-4e55-b2ec-69203a960ada",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f4468b23-b144-4f7f-a379-90bdb22549f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f12078-e4d4-479e-bc0d-fb6387943616",
        "cursor": {
          "ref": "875f115d-4bee-4191-baa5-f5910edd3f8b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "63345de4-04fd-46f9-a92e-e4dd7f2d7fa3"
        },
        "item": {
          "id": "a1f12078-e4d4-479e-bc0d-fb6387943616",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "44726492-1381-4d43-9d07-4aed509c72b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fb4333-b608-4970-b860-2522b72c57ef",
        "cursor": {
          "ref": "9912f2a6-12a7-4c24-b252-14d7838332e8",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "16a734b9-cfed-4dea-b166-0fea15734f2e"
        },
        "item": {
          "id": "98fb4333-b608-4970-b860-2522b72c57ef",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c8acc1a6-5d23-42ba-97cb-e9e1c863ebc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b908fb3b-10de-4b25-b8ee-82e15b9741af",
        "cursor": {
          "ref": "38eca087-7218-4c88-84ee-0f43b706496c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "47f8e65d-c8ee-42f1-99d0-ebc3f471bb32"
        },
        "item": {
          "id": "b908fb3b-10de-4b25-b8ee-82e15b9741af",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ec82767c-5a75-483d-8f37-7363f222761e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57346d8e-5a0d-4097-bbb9-fa75214f67f9",
        "cursor": {
          "ref": "706033ba-826c-4eba-99f3-51fbc226bdad",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8227a9b6-ca87-4224-903c-c473e428fba8"
        },
        "item": {
          "id": "57346d8e-5a0d-4097-bbb9-fa75214f67f9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6a3eabb8-3fa7-4196-b149-717640abebb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af412c4a-b9f1-4e17-b2b1-9e2ad9f22058",
        "cursor": {
          "ref": "bcec7908-c67e-4962-b380-48c632031022",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "848a40c9-f85a-43ce-abcb-64d5c4b0f00d"
        },
        "item": {
          "id": "af412c4a-b9f1-4e17-b2b1-9e2ad9f22058",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3004cc1b-b355-4ad0-a5ba-4798b8108123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14510d4c-e29b-4e7c-9abd-3c7b5f33cfdd",
        "cursor": {
          "ref": "e0eec794-2287-4595-9a1f-ad858234de1a",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "48a25250-7a4d-4712-9fa6-4b31a6edb6ee"
        },
        "item": {
          "id": "14510d4c-e29b-4e7c-9abd-3c7b5f33cfdd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "168a09cb-0249-42a6-a2d7-707787109eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2419d5be-78f5-4ea9-9c05-dbc8d2053095",
        "cursor": {
          "ref": "eff7f252-319f-40f7-9dac-b94eabd23279",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "95c6b198-d71d-401a-ac58-1a0405d8985d"
        },
        "item": {
          "id": "2419d5be-78f5-4ea9-9c05-dbc8d2053095",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d0c6776a-326c-41f4-83ec-20e773bef181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017c25bc-75ee-4842-9395-8e0ec29cada3",
        "cursor": {
          "ref": "4534d924-4f03-4834-a087-287c86cf5f80",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "887b6818-2fa8-4a87-9b91-a6ccbea22452"
        },
        "item": {
          "id": "017c25bc-75ee-4842-9395-8e0ec29cada3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b2eb0841-cfe3-4d8c-8c70-06e2e91aaa10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ca9271-2ed5-483a-9fcf-bb20a31c61a2",
        "cursor": {
          "ref": "c7504524-3dd7-430d-b929-1adbb6a8afcd",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "18bd3876-4daf-4875-9bd3-9900942dc324"
        },
        "item": {
          "id": "54ca9271-2ed5-483a-9fcf-bb20a31c61a2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8641bd55-6d5d-4dd5-a194-5e6ad108dbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3d96c2-81c1-4f80-b260-18fc4af24bad",
        "cursor": {
          "ref": "240813ca-225d-44ae-8522-fb32f77be6da",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e7e364ca-ea27-4da6-b569-be7c9465cf0d"
        },
        "item": {
          "id": "0b3d96c2-81c1-4f80-b260-18fc4af24bad",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "366f8927-5c9c-41f0-a057-2a8c4f6de277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971b1f1a-679c-4ba2-a605-21a0a9d33874",
        "cursor": {
          "ref": "007f2384-9692-46f9-b8f7-c246b2774f9b",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d5bc8c6e-c257-4cf7-bf94-bffd01d59343"
        },
        "item": {
          "id": "971b1f1a-679c-4ba2-a605-21a0a9d33874",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "afd5bbde-222d-4b38-b8d1-ed5d043e6707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05351c3-31c3-485f-8509-5a6bf459552a",
        "cursor": {
          "ref": "57d46d0f-8850-45bd-8eeb-77c5990819b2",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "26089bea-2bf1-4244-a070-70eb8d0432cf"
        },
        "item": {
          "id": "b05351c3-31c3-485f-8509-5a6bf459552a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "caf3caf9-2f85-44c1-be08-8dd43d3ef203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338bbc7a-5966-4932-9d85-c97f26b58819",
        "cursor": {
          "ref": "dc14e9f8-02ae-4fb5-b49d-30d18d9d94f4",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "470a7cd5-9214-44c1-91a2-e6c58ff67b62"
        },
        "item": {
          "id": "338bbc7a-5966-4932-9d85-c97f26b58819",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "56aad0cf-9a92-4c1f-b3cd-04418ced1759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b1f5e7-3fb0-4939-836c-2c2da6af3310",
        "cursor": {
          "ref": "66f888d7-d779-4e2d-9e82-e92fcf60000a",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7abebefd-81c5-413f-b240-94f3e94e7008"
        },
        "item": {
          "id": "42b1f5e7-3fb0-4939-836c-2c2da6af3310",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f0d3f27b-1281-4468-a14a-e967722a3757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030c9150-d55f-43c1-aafb-5f6fcd76edb7",
        "cursor": {
          "ref": "e7e58bff-3bb2-4aa3-a586-a575947f6b55",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5d112930-45c5-4506-9481-fe485b3f62e2"
        },
        "item": {
          "id": "030c9150-d55f-43c1-aafb-5f6fcd76edb7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0c62ceff-9711-4d68-a521-9ade9f542c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869562a4-67e2-4e1e-86d5-805cf5998e12",
        "cursor": {
          "ref": "95fda3a3-5f56-476e-8e9b-be8e17bb4c70",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f027c484-c954-4507-83ac-ec97076b4273"
        },
        "item": {
          "id": "869562a4-67e2-4e1e-86d5-805cf5998e12",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5d3c5465-af85-4f0c-9148-8c3217b4457d",
          "status": "Created",
          "code": 201,
          "responseTime": 2623,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "afc6ca21-5651-4967-89c3-f8fd59393aa3",
        "cursor": {
          "ref": "e1caa4bd-3574-4860-a1fc-adb7f596cf04",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "db9ef9c2-49d1-4402-9f86-9d7a52e5be59"
        },
        "item": {
          "id": "afc6ca21-5651-4967-89c3-f8fd59393aa3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2f4310a0-a149-4e3c-805e-b7dd43ac9d07",
          "status": "Created",
          "code": 201,
          "responseTime": 2457,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "33bfd4c2-6f1f-4e05-b216-c87c08eba82d",
        "cursor": {
          "ref": "802fe177-a845-472c-8386-f68f28ae98c8",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "519f6b1a-9e89-4092-926a-7f68f4a8a6bb"
        },
        "item": {
          "id": "33bfd4c2-6f1f-4e05-b216-c87c08eba82d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "752a5e0a-64f7-4112-a097-4f8b1d89a811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4d6997-bc56-4820-bf62-93a941f0cd7d",
        "cursor": {
          "ref": "5c54aa68-f9c0-4340-8261-0c18c651f363",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "84b05476-418f-4791-9f09-5da8ea30fabe"
        },
        "item": {
          "id": "da4d6997-bc56-4820-bf62-93a941f0cd7d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "24026912-2c07-4fc7-954e-82119469cb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80e16d5-4412-482a-af43-6ec0140f27bd",
        "cursor": {
          "ref": "c02edd49-976d-4c9c-b51b-879aba12285d",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bf52e84e-971d-4fd1-83da-0ad30679cbb6"
        },
        "item": {
          "id": "f80e16d5-4412-482a-af43-6ec0140f27bd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0e945bb4-621e-4bad-a14c-387f14cd22ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5c567d-9663-4b4a-9317-07a5a973e246",
        "cursor": {
          "ref": "c8ae10a3-7e67-4cc6-b88b-5295aff0edfb",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "65e32644-00b9-4e89-af20-20cea0c758e9"
        },
        "item": {
          "id": "0d5c567d-9663-4b4a-9317-07a5a973e246",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "715eaad9-c4f0-4b39-a9e9-59a3abf8c34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfae03f-0fcb-4eb0-8980-91c1a049f1d5",
        "cursor": {
          "ref": "bab1bdeb-5f17-41a6-8c12-e56e7f5de787",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2f5f0d15-c9ae-42f9-bd5c-0a3e209071b1"
        },
        "item": {
          "id": "6cfae03f-0fcb-4eb0-8980-91c1a049f1d5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "39ca6612-eafc-4486-9426-9ef9837259ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7149e46-346e-490b-b076-cd0ab072d04d",
        "cursor": {
          "ref": "6c2295f8-2760-4c2f-af36-5db34daf71b2",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "783da393-92ad-497b-9cac-b425a0075bd0"
        },
        "item": {
          "id": "d7149e46-346e-490b-b076-cd0ab072d04d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4433fb06-4c9b-456c-8c19-510d27501b83",
          "status": "Created",
          "code": 201,
          "responseTime": 2579,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7dc61a3b-700b-42d3-bf08-155c7ff7f8c1",
        "cursor": {
          "ref": "5c11d9b0-2494-4f69-af4f-89d3154507d9",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cc658298-eb04-4c67-a4ad-2ee64e546c05"
        },
        "item": {
          "id": "7dc61a3b-700b-42d3-bf08-155c7ff7f8c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d3c9a835-927b-4d9b-a73a-268787e850ff",
          "status": "Created",
          "code": 201,
          "responseTime": 2437,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7fa9b2fa-f794-45b1-b38d-fd47a84c0f0b",
        "cursor": {
          "ref": "fb38ee19-4426-495a-925d-d453025fcdf5",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "43423d0b-b6a8-4fdf-a957-57e6c8fa3397"
        },
        "item": {
          "id": "7fa9b2fa-f794-45b1-b38d-fd47a84c0f0b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3a3a1fc6-20d0-4894-ad7c-b57c4d94e864",
          "status": "Created",
          "code": 201,
          "responseTime": 2634,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1d887fd3-7f57-4b5d-89c4-549514e07455",
        "cursor": {
          "ref": "7ba849cf-6b8e-45d9-95db-b4bf5066c84e",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b2b5acb5-8dba-4a7a-8862-4aea3cb61573"
        },
        "item": {
          "id": "1d887fd3-7f57-4b5d-89c4-549514e07455",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "83635da9-84ce-475a-9453-152f465477fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f5d8fc-84cc-4702-b3f0-a2149acad6f1",
        "cursor": {
          "ref": "af661ffc-1636-467c-b4ea-fdf75ff709f4",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a1cdf0a0-71b1-454c-bf94-585d0bd19a3a"
        },
        "item": {
          "id": "17f5d8fc-84cc-4702-b3f0-a2149acad6f1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dc2ec3f9-4286-4b0b-a475-d19ddbf04480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9ed20b-4b73-480c-8c86-4f5a5982c3f0",
        "cursor": {
          "ref": "e1615b3d-94c4-400d-b47e-91b91037dcf9",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "099702dc-9022-452f-86a0-1be26f8a479f"
        },
        "item": {
          "id": "eb9ed20b-4b73-480c-8c86-4f5a5982c3f0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22bdc4c5-af28-43d8-95a6-acfba402ca9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a652f8d-ce63-47e5-8499-3cf880e84b78",
        "cursor": {
          "ref": "83e3297a-2e68-4eaf-a316-2a651df4e574",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "919f480e-76d5-497f-975c-31ad85d23dcf"
        },
        "item": {
          "id": "7a652f8d-ce63-47e5-8499-3cf880e84b78",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4120210c-803b-4ef8-b636-93d44a6c148b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912a1be1-79b9-4dfc-ab92-ab1e0eaa3358",
        "cursor": {
          "ref": "1fd6a8cf-34fd-4002-bcd4-11981fa59a52",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6916f65b-8e3e-487b-ad9e-24713ca8ec3a"
        },
        "item": {
          "id": "912a1be1-79b9-4dfc-ab92-ab1e0eaa3358",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ecefd1c3-dd3e-4db5-9ea6-d8d13658b310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cef4f0c-a321-4533-b39b-c5c756b46f8a",
        "cursor": {
          "ref": "4b55dea0-ce85-42fd-84cf-2920188b17ed",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2750b746-1b5a-4775-bded-fa72373128be"
        },
        "item": {
          "id": "9cef4f0c-a321-4533-b39b-c5c756b46f8a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "22c41ea5-849a-4635-a800-087b1eab3025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b74cba7-31af-46a7-9099-a8bd5bc7f2ea",
        "cursor": {
          "ref": "70267d14-c836-4699-848d-b427fa9fe054",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "df11b2ae-7a90-46eb-952a-2628e18a0776"
        },
        "item": {
          "id": "1b74cba7-31af-46a7-9099-a8bd5bc7f2ea",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "474e5c6f-5f99-46dd-ad19-58f2117621c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403aa258-bf6b-47ca-9679-455c21b9b80d",
        "cursor": {
          "ref": "2558267e-913c-433c-8140-fb1e09427e51",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "814c4e35-849f-4d2b-a73a-8c10cb0313ab"
        },
        "item": {
          "id": "403aa258-bf6b-47ca-9679-455c21b9b80d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "100be1fc-c4bf-471f-ae60-861ef3b83e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f774e1-2d68-494d-aad7-f4620f7c6a87",
        "cursor": {
          "ref": "aec70a27-e471-478d-924b-e725473c4edd",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1c495944-7adf-47cb-b9ad-4626590c67a7"
        },
        "item": {
          "id": "72f774e1-2d68-494d-aad7-f4620f7c6a87",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7cdee000-b958-4cae-b06f-bf24d2438545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680d2f63-c641-41de-a3b2-07cdc49041cb",
        "cursor": {
          "ref": "e5ae044f-7262-496b-989d-7a82588a84d4",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0079d629-8656-488b-b37c-045fcb919d81"
        },
        "item": {
          "id": "680d2f63-c641-41de-a3b2-07cdc49041cb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae08333b-4286-4b0a-b313-f02e041e5fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bd0a91-42e0-4c00-af8a-c9acbc72a62d",
        "cursor": {
          "ref": "bef4b277-67c4-48ef-8414-a29b7ab2adaa",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "746b1b5e-d0e7-49b3-9415-f364f9ab37d8"
        },
        "item": {
          "id": "07bd0a91-42e0-4c00-af8a-c9acbc72a62d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "68768412-cfe8-4884-a07e-76b712006894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac76f8f6-6864-4d78-823f-8e45aae82dbc",
        "cursor": {
          "ref": "8925ac8c-a049-41ea-9f54-304e98514ae3",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cffa13b0-6041-4dc2-8b7a-5ec6fcf3d04a"
        },
        "item": {
          "id": "ac76f8f6-6864-4d78-823f-8e45aae82dbc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fde4c04f-dae5-4c46-a432-818e074db9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad981da-cfc1-4d90-b02a-5260aba6b311",
        "cursor": {
          "ref": "81d0c97c-dfcf-4b8d-aab8-1c78a2f50d67",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4619386d-9337-40ff-bef8-30fc5dfd10eb"
        },
        "item": {
          "id": "aad981da-cfc1-4d90-b02a-5260aba6b311",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fbb2d7d7-6606-4868-b424-09699230dd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bd10ae-7cf4-4c37-ac49-2a9791587558",
        "cursor": {
          "ref": "92b4a090-a93c-4810-8c68-075fea299e07",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ef51b2be-3967-480d-be9a-074c9c304496"
        },
        "item": {
          "id": "54bd10ae-7cf4-4c37-ac49-2a9791587558",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "62f0b462-7e21-45f8-a7ef-32b712ed3d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9015936-fb6f-4f21-9b36-bc48c3e9bbcc",
        "cursor": {
          "ref": "27e1072d-11e8-47df-a9f8-5fcf4dc87330",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9367064a-9098-4f5f-a7ae-9c989a94b382"
        },
        "item": {
          "id": "d9015936-fb6f-4f21-9b36-bc48c3e9bbcc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ccfef9a7-c107-4647-b521-f5c832315c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfd9bba-337e-4f7a-8940-d73e4989eb59",
        "cursor": {
          "ref": "e5d1aa10-fb9f-4c31-8583-1d8509dd6a8b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "965cfb20-38e1-4edc-afc3-0f084c677648"
        },
        "item": {
          "id": "7dfd9bba-337e-4f7a-8940-d73e4989eb59",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "864ac4b0-2e19-4ab7-acb6-d543c673f979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9cc058-e555-40da-821e-1097678fb7fc",
        "cursor": {
          "ref": "e2e73e90-e565-445c-a314-8680c75fe1fb",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "360f3a8e-3d90-46b5-859f-67c33e27241b"
        },
        "item": {
          "id": "cb9cc058-e555-40da-821e-1097678fb7fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c101fda8-780a-461c-9426-566544c1319d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96c99b7-5c6d-4d71-8f48-5b756f2acdaf",
        "cursor": {
          "ref": "745decac-d930-43a5-813f-7cbf95ad416c",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "33b73890-ec68-47bc-804d-386a5dbc73ae"
        },
        "item": {
          "id": "f96c99b7-5c6d-4d71-8f48-5b756f2acdaf",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "38b4ea3b-7f3e-4a87-9e5d-0179e47cd4e5",
          "status": "Created",
          "code": 201,
          "responseTime": 2713,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ee41b139-be7c-4aaa-b4e1-cd5afbaafc20",
        "cursor": {
          "ref": "cba294dd-f86b-41bf-b4a6-2eabe93e460e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c4253319-3270-4a8a-bae0-7295d37fd13c"
        },
        "item": {
          "id": "ee41b139-be7c-4aaa-b4e1-cd5afbaafc20",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5b9bdb06-e7e8-46a2-8e61-8aa1272bccdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9197a2bf-7bde-4b9b-b8c6-a3022f6a598e",
        "cursor": {
          "ref": "083b0ce4-2d62-4871-a8fd-f06aa8d37afb",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b60874c0-d276-43c3-80a2-f3f93f990193"
        },
        "item": {
          "id": "9197a2bf-7bde-4b9b-b8c6-a3022f6a598e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "23f47180-7ea2-4a34-94ae-31ca1b29d5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a61c1af-f895-4a01-b82c-32b73367e8f1",
        "cursor": {
          "ref": "08d67de3-d291-46e9-b0eb-5d2aeadc32e1",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "32fa4d37-cdc1-4cbe-85aa-5f36fe2d336d"
        },
        "item": {
          "id": "9a61c1af-f895-4a01-b82c-32b73367e8f1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bdc4fdb0-7d84-4ddd-8c59-284f4ad51831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dc6f65-8c47-46c1-8d8b-1170c1cc8f44",
        "cursor": {
          "ref": "807c3d80-7db9-4d2e-a0d4-97be0b28c69b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "34440c9e-6772-4da1-b1a1-3279e30ff76d"
        },
        "item": {
          "id": "82dc6f65-8c47-46c1-8d8b-1170c1cc8f44",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7195c43d-021f-4c42-9ecf-6d95b4ac401a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263d6174-c302-4ee3-ac56-949c04256736",
        "cursor": {
          "ref": "2f10b7aa-bb6c-4b06-b58b-1cf8a07bee11",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "43fb60c3-a0da-403a-9d74-4bf2632008c2"
        },
        "item": {
          "id": "263d6174-c302-4ee3-ac56-949c04256736",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1ef614f6-b2c1-4216-b26f-f9161f3f217d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fae88d-f9ac-4598-ac95-a58311bfef39",
        "cursor": {
          "ref": "4207b026-e0bc-4d54-9c26-bed41ce1b420",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "86bd5784-b6d0-4746-af4f-95530512b111"
        },
        "item": {
          "id": "98fae88d-f9ac-4598-ac95-a58311bfef39",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e80ec304-0060-4c4c-a792-d40f538e4847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50215cf8-9edd-4d18-b0f2-b05194ad4f1d",
        "cursor": {
          "ref": "ed037571-c090-478c-990b-b609b4ebe748",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "962f36a0-a1a2-4bfe-9830-887ae61fdfaf"
        },
        "item": {
          "id": "50215cf8-9edd-4d18-b0f2-b05194ad4f1d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f345a46d-8b65-4893-b17c-2610015e7a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e91349-341a-472e-ad5e-65b4c383c8c8",
        "cursor": {
          "ref": "174656ef-a2e0-4555-ae99-5abc2013614a",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "74de06d4-517a-4636-9247-90d6db502d66"
        },
        "item": {
          "id": "f4e91349-341a-472e-ad5e-65b4c383c8c8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d9fec0cb-3a6c-4977-a66c-01adc8bffc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3518b61-6f07-417b-a94c-b98bee62da2f",
        "cursor": {
          "ref": "97939bb9-e817-4328-9572-bb3f053cf1b5",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4997a2e0-fcf2-4f57-ab38-f0f495eafb91"
        },
        "item": {
          "id": "b3518b61-6f07-417b-a94c-b98bee62da2f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "87ac2ba7-f8fb-4756-8d93-28b0d196dda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dced8c7c-a5d1-4d38-9bdf-b051bd4bf61b",
        "cursor": {
          "ref": "a69ae422-7580-4649-999c-a6855ca4970a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "045e5441-5332-4a65-a66b-58060d6ebd39"
        },
        "item": {
          "id": "dced8c7c-a5d1-4d38-9bdf-b051bd4bf61b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "128f9c0c-61fd-4824-8150-c406913fb703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc79459-2a76-49e1-b797-e81e498a0678",
        "cursor": {
          "ref": "0fff5862-4d7e-49ed-8e04-8cc456b79d59",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3cd4d510-7cad-47e8-8885-c270844a93ff"
        },
        "item": {
          "id": "5fc79459-2a76-49e1-b797-e81e498a0678",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1d8ae85c-f998-4e2b-a4c7-a27b98c0355c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b6e241-17c6-4d12-b1f4-32a9623b2b1d",
        "cursor": {
          "ref": "0e43578d-3566-43b2-a1e7-b48692a3bf59",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ba7b22b9-c278-4970-98e4-b78985b46c73"
        },
        "item": {
          "id": "f3b6e241-17c6-4d12-b1f4-32a9623b2b1d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "10a5925f-94b6-4629-8256-ccef70a582f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d338499-492a-42ea-878a-e5504c9bcc25",
        "cursor": {
          "ref": "d2e682d9-bc94-48e3-bb38-f9a67c836436",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7d6512b6-eacb-4f6a-b797-34fcb984a389"
        },
        "item": {
          "id": "0d338499-492a-42ea-878a-e5504c9bcc25",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "320b3541-797c-47c4-9fb9-fddee9c42ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34493d99-5511-4656-b5b3-e831b5534cb0",
        "cursor": {
          "ref": "7cbf1691-4461-4b08-b0ad-7412f3b7e3df",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "46d6dc9b-3b6a-4ca8-90f9-2dae84357275"
        },
        "item": {
          "id": "34493d99-5511-4656-b5b3-e831b5534cb0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dbbe9196-f4d8-4df0-9d62-6d3ab592ee19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0a1e34-f5ed-4fa8-839f-e197f035a19c",
        "cursor": {
          "ref": "aa54d89b-3852-450b-9030-4c1328e15973",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "815ed3ff-898e-4e00-a7d9-6a1d5d84a95b"
        },
        "item": {
          "id": "ca0a1e34-f5ed-4fa8-839f-e197f035a19c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7d1bf39d-5d36-4fb5-b664-37873735b6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738951d9-b427-45a7-a171-6d9e68223c5c",
        "cursor": {
          "ref": "697f151d-a20c-48f6-8caf-a92648702bbd",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e609eada-265e-4546-a0a9-762dce44fa37"
        },
        "item": {
          "id": "738951d9-b427-45a7-a171-6d9e68223c5c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "419b9187-bc57-4d60-8074-64e483a8bb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9e5c70-c603-4290-8c2f-59657e72302d",
        "cursor": {
          "ref": "badef20e-7ba4-46b6-91da-b5411b5995ce",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c2d96eb6-5fe8-47c8-8f72-2a4461c3d4fa"
        },
        "item": {
          "id": "2c9e5c70-c603-4290-8c2f-59657e72302d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cd7533be-b28e-48f7-b5fe-3c5627dc59bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a09b16-c983-4faf-bcc6-93a738fe6607",
        "cursor": {
          "ref": "23060957-302b-46e9-9aa6-0530b76eec05",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6ffac818-ec9e-4986-8390-e4169a0b8233"
        },
        "item": {
          "id": "34a09b16-c983-4faf-bcc6-93a738fe6607",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "939a3193-98e8-4932-b1a2-cab81d69a10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298dc589-33a5-400d-9e53-3e519b46e8ed",
        "cursor": {
          "ref": "3c5ba050-a6af-4db9-a63b-29d467ab51b1",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "86ab0e7b-66c4-41b3-8ff9-694bacd2a122"
        },
        "item": {
          "id": "298dc589-33a5-400d-9e53-3e519b46e8ed",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "23f19e8b-79b7-4fbe-8005-1241d7de6076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90b76ca-de42-451c-bf65-62dd76ca5f3d",
        "cursor": {
          "ref": "0fa050e5-3b36-4ea9-8bd2-09318aea7168",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aa84bc8c-bce3-4a03-842c-96ee11e532c5"
        },
        "item": {
          "id": "a90b76ca-de42-451c-bf65-62dd76ca5f3d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "abbfb2e2-439a-451c-9aa8-b4890007b8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4e1653-db23-4484-baea-3d41156a106c",
        "cursor": {
          "ref": "88629b0d-71fe-4034-95c5-3ab54440fa7e",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e05571cd-1fa6-42f6-9654-91eccc419b02"
        },
        "item": {
          "id": "2c4e1653-db23-4484-baea-3d41156a106c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "20328688-cef5-484f-81b0-5da015a1e81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d654e864-2755-4a39-9a4f-7da4ed61896e",
        "cursor": {
          "ref": "535843eb-8cfc-4742-b18d-e36f31bda8a4",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a3e9ce5b-36e9-49c4-b167-55f8043c6d3a"
        },
        "item": {
          "id": "d654e864-2755-4a39-9a4f-7da4ed61896e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "37242430-d17e-428f-bba5-a14d4ee60286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158431b2-bea6-4a0f-9c80-f554f9533483",
        "cursor": {
          "ref": "ca332df5-af7d-4682-a06d-1ea658a4c0e7",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2775a492-6529-4947-a0f3-2eb3d402a47b"
        },
        "item": {
          "id": "158431b2-bea6-4a0f-9c80-f554f9533483",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e3e27037-1bde-4dfe-bac2-9c9d22e87c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae428d85-acda-4ac4-876b-561aacf606fe",
        "cursor": {
          "ref": "ffaa98a8-aa25-4e69-8e1d-e73e5ac7af9e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3f69cc65-a712-4b44-8543-472ac7f5788f"
        },
        "item": {
          "id": "ae428d85-acda-4ac4-876b-561aacf606fe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2bfa655d-eb82-4f1b-b080-a6e97e0aea06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e776e73-aa19-4c24-9bc9-c2e03fdacabb",
        "cursor": {
          "ref": "2dc80a22-2652-4e49-9262-1dfd21e81871",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "20c4c0ea-40e2-42ed-bf87-c018d39c1d02"
        },
        "item": {
          "id": "6e776e73-aa19-4c24-9bc9-c2e03fdacabb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cc0d0d60-26bd-4dea-ad51-02001b366c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ac9475-3344-4ef1-a346-83fb45ab666f",
        "cursor": {
          "ref": "97d2f2b2-e5f5-4060-814c-d1dc86103bd1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a562f75f-edca-4d76-a98c-b90b5fa52f46"
        },
        "item": {
          "id": "c9ac9475-3344-4ef1-a346-83fb45ab666f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b6462978-a9ad-438b-8591-25fa9b5965e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a298db88-fb0b-4478-9eec-013fbb71726b",
        "cursor": {
          "ref": "2f07829c-9a45-4850-96aa-d5baf86f44e5",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "78f1f5e2-68e9-47ff-8a0e-12ab6bd4085b"
        },
        "item": {
          "id": "a298db88-fb0b-4478-9eec-013fbb71726b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7f9d001f-789e-4410-b23e-604f37cfac24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d07729-8081-4692-8966-9ffd0e79a419",
        "cursor": {
          "ref": "e8977fe5-aa38-4bd2-9499-91667fc13875",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "79ba221a-89e6-44a7-863e-64dc097133e0"
        },
        "item": {
          "id": "d6d07729-8081-4692-8966-9ffd0e79a419",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2763affc-aaa7-4806-8f0b-06d7da06d478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d17538-bbe8-4a7a-b781-84797f5cb438",
        "cursor": {
          "ref": "cd88502b-0398-4c7f-b4c7-75d80a40924c",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c939770c-f910-4338-a9b6-ed29c1eb6a59"
        },
        "item": {
          "id": "47d17538-bbe8-4a7a-b781-84797f5cb438",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "875b9410-29d2-4978-bfc7-488ae3fedb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495544e5-0903-45d5-b1db-1d1d6e7fd44e",
        "cursor": {
          "ref": "b6e3c689-7b98-44df-9b40-05913afd1bfd",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "779ea09e-de4a-4f10-8ef5-240efb72f40d"
        },
        "item": {
          "id": "495544e5-0903-45d5-b1db-1d1d6e7fd44e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "67f2df8f-8faf-4b04-bd0e-4e5ddb409e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13b620d-a826-476e-89c2-d922a2b3250d",
        "cursor": {
          "ref": "f99bc3cd-15da-4ad1-881b-18fb4c09902c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "901decd8-6cf8-4b69-a3ad-4385e0291c75"
        },
        "item": {
          "id": "a13b620d-a826-476e-89c2-d922a2b3250d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e7cf7373-af6a-4648-b53f-bc7ba84e5010",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d2fb152f-0a36-4b98-b292-3ae5534571ba",
        "cursor": {
          "ref": "181757de-64a7-4e0a-b988-cc83bf48265e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4a62854d-29a2-4dab-8071-0529cc73f57f"
        },
        "item": {
          "id": "d2fb152f-0a36-4b98-b292-3ae5534571ba",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "167c6314-cdd9-4881-b625-56599ff50034",
          "status": "Created",
          "code": 201,
          "responseTime": 2028,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c65261d4-f245-43f6-8f3e-31cf6017546d",
        "cursor": {
          "ref": "9cb9271b-b234-4fb5-a7bd-16888e32babb",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "63adfe6a-68f6-4bc9-89ac-071c498528e7"
        },
        "item": {
          "id": "c65261d4-f245-43f6-8f3e-31cf6017546d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ecfefdb5-95a0-416d-918b-c3b0c8cd718e",
          "status": "Created",
          "code": 201,
          "responseTime": 2543,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "220e307e-0aa2-42c4-9922-d616b785d0f7",
        "cursor": {
          "ref": "3cef8c52-ce58-43f9-8e6e-efcfb3e1fd2a",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "95352caf-3e15-4f33-8a18-1714d9386446"
        },
        "item": {
          "id": "220e307e-0aa2-42c4-9922-d616b785d0f7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b95c6ff0-f420-46a8-8abe-3d6671d423e1",
          "status": "Created",
          "code": 201,
          "responseTime": 2437,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd8bd3f-5f17-4df3-a163-44edfff3ce01",
        "cursor": {
          "ref": "b634cb8c-a503-43a3-b8d6-0298257d4345",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "572618fc-c464-4abf-a11e-1ec0c8fc30ad"
        },
        "item": {
          "id": "2dd8bd3f-5f17-4df3-a163-44edfff3ce01",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c2b503d5-4a51-4346-937a-cb4a4c18248e",
          "status": "Created",
          "code": 201,
          "responseTime": 2372,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b6fde5-d01a-44bd-a296-8eae9910a548",
        "cursor": {
          "ref": "f5d91a12-5d1f-4207-a3fc-2b021a5b6d71",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6b8e5d13-0ebe-4251-b075-cd82afcdc39a"
        },
        "item": {
          "id": "67b6fde5-d01a-44bd-a296-8eae9910a548",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ab872a5d-4fca-4f42-a405-d889e416b36f",
          "status": "Created",
          "code": 201,
          "responseTime": 2608,
          "responseSize": 994
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3258966-6667-45bb-a79c-2de54a78b8cc",
        "cursor": {
          "ref": "9b5a869b-d680-4a13-a0fe-546b687cd243",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8fb358f4-4d4f-45c0-a1ef-2ce8d6a7a996"
        },
        "item": {
          "id": "d3258966-6667-45bb-a79c-2de54a78b8cc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f5ac549f-09b7-476d-abf5-bab04210f6f4",
          "status": "Created",
          "code": 201,
          "responseTime": 2322,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-14T00:39:49Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-14T00:39:49Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "4c69b9f2-77c4-49d4-baea-ef98641cf328",
        "cursor": {
          "ref": "af3ffa51-39de-428d-a61e-3f1d9d090831",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "35a23675-5f41-4498-931b-cb4e23503485"
        },
        "item": {
          "id": "4c69b9f2-77c4-49d4-baea-ef98641cf328",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "01b764d1-c8b5-4208-93b4-4636270120cb",
          "status": "Created",
          "code": 201,
          "responseTime": 2562,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08383e7-495b-4e7c-97c8-ec9e5e9d0695",
        "cursor": {
          "ref": "b7096c7b-d931-4f7c-844f-92795c113a7b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1c55d23e-6277-4b09-991b-7bcc6d61cc98"
        },
        "item": {
          "id": "a08383e7-495b-4e7c-97c8-ec9e5e9d0695",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ba997d7-b2be-4096-bb22-3a5de75d5a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08383e7-495b-4e7c-97c8-ec9e5e9d0695",
        "cursor": {
          "ref": "b7096c7b-d931-4f7c-844f-92795c113a7b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1c55d23e-6277-4b09-991b-7bcc6d61cc98"
        },
        "item": {
          "id": "a08383e7-495b-4e7c-97c8-ec9e5e9d0695",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ba997d7-b2be-4096-bb22-3a5de75d5a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27d10bc-8129-4aa0-9e27-f9e253f16095",
        "cursor": {
          "ref": "f4711bf6-d319-42fd-ae64-fc91f870ec78",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ddec315f-0949-4402-95af-4219c6863c90"
        },
        "item": {
          "id": "f27d10bc-8129-4aa0-9e27-f9e253f16095",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34e67e12-9153-4807-b797-073ed0169c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23479ddb-b95e-4bb6-af19-c8b7221608f0",
        "cursor": {
          "ref": "822261ae-593a-47b2-b9c1-f572d2ef5407",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "548281ce-8d3b-4f63-baee-39c82a91bd33"
        },
        "item": {
          "id": "23479ddb-b95e-4bb6-af19-c8b7221608f0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "141e52bb-53ba-45ca-b077-e69eb5d8c7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff75b81e-2971-4700-ae4b-db87fe65a248",
        "cursor": {
          "ref": "d41f4c3e-01e5-4786-ac10-449bd4ae6f4b",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d5b66228-ada5-4b14-a71b-43c72993d45a"
        },
        "item": {
          "id": "ff75b81e-2971-4700-ae4b-db87fe65a248",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0fcdfa28-f330-4b5c-93bb-403f0da6cab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7c831f-8523-4d9b-b5ce-d8bf324605c6",
        "cursor": {
          "ref": "3150c974-8dad-4208-bae1-d51d387b5e11",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cf0c07cc-2b2a-43e3-99cb-96740e9c1562"
        },
        "item": {
          "id": "0e7c831f-8523-4d9b-b5ce-d8bf324605c6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3a6feaed-9e27-4a59-898a-9cae8100eb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5e62f7-ee57-4579-b0c5-3883c1f79a82",
        "cursor": {
          "ref": "5efeaa87-4836-46e9-bf1b-6cb0459671eb",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cc8e8fb8-95f4-4ebd-98e5-7b51c4aafb98"
        },
        "item": {
          "id": "1a5e62f7-ee57-4579-b0c5-3883c1f79a82",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d7f96f74-17d4-4df7-9b3e-a2733dbcfcc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c8eb6f-357b-429f-852c-b2500a51d1a3",
        "cursor": {
          "ref": "8edde60a-9339-49e7-a9d5-61f187a35226",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ea7310c1-65ee-46b6-84ca-9c2f49178513"
        },
        "item": {
          "id": "d1c8eb6f-357b-429f-852c-b2500a51d1a3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "94795eba-5306-49a3-8553-967e8938141f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cfb875-05a8-4730-b380-bd1e1d0e5721",
        "cursor": {
          "ref": "c4a1da0d-90fe-4c39-aa76-4e2c46478b19",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b56f56c9-d122-49f1-a456-c6f8dd352620"
        },
        "item": {
          "id": "50cfb875-05a8-4730-b380-bd1e1d0e5721",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eb4e0da7-f175-44db-950c-791551a2c693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d2e800-e32a-4f46-ba65-c0dc086f1ead",
        "cursor": {
          "ref": "87a7716a-0245-490c-b4a5-49b7f7b9c813",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7eb080e0-d071-482b-b134-aeb445a185f7"
        },
        "item": {
          "id": "f0d2e800-e32a-4f46-ba65-c0dc086f1ead",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4485c7eb-9fee-4a15-b264-e17b88415d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c377f5-05e4-4110-8df7-ec83293a9fdf",
        "cursor": {
          "ref": "57a9cba3-7913-4f7c-9348-7b12a797dbbd",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4b48353d-489c-4fb6-816b-30ec56a916ea"
        },
        "item": {
          "id": "03c377f5-05e4-4110-8df7-ec83293a9fdf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "476ee1f1-e902-47a5-8e81-b7129f4ad415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a630ef54-d7be-4d44-a2cb-1be531cbcfa2",
        "cursor": {
          "ref": "0af22b4f-132c-4bba-ae3a-fcf71fa24664",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "61ae2a93-623c-4b67-9e32-2df47d4975c5"
        },
        "item": {
          "id": "a630ef54-d7be-4d44-a2cb-1be531cbcfa2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "75dd1c04-17d3-4c39-bcac-262760396ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcb1072-a77f-4cb2-9393-7558111d4156",
        "cursor": {
          "ref": "b4a91137-dab0-42e7-9e20-a9b355d64f19",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "17577a98-75e2-4926-97c2-2a57d9ce63ec"
        },
        "item": {
          "id": "9dcb1072-a77f-4cb2-9393-7558111d4156",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4da54f3d-c24e-4c83-aff6-76bc650ff28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893bd83e-e457-4d64-b8b7-3659fd143820",
        "cursor": {
          "ref": "3eea3163-88c9-4955-b609-9092e0bb3c1d",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f33670ab-fb45-4079-bd55-d6159dce133d"
        },
        "item": {
          "id": "893bd83e-e457-4d64-b8b7-3659fd143820",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cf58c06a-8054-4f3e-8ea8-b8338beb1bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247ac2ac-3857-4c20-819d-ee9cd9f68232",
        "cursor": {
          "ref": "4ade15bf-36f6-4a76-9623-a58897cd2572",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a91981d7-d9ef-40af-96f6-dd98734012a4"
        },
        "item": {
          "id": "247ac2ac-3857-4c20-819d-ee9cd9f68232",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "944944d9-8a8a-41d4-8a7d-a6e1139daf1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0f9759-5596-4f93-80f5-ba4384c178cb",
        "cursor": {
          "ref": "d1c9ba90-07b3-4c7f-b52c-b89e02d4e988",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0f0e30e3-1f81-477e-b9b3-34b14cb1e977"
        },
        "item": {
          "id": "fd0f9759-5596-4f93-80f5-ba4384c178cb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "31413354-ff33-4b48-97f7-eefb99f5f19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050362bd-82db-4f6c-bca9-6d6d79482f23",
        "cursor": {
          "ref": "94247c69-8ef1-426a-8fb5-d84705e703fe",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "03526690-69a9-4ac0-97bc-f8d8b254e200"
        },
        "item": {
          "id": "050362bd-82db-4f6c-bca9-6d6d79482f23",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "22c02b1f-686d-4e01-b237-d0d82e06354d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0575347f-5074-4cad-b240-2862a82059d5",
        "cursor": {
          "ref": "fa072ebf-148c-49e7-af7c-62210ecdb2a4",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9cd048f3-2dcb-4b66-8683-349c88dd05f9"
        },
        "item": {
          "id": "0575347f-5074-4cad-b240-2862a82059d5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "eb49f7cf-3e29-407d-a91a-bcacca0189a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f4dd1d-15de-4586-a809-86089fc2054f",
        "cursor": {
          "ref": "feecedbd-8562-437e-85d3-75a3b5239741",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "547edb0c-7f38-4947-9517-55f94bbccc3c"
        },
        "item": {
          "id": "56f4dd1d-15de-4586-a809-86089fc2054f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4d27a3aa-024f-4207-9b23-70dc745f0fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b3dc73-f155-4073-8493-8b4c1238214d",
        "cursor": {
          "ref": "a64ec03b-7941-46dd-9347-2157ea31cea4",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "383ec110-e624-4cfb-b261-e7990e6f2587"
        },
        "item": {
          "id": "85b3dc73-f155-4073-8493-8b4c1238214d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1bb66a40-a9f6-4d65-971a-f19228966fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74062d50-5c3a-4fe3-90f4-c3267d1a7f7a",
        "cursor": {
          "ref": "78ae39a5-3fa8-4444-a5b4-71367a07b9e0",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a4f81f58-5cef-4d82-add3-82530dda56de"
        },
        "item": {
          "id": "74062d50-5c3a-4fe3-90f4-c3267d1a7f7a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8f5fe6b8-9ac3-4c65-bd2d-32fe93b1eff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e616527-d3fb-4ade-9397-1df2790e7730",
        "cursor": {
          "ref": "4e2f0d13-263e-4531-8f68-e76ffca2d567",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b94e492e-0f33-4a1b-a27e-859357262636"
        },
        "item": {
          "id": "7e616527-d3fb-4ade-9397-1df2790e7730",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e7427521-777d-40d6-a73e-8f1ef4c7bd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b92754b-fa3c-4b0b-9b5d-5b10e3e188c4",
        "cursor": {
          "ref": "b86a0549-ca95-468d-9bb3-0680b6b8d2e7",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bcd92dd8-f772-4bfd-a9f9-6ccff8dfc1fa"
        },
        "item": {
          "id": "4b92754b-fa3c-4b0b-9b5d-5b10e3e188c4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b94c0f99-0037-4078-8889-2dd216a23c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2d9cda-4e73-445e-b089-3e691aeecc76",
        "cursor": {
          "ref": "58e59680-dfbd-4dcc-a8f1-7f51f1f60a71",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea4b3f95-21b0-45e8-b351-ed170f27f75f"
        },
        "item": {
          "id": "6f2d9cda-4e73-445e-b089-3e691aeecc76",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c0d4b063-fae8-429c-ad91-60e0398b73cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ad989d-a064-4bc3-b03c-163e14845ea1",
        "cursor": {
          "ref": "8d865426-3fad-4145-80fd-f8a9140e3b79",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "68fab320-1de7-473d-93df-befea4e89659"
        },
        "item": {
          "id": "a1ad989d-a064-4bc3-b03c-163e14845ea1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ad39c87c-20fa-48e6-b049-4c2a86e76bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9399d44e-f591-4e9f-be78-4500c307f66e",
        "cursor": {
          "ref": "c624a48d-5ff9-4eb3-bf6a-662f4d08f5ba",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "275604e6-cb9a-4063-aa75-df0a2fa08b15"
        },
        "item": {
          "id": "9399d44e-f591-4e9f-be78-4500c307f66e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e9f246a9-c3ef-4240-be85-0950edf99bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6accc53-1a2a-4631-9faa-d7bbf3ccffbb",
        "cursor": {
          "ref": "2d40a857-ec07-4010-87cd-69c2bd216294",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "86a34a84-00f5-4e24-bba3-720501ab2a12"
        },
        "item": {
          "id": "a6accc53-1a2a-4631-9faa-d7bbf3ccffbb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c055db0e-978f-4656-a311-586b969a5846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa472bb0-d72d-49d0-be39-0355c142178a",
        "cursor": {
          "ref": "a13900d8-70de-4419-97fb-452075e591e1",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8711844d-805f-4d0b-be21-c85407546258"
        },
        "item": {
          "id": "fa472bb0-d72d-49d0-be39-0355c142178a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f8edf0e6-87b6-4fa9-867c-987faf83000f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ac1c9d-025d-49b0-8386-d5f320adacf6",
        "cursor": {
          "ref": "5aa9d607-41da-4ace-a790-de41ebe02384",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1fbb4a7e-5696-4578-aaa5-7c2eab115783"
        },
        "item": {
          "id": "51ac1c9d-025d-49b0-8386-d5f320adacf6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "120c528e-be55-42ba-b860-ebb0cb3e4bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd9c84a-6a5b-495b-985b-6291e0c26029",
        "cursor": {
          "ref": "e3bb9b0b-b7af-4ae8-a6e3-61f0b63c5cd5",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a05c9fb1-d9bc-4e8f-92dc-6aac97dd1109"
        },
        "item": {
          "id": "6cd9c84a-6a5b-495b-985b-6291e0c26029",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b79c1666-fba5-4787-8048-11fe935baaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf84777-0a35-4ed7-b913-7d956e8884d7",
        "cursor": {
          "ref": "30878839-b5f8-4232-b1d0-2004a55056ae",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "be05f574-10fb-4690-85dd-4f9e7e8174f8"
        },
        "item": {
          "id": "dbf84777-0a35-4ed7-b913-7d956e8884d7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2e5e8795-2620-4a8d-9c6e-18d86b8704de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca67a51-605f-40b9-b038-95d44092ae69",
        "cursor": {
          "ref": "dc5e7713-989d-4656-aaf5-9ba37e279eed",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6722c9ba-2426-4fdc-8b19-e5ce79046515"
        },
        "item": {
          "id": "fca67a51-605f-40b9-b038-95d44092ae69",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8a287dc0-dd02-4e09-a6bc-902f1570ff02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0e7fff-2348-4abc-8c05-35c5ea8075e9",
        "cursor": {
          "ref": "5cf4a428-1b7d-4015-b606-58374b5ba105",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "296c5adb-3abc-4f5d-a91d-ae7bffc3fd78"
        },
        "item": {
          "id": "2a0e7fff-2348-4abc-8c05-35c5ea8075e9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e4fe5f13-7a6f-4593-b4bf-49b1957d1f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1558be40-eb79-4c5b-b6ac-c32a12fd7d20",
        "cursor": {
          "ref": "1de8568e-5a8e-406a-a2ac-950275bf59bf",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bfc7f14a-f8d1-477c-ac31-7e56e9c2ba56"
        },
        "item": {
          "id": "1558be40-eb79-4c5b-b6ac-c32a12fd7d20",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "13a77d48-2fd8-422b-9106-9c6759ab0746",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a65c05b6-d38d-4385-9be1-c7b9d7768d9e",
        "cursor": {
          "ref": "170fe182-d579-4679-ae11-d417a97ac9b2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a68732b2-f99b-4fe3-9a63-beea0e3436bb"
        },
        "item": {
          "id": "a65c05b6-d38d-4385-9be1-c7b9d7768d9e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "56a8cccf-d453-4f0f-8c66-a4364a71ddbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "57dc4756-b6a6-4f88-ab07-bd2546faf99a",
        "cursor": {
          "ref": "a5a2e281-d67d-4453-b071-c81d91655ffa",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d0637bbb-280c-4ac5-a1e1-f0960f0d6426"
        },
        "item": {
          "id": "57dc4756-b6a6-4f88-ab07-bd2546faf99a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4b2589e8-296b-4085-b48e-c6a282db4a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dc4756-b6a6-4f88-ab07-bd2546faf99a",
        "cursor": {
          "ref": "a5a2e281-d67d-4453-b071-c81d91655ffa",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d0637bbb-280c-4ac5-a1e1-f0960f0d6426"
        },
        "item": {
          "id": "57dc4756-b6a6-4f88-ab07-bd2546faf99a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4b2589e8-296b-4085-b48e-c6a282db4a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472c7d07-9068-4603-81e7-d643cd031ed2",
        "cursor": {
          "ref": "bb16c4c2-ef82-4fb5-a733-79bbe7a69547",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5766bbbb-55cb-44e4-b64e-b04a802ac520"
        },
        "item": {
          "id": "472c7d07-9068-4603-81e7-d643cd031ed2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d428e7bc-e675-4ae9-8dce-4192526721f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf97cb14-b7c6-4f49-8d54-cc5715e40d74",
        "cursor": {
          "ref": "4622e485-975c-47f1-8a6d-3ea8233a457c",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d6b65871-10a2-4eda-863b-a9a4c43427c2"
        },
        "item": {
          "id": "bf97cb14-b7c6-4f49-8d54-cc5715e40d74",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "55890f23-9c60-4678-9cf6-16e4622ffa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53baa34f-7de6-4166-84b9-1c2c4b78a4fd",
        "cursor": {
          "ref": "0f9c54c5-e2e5-400f-aae9-a9ebf5a75ab2",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "62c61434-c4b7-41ca-92c5-4764ed9335ad"
        },
        "item": {
          "id": "53baa34f-7de6-4166-84b9-1c2c4b78a4fd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ae1c53d5-1408-4946-9519-c7e9144f998f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2f65dd-f641-443c-8b84-905aee6f4321",
        "cursor": {
          "ref": "ce93f96c-fb17-4a22-97d0-6555c5d6e9c3",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0c9e2028-e507-4e64-95c4-60383e4bc966"
        },
        "item": {
          "id": "4e2f65dd-f641-443c-8b84-905aee6f4321",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b14f02f2-9971-410b-b585-a5b323b8f3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7b01b2-0b41-4cbf-b4a4-12a85b88f49a",
        "cursor": {
          "ref": "b6f29743-7403-40ed-9cf3-c202d2335253",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "07c554b4-45c4-4f00-91ab-d07c11116366"
        },
        "item": {
          "id": "9e7b01b2-0b41-4cbf-b4a4-12a85b88f49a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2eeeb94f-4af8-4fe2-ac8d-77412defd91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619cdb3c-b4c9-4c8f-824f-67bae0afa973",
        "cursor": {
          "ref": "e2563100-5910-4d44-8146-b345bdd00752",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ab779215-18bb-456d-842d-48f5c778ef10"
        },
        "item": {
          "id": "619cdb3c-b4c9-4c8f-824f-67bae0afa973",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3cb2ce7d-61d2-4e40-98ff-511058859051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad1d402-75ea-4fe2-8722-22c314bb258b",
        "cursor": {
          "ref": "6c275899-473a-4617-8b89-234baeada36c",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "15df6d54-17bb-45ca-bc49-e8fc974cd59d"
        },
        "item": {
          "id": "bad1d402-75ea-4fe2-8722-22c314bb258b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dba513e3-087b-4275-b2d6-a776e7062724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b5cdfd-9c5c-43b1-a279-8895e7bd6a2c",
        "cursor": {
          "ref": "07a345d7-dbff-4458-917c-bc3d12cafde7",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "77b0ac90-a676-436e-8d36-12979a06e874"
        },
        "item": {
          "id": "07b5cdfd-9c5c-43b1-a279-8895e7bd6a2c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "91dfe0fa-79d7-441a-b72b-ba1504405585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986bd64a-543a-4556-8308-1d7449e73e37",
        "cursor": {
          "ref": "aa40b888-a575-4082-9e2b-09b46caee0d3",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "72ba43a6-a55d-4c15-a889-222744defce7"
        },
        "item": {
          "id": "986bd64a-543a-4556-8308-1d7449e73e37",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2b2e5ac2-9f87-4115-861f-572887411412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d3a3be-0b7b-47db-9227-6c44c42d996a",
        "cursor": {
          "ref": "5bd398ce-4667-42fd-9dc6-9ec0e3a6410d",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7e5bf772-3a01-4b3f-b89f-29b9aec0d8eb"
        },
        "item": {
          "id": "c7d3a3be-0b7b-47db-9227-6c44c42d996a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f9338c8f-54e0-40d1-a622-6245548b1d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b8f9b8-2811-46b3-a8ba-0939b7395c17",
        "cursor": {
          "ref": "c82e97eb-4637-48b5-b791-4d3045d35802",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "15bfbb94-0c14-4c70-b121-93cea2957e93"
        },
        "item": {
          "id": "95b8f9b8-2811-46b3-a8ba-0939b7395c17",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7679f5a2-59bc-4eb6-b94f-5100fb236b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6d6647-4c42-4c8a-9ca5-a12d8fee71b7",
        "cursor": {
          "ref": "665d033d-b8fa-4a03-b2ea-105a6754dcbf",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f2a8a8b6-c52d-4309-ba9a-2da68a751198"
        },
        "item": {
          "id": "3e6d6647-4c42-4c8a-9ca5-a12d8fee71b7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ef50ba7e-4884-4c42-a1da-6330fe2545a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbbd259-5d5d-48d4-8015-018393a067af",
        "cursor": {
          "ref": "dee120b0-0877-49ca-b1a6-d41326941e18",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "007e4cca-5313-416d-8510-95161a091725"
        },
        "item": {
          "id": "0bbbd259-5d5d-48d4-8015-018393a067af",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "961341d4-7f29-4aef-a106-1f9b48b57817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe1f2c5-1a15-47e1-80fa-b795d7a7325f",
        "cursor": {
          "ref": "8627eb47-4274-4834-b248-d93da573e358",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aefdb2a3-6f25-475f-b0ba-183031c54dfb"
        },
        "item": {
          "id": "7fe1f2c5-1a15-47e1-80fa-b795d7a7325f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dda4c912-5009-4547-af20-cec839920426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b111e6-6249-40c9-b316-42eb5220a9e9",
        "cursor": {
          "ref": "eba239b9-5487-44d1-b1a2-b852f33c176e",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b82435ec-788a-419c-b5be-b2fd8c8a5cbb"
        },
        "item": {
          "id": "c8b111e6-6249-40c9-b316-42eb5220a9e9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "745315c7-65a3-4ee3-abd0-b4f4f9012d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94fbb00-a5d6-4faf-8a7d-610300ae89cd",
        "cursor": {
          "ref": "2a060be3-eecc-40b2-9854-4b3001b8948b",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2e528ed1-f1ab-4141-a894-7458f459e0a1"
        },
        "item": {
          "id": "f94fbb00-a5d6-4faf-8a7d-610300ae89cd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a8d675fb-1494-4568-8637-4c3629e48b22",
          "status": "OK",
          "code": 200,
          "responseTime": 1331,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b29b40b6-dabb-42a9-9235-dc267877814c",
        "cursor": {
          "ref": "c7c1d5b8-fdf3-44f8-ab49-e5c50fcd01c0",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f270da3-340e-4314-91ff-05b3f6e6fb1b"
        },
        "item": {
          "id": "b29b40b6-dabb-42a9-9235-dc267877814c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8654183b-f2e3-40a4-afd7-245e84ff7319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37c80eb-11fe-46c5-87c7-0c058b620567",
        "cursor": {
          "ref": "398e0fa0-99bf-4f95-a6ff-95011d8bf63e",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1305f638-5e64-48c7-8017-008d914de39a"
        },
        "item": {
          "id": "d37c80eb-11fe-46c5-87c7-0c058b620567",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "aa947485-0043-4778-a4ba-3882b21d7e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759f8832-fcd1-4053-80b2-814add590027",
        "cursor": {
          "ref": "f5a5cf2e-6440-4ec5-b3db-e4550d37d520",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "df89c3ca-b209-4527-9317-f6551aeb97ec"
        },
        "item": {
          "id": "759f8832-fcd1-4053-80b2-814add590027",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6e85ae5b-760e-4524-9209-ca6676e714e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca9b67a-d418-4fd5-aaa0-9a60960b8fdc",
        "cursor": {
          "ref": "2d2d8bc1-f682-428f-8ec6-b86450412421",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8a1cf20b-b381-4e68-a170-5b39cb048a5a"
        },
        "item": {
          "id": "1ca9b67a-d418-4fd5-aaa0-9a60960b8fdc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9a5a6f30-faaf-4c97-abae-a263c585fb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81af1d6-b52e-4eda-b6c4-1826d60ed382",
        "cursor": {
          "ref": "f6b8d297-9829-48ed-8831-076232be6826",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c0d96fd7-3a59-4f8f-a22f-19f0f21ec06d"
        },
        "item": {
          "id": "f81af1d6-b52e-4eda-b6c4-1826d60ed382",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "85945814-bab5-4d39-aaea-e6bae063ce4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c782b5e0-3929-4d35-96c6-2bf9412a9885",
        "cursor": {
          "ref": "595a1252-3a42-40c1-983f-1148d1d1cc7b",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0f0b6e44-614e-412a-af46-729d257ea7f8"
        },
        "item": {
          "id": "c782b5e0-3929-4d35-96c6-2bf9412a9885",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d9d04ac5-7299-4ad1-8496-604ba5cb9752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b809fbe-b3b3-416e-9fb5-5782c2d54b00",
        "cursor": {
          "ref": "19aa6549-1617-49ef-8b4e-c4bbabbe7eed",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1b439137-8a7d-43f6-ae52-ea0738f32b51"
        },
        "item": {
          "id": "2b809fbe-b3b3-416e-9fb5-5782c2d54b00",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "de387d50-2c9e-48c2-be6c-fd0fa177287b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afb5a0e-fb12-4939-ab9a-ee33bc625d0e",
        "cursor": {
          "ref": "f9f3e613-4c23-4720-8b68-801b595c0cb4",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f44e6314-96c4-4e0e-84da-f75c4968d5fc"
        },
        "item": {
          "id": "6afb5a0e-fb12-4939-ab9a-ee33bc625d0e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ec1515c6-ca60-4939-a1fb-a1772f867d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743fa510-e088-4a25-83c5-14e1fe1fd103",
        "cursor": {
          "ref": "bce3242f-3d3b-4439-aab3-2ce4ade7698f",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a058ba97-f353-4b6b-8fd9-95d26e3aca69"
        },
        "item": {
          "id": "743fa510-e088-4a25-83c5-14e1fe1fd103",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5a4c92f4-fd56-42d9-adc1-9b2119942632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d52410-769a-4515-a161-ae2144eb0592",
        "cursor": {
          "ref": "e495b478-fffe-4431-acca-11dca54f5536",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b19603e3-222f-4a00-9d3a-e80fc46359ed"
        },
        "item": {
          "id": "80d52410-769a-4515-a161-ae2144eb0592",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2af800dc-0e99-4734-a127-0ceab83cae3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eead6ab5-4aa9-4a7f-869b-b935956ea5a1",
        "cursor": {
          "ref": "f2a7ab89-c732-4a1d-84a2-9bada8be2184",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4fb18194-fd2a-4916-8bd5-1e4bfef7f2ef"
        },
        "item": {
          "id": "eead6ab5-4aa9-4a7f-869b-b935956ea5a1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "aec296a5-a9a6-4b8b-bfb1-b2ebb70086d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86f8756-e420-4967-a03f-cf1875051d9e",
        "cursor": {
          "ref": "0b56c4f7-8aaf-43a6-a760-599f4de0cb69",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8cef430c-ca8d-4112-b55b-66e572ce8e7c"
        },
        "item": {
          "id": "e86f8756-e420-4967-a03f-cf1875051d9e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "38f99028-41c6-4505-b1f4-8d49fa509386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2430d23f-601c-4f55-9af6-c63c91332a5d",
        "cursor": {
          "ref": "9990ad11-59ea-4ce6-a244-b15c0aadaef0",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "88bda4a0-620f-4a5f-a17b-85c2c61bd9d1"
        },
        "item": {
          "id": "2430d23f-601c-4f55-9af6-c63c91332a5d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "63472658-4ce0-4ecd-a5bf-6bd41669dccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662d9b25-4550-4b8f-a102-d3b0bbf98a2a",
        "cursor": {
          "ref": "e968419b-8819-44d3-9c1a-8a71cdda9f91",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5ee81cc1-63c1-4223-93af-2ca038758707"
        },
        "item": {
          "id": "662d9b25-4550-4b8f-a102-d3b0bbf98a2a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f0517991-eae0-4091-a578-102180dfa0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7d637c-5e4f-4f51-b6db-c69fbb60d91a",
        "cursor": {
          "ref": "e5c19018-6b58-4d14-93f2-890d2feae9d6",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7e4b20a9-8220-428f-b0d7-60cff8cc4855"
        },
        "item": {
          "id": "ac7d637c-5e4f-4f51-b6db-c69fbb60d91a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "777e0272-12d2-4c26-bacc-941bc4c468f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de79ae2-bb51-4c02-a39c-fdc0100545ff",
        "cursor": {
          "ref": "fed9d13c-8bb3-4a9b-8b3a-036fa76dce15",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "647ea322-1228-4326-968c-b153141ae330"
        },
        "item": {
          "id": "6de79ae2-bb51-4c02-a39c-fdc0100545ff",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1c50c298-2863-4157-8acc-53a4440e5eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4802f5-1650-44d4-8f68-f5c1f8fba23f",
        "cursor": {
          "ref": "1f934441-5822-4dad-b61f-fd3b77e065f4",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2b87cb94-96f9-40ce-8379-fdff0b36911c"
        },
        "item": {
          "id": "4a4802f5-1650-44d4-8f68-f5c1f8fba23f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0635f94f-195d-469e-bbaf-b7250a17b8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefcefc7-9a9c-4798-8c3b-6fa033de8a24",
        "cursor": {
          "ref": "a03a24ec-b3f4-43ed-8c1a-ff3d799ac229",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6c08202b-9657-4d57-94e9-8301b0240103"
        },
        "item": {
          "id": "cefcefc7-9a9c-4798-8c3b-6fa033de8a24",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5dba38cc-c97c-4110-b4a0-bdd467131301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7975b2c-8a8c-4502-aef5-c54f101df73b",
        "cursor": {
          "ref": "6e878b6d-9814-4ecb-aeee-4ff64d93d53e",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5aaf16e9-02cf-461e-ad58-3a549a57b53c"
        },
        "item": {
          "id": "c7975b2c-8a8c-4502-aef5-c54f101df73b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6c56095f-af00-4f1c-abc8-8efd962da493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbe939a-8da4-47a7-a83a-85147d0366b3",
        "cursor": {
          "ref": "e223b81d-99a0-4d2b-bd4f-129d9d3c5736",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a224f550-38b0-462d-9796-69957d734bd5"
        },
        "item": {
          "id": "6fbe939a-8da4-47a7-a83a-85147d0366b3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "14042059-634d-4e27-abb5-978649b3e214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7e255d-1ce0-439c-8191-7ea3975868e6",
        "cursor": {
          "ref": "7bef0fb3-67b1-474e-bd02-adab9f797554",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0fc2a4a2-2dc6-484e-9e2e-754d7c257ecc"
        },
        "item": {
          "id": "db7e255d-1ce0-439c-8191-7ea3975868e6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df567767-afea-4a2d-a992-044b70e7e38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23336ddc-f9fe-4a25-bcb5-eee3c144ee42",
        "cursor": {
          "ref": "3c8287a7-6b8d-4c34-a360-df7da2faf217",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "33690d58-5a12-4231-85f4-cf98cb5345ca"
        },
        "item": {
          "id": "23336ddc-f9fe-4a25-bcb5-eee3c144ee42",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "915eb4a6-4fb8-479b-b4c5-254bbd4f6a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e4d3c4-0245-4b2d-9cc0-38fe611c7dce",
        "cursor": {
          "ref": "10386e20-3f9e-4407-add6-5c477f057459",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c27b2bee-dea1-4e68-8157-22cbdbc51f6e"
        },
        "item": {
          "id": "68e4d3c4-0245-4b2d-9cc0-38fe611c7dce",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "39d8038d-25ba-4c88-a995-b5e35e0c4b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa5b683-7917-4abe-ac1d-e7e95e2ca0d6",
        "cursor": {
          "ref": "a92d4308-746e-4608-bd68-e252a48eacd9",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "40ef04f9-e944-442a-a5c9-f7d9e2323eab"
        },
        "item": {
          "id": "6aa5b683-7917-4abe-ac1d-e7e95e2ca0d6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a66df5df-5e80-4102-bc20-dac72539d9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8b4bf2-bbeb-47ff-a017-2dc73fefb6dc",
        "cursor": {
          "ref": "390e78e9-b52f-43a4-ad31-d967e5e23c11",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "29854c1e-7c2b-4908-a308-077ccdae3cf4"
        },
        "item": {
          "id": "ce8b4bf2-bbeb-47ff-a017-2dc73fefb6dc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb67f8ca-3fd4-45db-b554-0e226ae1edbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e02435-2efa-4e9a-ac89-3613e7aa4509",
        "cursor": {
          "ref": "56efbd7a-4ace-4318-a0ed-36ecdcc3ee25",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "81559211-98bc-45b1-9d57-a8afef5d8b86"
        },
        "item": {
          "id": "20e02435-2efa-4e9a-ac89-3613e7aa4509",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0b1581ea-5766-4b04-90c0-d18781568021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dd7537-4558-46e9-a5fc-279f97c9a3c1",
        "cursor": {
          "ref": "a4311c13-be68-46c5-8c0a-8569921fe7e5",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "505e1566-91a4-46a0-b229-d4f079aa07a6"
        },
        "item": {
          "id": "94dd7537-4558-46e9-a5fc-279f97c9a3c1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "303d1d48-7832-4f3c-8898-4c2bab9eca3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c05818-1844-44c2-8bfe-d55fe480c769",
        "cursor": {
          "ref": "5b5c439a-f34e-4520-8fd6-95173374eca2",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9f4a7589-abcc-4cb0-912f-168077b373b8"
        },
        "item": {
          "id": "e1c05818-1844-44c2-8bfe-d55fe480c769",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "41b7e4c2-2ff9-4fae-80a6-7c151aa9d138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e20e255-ed6c-4663-b9fa-e675f5926cbb",
        "cursor": {
          "ref": "9db6fc4c-acc0-4716-be3e-117316d9a127",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "51242d22-4a0e-4a8d-b132-137d47b9688c"
        },
        "item": {
          "id": "1e20e255-ed6c-4663-b9fa-e675f5926cbb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c69ebb04-16ed-44a4-a360-23a614709057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de62f2f2-f208-4a84-ba19-3d34fafaa99b",
        "cursor": {
          "ref": "4b863078-b213-411a-a8fe-454145104983",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ebabc568-d670-4c51-b16f-9d906d55492b"
        },
        "item": {
          "id": "de62f2f2-f208-4a84-ba19-3d34fafaa99b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a889d547-2601-401b-993f-68f209168f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cece8f10-f96e-48ae-aa39-588d86b4832f",
        "cursor": {
          "ref": "721d0d73-cc81-4d9d-aa3d-c1b3c21927b3",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f60fff1f-b631-4185-8a66-e56fd1aebab3"
        },
        "item": {
          "id": "cece8f10-f96e-48ae-aa39-588d86b4832f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3cee6e94-340b-48ca-ae28-83e2ef4d0006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd655ed4-d25b-4d4d-83ae-7eb8242cf191",
        "cursor": {
          "ref": "7ce46a95-7496-4b3d-b011-92963b07e8b0",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cd690d03-c45d-43b7-ba3c-2153f5e0dfc3"
        },
        "item": {
          "id": "dd655ed4-d25b-4d4d-83ae-7eb8242cf191",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "51577b99-0edd-4878-b476-8eedb02dcdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91b12ff-3a48-4d26-88ae-315cad554921",
        "cursor": {
          "ref": "271b7af0-0ef6-4434-8e3f-1c5e7391dd52",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "640756e9-c763-4b38-9005-018edb9048c2"
        },
        "item": {
          "id": "b91b12ff-3a48-4d26-88ae-315cad554921",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "76872cc5-7814-4bdb-97ea-c49780810104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac6ac9e-b657-4172-a09e-69f769cf9497",
        "cursor": {
          "ref": "ef56ed26-8097-4bbb-9add-206305a721df",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a0d1e22c-cdfd-40a1-a356-98df9a8b55c9"
        },
        "item": {
          "id": "bac6ac9e-b657-4172-a09e-69f769cf9497",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "81b703c3-c742-4ecb-8c36-14db8f194f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b188e18-3cdb-4ef5-9882-998acc9f685d",
        "cursor": {
          "ref": "8bc4983d-a202-4272-9c77-a91ae88a2ac5",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bc6ddd1b-ad37-42d0-86b9-2a929744256c"
        },
        "item": {
          "id": "0b188e18-3cdb-4ef5-9882-998acc9f685d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "baa57777-c96f-4245-92ed-51a371f6ba36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5043d7f0-2e70-4d53-b64b-d407c143b631",
        "cursor": {
          "ref": "b646dfcd-5584-49c8-8752-a0a62094ecb1",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6e37509e-aae5-4176-9e07-ff96a7a595dc"
        },
        "item": {
          "id": "5043d7f0-2e70-4d53-b64b-d407c143b631",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "59131157-7982-4076-a57e-8d061d868754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d9504e-aa08-43dc-9955-ac476fa13aa1",
        "cursor": {
          "ref": "3f09f099-6e73-4a72-836c-013d9c4e6d90",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6b3d560a-e8c6-4e9b-a16e-c53c5701535f"
        },
        "item": {
          "id": "30d9504e-aa08-43dc-9955-ac476fa13aa1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "639870b9-936a-4dbb-8fde-441e2d34d8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8dd98e-299d-4dd4-b9fe-4bd792d4331d",
        "cursor": {
          "ref": "a87ccfe9-ea43-4b89-b467-5249824320e5",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "986d9455-5d86-488a-be71-d94ce191e7d8"
        },
        "item": {
          "id": "2a8dd98e-299d-4dd4-b9fe-4bd792d4331d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "43ed5909-c439-41e8-be59-6d34e30d6b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b1b8b5-4768-4c81-ab37-103b5985fef1",
        "cursor": {
          "ref": "715b7bcc-6088-4a8e-8216-81efbbfd471e",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4b1b7f9e-77f7-45be-9279-12b7de3646f7"
        },
        "item": {
          "id": "95b1b8b5-4768-4c81-ab37-103b5985fef1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ae3f5baa-8cc8-4f2e-ad2c-a456bb2b42e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cf820c-ef0a-42f4-9f97-1b4d651eb1fd",
        "cursor": {
          "ref": "b31b3a93-2aab-4e60-8b92-c1c9366fb34a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b314bafa-b225-4f7d-849d-5fbdcbfecb7a"
        },
        "item": {
          "id": "b2cf820c-ef0a-42f4-9f97-1b4d651eb1fd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cc69cbe4-c359-4990-89d1-fb434cea5a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204bdb1c-5e2d-44c5-b4b3-b5537ab321f2",
        "cursor": {
          "ref": "cb11ce46-0715-443b-bbc1-1f837819546b",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "669fb18d-abf1-486e-9f1a-fe99df181ce6"
        },
        "item": {
          "id": "204bdb1c-5e2d-44c5-b4b3-b5537ab321f2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d836122b-4844-4321-ba11-1e39f9cff3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba56317-179e-406c-ae0a-c132f54d23a7",
        "cursor": {
          "ref": "cd0b2071-608e-4dd6-b195-25cc53e9385d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "78e50805-b2e7-4231-9657-a19167024937"
        },
        "item": {
          "id": "cba56317-179e-406c-ae0a-c132f54d23a7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a6e59d80-ddbb-42a6-9f91-e826effa1b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e0e581-6f13-4bec-890b-f0e1b33008e0",
        "cursor": {
          "ref": "6ab9201c-8bc8-47a3-9bc9-06cffa8ea7d4",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "26a20af2-09a2-47a5-af89-51408e42c542"
        },
        "item": {
          "id": "d8e0e581-6f13-4bec-890b-f0e1b33008e0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0a24da85-2852-4397-9d1c-625a85e57e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf562798-aab9-4aa9-beab-66a5706d494b",
        "cursor": {
          "ref": "f811bb47-a948-4efa-bd4d-1512d4f4fff1",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cde1e384-e545-4430-8858-fd7fd5898044"
        },
        "item": {
          "id": "bf562798-aab9-4aa9-beab-66a5706d494b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f0ddd374-fb95-41dd-bf6f-96a47111e673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8d3801-9dd0-490c-9333-fa9b40689ba1",
        "cursor": {
          "ref": "84645e1e-a611-44d6-8d4b-ed639fc290e8",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cb8a6a0f-2938-453c-9058-edb5e3a4a260"
        },
        "item": {
          "id": "3a8d3801-9dd0-490c-9333-fa9b40689ba1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "abf705e0-ee56-4566-8967-ce16e37f9567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9544c345-5e84-4ed0-a277-43affb2833de",
        "cursor": {
          "ref": "92b77e90-e45f-4890-a80d-8d514a5966a3",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "af67fdce-0e8d-472c-84e6-41ebf35a090a"
        },
        "item": {
          "id": "9544c345-5e84-4ed0-a277-43affb2833de",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0d98de80-171d-4911-b88c-86101fb592dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef878afb-9fbb-46aa-a1f0-01eb5759062a",
        "cursor": {
          "ref": "e41e4a3e-537f-463b-95f6-6dc54f211bd9",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "704f0719-0e77-486d-bb0c-d186c9634129"
        },
        "item": {
          "id": "ef878afb-9fbb-46aa-a1f0-01eb5759062a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "91623226-0025-453a-a6c5-fa1bffd7a9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec954c0-9bf2-44d9-b7b7-307c7fde3805",
        "cursor": {
          "ref": "0fb6c178-d01e-4285-aa23-8c6318ce7612",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2d4b0660-4a71-4df4-a1bf-880223d3c9fa"
        },
        "item": {
          "id": "cec954c0-9bf2-44d9-b7b7-307c7fde3805",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "51a74dd6-829d-49de-b69e-8abeb0cf736b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a2aae2-85c5-4685-9709-9d9672e336aa",
        "cursor": {
          "ref": "cf0f378f-2e65-42b4-b794-4716dadda801",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9a9dbc2b-d265-404d-b469-32f1b3a0beb0"
        },
        "item": {
          "id": "46a2aae2-85c5-4685-9709-9d9672e336aa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eaf502c6-7934-4526-8b6d-6618996b2a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea1ebad-a867-4f9c-b338-584ba2bc3baf",
        "cursor": {
          "ref": "82647c56-3feb-4c5e-955a-e61af2e2a6d9",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3d17779d-e65a-4b38-b345-28d1dbd89e27"
        },
        "item": {
          "id": "8ea1ebad-a867-4f9c-b338-584ba2bc3baf",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dd88042e-d5f7-4c54-8597-65e40ea4b321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ec46c5-a3ec-44ae-b569-f7d4981c437b",
        "cursor": {
          "ref": "9cfeee07-519c-4ddd-8f0f-9dda6a535d33",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c3ec7c68-acbf-4a12-8149-bcfb71f71a61"
        },
        "item": {
          "id": "49ec46c5-a3ec-44ae-b569-f7d4981c437b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "314c9430-7dcc-4d5d-8cd5-36dfd7dda794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9b6ad2-2a04-4036-84b1-ced045b1cabd",
        "cursor": {
          "ref": "a093e33b-6de7-4022-b05e-f5c84c2ca81b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f1ab257b-df9b-4627-b936-e56676bfff6d"
        },
        "item": {
          "id": "1a9b6ad2-2a04-4036-84b1-ced045b1cabd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4f8ffeda-740d-4365-9c88-83f035b93e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8543302-a84e-4507-ae65-61d47dd6c949",
        "cursor": {
          "ref": "3a447fbd-386b-484e-8cce-512fbbe373a7",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a17740bf-a6aa-4cdf-b4b0-28c02aef05ac"
        },
        "item": {
          "id": "a8543302-a84e-4507-ae65-61d47dd6c949",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ff3945fb-dd85-4823-81c8-45bf45ff5a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bc9252-93fc-42a6-8eed-65ee2f3fdfcc",
        "cursor": {
          "ref": "bd041b8e-d598-4e96-a3e3-e6074c8c58b2",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a7a901ae-1499-4cc3-ba09-e2117005c0c0"
        },
        "item": {
          "id": "a8bc9252-93fc-42a6-8eed-65ee2f3fdfcc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fd362af5-c78f-4f95-b958-5c11101934bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff810fbd-af48-4d65-814e-30484c0a2219",
        "cursor": {
          "ref": "3e1fb289-2433-4c20-b6f0-de0685be22c1",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fd5437f3-7599-41d2-95e8-e72903324b66"
        },
        "item": {
          "id": "ff810fbd-af48-4d65-814e-30484c0a2219",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a2522ac7-e04a-47e0-8a38-b1c82d633a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d032d3-34f2-4f6b-bb80-6131ad21fe31",
        "cursor": {
          "ref": "26f17f56-bf27-4120-9df1-9ecb04f1c0a1",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bb82dc2b-601e-49ef-8cba-3ef06aa344a2"
        },
        "item": {
          "id": "16d032d3-34f2-4f6b-bb80-6131ad21fe31",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b460a522-e92b-406d-ad05-72328d24c22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27aef390-10d6-438f-963f-5a8752a2631e",
        "cursor": {
          "ref": "ec4ee519-2cab-47e5-90af-a7efbd6c903b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e76d5fc7-e2f1-4869-bbac-2d0f85b6c711"
        },
        "item": {
          "id": "27aef390-10d6-438f-963f-5a8752a2631e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "515712c7-113f-44ad-89fd-e4311241b5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf4e395-9b78-4a33-b804-1e95de7bd020",
        "cursor": {
          "ref": "b7321ec6-1e62-4645-a3a2-2b4574673d6c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "93b1c322-5a0b-4851-9937-d1a2da794a3c"
        },
        "item": {
          "id": "daf4e395-9b78-4a33-b804-1e95de7bd020",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "21d45081-5c47-48ce-82db-372de557b294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7873eb2c-2b43-459c-81af-9f2ed7236de3",
        "cursor": {
          "ref": "dae384b7-0ade-48f8-b385-18711c8c1498",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0aaad719-4fb9-4247-be59-3a3d60d07a6d"
        },
        "item": {
          "id": "7873eb2c-2b43-459c-81af-9f2ed7236de3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3d0ccbf4-02ee-4deb-bbb6-b8ed38217ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479094e9-aaca-499d-89dd-c022ce46a0f2",
        "cursor": {
          "ref": "d4399cdd-dfe2-4a2b-99c9-85656e49325f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e5a1760f-064b-4b60-983f-85f5c038e8d0"
        },
        "item": {
          "id": "479094e9-aaca-499d-89dd-c022ce46a0f2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "813ec85a-77d6-4284-acd7-130ac4660fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eb4e2d-3a0c-4e57-9cce-13d876d2e8bf",
        "cursor": {
          "ref": "8cf06eb8-dd2e-42a8-955b-e47b71fd23ab",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e7c5aa7d-b41a-48a9-9f1f-c92490249bad"
        },
        "item": {
          "id": "90eb4e2d-3a0c-4e57-9cce-13d876d2e8bf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a1eb1020-17e3-432d-972d-9c3bbdad87e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857266ef-9bdf-4f05-832c-a72e5dba6719",
        "cursor": {
          "ref": "17da2e4c-0e48-43aa-a8db-0d3e4504cb55",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bd8e8444-0857-424f-822d-138f3253db42"
        },
        "item": {
          "id": "857266ef-9bdf-4f05-832c-a72e5dba6719",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e8f6e1e6-6ca1-4744-9a35-35112e8d2a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4555c2fc-cd43-49b0-ae66-83cde2cd15a6",
        "cursor": {
          "ref": "f5cc244e-8456-427a-9754-af16dbc0d5a6",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3908af76-2fc5-4c99-a1e7-6a1c32ab218c"
        },
        "item": {
          "id": "4555c2fc-cd43-49b0-ae66-83cde2cd15a6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ee142125-ec21-4924-bbe0-dc089283af76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5de7b47-f5ec-4a7c-bc0a-880a68e1ddd3",
        "cursor": {
          "ref": "8983b4d3-d910-4115-943e-3da2a8a4cb32",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0ead3b8b-d63b-40dd-8c0f-b95bd93a891f"
        },
        "item": {
          "id": "f5de7b47-f5ec-4a7c-bc0a-880a68e1ddd3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8bec874f-a043-4775-bd2b-bb84e238f5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2253a8f-109e-496f-8acf-b721fa945868",
        "cursor": {
          "ref": "ba54323f-9daf-490b-8d08-1ecb8e9cb63e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d55669b6-ca67-4b56-9c1e-647a3b76b58a"
        },
        "item": {
          "id": "f2253a8f-109e-496f-8acf-b721fa945868",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9987a63e-890b-46a5-8e9b-dab91217a1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58102eaa-bc36-444b-8f86-700bb647c402",
        "cursor": {
          "ref": "8df2416c-ccea-4036-bfd4-f6f878799572",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "aa825a26-ac15-4d1f-9bf5-68b0f5b06827"
        },
        "item": {
          "id": "58102eaa-bc36-444b-8f86-700bb647c402",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5892197b-0a5e-43cb-b68a-678056cfafd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbf9837-ce2c-494f-94a0-bec41abe1481",
        "cursor": {
          "ref": "1aeebe98-126a-4807-9f7e-935e240c1f12",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a4f6b91a-51ca-41f7-a8d1-9cd3a5560acb"
        },
        "item": {
          "id": "fdbf9837-ce2c-494f-94a0-bec41abe1481",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c1191f3d-48c4-4817-bebf-4d98cbe89c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 584,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c707594f-8e14-4c31-987b-3a41a8b891e8",
        "cursor": {
          "ref": "db0f7a08-c5f5-4662-9201-d20a161a1598",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "012fa07a-4ca9-4f4a-9778-8616c93bbedf"
        },
        "item": {
          "id": "c707594f-8e14-4c31-987b-3a41a8b891e8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e646ba5c-fcd9-48eb-9ad6-73613dfada61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60861666-aae6-4b95-8166-6fea237705d2",
        "cursor": {
          "ref": "05077c41-dfcd-43c2-adad-8af91a075949",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6bfce70f-f5ae-406b-bcfd-36331c2d5559"
        },
        "item": {
          "id": "60861666-aae6-4b95-8166-6fea237705d2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8c13cb61-6b63-4786-9b4e-f553dd200e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad38d9a-b7e9-4654-a463-647071403ed9",
        "cursor": {
          "ref": "abdd01f1-f78b-4e9b-9b1a-14e05f16c17f",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1d1037ac-ffbe-4e5e-a1f9-e35872f7109a"
        },
        "item": {
          "id": "8ad38d9a-b7e9-4654-a463-647071403ed9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2a3ad35b-1f4c-432a-bb3d-bffca146e4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28941b70-a4d0-473d-8b59-4ffa3b792294",
        "cursor": {
          "ref": "b27195e3-efe7-4e24-bbc7-be39bc63dcad",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "75280ace-e115-4937-8018-264a89545a92"
        },
        "item": {
          "id": "28941b70-a4d0-473d-8b59-4ffa3b792294",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2cabdea6-1538-44c0-a459-152880f49584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba23574-c259-4420-a914-b004275707a2",
        "cursor": {
          "ref": "1d0c5bfd-a7c1-427b-9e82-f54425cb4570",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "48b2887a-46be-4608-87ee-9d68b1d748b6"
        },
        "item": {
          "id": "cba23574-c259-4420-a914-b004275707a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1c36a304-4a75-44ee-844d-25bf7c434982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a8e783-ae11-4983-a3db-2f98d6163678",
        "cursor": {
          "ref": "07f46cb6-2c16-46f4-8928-bc1fd947af22",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "16b8b44a-6133-41e6-8588-24583abfbd16"
        },
        "item": {
          "id": "87a8e783-ae11-4983-a3db-2f98d6163678",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ab63a82b-6d62-4335-9661-1ce6a8d9646b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe4b211-e967-4946-9798-ad47448419e4",
        "cursor": {
          "ref": "47fa12fd-1b8b-4717-9021-4893a267b4d0",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fd480554-d065-4b99-927b-b5fbe2d73061"
        },
        "item": {
          "id": "bbe4b211-e967-4946-9798-ad47448419e4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2c5351b2-6c21-4a6b-b165-be5bc532c7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76506cbf-7672-437a-b456-a96e1f829bb3",
        "cursor": {
          "ref": "6285dedb-725c-47da-8022-0008fb9c7304",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5176a48d-bcb3-4469-9f44-f10009e25f95"
        },
        "item": {
          "id": "76506cbf-7672-437a-b456-a96e1f829bb3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8e1a001f-ac45-43be-8045-8995924cdc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446c3d85-66b9-49b6-aa41-a13b47458a6f",
        "cursor": {
          "ref": "1c184f98-b17b-48a8-aba6-abed2978c09f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1d041b94-9d71-4c31-b60b-1100d08c796d"
        },
        "item": {
          "id": "446c3d85-66b9-49b6-aa41-a13b47458a6f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "05800a10-3fda-4faf-9521-1dee1bd1b76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87d1ae1-9eff-4759-8a0f-2914d7ec06cb",
        "cursor": {
          "ref": "048a4369-e7da-4e46-b929-cb63716f48bd",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e853a935-4aab-4dc2-bbaf-cb3f6d1f1f0f"
        },
        "item": {
          "id": "d87d1ae1-9eff-4759-8a0f-2914d7ec06cb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "660656b5-0cbf-4c27-854e-81531779a1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146fac69-b356-4626-a7e4-2168ef127a7c",
        "cursor": {
          "ref": "bc6e093d-2b53-4930-8531-7b43fbc89308",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f34b72cd-0305-4d48-aa8d-72dfa4a2c3d2"
        },
        "item": {
          "id": "146fac69-b356-4626-a7e4-2168ef127a7c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bf7d2bf7-1e60-49c9-a94f-995838bc103c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8ee0f6-0851-4ea0-94f7-786a81ebe2dc",
        "cursor": {
          "ref": "e35a24a8-878d-462b-93a9-1d542484639c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9f6d99a6-6494-4cfa-a8a9-35524b985335"
        },
        "item": {
          "id": "dc8ee0f6-0851-4ea0-94f7-786a81ebe2dc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5d93b4a7-02e6-4863-862d-40de612d4234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d1457a-d308-4aec-9ade-a564984c1f37",
        "cursor": {
          "ref": "afb645da-bf4a-445e-b604-f64cd22c7d4a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "adf260a6-dbc9-48ea-93c8-38270695ff6f"
        },
        "item": {
          "id": "24d1457a-d308-4aec-9ade-a564984c1f37",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4781141c-6c1c-42ef-b4bf-d20567f80f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27c638a-98d1-40a1-a06c-5036362575e3",
        "cursor": {
          "ref": "1cbba9ae-3cde-437a-a545-a6fcb8e50e10",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "af09e9f8-3960-45bc-a10b-95961f12650f"
        },
        "item": {
          "id": "b27c638a-98d1-40a1-a06c-5036362575e3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5649b33c-dae9-4727-96f1-e65cd3793723",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fd567359-6972-41c0-aa77-552ba9cd987b",
        "cursor": {
          "ref": "15915726-12a3-4848-818e-1ec1c587cec9",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6a012e41-e123-4969-b805-2f8b90ad1239"
        },
        "item": {
          "id": "fd567359-6972-41c0-aa77-552ba9cd987b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "484db38c-b798-4313-9c7a-ef6c0956fd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9d2177ab-55fd-4b14-a1f4-9aa546a07fc5",
        "cursor": {
          "ref": "4aa95406-80f9-4030-b442-c5012509a4fd",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fdec5aba-8050-469e-a343-a06120463b8f"
        },
        "item": {
          "id": "9d2177ab-55fd-4b14-a1f4-9aa546a07fc5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2ef21fc0-8a8a-4a14-b75f-11c01f54d84d",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9ce024-c238-4eca-b66e-6d27584f8364",
        "cursor": {
          "ref": "4b272ef3-867f-4dc8-b3bf-5b2d41ac845d",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c4711e1a-5e35-417d-9921-a8c63d690bcb"
        },
        "item": {
          "id": "ab9ce024-c238-4eca-b66e-6d27584f8364",
          "name": "credentials_verify"
        },
        "response": {
          "id": "afa46ad5-7ec2-42a0-a42e-2176a1d7d2cf",
          "status": "OK",
          "code": 200,
          "responseTime": 1788,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d23ab50-048f-4369-8930-f6a2540503a3",
        "cursor": {
          "ref": "b6b102d0-0c78-462b-8d80-ad86f8fed831",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "55e5e131-91bc-4742-a938-cebba260f6d8"
        },
        "item": {
          "id": "3d23ab50-048f-4369-8930-f6a2540503a3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3e737874-1253-4f3b-9d47-0da755323bba",
          "status": "OK",
          "code": 200,
          "responseTime": 2369,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
        "cursor": {
          "ref": "c842b9f0-3c5a-4b55-8d0c-5c6fe69fc2a5",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7fe0b00c-bfd5-4435-95f4-8b152c57c871"
        },
        "item": {
          "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "faffb194-234d-44d7-ae69-a29e0e91413b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
        "cursor": {
          "ref": "c842b9f0-3c5a-4b55-8d0c-5c6fe69fc2a5",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7fe0b00c-bfd5-4435-95f4-8b152c57c871"
        },
        "item": {
          "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "faffb194-234d-44d7-ae69-a29e0e91413b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
        "cursor": {
          "ref": "c842b9f0-3c5a-4b55-8d0c-5c6fe69fc2a5",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7fe0b00c-bfd5-4435-95f4-8b152c57c871"
        },
        "item": {
          "id": "f776a6ef-5588-4c84-b1b3-22ba16af2d9d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "faffb194-234d-44d7-ae69-a29e0e91413b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "36dc8693-ac36-4fe0-9d16-cb1ac9eb1d80",
        "cursor": {
          "ref": "06821a08-1a20-44f4-8d09-eb043808e2f0",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6c0d55e0-d3de-4f34-8015-312bc9d5fedf"
        },
        "item": {
          "id": "36dc8693-ac36-4fe0-9d16-cb1ac9eb1d80",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ead9a600-ef69-4d52-b3e7-5e3aa1c4ceec",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0e731286-c7f1-4947-b346-8c80d4e01ce0",
        "cursor": {
          "ref": "a6fea6e8-e3ed-4fff-b752-2cd5fa0ece8e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3b9f1523-b18b-48e3-8843-ee27e4da5747"
        },
        "item": {
          "id": "0e731286-c7f1-4947-b346-8c80d4e01ce0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "59073d8c-dce9-4b7d-93f7-0f089528f0d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0e731286-c7f1-4947-b346-8c80d4e01ce0",
        "cursor": {
          "ref": "a6fea6e8-e3ed-4fff-b752-2cd5fa0ece8e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3b9f1523-b18b-48e3-8843-ee27e4da5747"
        },
        "item": {
          "id": "0e731286-c7f1-4947-b346-8c80d4e01ce0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "59073d8c-dce9-4b7d-93f7-0f089528f0d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8de18ec2-5dab-4bf7-b013-5614b1f8539f",
        "cursor": {
          "ref": "6572bc4a-115b-4b45-b22a-23eb214458a3",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "88253cfa-5a78-433b-9c1e-df1f584d5d70"
        },
        "item": {
          "id": "8de18ec2-5dab-4bf7-b013-5614b1f8539f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "09443d22-788f-4e7d-976f-b7aa33020a6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 201,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "34b5234e-ef5e-4768-b1e3-ab377868216c",
        "cursor": {
          "ref": "cf644858-d47f-4c74-99a6-4bd005d574b8",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1b332033-1532-4a36-870a-fa9cd068254f"
        },
        "item": {
          "id": "34b5234e-ef5e-4768-b1e3-ab377868216c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "649db7dd-bea2-46b8-a3f7-459abafe7e01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "34b5234e-ef5e-4768-b1e3-ab377868216c",
        "cursor": {
          "ref": "cf644858-d47f-4c74-99a6-4bd005d574b8",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1b332033-1532-4a36-870a-fa9cd068254f"
        },
        "item": {
          "id": "34b5234e-ef5e-4768-b1e3-ab377868216c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "649db7dd-bea2-46b8-a3f7-459abafe7e01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "51c1e11e-c00c-40fe-b66a-7fbbc12b1cbf",
        "cursor": {
          "ref": "67157b33-93ea-44db-88ae-f31c9292410b",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6cd75e58-cd2d-483c-9092-9e61cf6fa1aa"
        },
        "item": {
          "id": "51c1e11e-c00c-40fe-b66a-7fbbc12b1cbf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6c1b2dc2-423a-48b1-9b27-94fad70ee141",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}