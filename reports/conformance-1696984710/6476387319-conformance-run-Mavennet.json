{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2e15bc89-e4c4-4412-b876-8997dc98f415",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5628db22-2633-4eca-b783-6a7228ea28a4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45eac494-8dcb-42dd-9c05-3e669136dd26",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "efffc9ce-ec40-4d3d-aae6-08b647da00b7"
                }
              }
            ]
          },
          {
            "id": "6a971e4c-17c9-440a-af7c-9f869fa30432",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f715b0a3-f4f6-4a7a-9686-e6807a3a93c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1aafc961-216a-44e5-9c7d-a2cfd16db8c0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4c5356ce-293f-476a-85c3-30cb9453b931",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ddcb664f-4360-4415-ae1a-2535e4e7c4ce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5195a1a5-be02-4ba4-85e4-f9858d21902e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fb75c27-bf7b-427b-94db-f5ba533ee0c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b126fe2-cae9-47b1-b36d-c37793de0b75"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70580adf-3d39-453e-b71d-e8d19201ae4b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b760969-963f-4ed8-a8d3-31da8064f2ba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "584c88cf-7390-427a-af9a-e0329a40d442",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e855c7d1-901f-4234-9616-6998fcd7d20c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55b2a0ce-959d-4492-96e1-244ae2e64f28",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1835775a-35bc-4182-8ff2-e072ee82fb50"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7707a34-e555-416b-b3e5-860316a326d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e40afc1-1f32-4df3-8b96-94e59aa14f6d"
            }
          }
        ]
      },
      {
        "id": "8dc1a8ad-7e20-4712-883f-a599b444a67a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4cc4544f-3c04-4d90-a080-a1889dd2f0eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e203478-e89f-463a-8c73-536b681c0180",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "73709661-5164-43cc-8b48-61075cebe3f1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ab1d83-66df-48f3-ace2-fbfeefad4e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00a6f694-fb63-4182-9f21-148f5bc7a9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a21289-fcf2-458f-a431-5bc0cd1de8a6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd63a4eb-c4f9-4063-8852-32e26945ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7538f83f-caeb-4f28-867c-1d03250201da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53783671-f2fa-4304-a51e-eac7040f69dc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cb3c35-3547-4e9c-90ec-0966e4da78c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eddc050d-a04e-4e98-a6cc-eb2f665355d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "351449d2-ed31-4536-997c-8bbaca7562e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2fe1b64-bb0e-4abd-8b3e-f94083f47b0a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4708eecb-9bb5-48a0-bbfa-c4bfe7940f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18dd61a9-e8b5-45cd-b3d6-d1d391b434c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abe2a35-10c1-4980-a9cf-999f9c09f071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6f1394-9c0b-4e13-9ce0-f5cfed00a9f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "55e01977-73f1-4139-adad-2f31aa5d08c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5364ce60-330a-4cba-a475-3cd7ab626dc1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7632969f-ceb5-44a2-9712-0a870962b30e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d9036078-e567-41eb-99d9-65b51e7cca1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e671c759-d799-48c7-81ab-128242d0ba08",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7cdd8072-6319-4df1-afa8-69fa01c78ac7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b73bb91-749c-48ca-b010-78ef2f7bf883",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0535c7b7-2cc0-4cc3-bbd4-b234070d2678"
            }
          }
        ]
      },
      {
        "id": "c5404157-5954-46b9-9cdb-3c0043827f18",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5da62d8a-89f3-42f5-84b6-59142e8a27b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c00efbb-7b96-4bfc-bea4-47dcd54d6765",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2bad006f-7f4f-4b3a-a1c7-359dfe9c7573",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6688db87-adb8-4e24-9155-46e54c852e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdb38af-9aba-43d6-9788-9000028d5392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334bfead-dadb-4370-bc8b-524b91e45c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2367b7a-1537-4859-9ffb-8408f348c5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78babf40-ce7c-4fe3-a572-25857fb5bc93",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24df87d7-1fb1-483d-9ac6-baf147334e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3b035d-47ed-493e-a196-e63ab483327b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d3a1ed-d4c5-4dd6-86f4-dfef95220108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e5ce22-e18f-497e-b42b-3403340e87e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54167858-8ea4-44f1-b747-305b90a13c30",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503e1fc8-e30c-4690-83c6-9c54ecee8944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a89eec3-2dfd-4db3-93f9-5ff8cc110be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf57970c-648c-4df3-83d4-7bf04ecdef61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dfa5d89-17f0-4dc5-88a3-671d3890e807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5dbded-bb09-407b-b84b-6934dbc5d836",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0916e284-f3dd-4b94-a3a6-7c78aff4dcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6287bf3-a1f8-4b9e-b540-569e9b2410f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66e3b37-2e27-4124-9216-d564fb3c1873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f82b1d23-2411-476f-b41f-07f675d0db88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f11bf35-b95e-40b9-ab1d-1cc387f1dd19",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ac8682-6d6d-4505-8f7f-9af0ede69dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919ff34b-1276-414c-8265-60e9749eaad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc240d6-d0f5-4df6-ad53-635dec8c6923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d5a841f-067b-418d-94be-8813c054ceab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07111b97-b3a0-405c-bd91-90a8eb112d73",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609700b9-be67-44a0-88bd-436f3becfcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b56804-57f2-4a50-9915-8d53af33e0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16213219-4721-46c9-b7ec-b4dfe11cd370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3336035a-3bff-428d-9fd7-4a7d1052959d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e6dee0-2a42-41eb-b912-c9bf7352c912",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22717d2-4ca1-4b23-afaa-ff8190d749fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c38ff03-f1e3-43d0-9088-8ad986814ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4777bc9f-b065-4af5-a52b-8b9b88b1d544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bdcbbea-e694-45af-87b2-0d5787776aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105ce260-e0fc-4fe7-a9b5-e39392d4892a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a11f0e-a843-4fe8-888d-502f54170136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6356b658-dbfb-45a5-a023-352d384bf43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804223c6-0052-4e31-b019-f656235f98ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d849c6fa-9abd-410d-80f2-d185601fd168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9e65e8-bf76-41a8-9f33-7d47d238133d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adcd1c7-e86d-485f-a26f-d0949295feda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5033bab-4ff8-425f-a5e5-877f1c731f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42624d37-f28b-421d-8952-c50e517f9883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "169cb989-1139-4ada-8429-eaedf8c44c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925f1326-dce7-4557-b51c-c30cc3588ed4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbeee524-f252-49e5-ab68-6b5444d477e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da75476-a5c5-446f-b61e-7e9801d293d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c3fe0f-9653-463b-b0e1-7fa9d2a4f16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d3fc49e-9d3e-4658-9870-16779be0e595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f195e109-eb03-48eb-90b3-cffa27de3670",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ccd41d-d045-4322-87e0-7bf4322b4e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28c70c8-8e04-433e-a042-897785e26a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d158e921-77d4-44c5-962b-95bf95f16f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2481000-fa5b-4c2c-86cf-573c3cd17745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1ff0ed-f21b-4bbb-b7b8-e07182e85e0a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85e0c09-3e27-4c94-8944-9d068bc42361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0e728e-1a49-4ed1-9373-eb58c9113fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a398a618-cfed-42ae-ac28-7ee38a754ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e287f28-2be3-46c8-a2ae-33bed2aeb835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9675fe-4bf1-4269-a570-5946cd38a10e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3964ec48-d572-4dbd-82b6-6dcdc8fbabdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acfa77e0-e758-4559-b797-d6358cc8c1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c75b131-ef3b-4f18-856b-84d688020a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90ce397a-bd22-4a34-b2cb-da9ce75aade6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5aae9b5-f604-4f29-9a3a-ff46d8459f3e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b11c1e6-8458-4c0d-80a9-a41a073459af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdfeebd-f4ad-4064-abdc-e9ca5b01561e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0b1277-c094-4266-b613-97bcc6a47a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd0f0b78-7c68-4ae6-9a83-41a69c66d66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81df1bd-18f1-4adb-a08b-7622c5bf4267",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96224a47-0d78-46e7-ad63-f70b6cea2328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db6c1d4-06e3-49ec-8fd7-e8a45828d87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5066226f-6c49-481f-9c01-39f23521c5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad89774a-9e4d-49a6-9def-98379194698d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7402a5f8-1391-4bf4-ac2f-2fe81889d325",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf36d23d-4413-4146-a3a7-ed29bb46f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca2c3f8-72ae-4e49-ab55-b8162e59e262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91a3147-4d21-4905-8772-f771288b3123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "398971a6-250c-4b46-b3a1-63fd9732243e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03570a7-ab2b-4dd9-b00d-8348c11569e6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cddd93-3e37-42ee-bf30-87a831fdcd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96190fcf-74c7-4f86-a1a7-31d8fc2f9e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177f3930-133f-44b3-93f8-fd42569623cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27771a31-2495-4679-b209-1ab1810ddf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102cf71b-6413-4178-9c26-170a625e5ad7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743532ff-1ba4-43e3-820d-5e7f7a2d3f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fee0dfc-6669-4fb8-a945-72266fd636d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dc506d-7eb5-40c4-bf52-8c17a91d9a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "645870ee-c4d6-4113-9817-10668a165675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8db6417-0157-4621-86f8-ab43b0b6727a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640ac946-f713-4e11-86ed-469b4c39c3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17fe42b2-3df9-4359-b0ac-6275862430e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631ae30e-c8e3-4bd0-9b87-a0bf56e1f62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10c93e88-0c35-4c2d-b357-92b64a6cb881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb731b72-a44e-4d43-9bf1-3a08c580e3ea",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6115d701-69a0-4e97-8278-1e598368457a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44be466d-3dbe-46fb-a48d-e76d7ebc6d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffefde44-db69-4543-a35e-dacb0027d257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65422836-d4a4-4f51-9eb7-1df064f9a309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e8e2a3-c6dd-4ee7-9255-4ac64f635dc8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f0f69a-f28e-4995-bf3b-73aa4de93c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0971320-8bc1-4616-b40c-1d873c8e2e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67af7f7-1ba3-461d-80aa-d4f599f451f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa058446-1a50-43b8-88b8-bb23435c394f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565aac0f-e02b-4334-8f1c-dd04733c8a59",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b330a91b-6c4e-4a39-aaa5-678a23cfbb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66eea3ca-8ef8-4298-b5fc-c8288f9d8b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8789df-04c0-45b2-a058-7ff5885c4cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18664dc9-0f1c-4eb5-8f4c-d122e8cc9738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55734b8-dfcd-4aa8-be25-8d65a80fec33",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a7dd4f-b410-4365-b92a-d75e59b393e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6d49e6-4320-4ee7-aec3-5ae0bc2a8b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae42c32-d1ec-42a9-bd33-afb9c106b660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc70bc0-2627-4874-86f0-5f866c3f9902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2e5b37-374f-485d-a0cb-adcd1f65d8ab",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffb25a2-95b5-4bac-a2a9-45ab1fbc79d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59cac5ca-a965-4a3e-a8e6-9136a1d7e3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f0393e-2557-40d3-9054-07f1e1299ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cee3a454-1662-45b4-8e19-2deb6d22b68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95a9878-a9ec-43dc-ae83-65bb07e0459b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fbdebb-0603-4986-8bee-b27b13835ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34db8795-2280-4ae4-8109-1c53ee975929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7dca67-da8b-4d2d-af91-97bd80981d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8bc49d-3359-4e04-85dd-e247f7771415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa00fe0-29e9-4657-8acf-a3a57b80f7aa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35951f6c-3716-4e4c-802d-a5fbaa560801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868e788e-756c-40b9-a17e-35d44006efda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ca1cec-c133-4fc8-9de0-f9c97370eaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bf7b76-8aaf-41ea-b9ea-c8ecdebc259d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022eb36c-ba5d-40f4-91d6-edfc5c4d3614",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e527df03-01da-4261-bcdd-0bd9c3bfe2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ea898c-8035-4d7b-ac09-42d041bcf295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d413798-ab94-4389-9cd6-814a4059f247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c81eb264-4989-441a-9fca-02bbb3ec2f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5e3a3a-094a-4b5b-be56-a7a496dcb79b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b386b415-6b3e-4a6f-94a4-8ee21ae6d3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c2c302-a5dc-4761-b5fa-0eb60bb793bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4db2eab-db8f-4af3-9d0a-5fa216d3be2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f48284d-4dbd-4846-8959-21d5460e29d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4184d6-9fca-4115-851f-23954560e096",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ee665d-e03f-4c31-add1-5df8c4b87a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab65e88-031f-4b2f-a944-bc51632291ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab95893c-17a2-414c-90b1-14f00bdc136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaaea0a7-92b6-4d7e-8e9d-1bd27fe38294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99f31fb-7dc0-4544-ac73-52576211a825",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d929f427-4b83-4eb6-9495-ec21824e5cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad38489-6e1e-4e4a-86a1-a87396cefa21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7de3be-dc1a-4ab9-8d3f-583cd5159c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb17c5f-015b-4aae-aaeb-8731e5cf4934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9559b51-65af-4c2e-8f04-284385c67e1b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94c338a-bcf5-4b87-b47c-cf4c04121229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b82b9c-4579-446c-b30d-203f5ecfc174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f988bcbe-a783-4aa6-bb66-36eca04b5697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05caa626-a2ee-4b0f-8d45-f53351fee4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a63780-a6c3-4748-b9b6-73aeeb3e3762",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd1577f-f03b-4bf7-b7ab-c8ea3feee84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f340a9b2-1945-4bb5-a2f3-8f5824407cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e230807-6dc1-4428-9380-68d80bcedd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8914ae16-b253-4eeb-a0bc-35b1fb01ba90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8700e34-dd23-4100-9da9-02c7a36d313f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0954ac72-e32a-4377-a6aa-4ccb82cd2aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57590812-360f-4e6b-a001-73af3e816188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0103f876-aea0-42ea-9733-a01b4cd1dac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34372064-489b-4c84-a544-a88a00158474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79f34a4-3fdd-4233-857d-f9e26efddf7e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b869dd9-c76c-4698-b3d3-de55b5218c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38464806-508b-44ae-93a6-692d24fe8798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1883539b-a56d-4b91-bcd9-e7e147a8525b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86d8a3a5-a560-4b59-b00d-8cc6534eb49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e7ea22-1b51-430f-bf27-11c5d415a29a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16ab777-680e-4665-9daa-a7c460187208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714970c0-21f9-4a4a-898e-4850a87b1e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5d5fc9-10f9-4376-a663-6dba949ad205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "10dba2dc-e799-4649-9881-e764dc2c0852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7d6eca-98b0-48d4-a179-a6770ebdbf07",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e7d0d5-ef3f-46eb-b915-375444f9291e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a4134bd-8394-461c-83f6-44491d846975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffde567-64c6-4794-b9c1-bc97b9775014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35b1fdeb-b3d4-46e8-a6ed-1c7a5c324393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6380a31a-1b7e-4b32-af2b-118dfa90aeb7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5eecd8-b3c0-4520-b747-8c8ac4c62103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa6d5cf-e16e-483c-99b6-00a5cbb79b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51cde34-a755-4ae2-a631-a391de26022e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28983b13-a25a-48af-a805-c8c7abfaf369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0376c6f3-1dd3-4f57-9ef0-360c2df9a4bf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab29b81e-3ac9-4a4b-8d27-49c816e659c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc245c6-81fd-42c8-9194-b4f3af966eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb22154d-82bf-4c2c-b1f1-24b6236a5401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9611a253-01e7-4440-bcef-36c5a68a6654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079cac7d-0b92-4d6f-bfc8-7a805b2c4535",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ba6a0c-7612-4a91-9602-a6c8fee498c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8e80b8-cc4f-4266-ae73-023d30c83315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb3f72e-5372-4655-bd27-f0c84ee4f81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd49be5c-12bd-4779-8522-963e6606a197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156f998d-6a8a-4c7a-ba43-840080ba9248",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e53c5-0faf-4ca9-a48c-7508d22fc902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b799c6d-f7b6-4684-a39b-974e5d392ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cae95f9-c394-4ab9-b661-cad3ffdf1ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d98559a9-2501-466c-bd70-2651f8ce33e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5ab23b-cb3c-4ef1-80a4-288ac9e72ecf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4f36db-b411-450d-907f-9ef31b20bc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda72511-1257-44a5-bf2d-65c314c96b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ceea7ed-2130-4fe1-bef5-708494e1694f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "360424e4-033f-4909-a098-c012b513c74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e219d22-ad9b-4dd2-9f7e-f2d46fdff905",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced50cbb-57cd-4b2f-bb73-846a7e84113d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033bddc6-1746-45a8-835c-c3e913a9a766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48c40d-4d64-44bc-b714-1fe7d6799067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d97be3c8-a328-4abc-849c-0a36fbe47488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca52c4cd-781c-4ee3-a53b-a81bb13cc554",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52371aaf-d76b-49c8-b9cc-90baf44690d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a6755d-bfcb-41e3-933e-ec35136d4975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4824d4-c417-4ff9-9eb7-d37d150bdc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0adfaa-3c7a-4716-9892-a589b4ac8a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37200367-f494-444c-b03f-5af45c626211",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b829aa-18cb-4663-bd5c-02aea625610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76934a66-5a24-46c4-ad2c-4d4f2d4c7ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6d1ca4-a4f7-467a-a750-538b45bd387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f845e6e-8191-459e-aad1-24ff6ff5399f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23235ee4-a0e5-44ea-9bb2-21df199b3272",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f199c7-e81a-473b-9939-3e3f9445f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d7e4ab-a7d8-4b70-aad4-fae6edd871ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4aabe9c-dcb1-432d-95b1-47bedac2a5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "862ca5b8-9ef5-4685-ae3a-90f52c52b3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442ff7d9-1e3a-4a26-a28e-84ce4800158f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4707c25-2f65-41d4-ba21-7744e94a4d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a33dc0-7366-44cc-b05a-e2f413c10681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795132af-97bc-43e4-8610-51d9b34dddaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "515a41d9-d442-49b1-8891-fb42bfe764a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4658e092-3caa-4625-a24e-cd70a6b5f5f2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e338d5a-e5a9-4cb0-8601-fdb31c40924a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e103bde0-cb0d-4243-b6fa-2ac815628153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58854501-399a-47ca-bba9-59a98b2a9420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a54a505-8bac-425f-b912-7ec418166083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ac0fb4-ddf8-44fe-861a-0ddd7c81ad10",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75de57f9-b73c-498a-b5b0-d632f4d63b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815be55a-ad39-4795-ba81-23698e509a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619114f1-1678-4e4d-bc56-745559e58d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b63b8f3c-8e79-4a22-978b-4b92832c4a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205e7276-0a72-4c01-a7cf-155688d43ef1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5170237b-8e30-4bab-8c67-fb81b7b81215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad01c0b8-2e4b-4094-9ae7-d91a4cb8a372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946cd9f3-45b3-4dac-babb-92bd312377ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9596ce60-f739-4595-9e0b-25d173d27384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab7ae9f-486c-4c6b-a342-1c7f01fc7254",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2153cdb-e193-4c81-b298-d862e2f7afeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90274f7b-5719-431a-a2b9-3ec1b5bf593b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea7baeb-2a70-483b-8640-179fd22a291c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c9218d-d84a-4605-adfe-f29eb91943de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2958a4-d4f9-4053-a060-012f255cc641",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070fef3f-bead-4c1d-825b-810c584c70f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bb5a0d-1091-4786-8fad-e77188473a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3634f590-22be-4dde-a44d-b4e91a49756b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "643cf8ce-b567-4321-aac9-afbf93b64009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bf6f2c-b57a-4669-bcc6-8a94e351bd85",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a00f261-7254-409e-aa9f-cf14d9570e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f90881-80e0-4668-9f35-cea934003ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c255727b-36da-4a67-8422-37f91163c5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7191d6d-7086-497b-9bcc-89dce2e04fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e399ec-9709-4d68-811e-05298b5359bd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21986a7-77dc-43c6-9f3f-4c4047ac64cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3a856f-ded9-4859-ad85-bf12075c4962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5262da-69d6-4487-903f-92e30fb23d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "680c18cc-f3c1-4400-bfb1-cb75dced4d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb5db44-3f24-44d7-8ca2-6cf93332f3be",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ade484b-9c28-4217-b818-41e6879f8698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5216d654-5d21-44ca-a798-7fa11d54efc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe31b20-de45-4772-b581-cf99c5ca1596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb380189-f761-4723-af82-f463468158ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c46c963-ad5d-4750-9a88-7e766eac7890",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db85df8-1f91-4181-9a8e-38e4c071119f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383b4acb-930c-4bdc-bd1c-f0c8ab639074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5f371f-f0f9-45f2-9ae6-728bf6116f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c54739-7fcc-4410-9b92-3b4a16718552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d17cae6-8cea-478a-8bf0-065b740b6bba",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c887b89e-6609-4e84-a159-75a2ae86f28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ec7550-251c-4334-bf47-e3172cbe1c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ec7c94-18a8-4b47-88e3-a46d9d5265d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbed3e6-11a3-448c-aa1d-0f0856ae1717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172ccbd4-0c84-4e0b-b218-6c63e20485ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39916314-efc9-441f-ae9a-b5107ff89c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495cc255-165d-418e-a76a-1c69b472026b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed98f3a6-b93c-4f22-bf26-7117cc509edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "192dda61-ccaf-4c31-86e1-247271e2bc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0756f70-7a99-44e1-8e87-ae82f9841b8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695b4184-e290-4963-84f2-7381a79fec5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55768989-da81-47d1-bf78-82281db07424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a05884-e732-4714-a3aa-520f5b222928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "24112023-c170-45d6-b2aa-8d7e7c827f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b704e86a-0893-4f4d-899f-0f65d0a5e8b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1418ccc-f5fe-4900-bfbf-8368acc385e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6195dd-51c4-41db-ac69-3aefc84f0b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0f3aa2-fa7a-481d-ac8b-220b2584b779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d00ab845-df04-40cd-b031-0c295597e586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a682f2d4-0825-43b8-b67a-4d51379c65b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e1ada9-9e82-4e5e-86d9-4216e31912cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4cfdf5-efc2-4f69-a7ae-6a93ad8b8215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c796954c-2af1-4418-a209-86550d78480a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2e0cfe-4fce-47a6-b629-c977f5933474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea0cd38-5b3e-4fe0-9c28-406317bd21da",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbab5e90-3d2f-498a-a3c9-9505bb8d9381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a377eb6-02fd-4d23-aa4c-462ee25b8192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdafb336-e451-463b-806a-cd33000d9b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "273f990f-2af2-431a-b980-ec147ba4ae49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d37ecf-e366-4697-a937-a4e6876741b1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7889755f-0611-4625-92db-675699bb718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77075c62-afde-485a-8dce-d5de120e067c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3629236b-7150-4098-9f94-447eaac3b544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "59c4d3b9-fbba-4ae3-a296-2f6b1b1a3564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68bf0e7-b4fd-4f61-aba0-c107c4b12317",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffd5fdc-b654-4f66-afcd-b1017d140751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02685517-cc8f-456a-aa7e-b5b4ea6af426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bb32c1-9640-45a2-88d5-44f2d632ddc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "12a2a1dc-ccd4-4b2a-816e-dfa238550a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fa34df-726d-4152-b8d6-b9358aec0e49",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8d206f-05f1-4cf9-8c85-535d97ac258c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d23c16c-eeb9-4056-95cc-7655317b1ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1e8ccd-6671-4e06-bd80-9e6788aedcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d11d5f5c-6210-47a2-a033-1f7055c90535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fc30d3-c542-4d22-a038-e32ee293d510",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e689114-35d0-4387-864d-f68cb031c033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b14502d-ed66-489b-b5e7-0f06da8dc04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77868d99-5246-47fa-b5a6-bdddd64cb3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21c007a-912d-41e5-abce-1a3f23763eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767f355f-3370-48a6-8c3b-60461fedbcf5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4017c56-a479-4382-8d16-da67c78868b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e68a05-d2f2-4e68-9cc2-18d5663fb82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd476261-979c-4bd4-bd9b-5067c966db42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b869e1-2e84-4cf6-a8da-dae144cb6968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0a4db8-e2e2-4493-bf46-a8933348112e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5651259-113d-428e-bac7-8ff7d94366e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daeb8e0c-41a5-4dae-ba5e-f4b46755bdcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be4b048-5782-414a-ba95-8abe9dd7e829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0ac475-68fc-434a-9fd1-1a46db9afe91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cbb780-e645-4cf3-b81b-7cb72161c9d7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0777ae9-61c4-4720-8ee7-3770266cfa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d5934d-f4d6-4461-89e4-b4b0902b1523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611d8af7-30da-4320-b5e0-c181a071b793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac6ee016-adf1-42d7-9c0c-d83ca147e27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2930d7-76df-47b7-9551-5354e3d114a9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6735991-19cc-4fdb-b8b1-45edfb862b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f87e86-6e6e-41eb-93d7-297da2eb779d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9ecb73-6b46-4b53-bbae-71d227a7d425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d6f6c8-a3d9-4143-a3cb-d3ad16137358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d623aa-92b9-4f1c-a1f1-bceb5a13b1a9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf50c80-ab13-4be9-b0a2-24f7693c8c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecba6e33-2db3-4a62-9cff-d6a4a936d977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d488743d-76d7-40f0-8e74-4d2f64dbb490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8d0772-d443-4baa-974b-41c861e3c1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ca6ec6-bdff-4f16-b8c4-06472d355a15",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718840b2-01bf-4e70-ae11-dca5ecfc5c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e31380-750d-4cfb-a70b-bf51f83a8b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1244f5-3ace-4011-a1ff-b1f6b65b7a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4a5228-bcef-432d-afd6-8b7a28f4c184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6944077-f986-4109-8c55-b4079d403116",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70966fe7-762c-4c90-bdf6-ee2884ad45cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc792f1-d2fe-4e43-b763-55668c357cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db5dea6-86ae-439b-8e25-c15df8494268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d2b6c8-dd85-4597-805b-e36d61aadbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2848d36-b166-4fb0-9b0a-69cbd9b70bcc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f3738a-ccf5-421b-bf2b-ca397ee95b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4897bf2-2742-43a1-8327-58124388faa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9433162e-70e9-4f45-a3c2-a96570c2796c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54201628-8179-4109-8030-8e20c0ea7435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ae5ddf-c081-4fb2-bd7f-b2f40dd356a3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986fd316-0cdf-4a0d-94dd-ca44ca6acdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1698ad-fd3a-4045-85b5-176a45261461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6911e62e-b057-472c-a816-602aa343674e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad90d85d-ab2e-465d-bf4c-14fcb61809a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccd146c-f638-42cf-bd88-80624218b6d5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e528aa99-be44-4ab7-82ce-da321b60a08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e07c769-4e87-4df6-ad3d-ec2dbd2d023d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afc7f25-61fb-4660-ac11-a6b72f488cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd7c940-9443-411d-8fa1-c26bef2d2688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cc4530-6a18-4b84-a8a5-7591fcac3650",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d969aa-0e6d-4024-8e76-e4d56d400be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71815d1-f232-4a37-9eab-dc4240af77b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6d7406-e088-4b04-b1c9-96e9899118b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "058f57f7-fc9d-4f2e-beff-78e0efb9f689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75b8446-336c-4436-80a6-687322e2240f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54de5a25-82e6-468c-8ab8-dba4021103b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e975cdfe-1afd-49f1-a0c6-e7d53955509a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d963393-d6b4-473a-8ddc-e0972e8663cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f659809-b2c5-48e8-9275-b8c9b4b53615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dccc0d-4e89-49a3-ace4-5aea1f252840",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edc51bb-c13e-489f-8030-1480ff31aab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13d7b93-8e48-46c2-8c63-f7c6e7e1ce03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3068cb-5cd3-4c63-b3b4-e786f59685ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c43d622f-2f8b-4dc0-90e0-7751890bcd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ed93e4-83f3-4a28-93b8-f45428805d31",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0bf8e2-1fb2-4506-92f2-9b4d49ab988f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0065f0c-7779-4cff-a579-77b141b09191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef17ff8-4a3c-4090-8289-420b4234c497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0793ccce-e189-45f4-a328-051d1cfd0398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d95089f-be3c-4681-8436-582b50d591e6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af14be8-32a8-4b5c-b1b7-1629645a302d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aae53fe-8238-43bf-a891-d19ea50b8824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51ab8c0-8a73-489e-95c9-4782bd36f886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef68319e-b227-4cf4-94fd-130b8a959ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3c0437-cbe8-476c-8234-bf380b13d8a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f26db6-bc59-4583-8816-b16cb7475119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bedc77-6346-4b88-b181-a92e20e52367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbbbc60-0bc2-451d-8d10-b4b15c49c956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "531ffbdb-9ef4-4655-89e8-15b5441d2a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2720a72-37fe-4a84-8ebb-e5dc5e98dc90",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc668ce0-3913-448c-99e0-4c153e3af483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ea5969-4c53-4b87-a043-8c17af484269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f47f210-4fcd-465d-a79a-9f736faa39be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29552832-6d45-43f7-9ef3-78740d906da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5b80d5-7269-4819-89cc-e79201802160",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de2a87a-5e65-40ae-93c5-1610aaa903b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4886607c-31ee-4084-bb22-6e85913b5e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b77f8b2-dd83-4a36-b88d-a6b308caa346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "966ee201-633b-48d1-8ffd-d4c5ea1c0468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4be671-5752-4438-89f4-c517dbd0ff93",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5204224-f578-424f-82fa-3196e113ef90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845d0df4-71c1-4cb2-b575-7aca41e94989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87be1e22-4bb2-4e61-af8c-cc9204b47d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb8f5e5-64e3-4e4a-b126-3ba20288dd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c60322-4668-43e7-b6fd-4c737a3cbb99",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d37c312-e80f-468b-b2bf-5a90345f8344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a27e980-7109-4088-88dd-6f0931cb1b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a14e2f-6030-4f2c-9c47-86679adeba58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd9b85d-cb79-4774-93e2-82c762207d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1714cfba-5886-4966-a48b-c361a4f33c51",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9723943c-9800-464d-ab64-0ffa650d323e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05613aaf-4cd9-4f43-8cae-d4c29a98832e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dcc30f-d17a-43db-807a-970d8c5f5019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5473f6f-511f-4915-b378-c858b469979e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d4cf38-91f6-46d6-b2a9-ac2eb2d731a3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0a12eb-da5d-4d34-bce9-ef88c7197ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef20a4e2-3376-4a1d-ad3e-d47f3a910e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb4aed4-2e1e-4144-8e1d-6711cfc36a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "002f07a5-0815-46e4-9279-9d3617361eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a1f8ce-05c4-445b-bc22-46e855a6e118",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db456bbc-a822-409c-ab1f-f16fd55f081f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd8a44b-696a-4553-af19-35583a770294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4f610c-75cb-463d-b73f-a08fae98b983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d70b5939-9914-495c-ad10-2f66d9a240d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafca298-2b16-4857-97d2-704ad33ac5ca",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167a815b-6ef4-480f-b7c1-e880683e96eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6299ee45-f615-40a1-8633-fd4eef4dd33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c260bc82-08ec-480e-a54c-da6329ec99c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2da2c237-60a4-4a39-8d31-3139f9db954a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d9da30-b01a-49bd-9b21-8498c7970fb6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d851c0-b831-46c8-905e-3c8db5c3dcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3274ec28-083c-4f50-b861-a0e6a8549643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3444b8e1-96df-4c99-94ac-6e211e34844c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bee972eb-ca83-48d0-a910-da986897c930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac514c0-b42e-4bc6-a5e1-bf177fbda52d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dacdddb-8881-46e3-b408-76c3b25636cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c73a96-ae67-4801-b388-a5a59bc09801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd09d810-7ee5-4c20-9ca6-b7c2e53dd49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7ad52c-3208-40ba-b57d-75c41abff92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824aaec9-f67b-4c84-8aae-32f70683aa2d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76761109-4991-4e9f-92e4-46e06bf37b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5c31cf2f-1aca-47b7-aa61-5e8964fa356e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89c8871-d8b7-42c6-bb76-ecae98771c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f78111e-1d17-42ee-abcd-5b62784b1c79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f684fd0-ae96-411e-81ec-5ca5bf739bdc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6aaadfc0-ca5f-4ff2-9a2d-097fe886edbf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c64c21f-6350-40c2-9bf7-997237da13f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ba33ade-a4ab-4914-a505-09f2f4b9036e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7029f1d5-5abf-47d6-b892-dcb8f884a00a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fc98dbc-f3e3-43cf-bdfb-4123cded34c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e8e6598-6c2b-4931-9ff5-c4e1a20e557e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ab3bb9a-d9e0-4d2f-b854-565deff02916"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00851c7f-9577-4465-bf2d-1067873063ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e8003d1-1f41-48af-86b5-b90aea52a2b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d225e24c-f60f-4ad2-a8d0-cbb37a982c9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6d2fda6-7ee3-4aaa-9a00-78385e4bda9d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bf311027-ce6b-4926-af2e-485686e1f8c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39108beb-2f96-4469-a2ff-dc95b0bcd4d3"
                }
              }
            ]
          },
          {
            "id": "cb63f97c-8ce7-49eb-9cc1-27137bfd2870",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d17f6876-693d-4972-acd1-37d1ea57059e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01fd8a94-f34d-4d70-8db2-bd6a28196186",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2becdd40-de3f-4f10-9eef-777191c7d14a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "840a748b-97e6-4eb1-b899-87b2d037be41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fe4c32c-ed93-4772-81d5-ffa917081152"
                    }
                  }
                ]
              },
              {
                "id": "a4503a9f-05c8-4636-bc20-5e65eb7625a7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c586368-4d45-4c2d-833d-307b0d38ddcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26c67f06-5d85-4ce7-bb0d-77e8b003fc1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "912e746f-12ad-4746-a856-a7515610c1a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f30bbb2a-266c-43b0-b5f9-7eb09961d97f"
                    }
                  }
                ]
              },
              {
                "id": "6c44b7e8-69df-4ad9-92b8-f12b584fe4f6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3074b1cb-3dae-4b65-a0da-ccef25e9e847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9789e31f-2afc-4276-bde3-7542bdf282fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83c3d08f-78a1-49d2-a0f4-b47fcf52e3dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c011acb3-6bac-4bff-a0ef-3971064dd028"
                    }
                  }
                ]
              },
              {
                "id": "666098c7-c293-4590-92f7-668dd1633921",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff9c52fa-2ad9-4567-8642-eacacdeab424",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0099d7d6-4f8b-4c0b-9164-3f586ee1828b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fab36427-8429-48c2-9033-745d305ffd36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4190bc7d-e20a-4759-b3a1-d273ba107d74"
                    }
                  }
                ]
              },
              {
                "id": "b87ec384-88aa-43fe-bf62-f9abf6fd4f32",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d945d2f6-92d7-49b5-b773-db309c2d6b3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2051f135-d5cb-4bff-9a8d-a8b05b80b8f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c689226b-349a-4adf-99ce-db5d9754062f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d06bfbb8-15a6-4764-b189-bb36143dbc6a"
                    }
                  }
                ]
              },
              {
                "id": "9ff251c3-fd18-4317-b8f5-fe11ce8b0db9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef16d3bf-d1f7-42ae-b241-d94905a9320f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11197af0-efea-43d3-87c7-945d585fc88b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9000c368-9bdb-43ab-a2e2-02add76fb189",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c7016b2-1898-4ddc-a02e-fc9d07895396"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f509287-c4e9-498a-866a-63290a556b2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ff131b7-8645-4842-be86-cc9933c3b6ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83e94ef6-7f29-4ab7-8d6a-8e440e56b27f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62c4d747-af9b-4368-a79c-8aa48dd42de7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8c240ad-ca7b-4a8f-a5db-17763768d653",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "511419c4-443c-41e5-80f2-d8abb6dd05cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a982e401-c13a-41de-83e8-23d132418310",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd65d844-5bd3-43fc-9efd-68b1cb4ded1e"
            }
          }
        ]
      },
      {
        "id": "b028a813-abff-437e-afe5-75996aa68a5f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "14e5e379-e5a0-4691-8f57-661aefe3cbb6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae171c22-ea40-4a64-8ce1-dc292be52b5b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ecf33df-c71c-4678-b12a-a8abf94c783a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99114293-2947-4696-853d-1c2902f2296f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8d7d37-6ef6-4d36-b3a1-937348fc8e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43122e43-72d9-45ef-8641-2d755b70a65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc006896-7bd8-4a00-b6c8-094482b4b383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcaf1f1-8c50-4fc0-b277-798716158cf3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af0a8eb-93fd-45d6-852c-97be3c7363a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58723f34-5668-457e-b77e-e73801657e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34a3e6e-6b7b-418d-a786-85df1787d165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d60d27f5-c429-49c6-80e1-d3364602f8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01e38bb-6d45-450c-9506-b5ed00ea2657",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32cdbd1-c6f5-49e5-91b1-d09abb5a965c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a8189c-9fb0-4aa6-a42b-67a5a10ec85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d21094-0e52-4527-a22c-0e92d3d3a0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b73056b-e355-4326-8bab-80a39076d389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c29054-d976-415f-942b-853d29fb81e8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809fb454-ce19-4dcd-875a-896327978bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67463f34-77a4-4d09-b6dd-652447e190cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef5e205-3aed-40ce-93cf-3db85a54e780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71748824-8238-4365-ae1f-56e055142117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4129abdb-ee5b-4b11-b523-9b1faf2c63c4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f403da0-c64b-4c66-8476-fe131e5cf8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464678b7-5c57-4eb6-8c69-23644db8c907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f37d03-ec35-483a-89c5-c97189861410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f85b4f5a-b969-49a9-a584-e864fd8653bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc0adfa-7821-453c-9dd6-30e16762cb6b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06635d0e-3173-47ca-be53-c320970da3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6d8a4d-7823-469d-9df3-012780d430f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cc042d-542e-49ca-8b3b-19563678d775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f5f44b-5f27-4fd2-92c8-d6c504b1e447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64a083d-45db-4653-9649-3c5c53319913",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12ec613-6b7e-4435-bba8-adb58332e2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14447c2b-6aee-41f9-988c-a5bfbc70963a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9cf332-a130-4cb4-97ab-751e3f82a473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "655db3fb-651b-449b-b99c-0b6452b96236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79b616c-f037-45ca-b6d3-f219630cc675",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8408cc-f3c2-4b63-b943-8c658a1b6ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65dc5cd-fcc3-4fab-bcb3-c1d10c300da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9c8538-0e63-48a6-a128-b02dc7cc9024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebb47ba-0d79-4449-bdad-2e47652bd445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0993f5a2-95fd-4244-b088-1d8f2b6bebee",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dba2b72-d3ff-4bc0-be1b-9b6b86fdcaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf93fbc-9474-4f3b-8e7d-659061839b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e42e245-fd32-4846-9758-4a7cacd7f94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da7fd7e-71ce-4af5-9cfc-7f4135197885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00211d77-adfd-4d6a-92e3-146965504590",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cd7516-2117-44b5-b63f-bf8dd9a61b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d073ac9-371a-46fc-9664-c51c76311235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9180d8-a37f-42c8-a20b-850c7b796055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57fdad5-c75c-4279-8121-ffc0edefe8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d23feb3-2b21-4811-924d-a5499fee6eb5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959e937d-798f-44a7-b4bd-3bc83d1af3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2eeb2f-68ac-451c-bcee-6a2456200272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05ff53b-344b-4be1-8b45-f8a5bc8cca40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b3d96a-ecbe-44d8-abaa-e17bb5abab51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7753c9ff-7cfb-4f1d-bb55-f1a77e90f667",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d2c853-ca6b-481a-ac5a-844c87a76495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4fae76-e620-40d9-a99b-eaad9c7f118f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b197afed-a96b-46c5-b271-8dc83ea4acf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6952d018-fa78-4b26-b783-8fb6ca25bd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a02067c-8981-4287-852c-f685dd0eb27c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c4de2e-0608-42d9-8360-38b2c77e7487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2457ed88-0155-4429-a650-0bf39d41ebf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4933b6e0-87a3-43ff-94d5-afedf1588aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "595a542f-9e83-426c-81d6-9c3aa3d9774a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e94160-cb4c-45ef-a60e-569287b2a039",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e4be44-0977-4b70-a737-5b7a750382ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3b1a61-c50f-4e77-b97b-52fc56306e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7567e9e1-82c6-431e-a82f-f70a948662d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c23bac-12cb-44c1-a77c-ee22cc945c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb33784c-90be-4675-938e-df8f84f431c7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994f1ca1-cfab-4a4c-9363-64f4afc88559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d5dab8-2c3b-4848-9990-4abcef288a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79f51bf-afd2-4b85-8c60-5689442a0d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b9c8ff-667e-4069-b5fe-8d4c2c1369fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccd73c8-39df-4695-b0c3-2fe572d23865",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fc5d1f-39ad-4aac-839b-8ad1692a9d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6088433-5ec3-447f-b0f5-5dcb6f6fb3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86afd186-425d-4c35-9f33-d577c1634c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4b3293-d6a0-4709-a07c-116969947311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4546a86-cb53-4c0b-86b8-9069b2e670b5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435f1348-db67-4c23-8c0c-f00a3376ce24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444c28db-fa87-4cdf-9743-f837af6f93e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34237c8b-3f1e-4c48-b53f-b1dcfe00dc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "45969f09-38ad-48bc-8120-d334fd9e6341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0acb5c-6eb6-497e-b666-2f6278854dce",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123066a3-cb23-46e1-ac4d-6a520931dc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff292d80-2b45-449d-8d0a-4ce8d483de68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fb4d6c-597a-49c0-890a-f0ccff211310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a35e5071-7b1c-4c95-bc01-2d5b68826cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9065ee77-476c-48f2-aa3f-83f76e53b1fd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1398e6-2af2-4e56-80c2-bfbebcee2143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43544bbb-13eb-48ba-a69a-7f40dc4beebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac176fa-ed52-4e25-9e7a-b37b332fa942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a604b144-b3bb-420a-9785-ed14a3528f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d31f04-5790-4dad-8202-2326d267a30e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1a218a-b16d-4178-bed8-b3c22dabf02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5206f6ee-490a-456e-a2fb-058d38d9c383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38960169-6fe8-4058-bfcd-cc2c54ff7615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "186fa9cb-6186-41d4-9835-cbef7957cc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14d9812-91b0-4d73-a922-b7550d5b546a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae0fcd4-054f-4523-84a6-d808b651dc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c83b3a5-6c69-404b-9c44-a6dd18fcd715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456c0105-cce0-417a-8c6b-c0f546c092da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "888c0148-bffb-44d3-b618-6ae75e0da739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84893464-55e9-42d8-8818-0805235587de",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3437413e-7bbc-49d1-ad68-3aa6c42db4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2e1b4c-b3d3-4a9c-98cd-e3d92413017a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5eba9c-e17a-424a-92a4-175d45847eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "058aaa2f-efe1-4b28-8f59-b3c8689e7397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02a91a3-f696-42bd-adb1-48e82a1e8266",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c186bf-bfd0-4fa6-9cf6-4b7737575cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8346adcf-64ab-4a49-8e1c-b6009178db06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6968c07c-1c4f-49ec-9d7b-bc79e04ce079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b3f87e-9640-4362-bb5d-db30aee0c13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5779e44e-4cbc-4eca-9f61-9b0b22f14226",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4757b0cb-fea9-4e9a-8da9-1e228de96a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7d9835-07c7-4974-b60d-d59cd13d2fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e266d744-704c-4629-b129-c107bbc508f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3530ff8f-bfae-4e52-a286-6f03915e1811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9988226a-935a-4feb-8728-1878807f9042",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3274672-7f3a-404a-98de-4f434731963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b9736e8-7120-44d1-9569-6418c364a35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0597f2-cd59-4605-95a0-35c0bd8df59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e31290e9-5079-456c-9443-a22a412d8229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f7eac8-7ea6-43e4-aaaf-c8c690146893",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8acd8f7-c752-422f-ae5d-48b878ed657c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cabe9d4-8bba-48a2-884b-243f33bec86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fbda57-5e05-4b51-b7c4-a281e8c45ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c225b78-01bc-4c57-8aad-e34b54ba6fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76affc89-8f53-4bce-a649-2b2ea35bd210",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6193abba-cfaa-4e2f-ba97-5265d536a4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b7668a-0198-408f-a5a3-8dda3dba37bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d523aead-9898-4f9f-9adf-e49a0c503765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d325afa-27c4-4548-a4e3-d1d6249e0a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da058cff-c44e-43ea-bad4-96be44505876",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb9fcf8-e10f-4f81-8233-14f6266b0317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd62f5c0-59fb-4ab6-a9cf-4b0c2f708e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5e8cf2-8b12-48f3-ad42-2bc3a9ca7117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1957216a-4d96-4afc-872d-87bb2e42c8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05793779-80bf-41a1-a350-e9245e85bdc1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1edbb5d-69ea-4c9f-a586-19b62c4392f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df3f0b9-3ba0-4ace-9165-739dd65cbeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af16166-c4be-4210-81ee-090ff0121dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1a5879-41e7-4c7a-9f2d-da9046c18e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e89e75-1c7f-4c81-ad07-0acdada5301c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799a81a9-0cc4-472e-a19b-ff7b85aceed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee55129b-ff32-4e88-aef3-db85a155d1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a63e30f-04d2-4bbf-a90e-adec71008e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a795081-bfdf-4763-b013-d98c050e2fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd2b4ed-e596-4945-88d0-88064c1455d3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea482aff-52d7-4baf-9395-093f15511c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ca521e-7296-48ac-b53c-01dc3adb2d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebf830c-2a63-4cdf-9db9-128920be5685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6149cb3e-2932-47ec-9818-b5d095b82b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390351df-81bb-4a06-a71f-49264f27257b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e62c0f-6606-48cb-80e5-6104e7418255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1e7a17-a28c-430d-8eac-525f58b704de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b408c2-aed9-43eb-8841-d90ed0094cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d80c0d84-7366-4915-887b-916e0aef744a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6665d8f8-3cdf-4de1-b76e-fb30a21fac6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e66d16b3-85ef-4598-b49d-f7b987a3c832",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dd5ba1-a3f4-4083-8e7a-9e38d9dd7196",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b79a569f-17a6-424c-adda-015f63b5c655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d712eb5f-cdae-4cc8-b50d-7424cd4d12a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74a3d540-5a85-46bb-9e38-30d91bd34107"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b99f678-cfb6-4186-8e31-044922d52fc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47a27995-0da7-4615-b9f7-3fe5131eaf91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cca9c8b-dbb8-43cd-9229-cb3869211d8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1613f24-873c-4767-931e-7670deb84c29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f696d23f-ed04-4d81-9a8c-b71bc09a79d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "536fd953-7d1d-4168-b024-df59c1b062d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a768396a-64d8-49fd-b3c6-d9fef502cbc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ceed117-0a34-4734-9138-854d35bef435"
            }
          }
        ]
      },
      {
        "id": "3670ac0b-f506-45bb-adaf-accc3ea30afd",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "913b762c-369c-4f6c-a135-acd953798e45",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fda150c6-503f-4d50-bd47-04b5f56ec941",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "efc79131-4d96-4089-9c32-cb8e509a1a0e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfcfa2b-97a1-4a1d-90a8-cee4f907d451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88104e37-0643-4130-a499-4939b092ed7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2e94d0-94eb-4753-919f-51ee4e476b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0da27aa-dab8-4686-99f0-7b924f2cbe3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feaacf07-0f38-424a-ab62-c3f473e44433",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74065691-6a9e-45e8-bd36-7ab74353162d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df68e4a7-352c-42a2-8482-2766edc6ec69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaca851b-498b-4654-bdb0-46486f68fc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2577bb0-eb4e-489c-966a-403385113f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea3f36f-70ec-4343-b401-61a8320befcd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b10f55-fa86-4508-a683-b2c4bc925ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663ad014-02da-4759-a6d7-26d1c40ed745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e52d39-e910-418b-84d5-d322790dc7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1bb1df-af16-4636-a7d3-5b50a56bdcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d7dc66-b0c3-4fb7-b147-19598f080ddd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac2a503-2ac9-42de-828b-17467bb7d99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2e13a0-dfdd-4607-b82e-e703358f2042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179313dc-195b-445e-b8ec-58b89c79325b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f502363-8c92-4be9-a804-c1f090602419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe125902-b460-4cfe-843b-827233dd954a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a3c50c-abec-47d9-8e94-c2a7fd203e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92603a5f-05fe-487d-ba55-902835d6c14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17740f7a-b452-4a4d-918d-c6d9f451eee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47806816-41bb-4130-a0a2-69a475d80f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a74b56-fe3a-48e2-9c15-a9eae70769c9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b1590e-c1cd-4549-b6e6-aa459eb33104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e216dcf5-5522-4427-96a9-83d89a374036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f99ea2c-7ca6-495b-807b-7c05f495c155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ccc5fb-92bc-49dc-94a7-9892685e70a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4dd65a-63f7-4392-92a3-4580fe2bf6ed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743185e1-5b1a-421b-b1d2-8915cd410d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5392b16b-f702-426a-8ec5-4aaa7aca2615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d58e9a-3075-4169-a1d1-ead3ebad0104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fec12b9-d9a5-4595-b96b-f982bfd8007b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dbb455-ab9d-401b-ad8c-b9237f166950",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8778005d-54bd-4a16-b595-78bf04be84ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425ee480-1540-4496-b076-82c46c5fce57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54f1d18-33d2-46ff-851f-e1d094923721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcfa9222-420b-49b2-8d7b-b90a53499821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a074654b-657b-42ea-b203-313077d3645f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70aa8743-73af-4260-a478-2621c961c3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103696dc-a053-446f-b217-08e70d155ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c27b928-bbba-4453-872a-62a68a52c129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46344c85-7b61-42ac-b5a7-1b8a96f0657b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cb793b-01aa-4edd-96f6-3a3fb98fd411",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9a4bb2-c617-41cd-b723-3d562bfee7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4dc2b05-d750-410b-852c-2754de3aa8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee89e0b5-38b4-4fc5-bac2-7f2feca734e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9a9727-99e8-4e4e-8635-834c03adbd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0626b84-dba6-457e-924d-981a97ff6e07",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bacc04-ca1a-4f45-830b-bd55bdb39baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bcf0e8-934d-4148-8b46-9695c5ed9449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efe3c09-f130-4471-84ac-a671c23b0c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7a0fde-c90b-4d5a-962e-68160afb6f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e52c49-a5e7-4e4d-8c56-246056e48984",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea8cd05-3eba-4864-a2d0-d7ac5202c734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e016844e-80da-4be2-95db-6c25af9c3b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e50bba6-4bca-448a-9785-4f96ae864906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "523d0161-0b07-4249-be2d-452248be6a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6065a7-04f2-456f-9563-11e2f1b9a2af",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3664c4-66b1-46a3-94c0-e7465503f34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70aa6e3-a091-4a13-a4f6-9733932f681a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a340ae-eb7e-4bf9-a3d1-ec2d4276c4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd37ea5-2f4e-4757-abc1-5bc57639cf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49844f4e-787b-4cc6-8862-37cab93c1698",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9e3fdf-94cf-4d28-956a-85f70262c888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c9efec-c492-40e2-b4a5-f3b6b49adacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2564d136-b9da-4dee-b6f3-410c353291e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fabffd2d-c722-4523-b242-a80b0ca01de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff3c7ee-6c70-4ab4-8fc8-9419d442928f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850bee92-d73d-482a-a198-3144a558cbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d27fef-ce47-49da-a781-f84f96ac3e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2a3570-8bce-411d-8a2e-452c1b39045f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf98f531-82d3-4ce6-bf92-deda11720c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9806dde-ea7c-4a3a-babd-54698d396f06",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583d91b0-8c83-4c65-9278-44011dbefa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7a0a10-0023-49a6-9097-71216f736c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29766e0-2216-44f5-a447-4386e40ee9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76fb0ee-9a18-4bca-be9f-7f5ca3848c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad7d44-e142-4713-abb9-3854d3cb7fd7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c44029-a00b-4a37-a992-ef5c5d0bbaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d8362a-32e0-434f-aa78-329da3773fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de262ca2-10e5-4638-92f8-4a29f8f64ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2f8248-f785-47fe-9deb-256d3a053dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e54f340-aea0-487b-88a8-37a10919874b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22684a5-6b40-4157-aa5c-d3506d4843f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd07618-e666-4e60-8d17-0c0c59aef4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953e12b6-c799-4028-b6f3-4b833cc579c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d79264-cca3-4967-819f-a7f090a88aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162ebaa3-c003-425c-8efb-ce05f40f5050",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b15677-d91d-4a8d-b9ba-25fe9c48d230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562a65eb-dca8-4f08-afc6-751f6f2bc19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1ae112-25ff-45ec-8ade-ebda051a98df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9eda54-ff90-468a-8c31-371a1ddf7b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76514566-8c8c-4a05-afb2-f686f9f8c331",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23562bfe-ba8f-49e6-afb5-b335998fcdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77afa414-c54a-43f9-9f2d-a32c1db4805e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3108a48f-148e-455f-a420-52d73a029133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb3e9c2-1fc9-40f0-8163-962b17a41738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438d1522-1aec-460d-a72f-1ff77b23d8f1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8476d192-99c6-4394-9601-ff8689ede361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83b287d-e813-4021-9077-c8e8eb11e815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b3aef0-0050-484e-825e-a0dc49f67a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4536f4e5-7ad3-4bfb-8612-0aea3c59506e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7de322-786a-43f0-a019-85d2a38c64a7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab053b82-be21-47f4-b005-663d67ecdd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0b0816-1389-43df-b5dd-360f9f5e99da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb01bf0-f6ea-4a5f-b77d-56fc564ecce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4deacb55-5ab7-47b4-ab7f-3ff7fe815bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc86a0c3-223a-4a1b-ac49-91927695d030",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a237f0-bf69-4538-8345-c4de2c309490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a6c871-1035-4e33-af40-34fc3930c077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb76db10-cd79-44fb-aa10-456f44dcac94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89dcb03d-a8f9-4155-b555-daa5122e8055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478883c8-700b-461e-8521-36c2da73873d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beaa4053-1c90-4651-a6b6-ac6f4ac8fa5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aace38b-aed0-436d-b22f-fb83fdea6821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc6c84b-006a-453e-8e24-35216adf1db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf2e5fc-ae4b-4228-81d7-084ed9215cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c358eea2-82eb-435b-9030-a1d6b8216eb7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d1ad4f-f3a1-441d-a886-da0104f13c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2aa7d02-0025-42ff-bfef-6f3cdb5e29e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d869e21-621c-4253-9eca-77cfef62a535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6e2c82-825a-43f7-8a73-bde3b995e834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9ad1bd-d376-4d47-bda1-dfa1ce6cee4b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8be5c97-310d-4eae-8984-d00e9fa195f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7398c4c-db5f-4715-9e88-d2d782e558ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba19d10-97d7-497b-aa3e-62cd11eacf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b01d6d-7a26-4a2a-97c2-51cc28a8fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd81d91c-b5e6-4dc6-bf94-cc3c23db2b20",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650b1b02-17a0-461a-be5f-727845b54e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300bd907-2274-42bf-8d61-9d8d0df1225f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c02acc-ca11-4554-a15b-6011209e7f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "150ee488-56c8-4aac-80df-24841ab750fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ded96a8-88a6-4165-80df-3458db68941d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9cc52d-14c1-46a1-be96-630acfcfb384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7ca2bb-309a-46fa-9a6a-0dbecb93cad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583725a0-d372-428b-b696-8584cfc0338e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9825f2ff-5dd5-48c3-a9ab-4fa170921b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651f491f-593c-4480-8baa-a94fa4d83ad9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbd0ea0-3c6e-4cce-b1a5-b76dc50b74a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788d95e7-352c-4f7c-904e-9a4b5da329e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b8fa69-c1e2-4296-8bba-2ca87c02961e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "590f81d6-2bf5-4a1c-9dd4-f56ea108d9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19897635-1b38-4d0d-bab8-b107f6ffbd81",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e031444-1cb5-4f09-a324-2b46726023ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cc20be-5b75-4f75-9e39-befb00ce75a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85811f8-e73f-4775-a523-0fac404ecde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b523f3-34e4-4e22-83d2-dc59d90a6df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4883ca45-26a8-4b5d-96ed-0c2f5e58d637",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce9acd1-2224-400f-a483-03257f852d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3661383-fb24-4c15-80cf-c18a76db3576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a77ddb-c8c0-48d6-9b3b-7d4eb8151ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2286bbc9-b72b-458f-916c-5f9c9493076e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d363c599-585f-4c0d-964d-dcb38dbfc730",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85ae45a-8230-443c-a1c1-4d3234652f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79fde85-3df9-41ec-b348-465692e33399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bd4bff-5189-4d29-b6ad-2c7907c3ffd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed93e3a-574a-490c-9400-d49321550cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110fd75b-bba9-4101-a1ca-6f0d4929604f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eef948-485f-4e23-8352-71999c502058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3735d151-3164-492e-af77-fda9f058c39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065b7974-cde1-49a7-ac70-8f979f93517a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f92303-5c7b-4f9b-b4dd-981a0e6af5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728510c9-c73e-4c44-80a4-d7be1c966410",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfb8016-a147-463b-9497-7c91432dc049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eeaa9b0-051c-4319-ba0d-2d0c59c60418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913745a2-ce16-4e11-9558-128dea1ee9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "320fc6a7-4ce2-4984-9301-0d25a6711977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3bafbd-bf03-4c68-8f3b-a73419f81635",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fead816-e2bf-441c-a861-c6b565d0fe0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6514da4-b2c4-41dc-8654-7d00656ddba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b409d6d1-6696-432a-bf72-837db2d0f32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6425d7-d068-4333-a3f0-9db830ca7f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a59983b-9498-4c86-89bd-bc4db70b5407",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5202571d-3b52-4963-84dd-31cdd9c0e8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29445c1b-8986-46e4-a2d4-725868f817d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f370f6c-0df9-4e11-b70b-62f69f99e26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f29fba32-4dd1-4d48-80e3-4a17fb34b6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93cd2c5-30e3-48df-93c7-1b34f3f74da8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f76c9b1-ae86-4e45-8cc1-df6a852d61bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9532828-1b85-451a-bb73-5b1fb645ca9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b3169a-dbec-4da7-acf2-bf738dacf1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03379c59-f4b2-45a0-9722-6d079dd98c5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "991ca1f9-b632-41bc-ba84-7fec99c4c523",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09cd620c-3695-404d-a29c-715cd126c939",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b07d1d3-ee24-47f4-9363-0c28e342ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "292de5ce-6137-4e66-8e9e-f0af8d3eaee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963a578d-e1be-4eab-a02f-e4e2600a7dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b59dcb78-20c2-4473-8a03-a855e645b24b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "796e074c-e213-43fe-bcad-6c32ecbc8476",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5090301-d6f6-4230-9512-a9dd505fd419"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32baf6ab-f231-4660-976d-2a4a750b602b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd3a3269-5dcc-4d72-ab80-a6baf2f7b1f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0639b80-089b-4984-a97f-988c4c1da0df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3b594df8-a357-4533-80b7-0d2ba3401861"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "908e0128-25bc-44da-ae24-4dedf2a20dc2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36d4299f-8c66-4efe-b4f6-fd285bee11f8"
            }
          }
        ]
      },
      {
        "id": "51ad6147-d6e5-4c24-8273-4da8b337f37a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9865ccbc-60f1-4b3d-89e0-ed7ccfbee2cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34f815fb-a52a-492b-8cdd-ccaedc80fee5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f487d515-f0ea-43f5-ab3c-0ff12a319169",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9167083b-9a73-411d-b25d-11e2f6495f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2aa0f3-39a3-45c7-838a-f5cf05de78d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4812d624-c400-420c-8cfa-8488fc211aab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8e2cca-557d-44cf-8617-9e485dda299a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67336e4a-a17b-49de-8712-26d172483ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae6c0cd-4210-471e-9aa7-1c5f8f8ff202",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0b3d8d-d850-4e6c-bd60-dde6de13fcf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e12833-35be-4cb9-a269-f10413bcf7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd4517e-f525-44b3-8389-27c172948ec9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90051baf-9d0a-41be-922f-d20320a2ba72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc7446c-0fcb-4cd9-8d82-96d8f4d3335f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542da27c-5b29-4228-b1e2-0b56a14a6ed3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d233c919-d13d-4036-9d4a-03e6557d6731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab993f6b-0edc-4fac-a8e9-4138010d4ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6ebca6-d092-4a35-8ff8-e361352bb4d8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121a8b20-8b5e-4c97-822d-2ffbfca63240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d4fa92-9e55-4815-828b-4fd2bf821eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fee9c9-b5a1-4e67-b426-9346c40638fa",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df31acf4-2d41-4cb4-9d89-b27b024129ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd32234d-da7f-4a58-9bec-56d7e4d6c371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd45245-aea8-4c9c-b461-59c186f1fdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20c978b-561b-43a8-a978-f0718060e0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f1f2c8-cbbc-436b-8813-565aba85e7c4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e7d6d0-8303-4112-b844-3bba64fa1ce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1480f81-7533-4116-93ff-3d9f46bfa588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72850b8a-2a8b-4e5c-bb7e-b8e1e1e9bc85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f876bb-2285-4fc0-9a0c-d9babef3dd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c32393-cde7-40d7-8bcb-0b09049aaa63",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5623dee9-dfcd-44b5-8c67-543fc0074767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5ffe02-43bf-4a86-8d68-696ed81a258c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49495d97-0066-4166-a1d3-cb9c5d572acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56bf06d-2810-408a-a810-1c3bb3f4a191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2085c6-00b3-43de-9214-33ab45acadc9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a8a3b2-4a41-4e6b-9b7e-18e14d279e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3305bde-0072-463e-98f6-5c80bea0f1a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ba7c39-49c7-4ddf-8680-43c830a1ba84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63add605-6125-4f8b-b642-3fc5cfe4352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed02f93d-ccec-49da-9698-c5af27bad87c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a4071f-ebd7-4756-b78f-109adb92a88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5753722-751a-442f-a935-aff2ed3be5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021953ff-9e19-4ace-8c82-a04a14771fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd584190-988b-4e71-84dd-d82b9ac6ca35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6985c939-8e20-4a76-825e-dc0f41c7aecb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fadc9c8-5cad-492b-a9b5-cff0b515bbdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f837dbd-c1c9-4c39-8513-6649cf65976f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48d1a7d-07a6-4a93-860f-173d5ff2e0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb6e5a4-ff1e-448c-819a-e6f5a80844a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b85d38-b507-4415-b777-a4a521b50577",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f67038d-01a4-4a32-81ed-242113c834f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "040bbeb9-6407-4663-8ade-314e15aa0135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa537a3-c6eb-4acd-bfd5-39a150fb6a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f3e2dc-66f2-4a40-a4ab-b0422349ee06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e02a42-b4c5-442d-90a5-d934e8c95a3f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8135ae9-80a1-4c40-a18f-4befc74b176c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f62a8787-83d5-44f1-bddf-07046bd4cc65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca02813e-0795-4b39-bd57-61ea9d380afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6879ca8-f75a-4ae3-bf99-757fc300c6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7df8ab-710a-40dc-a655-e8b9f3bcbf85",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc67426d-e5f9-4d1a-9c72-70b60cc3b334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd4811ff-ecd2-48c1-a601-126ffb90069a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0d297e-2272-4435-b1af-3fff1f7c0eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e59a2c-480b-4e88-9360-ce8da5425072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310c9a77-552a-4474-bafc-90e61359ee7d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91033866-730e-4fb2-a694-c993da39909e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67140a29-860e-4e53-a312-03a659c879aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bff081d-6c2c-4a98-894e-e55f3035f486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4167a6-6a34-456a-b936-cbd8b8bea587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78524b3e-d417-495c-a0e8-8c1fc191ab96",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dd0547-ed3d-4bf8-894a-30d2c788bfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2a0299-8c12-41ca-9460-0315c9900b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0092a765-549c-4927-9a6b-61694c15c75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10aa55c-0444-45a1-be00-385417b6813a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81484fd5-8a81-4ae9-ab29-8fe4975bef0f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1d957d-dc7d-4470-9bdd-ac7f971113cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12391b53-9fc2-4800-ac5e-1a2d8c6ab62c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f13cf2-683c-4aab-bde9-1a7b9c9dc463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29418ccb-b960-4745-9835-6d66a41fa9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57689bc1-02d8-4847-bb18-9aacd18c200a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f9dc44-bef6-4687-ab51-10f4733498ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9f5114-8804-436c-863c-8c2aed63caeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43042c25-073c-44ec-a95b-c0c0d0c60567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7097cdd4-e273-4383-9d63-faeb2c4c73d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0666ad5-6ec8-4c74-a1e0-0f2a230a35f2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513ab788-002b-4af0-9856-d83dae4b9ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b26207-68ec-4cc3-a01a-d2e9088f9c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6196faa-a91f-47ad-bb1d-8a321505daeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790bc92a-3b3f-4947-ade9-1b1ba5ac1be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33448fd4-be00-4212-9884-81bb006f5017",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cbd65a-1c6a-4fe3-8166-8adda676f1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b27b336-cad6-4f0f-993a-c3697541843f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b037a6d9-034c-4c84-ab13-7d2a48974872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53be3069-0158-44d3-b0e4-2321598779f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f716ac64-9247-4e99-bfb8-7591f17be04a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f1b807-b9f2-4303-92f4-8d9c3e69bbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82f7c66-27ef-452c-8c89-ed3bfa233611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f97845-1a2e-44d7-87e4-492a39939209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e15019-4516-40dc-96de-5094d40d3c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002dcbe2-af27-462a-a81a-6b6eac3143df",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106418f8-00f7-404b-8d0d-24b2ff0c8fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d533f8-2f38-4829-b6f7-fe75d5d103ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7625a6a-c917-4a56-8c48-a95eaa36da77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff0737f-1e55-4339-8ec4-8946ad90a903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60acdaf3-2e52-428b-b4a7-d65a9696e9b0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e55d64-2b57-406b-b85e-4f4fd444d40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9dd55c5-6ef4-4c77-880c-7ae9e1de2596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0788bb03-62cd-42f1-b209-e212be20c2d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca89997f-c516-4333-af15-30432ebf22d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159f8e71-86dc-47d5-a2ba-6225a386338d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafa22d9-4a6e-4ad2-b4af-09e71ee9f2ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d1a15ee-9f8a-48e7-9ff3-1d7854f34111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c370dc-fe29-4741-b474-5aebda3384d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d32c370-667a-445d-b70e-e8f8a98cc681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d3e70e-f0c6-483d-aa43-5761db2d2b7f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6209468-e667-474e-a912-bc0432c3ccf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fffca34-b24f-4fd8-826c-b609bce6acd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0711cc54-8181-4cb3-8764-7178fe5864ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8964ecf0-5816-477b-b619-dd1421950ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3284afe-d520-49a1-90e9-2fa3b430ed35",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ab9121-bd34-4a17-a2d3-786b764e9f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "575d6ef3-1f78-4a9a-b37e-a475a8375696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf1f4cb-59d9-45a7-97a2-5f6306e66c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a681b833-556c-47a4-9e60-9e8f706f23e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3fd389-da5b-462f-af6f-20f90014e167",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c9da4f-7ab6-4c0b-ac61-4a5d0d5ca21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39369292-b30c-4ad4-87e5-13b5be5f5c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade0ed5-19b2-4fd6-b8ce-465be28464f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a977a7-68a4-4a13-9076-142916aa2455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295b9915-c1c5-46c0-82fb-883f63c039ae",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e3a28d-2ab7-4be6-9d8b-f47a6a38c1c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61cbe3b4-4d7f-457e-bea9-9340765ad30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69472890-56cb-4861-b8ce-c2c9dc89a607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28316789-a0b5-4930-8379-8f1a71a5f86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b50bbb-fcdb-4650-8b23-e89c82f212cd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8034f778-6596-465b-8fe5-bfa5af6ac703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f04d8252-0f02-42c1-830f-6b7a97751f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5568c10e-b839-40e1-b8e7-65c58e38489d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884b0acb-ee9f-46d2-9381-a00008b8d39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543c3eeb-a1f9-4591-bf09-c8be9edb842b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b5711a-4be7-4a77-b148-eced91903b0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "680dc153-10a7-4304-bf3e-77dbdc28564f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f60475-edc2-4d3c-9bfe-a26ebb8a8367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f759200e-992f-4a2e-a983-27c9fddb7176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae5c33d-b870-4e59-88aa-8a0cd80246f9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b326c86-d4b8-421b-8557-85d1a783e55c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48aa994-bdda-428c-a992-aabc38fb3e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa628842-c760-4802-bebe-7b25c76c0ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d21ffbd-8f54-4842-991c-1d8f5d83b728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2933b334-c5b4-4b3c-9ee7-f3a7a2bb09b5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2639c77-8fca-449e-840b-f22dd409c368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e2bb90e-51fc-4a89-8fe3-5807e54f47d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3df571-fb6c-4088-bf65-6b5e4d504083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d9c1c1-16e2-474d-bc4b-4f63df8f65c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef056f8-8e05-4911-bc36-8b3bd5750315",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796313eb-0d96-4512-9c96-e9b2693abda8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80a8eff4-1bf9-404a-b0b7-dae25834560d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da868ff-ac4a-4ff2-9b2c-8d8d109dab30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da9afc0-7e76-4b5d-be7e-2c2b73b8c1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6661b3cd-552c-4381-8ff4-e2d1feba1b3a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb4b007-0c99-4afd-a109-35bb257568d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760cf80d-f0d0-4216-ad09-1ff9136eccce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b5efb1-2567-4f07-aeee-6f19efcf4d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9658eed0-7de3-40ce-8e27-d200433bb3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4654062f-5af9-4c17-b99a-e0d3ddce02a8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d31909-7dc9-4333-8a64-7ea63be65890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6f3cf6-5e15-45a8-82ef-71ba3030a359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3685ee7e-2bf4-43fd-91ca-9fad87a955b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9e7334-2aa1-452d-8eae-efe734875917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68730e8b-fb57-43af-bfce-5b1ff8110a90",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9aae6f-2402-44d2-bb0c-26af7c62d4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851d5c19-2900-4790-af98-ef4008018589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c0fd25-569a-4f0e-9aea-a087c1e094bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36865dc-f896-4e0a-bd05-b2bd9251c881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bbf23e-3f0c-43e6-975c-8d3159171c36",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd784a35-b3ab-42ac-986f-fb72e5f29146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ac9764-578f-4b19-9268-97172662c20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6255c1e3-4fd2-4161-9897-46d275aaf798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfbedff-cd78-4db8-a9e7-cf57de36ad9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3c27f3-282c-4a42-8da4-3abe0487de66",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6e747d-d007-4205-a8a9-83609a3f7eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d737ed52-31e7-410c-8a33-0e0a2dc7b879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb4b2ee-e8ed-4725-9bf2-ebf502bad4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6aa8a9-45d4-4bfd-aea0-bb2151aa511b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b9d1c5-9edf-4312-9279-d39b3e657cb1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db030fc8-8452-4e1b-9b67-c2404d7f1175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377471a2-5ae1-472a-91fa-211b443cb251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766a93f3-2105-4653-b4fc-c244e0426b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ec42c2-ed86-41c4-b5e3-1c2ae59b0cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5fca81-6ef4-40d0-b77f-bc4aa7b8cf85",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb789ebb-8549-442e-9bfc-ab822966ae1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65995f5b-7084-4ead-927d-1b5548f54a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c7fde4-1429-4fb1-9926-50eb7da3cbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3416970a-7f4c-44ff-87a6-8ea3b2edbde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad164e3e-9590-4d87-8174-b18fd9d9e4d3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b770a55-8190-441e-94a1-84f50619157a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459cc877-5d55-49e3-9219-87598f462a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53cbd31-d55f-43ef-bfca-ebeb14d82413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79e1a79-ab97-40ad-94cd-2729585f4e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c5d20c-f1f0-46ca-a6c3-ca6ad0577b88",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7c4283-e3ef-414a-b425-15b48a3bd4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01607723-8888-4076-8b7c-997d31161d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecf9937-3502-48c1-884d-16cdd0eca1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aeb1455-8235-45a1-8f9c-0158d951d795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3102a2ba-5368-405b-b528-a6c102c250f2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb3eace-fca2-4dd1-8bee-bf0be24c2a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06c0658-43c6-4732-84bf-775704fc8afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c80c32-1a7d-43bd-ae30-dbb5383afae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06daa759-4d55-4378-96d9-3207b06a411c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fb6c08-4c06-4f2b-9e0d-efe565290a99",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a990218e-4d74-4dc3-bc73-3ef9a4047bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a694b5b3-44b8-4ea1-af81-184a6e84d068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c33a6c-ec7b-458b-a517-4b3b83915452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0a664a-31f8-467e-96c1-ab9794040bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a0d09-05b4-4504-90cb-a3abf95196b5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9d0ded-e89a-4d47-ab41-8a6b22faaffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b586d645-02f0-4d38-8167-d3c370c59f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c97bcf-1264-4382-bd89-d4e7b0a626c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbb39ce-572f-4429-8f8d-a3a3a5419961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b55b1d-f38c-47b3-8e19-3b0191344a2a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b90889-ab20-42d4-b18e-4aaec98e4d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0791b6ec-8d88-4892-baf1-b20343c257e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1bbcd1-1b71-4b3e-ad58-e64ddc58e251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1129cd22-8472-415b-94f8-a029616814ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95441b7-1d2f-4a20-b8aa-230721309fab",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ade184-9281-47e2-845c-155e88470b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03505a01-d9b8-4c95-8de8-92f6b7af8bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cd01eb-6ef8-4735-9363-c88d058dfc81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c87104c-06b6-44f4-b3b7-ed4397defe01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a033f21-5c3d-4113-9652-546bbd514ccd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452c20b1-eb97-4686-951b-b9bf108ea866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3e9e5c-aa8d-4112-8358-622db0e98f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4929b0ff-e7b5-458a-bbe6-0488a1d4a770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287bdbd8-5c8b-43b4-895d-0394dcbb9cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7271dde-6d8c-4b84-9857-8260f7559050",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1d15f9-c15b-4bb8-8694-9190cec2ece0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afd6a0b-99c6-4c98-beca-e986f3d08d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f793f41a-e5d0-4e49-a772-03d55f20709f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a7e46c-20ab-41f4-8e68-4febcba1d253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78399f3a-3cae-488c-8d87-fa11e8c19b90",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7671c4-aa1c-42e3-9258-8977a6ef6e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51712ed-6831-4c14-a341-ae8cbe717cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b969678-e5fe-4dc2-a373-3acd92845fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153baaab-e292-4706-8179-24ebab49150d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85ab029-4eac-4fa5-b88a-3a9820bf827c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f07e5b-95bb-4874-8879-c89157218e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53baee2-ab5c-493d-bb03-26691b662f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219a68ac-e2c4-44b8-9cf0-6a1ed8a96016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28ccd5d-d29f-4aa8-8836-9bd5158215c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4d3a44-25c7-4428-abad-f37c4a6d24c0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b6922b-6f3a-49b9-96f3-af09fc73b7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63251894-92bb-4649-9ac7-6701b693255c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80edd2bc-d8cd-4554-9009-7758ac64bcc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b967b8-9c1d-40cb-bfdb-fbe3dfd19b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d227c518-242d-4031-8f68-47764beeba0a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3382e7e-2d35-479b-9b36-ce41563a6bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc35150e-a848-43b1-a7f8-96981d168646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c6f359-14af-485b-a5e6-9f0fc544dc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b46757-cc67-47ad-8255-65fe64934609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e119a900-517e-4cc0-87a0-2ef874accb85",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9996737-6363-4814-b61b-05137b48bfe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949b2d10-d078-43d5-9661-a9ea03182e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad32896-d358-4f5d-89db-c823cfe8d25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc62adfa-8ca7-458f-8521-bd4f61340f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7b871a-e69f-4fa5-8a5d-e0eb070ffc37",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b89cf00-7fc7-43fe-980a-be3eef31dc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6516ed-8324-4fa3-90e8-837e06f44e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e46ddb-75dd-462a-b0ad-7704833e981e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc3005b-fd94-4ff3-b7b3-d53d2774919c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55787ae-ac8a-4581-bb1a-a631166249dd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8bf5fc-805d-4717-886a-b08636c4838c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cd7039-c373-4c52-9def-b86305955bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3285bb2c-5993-45d8-a305-2d5c104851a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e295788-bd75-4ab4-aa7e-1c1b3315dbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c666400-9c86-4552-a92b-4579a5eaf41e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dc8f7a-fce9-4f70-b038-ed05e4595ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45dd2371-c00c-4cbb-8234-3d0918243a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c85a84-dc32-47af-b063-b8ab66ef000b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0149533f-5d17-46d6-a837-f69cb29d7c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a747c7a-f402-4ced-b2d4-6b658f9c505c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a7fedb-83d3-4d64-b8e8-19f841220ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab496ca9-37e7-48e9-b999-6361f44f7419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c559e66-362a-4723-92b1-7ae56e85c1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a9b564-5a3c-47da-b01c-f1892ba4bb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277be161-82ba-4077-bf54-a9f85f5aa911",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8678646-a996-4ca1-b9af-2210b1c5420e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f739a13a-e92c-4779-8ecc-d9ac0dd65007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d72bb0a-5367-44ba-bebc-c210591bb6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629bd1f5-93d0-458b-8b3f-f21344823035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfeda36-3bd2-400a-87fc-93b9076d38b6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53ceda3-c446-49a0-900e-395ebace47f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54eb5512-9c1d-4a88-a681-ce156071fbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33eb2ed3-119a-4aea-945b-113de4c1741c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8d3e50-0ac1-407a-9c95-9d81b66e4dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b064ff-69fa-4746-9d8f-cb43c2e34fcf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6756827b-bca1-4770-b1ad-e0df15ebdba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc787fc-fa7d-4535-acc3-1d1e5e0fa6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3767777b-c9dd-4a7a-a069-2497b38e36a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088e5fa8-27c9-4562-84ae-84a44401f3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f570a029-f2c8-4a70-9c26-d1901aa37307",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c74459d-8c2c-41f7-bc91-218b5017c6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313eee05-dce9-4a73-bb6a-b3aa57823ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c5822b-cf4a-4f44-868a-cf2461c3cccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6025588f-718f-48d4-9a3d-1fe4718191f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e6d209-19c2-43f3-ae83-25c5288c832c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a31027-6852-4ac0-b5fa-1f395d20f214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07daf1d8-09df-4530-a5e3-c4ab23889238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9a0b36-edc3-4bdb-8658-a40c3bdf1721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7856c93a-0dee-4cbd-9220-de2e9db4933a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab63ad7-3f91-4ef3-ae5d-33c9f53ef6ef",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffae05f-2a69-4369-a6cb-888b6dd10fad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21cd6729-9188-4602-93fb-8ff5adfcd7c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7054be-6ece-4bd4-a058-ea7cfdeb928e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1561a4-ad50-47d6-820e-f93671a1dea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf7caf0-7cd9-4596-8a89-f77fd69e395b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bcf270-b8f7-47e4-bd37-17c4374aa9fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8675f50d-f471-4e59-be56-9f26857c8cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a87f47-1575-476b-bd65-6a43802af72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b5e1c4-f629-4d02-99c3-5558999e59b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a0d8d4-2326-4f5a-915d-d8fbfe93f6a3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a5c5aa-77d1-47bd-a8a0-efefb564add7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c3e5ba-cce8-46c3-95d7-8ed021512640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1dae98-5610-4d81-97f6-ad4586602234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8905d6-2072-4b1e-b86f-b84b37f652ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261c907a-8013-47c2-b194-90452ba8e760",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cf104f-eb2f-4153-a824-79f4e6a7d8dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1493178f-03c1-4b2c-af67-f79942dcab40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9504d9cc-06d2-483f-9970-92a73feea445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37550012-e3b4-4781-b99a-5d948965d499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80977eb5-3c45-4810-9dd1-0d17a4370779",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a56775-1bb0-441a-ab15-bb34ba00a836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4472630-7ea9-4555-a6bb-5529f5469bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74f66a3-303b-4944-933c-bf1321716c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4fad6f-17e5-403f-8e41-2beb25d03f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42298bc5-8193-4639-8f55-14241dec6ca6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f2d85c-895c-4be5-8968-79064f4b1894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b4293d-e368-42bb-8137-ad7055f086ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ea7fb3-28c4-40e3-9b19-6471c17d353b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c63ae54-eaab-4476-aaaf-1cf46dc936a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb44e9c-6bce-401e-9488-3ae323e02979",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182075be-87b1-4189-bdb2-26b731552cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b44bca24-4667-48a2-84d5-b178515b0589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0aae51-4a62-4b50-b7ed-3cb7ae3b4c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a11a52-ca76-41b2-95cc-3004b7b274ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff609cf6-784f-49e0-bfdb-f66efe595dd5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85275cba-ee4b-4e5a-9a10-86ea3ca2853c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b761fff5-4840-47af-b5aa-a3198f6f7466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201d724a-bfe6-4172-bfd2-35991a2056f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafa9927-ea07-476d-9560-72a0065d69f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9e82f8-c05d-4df6-b747-db568846b4d4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1107cbac-3b60-45aa-b637-590a481dc6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1aadb2-ee8b-4853-b769-bbb1c81a17e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60c305e-e770-4628-b796-cce0445cedbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c2a54b-2bc4-4b2d-9fd5-44dfd19089cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788ac733-fecf-47d1-a4fa-d04090268a89",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d36eb1-ffe4-4308-9c31-29c74fa10b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcfdd241-0a1b-4955-b35b-ed11f19fb9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03957d2d-15a6-4964-b630-366f513a73cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc80d4da-a82f-4f9a-8496-666e890572c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c997945-f16a-4d2b-bb35-6908c5432e04",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5febcb-7c1c-4c3b-9d5a-989ac902bfad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "132b6ce6-691c-4526-a9ae-3d57dba43c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a52b02-beb7-4388-97e4-23324db5c7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113664af-8bfe-4900-a4c0-7d09ff040e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd82d33e-386e-4fe2-9259-518b973eec6d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a703af2-4933-4660-9dc9-38ff85cf233e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96fb071b-9601-4861-8254-5bf6cd64c894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d290aa-4621-47a3-b0e8-70e17e13870d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4c2a68-49d0-4b4b-bc9d-81d4cefc8640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8685d3-a356-4c94-8a59-95c064271640",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd50d1c-2e95-4f6a-81a0-67a757ae327a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d176b6b-f11a-4a38-8b9a-55b4ee500993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace0b180-6b7f-4226-97e3-f935f1baaa01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74c15e6-9cad-4181-974b-4a269ccc71a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2da55a-18e6-4903-8602-facbf1733408",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137e1337-9e10-424e-959f-34b0068089ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f70db8da-e0d8-41b0-977f-656b1285d755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74934965-f4a0-4171-b2ed-f36e2b7fb80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbb4bdc-6909-4560-8586-c1bf71db7f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6f7ce1-af20-48af-ba07-bc6d2c749dbf",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4ce119-b791-49f0-8993-e62aae3227ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d42a882-e4ef-481d-95cc-71742346e55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265f3ae3-0458-461b-bc74-1ef0090ccaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fc920f-6d90-42d3-aac8-86e25d08680b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba415da-534e-45da-9489-6fdd6eb39ddd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eac42a5-9726-48c6-bbaf-a4a1ba8e4c69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7458684f-32c2-40a7-af24-0305c992cc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1859cfe4-2e56-4fe9-b0ca-13bd388c990a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8dbc94c-a57d-4828-a410-6e09aa8eee23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a384989-ec5e-440d-8a9f-870bf336fc38",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c1d9c7-4e9f-41dc-b036-aae9831e10a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f40216-ef9c-447a-bfa7-35b1b223fc34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad6b05e-79e1-4f75-885e-c69d3e9db998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde57760-75a8-438f-b7a2-3ed9d7a0c127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acf8468-bb5d-4ffb-9777-090e49c8e29c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a3e007-0c52-4129-92ae-229b3c82e4ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbb5339f-37c6-4091-b90c-e8fb63e5a7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de99a8a-3553-4edd-91b8-21445f606cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6533237b-e881-4af3-89e0-92f366ef8075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f2892c-a933-4ed4-9dff-43daa0a4860f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf12d6c9-7d6e-405b-862e-fb509c793afe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "040349cc-70e8-43cb-9311-40df993c4237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3280c86a-088c-4c46-a8c6-9e3947758d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6096c7-1c47-4c6e-af13-4dc2759491b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4975622d-f335-4b72-b1ba-67af348b90a9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dac5712-2408-4c4e-8708-a0205b136458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9596ade7-8bb6-42c6-840a-6876339fe3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739740f3-b887-4d46-a52a-de57c4eea531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2f8c8b-12e6-4d69-8cf7-d9deb0d304a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3ea397-73c7-4551-a02a-22deae85dd67",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2704f3d-ac69-407a-8595-b40de6aec0f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3629a354-b3f8-41cc-92ea-75348b594bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9fbbf8-32cd-42ce-8342-0ed1dd415aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8216e7e4-9f14-4f84-a099-56574e2320c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac8b971-5ea6-46f5-9fe9-ff4c5fdad1e9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a92fe6-01ca-486b-9772-a6bed1c49545",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4d9619-ab7f-4ded-9a1c-5f7317f82a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5442f66-c405-4ae9-a238-ec4977ea840f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36eda640-7fb5-4ab3-9286-da83ad9fbb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38012239-d310-4185-b492-e49a5f97ccd5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60db01d1-efd4-441f-aebf-420c637ea8e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652327e3-6854-414d-8465-d75d302e475c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39852f85-8ac5-4bc9-ac07-d647798d2f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df98195-e641-4df4-a9fe-e02055e8c98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98226c03-c7b6-490f-bb4e-b9d309e0dee3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe60967-b7a4-4861-808e-e4680a0d74e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df56c5ca-321d-42e2-899a-0a01d0f9394b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eff26d-4f67-42c2-adf9-01e36209c10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e206d715-dc8f-4afe-bbea-53b52f2362f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9ebb69-5b96-45e9-8cde-7fd9da5150d0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25296467-4502-45d8-854a-01ebfea76779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fabdb515-4ff0-4e2b-82b8-ba3ef9d7628b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbe8c98-3f21-41bd-87a2-a3007cd20ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5f5a30-6ec3-471f-9806-a5d7291188c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8344129-d599-4f2b-abc3-59dc6b84f432",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe77304c-82c2-48a7-81bf-e109c8725684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27b59eff-ecc2-4ff6-a1d0-7d00c20e2339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7a5034-0f90-4982-bc42-5c669c560358",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed2a9c3-73fd-4724-b469-019d7866ad0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b3302a-90e3-41f8-bfcd-3118f0d3dbb4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae7e020-3a8d-4dfb-ab4e-6f9af7cecbd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41bfdcc6-b5fe-4718-9b80-359cd387d2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c191d560-7473-413e-9bc1-beec08b3c09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9325ea90-5616-4a21-bfcf-63a7881caff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1052e8-2215-4612-9764-2fbd22369333",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2676a2c3-8347-4e53-90ac-12b8b66da95c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e213b7-660a-49dd-a315-fcada9aec759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff728fd-fc9c-4572-a0ec-cf2c09555a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0a8ee7-09e6-405b-9ed6-99f48f5bba5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8a9549-69de-40ce-af00-5aee319f45fd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec699487-6d28-425c-999c-b6b1e1f4b516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb08dbdd-718e-49ed-a0e9-5937aa952985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c31782-664a-4a26-ad7a-a1ab2034c9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959004cd-8ea9-4b14-a2d3-d779c509bf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6e1cdd-866d-41d3-ac9d-97187abff6f8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0c5997-2b26-413d-9bf0-4b4d16bfb5b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc21c791-8ece-4d5f-9681-c42588b25ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5139187d-10a4-47bc-baf8-0f434fd700ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bb58b1-6f5c-452f-ab66-9d2857e6275a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1213e28f-4cda-49fd-b732-9ea524ee3889",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412b8104-c9a2-49b0-824c-e648a05e4df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed056fc-6209-4670-a9d7-5c65d3479e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0400d1f4-bc21-48f0-a85a-3a40dc0c0a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdec6472-6d6f-4b95-a122-a59548e25c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1eac131-702d-45a4-a563-bdbbd0cf9b64",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbb6821-09ad-4b94-b026-9caf988495f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca118f7-d634-44e8-958d-548e119e3ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e5af2e-b458-4e44-8da2-37ac172d746d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22521e25-2da7-4702-ad66-4df3dbc92890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d151ef0-432c-4511-84ec-1719e81c5dcd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e2b3d9-a413-4187-ab4b-4378a6593956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c5c966c-e873-4364-b4f7-66b411101b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea38c7d-9c38-4987-b82c-9ac46990e974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdb86b3-cc5d-4980-8d7c-819ca1ba1cec"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a85f1126-a038-4eda-a6e3-9ea423dd74fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c19452f-f230-4dfe-8b1c-c01fb963f2e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4603622-b40b-45e8-ae66-54f73456dda0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed5125b2-10bb-4740-979c-fa06a04e56de"
                    }
                  }
                ]
              },
              {
                "id": "cfc7b2e9-e848-47a6-b6f6-28c6d8ef0bc3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1393f4a7-f9c0-4425-b9cf-76f99295fd86",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803000e1-dcea-4600-a71b-4abe7e2563fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7f9bbf9d-5e04-4b20-ac1e-2a77ad54b903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd425ad6-d87f-44c8-a84a-a7145a8df9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65807368-9b02-4385-a769-3be7d923730b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37af9dd3-3704-4bff-8f5d-1c3aa0a446dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce4964b6-f462-48ce-8e08-bd05bae019fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5cb24e3-a502-4ca4-8022-ee422f27e7c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b1a0a34-1305-4487-862b-327579f9eb4e"
                    }
                  }
                ]
              },
              {
                "id": "a472e0c1-bdbd-4df4-b9ec-cd3da3e7102d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "83182ef0-bac6-4f6b-8534-461a893a8be4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31694470-5e6f-4d1a-9948-c8a3ebad5f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0e50dc85-7cfa-498f-8d6e-be763787f46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dc6605-c61b-4701-9928-05b4ca516fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a271f1f-3fdf-4a52-97f3-a1ef91ddaeed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "495fa7ec-4e85-4e4c-ad7c-d5285797612e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ff08938-c22a-41dc-8e8a-786b71078d75",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f6e5473-b074-4d53-a625-979c83190ce1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a24852ef-c15c-45ad-985f-c66432fda02c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05527d63-3eb8-4955-b783-7114a88e7f9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22c9a178-aba8-495c-8994-62cd53e7483b"
                    }
                  }
                ]
              },
              {
                "id": "c7ebfe9d-ca84-40f4-ae23-7151418f35f3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6eb3fd07-9425-470f-80f8-1a8361a5a7c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "01e8d9ff-0b9b-4bad-b78d-c169d58f7daf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d8ff2c5-bb04-46bd-8d50-cf8db7b031f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccf8507a-119e-4bbc-a0cb-df4bf8e05ce1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc016462-6192-4dc5-8a80-9027f65e859c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "76ac3551-4984-450b-ad97-3cf304086b48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b8d558d-4fba-4106-9f24-3e71439813a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "529b03e7-44ee-418d-8b66-d02d9daeb77f"
            }
          }
        ]
      },
      {
        "id": "269a264c-13c8-4d87-9053-70a0f411464b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "25da34ed-7cc3-4aa2-a091-4ca7113c6377",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4cc4bb6-6d78-476a-8043-35e7fe858b9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccb116ef-3010-4aab-bf1b-8ce09e32f85d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b46aac-df78-4877-8679-900b7b13517c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c916ba27-282c-4081-8d8f-22f0dcdb3a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5d6177-4b5e-46cb-9d1b-b11b9f743264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c23ef918-c8ee-4859-bb09-263c0bcd2aaf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06e2fab1-ec70-41bb-acbb-61945cfc5293",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2418b0e7-9b3a-4c8b-9d26-aac6d3b3d549"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5a2fea2-46c8-47ca-8003-78784eb3a8bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f943c02c-7f13-4763-86ca-c8c613f71d6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6731887-d05e-4c91-b2e7-d547f34f01df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "586af420-81f9-451d-ae7a-d9e7c1c3d524"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b5693b7-a027-435f-9e65-ae8621088eb5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09b4d260-d668-47e3-bc11-5c8aa8b09df6"
            }
          }
        ]
      },
      {
        "id": "5248e957-7228-4dcb-9da9-c965c3dcd9a9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9f64465d-89b0-451d-b1cc-ec020048ac93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0f1264d-06f9-404f-b1f7-4ce8adc8fe12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "244f26b4-64bb-454c-8a79-02f569d08da3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec9bce2-c6ab-4abb-bf4a-10e22ed8ee34",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73368d94-358c-48b1-b944-42e24bb9b310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af95c731-d6fc-4da4-b113-a219607dcb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ce4abe4-f479-4fa5-b2f8-f213b11e9e9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad7708e3-6b62-455d-81e3-833b37ffc980",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f67b312-c156-41e2-ae31-edee86b7b410"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c688188-920c-4709-b9ad-2c6740a8cfc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b1fb1ab-aeff-4233-8f3a-49a93953fcdc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6211676-6a77-4756-bcf3-9513e6cdd5de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb18f771-fbc1-4132-9ae1-22704e8a39b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8c3be82-0ead-47fa-946e-a54968f4c15f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fbb12ca-e4a1-46c2-bc0b-a3f14e69de08"
            }
          }
        ]
      },
      {
        "id": "a26b8211-e2c0-408b-8142-c5dda289ddfa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e068498a-ed1b-472a-bb68-03c31680c9ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7f0c68a-01e8-46ed-9e7e-d3876dd53430",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "418c7d6e-1c0b-474e-b99b-d2ff46d61020",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca3de40-5653-48ac-b9f2-1dbeb07d5080",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10ec369b-f0c8-4d5b-a64e-389005f4170a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8f0a1c-a128-40ea-bfdb-9ce55fa1590a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21b7b888-7339-42e4-b501-edbd77363362"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aedea58c-d7c2-4bb6-ab1b-5bebcb26ce82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "972b2834-1ce3-4fdb-95a6-41da450578ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "847302f6-1a6d-4953-93ac-f325ff2fe239",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be409aa0-8e24-4a5e-9aea-6f6445b78111"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "295c20af-c168-4927-b5dd-20da24156db3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8e4a72fc-a7cb-4cd5-bd9e-33dda796d360"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "319984ae-9bc5-43e2-a1ce-f55a8a68b5f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4abd4879-a9e4-4825-8790-ecbcfe496774"
            }
          }
        ]
      },
      {
        "id": "1b75b76d-21bb-4b44-b138-fc27041db84c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29169791-cc02-473e-b65a-5a44c9823147",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "233243ac-2fc9-4e26-87a1-f02307ce431f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b2fd7cf6-37c3-4e4c-a2c8-0436310d072f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "001fd888-7852-4cc2-a620-cdf75c7a312e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9646ab13-c716-4c0f-b8c6-93b023205682",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 95.98943661971835,
      "responseMin": 8,
      "responseMax": 2169,
      "responseSd": 243.99126173678428,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696984398997,
      "completed": 1696984438252
    },
    "executions": [
      {
        "id": "5628db22-2633-4eca-b783-6a7228ea28a4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a3f8dc0f-bef2-41c9-a704-efbedf157231",
          "httpRequestId": "87f56846-e9f0-4b74-8ea4-fe3c3bf522cb"
        },
        "item": {
          "id": "5628db22-2633-4eca-b783-6a7228ea28a4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "901e7260-d3e7-4a97-959c-ed6cd8d87599",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 0
        }
      },
      {
        "id": "6a971e4c-17c9-440a-af7c-9f869fa30432",
        "cursor": {
          "ref": "cb279e43-870f-48db-9b49-bda74a684716",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "28e5315c-2a9b-4d02-a7f1-f7289346e8a6"
        },
        "item": {
          "id": "6a971e4c-17c9-440a-af7c-9f869fa30432",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e7ba9a4e-a0c2-4d0b-b2ca-d463f2e383b2",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "5195a1a5-be02-4ba4-85e4-f9858d21902e",
        "cursor": {
          "ref": "648bc686-52cf-4374-97d3-647c44e3698f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d0297f30-6572-45e1-ae68-c8bac3af3a5c"
        },
        "item": {
          "id": "5195a1a5-be02-4ba4-85e4-f9858d21902e",
          "name": "did_json"
        },
        "response": {
          "id": "92916589-53af-469f-ad8b-d5618cdb984f",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73709661-5164-43cc-8b48-61075cebe3f1",
        "cursor": {
          "ref": "019a9c24-7230-45d2-bb39-ee26cdcea761",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f24d33dc-8b2b-4ac2-8acb-ab2ea53168ae"
        },
        "item": {
          "id": "73709661-5164-43cc-8b48-61075cebe3f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "ad258de3-6c9f-4c22-92e2-11dd642d1f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73709661-5164-43cc-8b48-61075cebe3f1",
        "cursor": {
          "ref": "019a9c24-7230-45d2-bb39-ee26cdcea761",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f24d33dc-8b2b-4ac2-8acb-ab2ea53168ae"
        },
        "item": {
          "id": "73709661-5164-43cc-8b48-61075cebe3f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "ad258de3-6c9f-4c22-92e2-11dd642d1f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a21289-fcf2-458f-a431-5bc0cd1de8a6",
        "cursor": {
          "ref": "7151d6ac-cfd5-4bb7-a42e-2f8a107ba75f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "feb63898-b804-4e8e-af90-efb43b94083a"
        },
        "item": {
          "id": "53a21289-fcf2-458f-a431-5bc0cd1de8a6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3093684c-bb93-478d-843a-1caa0b4ae788",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53783671-f2fa-4304-a51e-eac7040f69dc",
        "cursor": {
          "ref": "ab3b2662-278e-4726-8d98-09d8d63ea44f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f36670e3-7347-4a18-be04-8668c1c13d42"
        },
        "item": {
          "id": "53783671-f2fa-4304-a51e-eac7040f69dc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ee73c479-c92f-4b5b-ac81-6c91dd5d4edd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fe1b64-bb0e-4abd-8b3e-f94083f47b0a",
        "cursor": {
          "ref": "86efbbd7-9946-4d3f-bc25-86a55ab4833f",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "24818e74-bbe5-45ed-85f5-f7fa44794fad"
        },
        "item": {
          "id": "f2fe1b64-bb0e-4abd-8b3e-f94083f47b0a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "460674d3-6b1d-4d81-bb79-a658a40ef20a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5364ce60-330a-4cba-a475-3cd7ab626dc1",
        "cursor": {
          "ref": "90bc8c62-0b61-4a6d-9b7f-4aac2e92efb3",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0452e59a-ac1b-461c-93b0-7416c7035cf8"
        },
        "item": {
          "id": "5364ce60-330a-4cba-a475-3cd7ab626dc1",
          "name": "identifiers"
        },
        "response": {
          "id": "8861afcb-30e0-4bf1-a77f-48b0f756e08d",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bad006f-7f4f-4b3a-a1c7-359dfe9c7573",
        "cursor": {
          "ref": "43c82f9f-69b7-44aa-888e-5b22f1ff269c",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a41840be-ef54-431d-a940-53025fefdd31"
        },
        "item": {
          "id": "2bad006f-7f4f-4b3a-a1c7-359dfe9c7573",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c346bc31-e1db-4d50-b1c4-ea079e04d73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78babf40-ce7c-4fe3-a572-25857fb5bc93",
        "cursor": {
          "ref": "4944f403-1c57-4229-ae6d-6f8a6e673eab",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "95eccca3-8c69-4acb-870a-800413e43f5b"
        },
        "item": {
          "id": "78babf40-ce7c-4fe3-a572-25857fb5bc93",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cd35488e-f399-49a0-ba8e-7c5c5bf8b9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54167858-8ea4-44f1-b747-305b90a13c30",
        "cursor": {
          "ref": "6df74e9e-6bd8-4195-ace0-ba09adc20268",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7a0d44d9-8ff9-46c2-9748-7edc65e426cc"
        },
        "item": {
          "id": "54167858-8ea4-44f1-b747-305b90a13c30",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "40c3247f-5c28-4187-8a25-9ee073c7a15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5dbded-bb09-407b-b84b-6934dbc5d836",
        "cursor": {
          "ref": "7b355a92-1583-4d63-8d48-357fd0c68c50",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b3e4fccc-3354-4a96-9d6f-572dde16f2d6"
        },
        "item": {
          "id": "9b5dbded-bb09-407b-b84b-6934dbc5d836",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "881d9c0f-e98c-434e-8f31-de29caf46198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f11bf35-b95e-40b9-ab1d-1cc387f1dd19",
        "cursor": {
          "ref": "f81dcb24-ef94-424a-89ef-c17d7acb301a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f17e887d-b544-4818-87e9-814c05fdd98a"
        },
        "item": {
          "id": "3f11bf35-b95e-40b9-ab1d-1cc387f1dd19",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f9dbdc04-e0d3-4ac7-85ff-b0ac464a2c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07111b97-b3a0-405c-bd91-90a8eb112d73",
        "cursor": {
          "ref": "46a52e08-2718-400e-a8e5-ecf90236b46a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8b4b3a8c-3bae-4aa7-9783-c565bc9b0a02"
        },
        "item": {
          "id": "07111b97-b3a0-405c-bd91-90a8eb112d73",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7006c64d-e6d1-4fda-8dde-bfd17a0d5b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e6dee0-2a42-41eb-b912-c9bf7352c912",
        "cursor": {
          "ref": "ab03e59d-324c-499a-9874-982689574246",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "404d5802-8d65-48a5-9f36-9dd9850ee029"
        },
        "item": {
          "id": "49e6dee0-2a42-41eb-b912-c9bf7352c912",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1647fac2-54a5-4f59-b012-239f6027a0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105ce260-e0fc-4fe7-a9b5-e39392d4892a",
        "cursor": {
          "ref": "8905f6a1-83e6-4453-ba98-ed8446050fca",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e5c6a8c0-c28a-4c00-b23a-3cc936de5569"
        },
        "item": {
          "id": "105ce260-e0fc-4fe7-a9b5-e39392d4892a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7f33faa3-eace-4bfe-95cb-cb8e987ea72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9e65e8-bf76-41a8-9f33-7d47d238133d",
        "cursor": {
          "ref": "167b4cd5-4ab3-4b3d-a07b-b979330bd082",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d5b0a946-8645-4321-a6df-234936bee3cf"
        },
        "item": {
          "id": "3a9e65e8-bf76-41a8-9f33-7d47d238133d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "be482a78-c205-4358-9a31-80a229043541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925f1326-dce7-4557-b51c-c30cc3588ed4",
        "cursor": {
          "ref": "53ca0941-d094-47bb-b129-148124de8243",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c5807ae8-8cb2-4418-97c3-d9b334d9066d"
        },
        "item": {
          "id": "925f1326-dce7-4557-b51c-c30cc3588ed4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c1dfb4db-722b-4c35-8dd9-10d9b52b374e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f195e109-eb03-48eb-90b3-cffa27de3670",
        "cursor": {
          "ref": "e194e56f-1eea-4c6b-b351-384dbdd20847",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "27119a55-6bee-489c-a75e-550c462070b1"
        },
        "item": {
          "id": "f195e109-eb03-48eb-90b3-cffa27de3670",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c8da6be3-d9b9-4f21-8471-7401bf0c2057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1ff0ed-f21b-4bbb-b7b8-e07182e85e0a",
        "cursor": {
          "ref": "3077960d-e4ec-4da6-9bda-b13b55215a98",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "21fc0d32-9f70-4194-8e37-87b795d6c5c5"
        },
        "item": {
          "id": "6e1ff0ed-f21b-4bbb-b7b8-e07182e85e0a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bb4b7088-d984-42de-b6a3-eaedbbfde8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9675fe-4bf1-4269-a570-5946cd38a10e",
        "cursor": {
          "ref": "ff558b8d-58bb-4389-8345-af34da4cd7a6",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d5602e3f-f684-4b76-ba36-19ca5b789c48"
        },
        "item": {
          "id": "2b9675fe-4bf1-4269-a570-5946cd38a10e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "407e12e1-c42a-4cfa-b518-92b33dc0e2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5aae9b5-f604-4f29-9a3a-ff46d8459f3e",
        "cursor": {
          "ref": "515fc864-f8de-4fe8-a9f0-7bda817dbdaf",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4ac224ab-f8db-426e-8974-7b0c70adf888"
        },
        "item": {
          "id": "b5aae9b5-f604-4f29-9a3a-ff46d8459f3e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3763d62b-d389-47bd-b6e4-6a4b365144e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81df1bd-18f1-4adb-a08b-7622c5bf4267",
        "cursor": {
          "ref": "e7eab46b-1466-4ef6-8a27-f22527969d56",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f926e002-2921-449f-9400-85c0e644871d"
        },
        "item": {
          "id": "c81df1bd-18f1-4adb-a08b-7622c5bf4267",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fef3e88e-9af0-432f-b8a3-d1ade36d87fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7402a5f8-1391-4bf4-ac2f-2fe81889d325",
        "cursor": {
          "ref": "ebecb21d-4acc-483e-9744-b10505774069",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4510b46e-f87e-46c8-b213-41ada16e9a59"
        },
        "item": {
          "id": "7402a5f8-1391-4bf4-ac2f-2fe81889d325",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "77a61713-896a-43a4-8c14-193c3bc81cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03570a7-ab2b-4dd9-b00d-8348c11569e6",
        "cursor": {
          "ref": "d3878728-ca6b-4b69-affd-96bef9600cbc",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "04b42270-7043-4389-91c4-02348bb63771"
        },
        "item": {
          "id": "b03570a7-ab2b-4dd9-b00d-8348c11569e6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b5255753-7b73-4aaf-9c6c-78987e72660c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102cf71b-6413-4178-9c26-170a625e5ad7",
        "cursor": {
          "ref": "6a32bd08-6288-4728-b082-3a8754cd4f4b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "55e64860-dae5-407f-9f5d-97c03fcbc914"
        },
        "item": {
          "id": "102cf71b-6413-4178-9c26-170a625e5ad7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "97008f52-9fc2-4efc-9cb4-9266e9c2df32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8db6417-0157-4621-86f8-ab43b0b6727a",
        "cursor": {
          "ref": "385299da-a730-4fbd-ab15-84c064a952ef",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6eccc060-ac41-47e0-a8e2-2177eba91d8f"
        },
        "item": {
          "id": "d8db6417-0157-4621-86f8-ab43b0b6727a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "988dea38-fd3b-4752-91c2-5c14d4a1a348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb731b72-a44e-4d43-9bf1-3a08c580e3ea",
        "cursor": {
          "ref": "8a7f9e28-9374-4ee8-a1a0-be73e7403f9d",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1835b2cc-b429-4836-95d8-e5d4e48e38ed"
        },
        "item": {
          "id": "fb731b72-a44e-4d43-9bf1-3a08c580e3ea",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9de58179-a050-478b-9572-7e12a9321806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e8e2a3-c6dd-4ee7-9255-4ac64f635dc8",
        "cursor": {
          "ref": "6e66ae12-5ded-4b54-8059-fc52bb01444c",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ee2c5eb-2983-4238-ba37-a262e42b585e"
        },
        "item": {
          "id": "f8e8e2a3-c6dd-4ee7-9255-4ac64f635dc8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1c5d7875-de03-4cff-b800-1f9a58943795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565aac0f-e02b-4334-8f1c-dd04733c8a59",
        "cursor": {
          "ref": "be909c26-a64e-4c89-9e8b-1323227d3a7b",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2cde8244-b8d6-4f23-a3c8-3b218e792414"
        },
        "item": {
          "id": "565aac0f-e02b-4334-8f1c-dd04733c8a59",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "441a003f-bb2a-40ba-bd27-c4b2dffe1415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55734b8-dfcd-4aa8-be25-8d65a80fec33",
        "cursor": {
          "ref": "2931b1d7-fd49-4546-963d-1b5d216b98a3",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "900df9a7-4b70-4fbd-bb46-f202ad8b270a"
        },
        "item": {
          "id": "b55734b8-dfcd-4aa8-be25-8d65a80fec33",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eb373850-2217-496d-8202-7345f04a2453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2e5b37-374f-485d-a0cb-adcd1f65d8ab",
        "cursor": {
          "ref": "2b3089e7-e3d8-47c0-912b-56ee9dc94448",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "609bd4df-880d-4627-9295-fdc05255bd93"
        },
        "item": {
          "id": "4a2e5b37-374f-485d-a0cb-adcd1f65d8ab",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "363a1eb2-910c-42eb-bc7c-99352bbf1bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95a9878-a9ec-43dc-ae83-65bb07e0459b",
        "cursor": {
          "ref": "648e7074-b9b4-470a-8cf5-99187d00354f",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "34feb47d-13eb-4d0c-b71e-ce242f96a19e"
        },
        "item": {
          "id": "a95a9878-a9ec-43dc-ae83-65bb07e0459b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91ecdfa1-e972-4519-b277-eec99366dd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa00fe0-29e9-4657-8acf-a3a57b80f7aa",
        "cursor": {
          "ref": "943c03f2-9217-4908-ab6b-5ec5034ec890",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "14df5f02-67f2-4150-b1b2-05db3145d8c9"
        },
        "item": {
          "id": "caa00fe0-29e9-4657-8acf-a3a57b80f7aa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d9db397f-31c5-4d9f-a12a-a816f82995f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022eb36c-ba5d-40f4-91d6-edfc5c4d3614",
        "cursor": {
          "ref": "9a660936-e2fb-4756-8614-8077b6882530",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a3f9c9f0-f01e-4675-a3aa-066d65a89249"
        },
        "item": {
          "id": "022eb36c-ba5d-40f4-91d6-edfc5c4d3614",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "51bdc471-6512-40ba-8edf-6eccb96b48f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5e3a3a-094a-4b5b-be56-a7a496dcb79b",
        "cursor": {
          "ref": "81154bdb-130a-4778-84b1-1955c82495db",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9b5a6106-5cef-4262-bc47-c2c34926187c"
        },
        "item": {
          "id": "1b5e3a3a-094a-4b5b-be56-a7a496dcb79b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "73b936e5-b2fa-4a5b-83cd-6a44b22f011a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4184d6-9fca-4115-851f-23954560e096",
        "cursor": {
          "ref": "1a212d81-e7c0-4597-8c46-0c30157dbbd0",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c8d8c922-a0c0-43c7-9e08-73365c74216f"
        },
        "item": {
          "id": "cb4184d6-9fca-4115-851f-23954560e096",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d395e333-2ff9-4856-a97d-b3cc10936b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99f31fb-7dc0-4544-ac73-52576211a825",
        "cursor": {
          "ref": "811cc8c9-2793-469c-987e-a892806a92ca",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ca3a3eb1-f3d4-4fb6-bc95-609e49f50edd"
        },
        "item": {
          "id": "b99f31fb-7dc0-4544-ac73-52576211a825",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1d9728c8-02cc-4f2c-9c08-e393b09ebc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9559b51-65af-4c2e-8f04-284385c67e1b",
        "cursor": {
          "ref": "b567a2e5-204e-4c58-90fc-a0ab5e54e82e",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6813a5b4-09bf-4cff-bae5-188c2cb463a5"
        },
        "item": {
          "id": "d9559b51-65af-4c2e-8f04-284385c67e1b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b6411649-7a72-4721-b7ef-fbbcc7e6e325",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "33a63780-a6c3-4748-b9b6-73aeeb3e3762",
        "cursor": {
          "ref": "d390d657-5751-4507-ba9c-349c80e68bb3",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1fc19ae8-9a7f-4ca4-b95d-2d7e12604a37"
        },
        "item": {
          "id": "33a63780-a6c3-4748-b9b6-73aeeb3e3762",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f2189b89-8040-4b81-a727-7065fbe4f1ad",
          "status": "Created",
          "code": 201,
          "responseTime": 2169,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c8700e34-dd23-4100-9da9-02c7a36d313f",
        "cursor": {
          "ref": "313e02c7-9770-4ca3-913f-463b52202d82",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d5378191-b577-4cfb-8fd8-b9399b613379"
        },
        "item": {
          "id": "c8700e34-dd23-4100-9da9-02c7a36d313f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e54a99d5-18d8-4e64-83de-dd6bf384cfb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c79f34a4-3fdd-4233-857d-f9e26efddf7e",
        "cursor": {
          "ref": "e19ecbca-a6fa-4ef0-b794-ef5d9104c777",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "14add10d-8a03-4cd1-b2db-b9d9825b9381"
        },
        "item": {
          "id": "c79f34a4-3fdd-4233-857d-f9e26efddf7e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7f7be34e-b380-4e8f-960d-b10827721cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e7ea22-1b51-430f-bf27-11c5d415a29a",
        "cursor": {
          "ref": "9fb27841-69da-4e9c-b8b0-87616605f259",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8c55c59c-edf2-4c17-bb77-fce5e60f9d22"
        },
        "item": {
          "id": "14e7ea22-1b51-430f-bf27-11c5d415a29a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0ed41787-8a85-4ff6-ac77-b61276982b6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5f7d6eca-98b0-48d4-a179-a6770ebdbf07",
        "cursor": {
          "ref": "b1e7a833-e110-4869-988c-bf62619060b1",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "101444f8-8147-4eb2-b246-6e9912c1e19a"
        },
        "item": {
          "id": "5f7d6eca-98b0-48d4-a179-a6770ebdbf07",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8b63e55d-e309-4df6-a7ae-ea277fcd81e3",
          "status": "Created",
          "code": 201,
          "responseTime": 1056,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6380a31a-1b7e-4b32-af2b-118dfa90aeb7",
        "cursor": {
          "ref": "65814cc3-1009-4929-80e4-307e27d2abc9",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fd476bb1-65a2-41c3-8c5d-0f3f0729c4d3"
        },
        "item": {
          "id": "6380a31a-1b7e-4b32-af2b-118dfa90aeb7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cd83cace-3596-456e-82a2-301a9c8c8c9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0376c6f3-1dd3-4f57-9ef0-360c2df9a4bf",
        "cursor": {
          "ref": "27288af4-d4bc-4077-b4d8-df33e8fbb88e",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "804c34bf-47cf-4472-95cb-74aa8fe9b439"
        },
        "item": {
          "id": "0376c6f3-1dd3-4f57-9ef0-360c2df9a4bf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a07e6709-b198-474e-863a-9aff020dcc62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 673,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "079cac7d-0b92-4d6f-bfc8-7a805b2c4535",
        "cursor": {
          "ref": "733fa403-0a03-40b2-99ff-d074c4e8df8e",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b12e5059-343d-4478-a772-6b197c7531a7"
        },
        "item": {
          "id": "079cac7d-0b92-4d6f-bfc8-7a805b2c4535",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ed10c53a-1f5b-432c-9de7-3821c631fa64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "156f998d-6a8a-4c7a-ba43-840080ba9248",
        "cursor": {
          "ref": "d096279e-1696-4f25-aa2d-a127db80f49d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "403a2495-c0da-449b-b96a-f0b43963c734"
        },
        "item": {
          "id": "156f998d-6a8a-4c7a-ba43-840080ba9248",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "59f5f5a0-cf44-412a-aae4-be6c65294310",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3b5ab23b-cb3c-4ef1-80a4-288ac9e72ecf",
        "cursor": {
          "ref": "3fde0e3c-711a-4b7e-b250-112fe0d498fb",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6e972cea-45fc-486e-96d8-09d57acc4d2b"
        },
        "item": {
          "id": "3b5ab23b-cb3c-4ef1-80a4-288ac9e72ecf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d10714ea-4538-4eb3-ae73-485e7c907fe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6e219d22-ad9b-4dd2-9f7e-f2d46fdff905",
        "cursor": {
          "ref": "a473982d-bd5f-411c-861f-675da09236a2",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4e746fd1-5b9c-4aed-99bf-6b96261ca369"
        },
        "item": {
          "id": "6e219d22-ad9b-4dd2-9f7e-f2d46fdff905",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8c606d0d-f5d4-4b36-88b2-97597942dbe0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ca52c4cd-781c-4ee3-a53b-a81bb13cc554",
        "cursor": {
          "ref": "3abefe4d-ab3d-4b99-b22d-8370100e561e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "39f6eb46-6d67-4200-a28f-5dfb56372f70"
        },
        "item": {
          "id": "ca52c4cd-781c-4ee3-a53b-a81bb13cc554",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c4ce4003-7f49-4233-903c-5291a8c9c04b",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "37200367-f494-444c-b03f-5af45c626211",
        "cursor": {
          "ref": "792970e0-15c4-4b45-a4a0-adc3b99bd8e5",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "761b732e-218b-4864-b14c-5e5430900cb7"
        },
        "item": {
          "id": "37200367-f494-444c-b03f-5af45c626211",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1668561d-8ee3-40e1-9639-9499149db690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23235ee4-a0e5-44ea-9bb2-21df199b3272",
        "cursor": {
          "ref": "a12ca4cd-034a-49d4-a493-197cc0c43333",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8fe727c7-4b39-45d8-b952-ecfe34b57152"
        },
        "item": {
          "id": "23235ee4-a0e5-44ea-9bb2-21df199b3272",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9fa91b01-5d14-4cf9-8f70-75daeacae962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442ff7d9-1e3a-4a26-a28e-84ce4800158f",
        "cursor": {
          "ref": "d850ee1a-6d38-4293-bdae-69575ec30819",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f33f17a0-611d-44db-9841-8c0dd1e71854"
        },
        "item": {
          "id": "442ff7d9-1e3a-4a26-a28e-84ce4800158f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "792a9814-594f-45a3-bc29-2e8327267f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4658e092-3caa-4625-a24e-cd70a6b5f5f2",
        "cursor": {
          "ref": "373c80c0-91ba-4db6-8b80-6a682a629f4f",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "eb7116d2-e71d-4cab-8a36-eb4803dba432"
        },
        "item": {
          "id": "4658e092-3caa-4625-a24e-cd70a6b5f5f2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5ea41d86-eb36-4f92-b85f-55cd259a13b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ac0fb4-ddf8-44fe-861a-0ddd7c81ad10",
        "cursor": {
          "ref": "dac26553-dfb9-4017-91d2-891e69ab25f6",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "376bfbd5-696f-4739-bd5a-b98f8c5c43d2"
        },
        "item": {
          "id": "b6ac0fb4-ddf8-44fe-861a-0ddd7c81ad10",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a0c361a6-a4c2-47df-8c5c-49c64235f59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205e7276-0a72-4c01-a7cf-155688d43ef1",
        "cursor": {
          "ref": "065ed3d0-d3b2-46c6-b26b-e2761660e789",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8cf587c9-ee8c-437b-8b33-cbcf7d1049ce"
        },
        "item": {
          "id": "205e7276-0a72-4c01-a7cf-155688d43ef1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2b888a3f-0506-4ed2-9683-2cb662cc3a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab7ae9f-486c-4c6b-a342-1c7f01fc7254",
        "cursor": {
          "ref": "8c5722fa-2129-4250-9b10-eae1f9297e5e",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "702dc962-bfd1-4f0d-b414-01cfc568616a"
        },
        "item": {
          "id": "eab7ae9f-486c-4c6b-a342-1c7f01fc7254",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ff695218-302e-4a33-9804-fd3af6bfa13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2958a4-d4f9-4053-a060-012f255cc641",
        "cursor": {
          "ref": "e9f65a88-1acd-4ea4-8085-23f1cb34cf27",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "24431d1e-d278-43fc-b4ae-05a48fb7a80c"
        },
        "item": {
          "id": "2e2958a4-d4f9-4053-a060-012f255cc641",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2b384cd3-6a0e-4c5e-b4e8-6abace3e16d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bf6f2c-b57a-4669-bcc6-8a94e351bd85",
        "cursor": {
          "ref": "f2dcb939-387c-4cb7-8baf-c16479901a78",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "98662ed7-cddb-47b8-bbda-adba69aa5094"
        },
        "item": {
          "id": "47bf6f2c-b57a-4669-bcc6-8a94e351bd85",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a14955a5-982f-41ed-94f1-f8e5244b4ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e399ec-9709-4d68-811e-05298b5359bd",
        "cursor": {
          "ref": "7cac4b57-baeb-48ad-a455-6d0b1a646100",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c62bdcb9-a6cb-4181-aa27-1412c0d281c7"
        },
        "item": {
          "id": "03e399ec-9709-4d68-811e-05298b5359bd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1ab3a5da-d86c-48be-ba40-a5fd7f9e3382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb5db44-3f24-44d7-8ca2-6cf93332f3be",
        "cursor": {
          "ref": "522986d2-dc8c-4780-9835-f39cfc01e449",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "efb3edfd-99f0-4e61-ac22-94eb9e6858d9"
        },
        "item": {
          "id": "aeb5db44-3f24-44d7-8ca2-6cf93332f3be",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5a2b0c51-8ad4-487c-944b-c48ea173f8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c46c963-ad5d-4750-9a88-7e766eac7890",
        "cursor": {
          "ref": "dff5a74a-b85a-4770-8585-b5064c5e4490",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2b457a1c-a4a2-47f8-b07d-e88931b02cc1"
        },
        "item": {
          "id": "9c46c963-ad5d-4750-9a88-7e766eac7890",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4bc1e429-b3a2-411c-b7d9-e3a965c50658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d17cae6-8cea-478a-8bf0-065b740b6bba",
        "cursor": {
          "ref": "8102c618-b862-4b8a-9718-80bb9ebf4018",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d290911e-69be-4922-8fc1-9c8adc7721e1"
        },
        "item": {
          "id": "2d17cae6-8cea-478a-8bf0-065b740b6bba",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6276395c-f87d-4908-9057-f30149277804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172ccbd4-0c84-4e0b-b218-6c63e20485ab",
        "cursor": {
          "ref": "929dc732-fa7d-47de-a730-032ccceabdd2",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3d6542f0-70a4-42da-a98e-cb95ad25ceb2"
        },
        "item": {
          "id": "172ccbd4-0c84-4e0b-b218-6c63e20485ab",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "513c20dd-7bca-4bb9-b4ac-9fda510f52d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 664,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d0756f70-7a99-44e1-8e87-ae82f9841b8a",
        "cursor": {
          "ref": "ddbc5073-72d5-4d61-9adb-0bf6fc9d83a9",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a6877c43-7129-4e95-81d2-774be6138308"
        },
        "item": {
          "id": "d0756f70-7a99-44e1-8e87-ae82f9841b8a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3caa57a5-605a-4839-8075-93b12acc5b7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 662,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b704e86a-0893-4f4d-899f-0f65d0a5e8b3",
        "cursor": {
          "ref": "27855e23-cefc-4a0e-9cb2-d529dfdc9758",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f7375c1e-4e26-422d-bc1e-d8f42707e5ad"
        },
        "item": {
          "id": "b704e86a-0893-4f4d-899f-0f65d0a5e8b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ba1f3871-5c05-4794-922f-8548c08b92a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a682f2d4-0825-43b8-b67a-4d51379c65b9",
        "cursor": {
          "ref": "f2b14047-077d-4688-9ef9-b6fc0cc57cc1",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5f60f523-3577-462d-901d-6d240e66e665"
        },
        "item": {
          "id": "a682f2d4-0825-43b8-b67a-4d51379c65b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "42d9ea71-3cad-43c0-8a2f-e43d48d67108",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 737,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bea0cd38-5b3e-4fe0-9c28-406317bd21da",
        "cursor": {
          "ref": "53a32b81-c470-4847-bd57-4d7a484bc209",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "acab7fd9-bf2c-42de-83ee-8c4a34a7715b"
        },
        "item": {
          "id": "bea0cd38-5b3e-4fe0-9c28-406317bd21da",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8275b7fe-25f1-4d2a-98c0-e1957cfcf94d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e4d37ecf-e366-4697-a937-a4e6876741b1",
        "cursor": {
          "ref": "84336453-ed97-4f3f-9f53-d193c75a6948",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0efe63e9-e550-4fb6-add3-e3563380da21"
        },
        "item": {
          "id": "e4d37ecf-e366-4697-a937-a4e6876741b1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6b82f52c-1fd9-4b14-adf5-af23e0db0eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68bf0e7-b4fd-4f61-aba0-c107c4b12317",
        "cursor": {
          "ref": "469a55cc-e5e9-4d6d-b6e8-1a0e16c0c90f",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cd06760c-068b-46aa-8a4c-3cc93e18578f"
        },
        "item": {
          "id": "c68bf0e7-b4fd-4f61-aba0-c107c4b12317",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "083d4f77-3e39-4106-9785-73e36c798fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fa34df-726d-4152-b8d6-b9358aec0e49",
        "cursor": {
          "ref": "3b28f292-d0d8-4bf2-bab8-8aa8b87a9571",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "990bb5b0-6f5a-4f7b-a5e7-751a7850bc68"
        },
        "item": {
          "id": "b1fa34df-726d-4152-b8d6-b9358aec0e49",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3fbd0f5b-54a4-4595-926f-570aa841332b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fc30d3-c542-4d22-a038-e32ee293d510",
        "cursor": {
          "ref": "78a652ea-7bee-4946-9742-7be6fae9eda1",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "83edf3fe-a50b-4173-8a26-77e0c879ffa6"
        },
        "item": {
          "id": "80fc30d3-c542-4d22-a038-e32ee293d510",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7eaad102-35aa-40cf-96e3-5089fc37a323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767f355f-3370-48a6-8c3b-60461fedbcf5",
        "cursor": {
          "ref": "a9457255-61e2-48ed-96f3-1a98a276581a",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5aa3a8f9-d8ea-4322-9233-d33eeb1ec2cb"
        },
        "item": {
          "id": "767f355f-3370-48a6-8c3b-60461fedbcf5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "77196288-1829-4d0f-b9c6-bc7d62af9908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0a4db8-e2e2-4493-bf46-a8933348112e",
        "cursor": {
          "ref": "15285131-3bc6-476f-970c-807b3eaacc28",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "85d3664c-3184-49a0-917b-934d28d0e190"
        },
        "item": {
          "id": "2e0a4db8-e2e2-4493-bf46-a8933348112e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9b9a6f15-07ae-4410-9f9f-e839b0e1a11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cbb780-e645-4cf3-b81b-7cb72161c9d7",
        "cursor": {
          "ref": "0cb75ea0-ec57-42b8-a481-0be858da3879",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8e403ea5-9170-4491-a0b0-d756c82c4d94"
        },
        "item": {
          "id": "c4cbb780-e645-4cf3-b81b-7cb72161c9d7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ec986e4b-bc4c-467f-ad45-201deb1acb7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2930d7-76df-47b7-9551-5354e3d114a9",
        "cursor": {
          "ref": "7c4af23d-91a1-4575-94b3-cc2016da5cc5",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3678823b-5692-44a3-bbe7-e1fc24c62fe2"
        },
        "item": {
          "id": "af2930d7-76df-47b7-9551-5354e3d114a9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5a58f0e8-da69-4ec1-b1aa-9bed4c1e3cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d623aa-92b9-4f1c-a1f1-bceb5a13b1a9",
        "cursor": {
          "ref": "3a00de79-afef-424c-889c-48e3e2a3a157",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bd6d1cdd-6d7a-404a-8650-f82417258ccf"
        },
        "item": {
          "id": "a1d623aa-92b9-4f1c-a1f1-bceb5a13b1a9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e9343c7d-7e87-4825-9dab-e0ca1e3d4c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ca6ec6-bdff-4f16-b8c4-06472d355a15",
        "cursor": {
          "ref": "c8b4179b-b1f2-4a26-bbe3-5396086874f3",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a2482497-409f-4745-bdc3-c374736319c5"
        },
        "item": {
          "id": "93ca6ec6-bdff-4f16-b8c4-06472d355a15",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0a671931-26bd-4f6c-89a5-b9ab3e587aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6944077-f986-4109-8c55-b4079d403116",
        "cursor": {
          "ref": "f2222ef3-3036-41b6-838f-a931e892923f",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "29bde3c8-2b28-4ad3-aab0-bdb8d5053dd6"
        },
        "item": {
          "id": "e6944077-f986-4109-8c55-b4079d403116",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "430340c6-1fcb-48f3-aed2-81cad14f660d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2848d36-b166-4fb0-9b0a-69cbd9b70bcc",
        "cursor": {
          "ref": "2e16ed3d-fa59-481d-a3ea-77b4de9d26b3",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3cfe4624-ad52-4380-80dc-e61e3c9e2829"
        },
        "item": {
          "id": "e2848d36-b166-4fb0-9b0a-69cbd9b70bcc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "df3d5b7e-a811-4f64-9187-fb779eb42072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ae5ddf-c081-4fb2-bd7f-b2f40dd356a3",
        "cursor": {
          "ref": "e0669431-39c0-4789-8c8a-457543ce6c7c",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c18d488d-0e5e-4a94-87a9-9452ee2aa4c4"
        },
        "item": {
          "id": "96ae5ddf-c081-4fb2-bd7f-b2f40dd356a3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "241d4c22-f575-4452-9fb1-f4714e16e33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccd146c-f638-42cf-bd88-80624218b6d5",
        "cursor": {
          "ref": "0382ff12-f5fc-46bd-af1b-6861a9da79cb",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "84b0e1a7-bf1a-4886-96bd-7d9821702e00"
        },
        "item": {
          "id": "2ccd146c-f638-42cf-bd88-80624218b6d5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "117cc4fd-9e0e-499c-9a5a-1bda51a55f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cc4530-6a18-4b84-a8a5-7591fcac3650",
        "cursor": {
          "ref": "153d13c9-9ce1-47fc-b380-770d01c7e70f",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2a78f899-5f8d-4db5-b0fb-2d25f5b3a033"
        },
        "item": {
          "id": "68cc4530-6a18-4b84-a8a5-7591fcac3650",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ada96ffd-46dd-4a4b-9ed2-d85145ec5a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75b8446-336c-4436-80a6-687322e2240f",
        "cursor": {
          "ref": "324b0924-2770-414b-beaf-9a929007fd27",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "92c163aa-aa65-49f0-b45e-1709aa503645"
        },
        "item": {
          "id": "a75b8446-336c-4436-80a6-687322e2240f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "95cb1c32-ba49-4564-becf-d301a10992a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8dccc0d-4e89-49a3-ace4-5aea1f252840",
        "cursor": {
          "ref": "223b143a-1788-447c-9f0c-2f1f6ff96ec1",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "05a4f898-1b5a-41b5-9de0-a1f0ca121ae0"
        },
        "item": {
          "id": "a8dccc0d-4e89-49a3-ace4-5aea1f252840",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d635a99c-3cb8-4e10-9628-745e7c160434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ed93e4-83f3-4a28-93b8-f45428805d31",
        "cursor": {
          "ref": "ef214d36-977c-4fb7-9f64-ce321d4dc25b",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c01056b7-21ea-4b5a-ad4c-dc4e13c65d30"
        },
        "item": {
          "id": "c2ed93e4-83f3-4a28-93b8-f45428805d31",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "68205e41-f9b1-465d-bba4-04d598e12642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d95089f-be3c-4681-8436-582b50d591e6",
        "cursor": {
          "ref": "0ea3e723-7025-4c7e-8dca-93835e2b0314",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e8c1f1da-8839-41dd-9b0a-eb311ef20942"
        },
        "item": {
          "id": "3d95089f-be3c-4681-8436-582b50d591e6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3b227031-fcde-4b4d-8c7f-8a08448f4e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3c0437-cbe8-476c-8234-bf380b13d8a5",
        "cursor": {
          "ref": "faec7d96-b85a-4832-9fe2-5590f4037898",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "01499603-d816-4cd5-82d4-40a26ac5c4a0"
        },
        "item": {
          "id": "2d3c0437-cbe8-476c-8234-bf380b13d8a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "63871394-1c74-46fb-9473-369836289ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2720a72-37fe-4a84-8ebb-e5dc5e98dc90",
        "cursor": {
          "ref": "aa639dae-93d0-469c-a585-39735bda1957",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "46d7c888-abd9-4ed9-b0cc-d7592d45ea74"
        },
        "item": {
          "id": "f2720a72-37fe-4a84-8ebb-e5dc5e98dc90",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a0903bf3-da09-457a-9690-5bda8c6d618b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5b80d5-7269-4819-89cc-e79201802160",
        "cursor": {
          "ref": "5107eb99-7d8e-4fbb-bf68-1c736d49e4aa",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6c99be08-2d50-4c1a-9275-4d88310f2753"
        },
        "item": {
          "id": "2a5b80d5-7269-4819-89cc-e79201802160",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "77364cfe-7643-4cc7-ab97-8938583c3d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4be671-5752-4438-89f4-c517dbd0ff93",
        "cursor": {
          "ref": "3f39d3d9-7484-4b44-b0d4-3f8080a85ff0",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4277d17d-208c-4d21-bc1c-c23ffc96d956"
        },
        "item": {
          "id": "5f4be671-5752-4438-89f4-c517dbd0ff93",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f3f91dfc-e7c4-4697-aa41-d61bf2f2bc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c60322-4668-43e7-b6fd-4c737a3cbb99",
        "cursor": {
          "ref": "eb92142f-7adc-4969-8597-f37d805887e6",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1f2a5675-fe88-4a9a-845e-e228d6d07d58"
        },
        "item": {
          "id": "29c60322-4668-43e7-b6fd-4c737a3cbb99",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "25572524-c496-4aa9-8eac-2f8cb8a1f68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1714cfba-5886-4966-a48b-c361a4f33c51",
        "cursor": {
          "ref": "a0c2a0ca-c3d6-42e4-a8ed-41f2d63c3ade",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "11cb47df-8f55-4bce-bb66-e8cdd7baeb35"
        },
        "item": {
          "id": "1714cfba-5886-4966-a48b-c361a4f33c51",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6c52b20f-1131-476b-98a0-310597e5c1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d4cf38-91f6-46d6-b2a9-ac2eb2d731a3",
        "cursor": {
          "ref": "dbb678fb-9007-47d1-b32b-540d7b231cf3",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f0512315-ed11-45df-b4e2-64bc46f3c29b"
        },
        "item": {
          "id": "c9d4cf38-91f6-46d6-b2a9-ac2eb2d731a3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "61c4cb99-462f-4f7d-b360-f062d3b311e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a1f8ce-05c4-445b-bc22-46e855a6e118",
        "cursor": {
          "ref": "2143d6eb-dafd-42d2-bb7a-b06860381cb6",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "716678ab-4f8e-4c50-9c9f-8b7d5820f36a"
        },
        "item": {
          "id": "95a1f8ce-05c4-445b-bc22-46e855a6e118",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "76e27257-258f-4107-a5c7-c4189dc32469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafca298-2b16-4857-97d2-704ad33ac5ca",
        "cursor": {
          "ref": "56559c6d-abe7-4c0f-a43e-2eed1ba8d168",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7a10c3a1-e8d5-4a61-accf-d68aa3e185db"
        },
        "item": {
          "id": "eafca298-2b16-4857-97d2-704ad33ac5ca",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "20415bf7-d9a6-443e-a30d-04f392b6ae16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d9da30-b01a-49bd-9b21-8498c7970fb6",
        "cursor": {
          "ref": "656071ba-02c1-4755-980b-ddfc40bc6e3c",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "eff1fb82-c609-44ca-9563-89a1ad6207bf"
        },
        "item": {
          "id": "d7d9da30-b01a-49bd-9b21-8498c7970fb6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ca01b177-aa50-4026-be6a-1303c678cc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac514c0-b42e-4bc6-a5e1-bf177fbda52d",
        "cursor": {
          "ref": "9aa455c7-4172-4e4b-8fbc-26a202905de9",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c9fedc1f-178a-431b-80b8-3a53588ad2dc"
        },
        "item": {
          "id": "0ac514c0-b42e-4bc6-a5e1-bf177fbda52d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e324a0fa-f603-41a8-b72b-725af89132ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824aaec9-f67b-4c84-8aae-32f70683aa2d",
        "cursor": {
          "ref": "fbf46f64-e0a5-41be-b6c8-fa41db1dff3a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "731826d9-3f01-4258-bf60-2f065ea6b49c"
        },
        "item": {
          "id": "824aaec9-f67b-4c84-8aae-32f70683aa2d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a9ed5cda-7a06-413a-9e24-df5eec05e6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aaadfc0-ca5f-4ff2-9a2d-097fe886edbf",
        "cursor": {
          "ref": "90932e00-257f-45ad-a11b-6e9911e948ef",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3dda5f69-9a48-49c8-a86f-b219a353a25d"
        },
        "item": {
          "id": "6aaadfc0-ca5f-4ff2-9a2d-097fe886edbf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9b13e3d3-0955-4823-af99-ea0017986fa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17f6876-693d-4972-acd1-37d1ea57059e",
        "cursor": {
          "ref": "f4544189-20af-4b58-adb4-78267639602d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ea5805fe-1ba6-4460-b9a2-b59e6a5a6272"
        },
        "item": {
          "id": "d17f6876-693d-4972-acd1-37d1ea57059e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4609392d-504a-4285-8dce-38db35312f50",
          "status": "Created",
          "code": 201,
          "responseTime": 1418,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4503a9f-05c8-4636-bc20-5e65eb7625a7",
        "cursor": {
          "ref": "b81ce6e7-c7e3-4e38-9ec1-230fdd5b053a",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "be194410-8308-472f-af50-5773795acf6b"
        },
        "item": {
          "id": "a4503a9f-05c8-4636-bc20-5e65eb7625a7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f34ecea5-95b7-4164-9618-fe407c25e446",
          "status": "Created",
          "code": 201,
          "responseTime": 893,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c44b7e8-69df-4ad9-92b8-f12b584fe4f6",
        "cursor": {
          "ref": "a4e554d7-695e-49a2-b4ae-5b1f39ce7efa",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f04226a5-48e9-482d-9a6e-ec4fe350ebde"
        },
        "item": {
          "id": "6c44b7e8-69df-4ad9-92b8-f12b584fe4f6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e8348351-50f5-41af-b97d-99f37389111c",
          "status": "Created",
          "code": 201,
          "responseTime": 913,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "666098c7-c293-4590-92f7-668dd1633921",
        "cursor": {
          "ref": "2d88bf73-1b4a-4be9-a276-d38a7a890623",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4ab7c6ec-b96d-4462-b61f-9ae3c8fed3c5"
        },
        "item": {
          "id": "666098c7-c293-4590-92f7-668dd1633921",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c91bc0e5-f880-402e-934f-573e6ab520c7",
          "status": "Created",
          "code": 201,
          "responseTime": 885,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87ec384-88aa-43fe-bf62-f9abf6fd4f32",
        "cursor": {
          "ref": "a6330c3f-676a-49c9-899e-37c105942194",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "87140038-9e83-4172-aa6c-30bd01e832b8"
        },
        "item": {
          "id": "b87ec384-88aa-43fe-bf62-f9abf6fd4f32",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6e3b375d-eae7-4f06-b7e7-3c8192c108d7",
          "status": "Created",
          "code": 201,
          "responseTime": 920,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff251c3-fd18-4317-b8f5-fe11ce8b0db9",
        "cursor": {
          "ref": "f2c99511-e4ef-4601-901c-35563f709966",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c89cc537-1282-4195-8ce6-5f0a0e135711"
        },
        "item": {
          "id": "9ff251c3-fd18-4317-b8f5-fe11ce8b0db9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f2c1228d-43f0-4f83-92fc-907e3c40f85b",
          "status": "Created",
          "code": 201,
          "responseTime": 1339,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecf33df-c71c-4678-b12a-a8abf94c783a",
        "cursor": {
          "ref": "d8bf7660-77d6-4c7a-b16d-05af33b2a691",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "93ae91cb-28f3-42f9-997d-67d08bc4dead"
        },
        "item": {
          "id": "8ecf33df-c71c-4678-b12a-a8abf94c783a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "74ff6b2c-41e1-4580-8d17-c4e1f8b77c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcaf1f1-8c50-4fc0-b277-798716158cf3",
        "cursor": {
          "ref": "76386e3e-da88-481e-a80c-0cb9805aa7d3",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "79d2368b-46e9-4ea9-8a8c-843588960901"
        },
        "item": {
          "id": "3dcaf1f1-8c50-4fc0-b277-798716158cf3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "63bedf89-96dc-4151-976a-691d54a1dc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01e38bb-6d45-450c-9506-b5ed00ea2657",
        "cursor": {
          "ref": "813848ee-e6f7-4d66-acbf-e5738eac0217",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ce806226-06a6-4557-8ba1-97fdfa252d66"
        },
        "item": {
          "id": "c01e38bb-6d45-450c-9506-b5ed00ea2657",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ce2eb635-664f-4b68-a0b9-3b660faaf5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c29054-d976-415f-942b-853d29fb81e8",
        "cursor": {
          "ref": "29c9b7f9-8a40-4372-81b3-2e03f25d77e1",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6b864806-7d41-4c44-af4c-74a2a04bec17"
        },
        "item": {
          "id": "26c29054-d976-415f-942b-853d29fb81e8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f0249e32-e757-48d4-af10-bc8a019e42d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4129abdb-ee5b-4b11-b523-9b1faf2c63c4",
        "cursor": {
          "ref": "198cb487-0ea6-4b51-ab21-0ccaff1116f6",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "52b19e50-a38d-4a16-98e0-310187106d38"
        },
        "item": {
          "id": "4129abdb-ee5b-4b11-b523-9b1faf2c63c4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8e6420f4-8038-478a-b3e7-256b4fd74add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc0adfa-7821-453c-9dd6-30e16762cb6b",
        "cursor": {
          "ref": "93fdfcca-9c2d-49eb-b494-899254ad3247",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4b4be6f-3d3c-45ff-90e8-d39690953ad8"
        },
        "item": {
          "id": "2fc0adfa-7821-453c-9dd6-30e16762cb6b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e10362b7-3f8e-403a-a102-3b05af0ea7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64a083d-45db-4653-9649-3c5c53319913",
        "cursor": {
          "ref": "017a4f71-0855-4bab-bef6-da2ade87c329",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "753e80aa-970b-479f-ab68-22b60dd11a11"
        },
        "item": {
          "id": "f64a083d-45db-4653-9649-3c5c53319913",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0221b19a-87e4-4475-8357-72be8b6191b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79b616c-f037-45ca-b6d3-f219630cc675",
        "cursor": {
          "ref": "88d74a58-3326-49ff-80f4-9c7dd6505d0a",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2ffbf522-4995-4b94-a3aa-618689bc417e"
        },
        "item": {
          "id": "b79b616c-f037-45ca-b6d3-f219630cc675",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "59650b34-5248-4bdd-87ef-196c9244d277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0993f5a2-95fd-4244-b088-1d8f2b6bebee",
        "cursor": {
          "ref": "e7a09a88-6c3f-4c3a-88b5-ea85ece2dbe4",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "28a86e91-1352-4700-8fb7-3339acc10fec"
        },
        "item": {
          "id": "0993f5a2-95fd-4244-b088-1d8f2b6bebee",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5f301782-d566-447f-95e0-4625610e5419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00211d77-adfd-4d6a-92e3-146965504590",
        "cursor": {
          "ref": "dc559282-ecfc-4f76-83b2-21ad1c9fa522",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "085a15ec-0af1-4103-911a-1d716c86d6ce"
        },
        "item": {
          "id": "00211d77-adfd-4d6a-92e3-146965504590",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4215805-1a62-4228-b0e0-3ba1bdb46a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d23feb3-2b21-4811-924d-a5499fee6eb5",
        "cursor": {
          "ref": "bc70b65d-1841-477f-b2eb-0fb681a36b3b",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "035ddd8d-2fe7-4454-a016-b4973b620a0f"
        },
        "item": {
          "id": "3d23feb3-2b21-4811-924d-a5499fee6eb5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d61c518a-c3ff-4135-a4c7-33051cbe68b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7753c9ff-7cfb-4f1d-bb55-f1a77e90f667",
        "cursor": {
          "ref": "3736f821-5a55-4713-a5d0-e25b706c063b",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3b1e21f0-e349-49cc-ba02-638ee79b40b2"
        },
        "item": {
          "id": "7753c9ff-7cfb-4f1d-bb55-f1a77e90f667",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3b3922d1-8614-4af9-9786-5d9b5a3afb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a02067c-8981-4287-852c-f685dd0eb27c",
        "cursor": {
          "ref": "b481eee6-3956-4250-9f9c-45ce7817d51e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c2b96434-c605-4767-8ff6-4297c448d6dc"
        },
        "item": {
          "id": "0a02067c-8981-4287-852c-f685dd0eb27c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3f62752a-e082-43f1-97ae-d70551bc5eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e94160-cb4c-45ef-a60e-569287b2a039",
        "cursor": {
          "ref": "6d388faf-243b-49d5-9b49-b1387b4a7778",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9283578a-8360-45e4-bed4-afd4feedbb2a"
        },
        "item": {
          "id": "a7e94160-cb4c-45ef-a60e-569287b2a039",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "930c5904-3ff4-454c-9e2b-ab0990b210ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb33784c-90be-4675-938e-df8f84f431c7",
        "cursor": {
          "ref": "a3a4067b-5d0d-4e2d-949a-8ede98b5acf3",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a2bee8c3-9a4a-4a89-a40b-4c1c362bac2b"
        },
        "item": {
          "id": "bb33784c-90be-4675-938e-df8f84f431c7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "18e6dea5-096f-4610-8edd-81f2ab476f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccd73c8-39df-4695-b0c3-2fe572d23865",
        "cursor": {
          "ref": "564b52fe-c214-4c7d-afb3-658960673209",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dc32b527-8375-4260-b778-ade06d1a3c79"
        },
        "item": {
          "id": "bccd73c8-39df-4695-b0c3-2fe572d23865",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "60c87f41-3586-4420-81f6-aea9445ab108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4546a86-cb53-4c0b-86b8-9069b2e670b5",
        "cursor": {
          "ref": "b60d3da4-45ca-442b-9dad-32fe462070cb",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1c7f186d-b2d9-471f-810b-814c37c33113"
        },
        "item": {
          "id": "f4546a86-cb53-4c0b-86b8-9069b2e670b5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a729f504-b756-4ea2-aeb9-485bb94fff77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0acb5c-6eb6-497e-b666-2f6278854dce",
        "cursor": {
          "ref": "d5c81169-138a-48f9-89a9-3e80b7828d5a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "002cb555-350c-4cad-b06f-16cb48cf67dd"
        },
        "item": {
          "id": "6d0acb5c-6eb6-497e-b666-2f6278854dce",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cfe386a7-4365-4b67-973b-e25e33de52b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9065ee77-476c-48f2-aa3f-83f76e53b1fd",
        "cursor": {
          "ref": "6b304498-d409-408e-921b-481c2f6f8b4d",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "957d446a-198d-456f-8a8f-d36a122682e0"
        },
        "item": {
          "id": "9065ee77-476c-48f2-aa3f-83f76e53b1fd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d7d1209-aa33-4fd8-a754-f9f113e35f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d31f04-5790-4dad-8202-2326d267a30e",
        "cursor": {
          "ref": "809b4670-f781-47a4-9d7d-700fda583b86",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "19ea8fdf-ef0f-4285-ae46-a0639f314e9b"
        },
        "item": {
          "id": "50d31f04-5790-4dad-8202-2326d267a30e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8ae50393-71ed-48fb-bc48-d3ae70a48fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14d9812-91b0-4d73-a922-b7550d5b546a",
        "cursor": {
          "ref": "07e188b6-0011-4b2d-9419-a46573ed3232",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "19cd0509-ddc4-4670-8341-5d7e4fba0e61"
        },
        "item": {
          "id": "f14d9812-91b0-4d73-a922-b7550d5b546a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "232ac6bc-33f4-402d-90b5-98bf8362dba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84893464-55e9-42d8-8818-0805235587de",
        "cursor": {
          "ref": "f729870e-78fc-4909-b57b-b78f46b51ad9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a726e2d2-589f-4992-957a-a86af7a52bdf"
        },
        "item": {
          "id": "84893464-55e9-42d8-8818-0805235587de",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "504bfab7-3e3f-4b14-819e-b9b29c754e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02a91a3-f696-42bd-adb1-48e82a1e8266",
        "cursor": {
          "ref": "7652ff2b-1db8-438b-b311-8c1e5055f107",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b3918ca3-7bb3-47cd-9f9c-618fd6527c97"
        },
        "item": {
          "id": "a02a91a3-f696-42bd-adb1-48e82a1e8266",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bbefc28a-fded-466b-86e6-254441c3c832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5779e44e-4cbc-4eca-9f61-9b0b22f14226",
        "cursor": {
          "ref": "f2e73e24-0c43-4155-a72d-4483cfb0f206",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2589ed13-6cf1-403a-9073-76d6af3b8ac2"
        },
        "item": {
          "id": "5779e44e-4cbc-4eca-9f61-9b0b22f14226",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "19db261f-3048-4a22-886d-b645225b6dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9988226a-935a-4feb-8728-1878807f9042",
        "cursor": {
          "ref": "61b3e2de-dcbc-4fe9-8d11-d39cb7ba292e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4511ee91-f17c-4904-84f1-bc1d16ea4004"
        },
        "item": {
          "id": "9988226a-935a-4feb-8728-1878807f9042",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e8d807a0-38cb-4be6-bd51-80a5b700a17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f7eac8-7ea6-43e4-aaaf-c8c690146893",
        "cursor": {
          "ref": "063c172f-461f-4585-84c4-a28cb3a79d74",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7eb96353-55e5-482e-8498-3ab37cf21cce"
        },
        "item": {
          "id": "a7f7eac8-7ea6-43e4-aaaf-c8c690146893",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f897e5fe-2215-49d1-ab88-9ad7615d40b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76affc89-8f53-4bce-a649-2b2ea35bd210",
        "cursor": {
          "ref": "1e53e1cf-5818-4cf1-b091-bd12e270552f",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6f690c80-baa7-43e4-8faa-fb872b150a28"
        },
        "item": {
          "id": "76affc89-8f53-4bce-a649-2b2ea35bd210",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b32625c0-f4cb-438c-9731-7776d5cb4797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da058cff-c44e-43ea-bad4-96be44505876",
        "cursor": {
          "ref": "91613045-e495-4c0e-b984-62f433b16972",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "aca50350-ec87-4fa4-ad34-31027772a88a"
        },
        "item": {
          "id": "da058cff-c44e-43ea-bad4-96be44505876",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1e29a111-10e9-4b76-a3e3-014b79c9f560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05793779-80bf-41a1-a350-e9245e85bdc1",
        "cursor": {
          "ref": "a00f0f7f-d393-4a61-a8a5-9db5fe18251d",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d0135187-820f-404b-bad1-865a92362d78"
        },
        "item": {
          "id": "05793779-80bf-41a1-a350-e9245e85bdc1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "af82451b-9a70-4b5e-8dae-b7ac17b93c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e89e75-1c7f-4c81-ad07-0acdada5301c",
        "cursor": {
          "ref": "bf37f3b8-7a9d-412e-b842-a30bdc774fd0",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "baadd2bd-d62d-4876-bdb3-afc1b1bb7b61"
        },
        "item": {
          "id": "41e89e75-1c7f-4c81-ad07-0acdada5301c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3ed3bb25-aba9-4a96-b728-aaad7a6ebdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd2b4ed-e596-4945-88d0-88064c1455d3",
        "cursor": {
          "ref": "c4585c28-437b-4767-9f7f-a10f86739528",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b6477125-c651-45b5-a494-0be049f9ec3b"
        },
        "item": {
          "id": "5dd2b4ed-e596-4945-88d0-88064c1455d3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4a4a256f-bb16-4fcb-912b-0e800c8ec582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390351df-81bb-4a06-a71f-49264f27257b",
        "cursor": {
          "ref": "1b79472d-00b1-4ba8-8c12-fc33a18c7e2d",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e85c1f34-8065-4216-b47c-1679a83019d5"
        },
        "item": {
          "id": "390351df-81bb-4a06-a71f-49264f27257b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a894457d-a081-47cf-b693-8f1dd99cdb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66d16b3-85ef-4598-b49d-f7b987a3c832",
        "cursor": {
          "ref": "4ffedf3b-e3d0-4e08-ae0a-36cc6e354138",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "72304a35-dba4-4704-811b-6879361ad834"
        },
        "item": {
          "id": "e66d16b3-85ef-4598-b49d-f7b987a3c832",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2551119b-234f-411d-8768-511a6b82014c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc79131-4d96-4089-9c32-cb8e509a1a0e",
        "cursor": {
          "ref": "bc8aa5cb-9b5b-4439-8d99-6c8aa7f57a76",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e16e5c96-4c12-41f1-a13a-f58b9664f065"
        },
        "item": {
          "id": "efc79131-4d96-4089-9c32-cb8e509a1a0e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c63931ac-da5a-4959-8410-cf75e3f4d2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feaacf07-0f38-424a-ab62-c3f473e44433",
        "cursor": {
          "ref": "e808b4f8-a7f1-4b62-85ee-deeb92b3f244",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f4faf4ea-53f6-4f31-8f95-c578b5909afb"
        },
        "item": {
          "id": "feaacf07-0f38-424a-ab62-c3f473e44433",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c05c8f2e-c239-49ce-a9bd-fa28d2679df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea3f36f-70ec-4343-b401-61a8320befcd",
        "cursor": {
          "ref": "d459bd9d-4201-4677-b6fd-51df48a86d4d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "20143e16-4621-4676-90ee-14f4dc11c68a"
        },
        "item": {
          "id": "aea3f36f-70ec-4343-b401-61a8320befcd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7f20354e-d563-45b4-87b6-7aed8958b46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d7dc66-b0c3-4fb7-b147-19598f080ddd",
        "cursor": {
          "ref": "6bc24afb-4714-4c41-9e1e-b44834fff969",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "52257e25-084f-4fe3-a482-e266a75e56da"
        },
        "item": {
          "id": "e4d7dc66-b0c3-4fb7-b147-19598f080ddd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c2fe3353-8cbd-429e-b63a-07d3a59a4872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe125902-b460-4cfe-843b-827233dd954a",
        "cursor": {
          "ref": "44a6f042-ac68-4389-ae51-6bade5d1b8e6",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "becd3b9b-1a29-43e8-84f7-aee3570b6dad"
        },
        "item": {
          "id": "fe125902-b460-4cfe-843b-827233dd954a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "39c5dfff-a947-43f5-9961-f5e437774a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a74b56-fe3a-48e2-9c15-a9eae70769c9",
        "cursor": {
          "ref": "9e561a8c-58c3-4aea-8b78-68cde08bb83c",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3c3e5776-f244-4702-9e3b-5cd0b8470cf7"
        },
        "item": {
          "id": "29a74b56-fe3a-48e2-9c15-a9eae70769c9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "413fff48-6a69-4f4e-8110-c4d5f9f616c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4dd65a-63f7-4392-92a3-4580fe2bf6ed",
        "cursor": {
          "ref": "7afc3e28-727a-47a1-8396-84dc1fe7a3e2",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e3cf78e9-a1aa-4c64-a1a9-909db9310825"
        },
        "item": {
          "id": "3f4dd65a-63f7-4392-92a3-4580fe2bf6ed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "74c80f80-7fbd-470a-9bb4-efdf0bd0efb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dbb455-ab9d-401b-ad8c-b9237f166950",
        "cursor": {
          "ref": "1ead3f90-3cf1-414d-9f07-b9fad660a3a1",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fa8a8d5f-1965-423a-9b90-a2f81962bb0a"
        },
        "item": {
          "id": "c8dbb455-ab9d-401b-ad8c-b9237f166950",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fd247503-d493-42db-9cb2-8224083801c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a074654b-657b-42ea-b203-313077d3645f",
        "cursor": {
          "ref": "658bc210-f49f-414f-81ca-e235d19ecc7f",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2cd9cc10-23ca-4a7c-b2d7-121c5bc3287b"
        },
        "item": {
          "id": "a074654b-657b-42ea-b203-313077d3645f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4885db19-d55a-4ce5-a09d-48f3f0c7c39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cb793b-01aa-4edd-96f6-3a3fb98fd411",
        "cursor": {
          "ref": "6127d1d2-3977-4783-a8ce-1ea939f77d0d",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cf720463-8fca-40eb-a2d9-77161d0b6572"
        },
        "item": {
          "id": "44cb793b-01aa-4edd-96f6-3a3fb98fd411",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "df894871-bdc4-4a01-ac99-7ec438eab7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0626b84-dba6-457e-924d-981a97ff6e07",
        "cursor": {
          "ref": "387704d9-4ca9-405c-9ee7-d1387242bbf1",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "80e4096e-0e24-4b1b-bfaa-0e8bf6bd9d01"
        },
        "item": {
          "id": "b0626b84-dba6-457e-924d-981a97ff6e07",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "347aeaa4-29ce-4f7d-b665-4f86317992b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e52c49-a5e7-4e4d-8c56-246056e48984",
        "cursor": {
          "ref": "20d630fc-3d26-43c5-baba-c9ffa9bb2d5e",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "90da856b-f1f5-479e-bc1d-2892c0ebb6a2"
        },
        "item": {
          "id": "99e52c49-a5e7-4e4d-8c56-246056e48984",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "56cb0879-b86c-487d-99b0-d20805d75ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6065a7-04f2-456f-9563-11e2f1b9a2af",
        "cursor": {
          "ref": "e810e722-898b-4c88-ac5e-83d1d327b127",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "61b225eb-99a1-4e04-b3d4-0a075bddf3eb"
        },
        "item": {
          "id": "9d6065a7-04f2-456f-9563-11e2f1b9a2af",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9470e741-bffc-4c4d-92f6-9470feb0ba1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49844f4e-787b-4cc6-8862-37cab93c1698",
        "cursor": {
          "ref": "e015fbae-2ec0-4ef7-b63d-f026ddbe52dc",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8cef0b64-5b9b-4e71-82e2-3858a25f208e"
        },
        "item": {
          "id": "49844f4e-787b-4cc6-8862-37cab93c1698",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0487a91b-572c-4b29-97c6-37e5a67d3891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff3c7ee-6c70-4ab4-8fc8-9419d442928f",
        "cursor": {
          "ref": "c4608856-360b-4825-83f8-ad7d5830c436",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a6c85307-e349-4b14-9982-939d8f5d9b54"
        },
        "item": {
          "id": "1ff3c7ee-6c70-4ab4-8fc8-9419d442928f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "57e0bab2-e5b5-4d3b-96ac-df6921ad48a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9806dde-ea7c-4a3a-babd-54698d396f06",
        "cursor": {
          "ref": "5f2cff22-aeea-4ae1-a26a-c6c6b3905046",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "826de641-be2a-4f66-bd19-be34388bf43f"
        },
        "item": {
          "id": "b9806dde-ea7c-4a3a-babd-54698d396f06",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c350dcfc-ffd2-4d0b-a67e-fb9f233d74ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bad7d44-e142-4713-abb9-3854d3cb7fd7",
        "cursor": {
          "ref": "929f3f24-bf41-4951-b722-f89067ea6ad7",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1bd18e2c-78d0-42b3-b2fa-73ae7ee32b79"
        },
        "item": {
          "id": "3bad7d44-e142-4713-abb9-3854d3cb7fd7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d66f04bf-0d05-4a0a-bce0-23c6b80cf2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e54f340-aea0-487b-88a8-37a10919874b",
        "cursor": {
          "ref": "7d144842-ab40-493c-8a32-b29eeada1a57",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7d938360-11ed-448d-ab1d-f0dc9b50ad20"
        },
        "item": {
          "id": "9e54f340-aea0-487b-88a8-37a10919874b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3ee4f38f-b978-4905-b57a-945b27e8afbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162ebaa3-c003-425c-8efb-ce05f40f5050",
        "cursor": {
          "ref": "7269e5d0-0a36-470c-a3da-90235bf8a225",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9127ccae-a592-4cc3-867a-6e626c5c53dc"
        },
        "item": {
          "id": "162ebaa3-c003-425c-8efb-ce05f40f5050",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b9e06132-cad7-4862-9ab2-4fe663d3c5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76514566-8c8c-4a05-afb2-f686f9f8c331",
        "cursor": {
          "ref": "b76f4447-9e3d-4bfa-a28d-0d1a24786b9f",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6f8aac47-ec49-47f3-aab7-68ddd5dad491"
        },
        "item": {
          "id": "76514566-8c8c-4a05-afb2-f686f9f8c331",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aa31b4e6-6256-4a2a-b6bc-d87f729706ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438d1522-1aec-460d-a72f-1ff77b23d8f1",
        "cursor": {
          "ref": "416b0e45-3085-4196-af6e-97fab138c308",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0c7c0706-7229-441d-a6c5-c2daa3498894"
        },
        "item": {
          "id": "438d1522-1aec-460d-a72f-1ff77b23d8f1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2b15de0d-dacd-4c23-a0ff-76fd57f30323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7de322-786a-43f0-a019-85d2a38c64a7",
        "cursor": {
          "ref": "e244f1fa-a8f4-4e18-a9be-c777f7d5ec99",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "992cbbbd-9b8f-444e-b3ba-af07a6030e6f"
        },
        "item": {
          "id": "ae7de322-786a-43f0-a019-85d2a38c64a7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "167a2dac-40f3-4165-a0bb-4fd558be0b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc86a0c3-223a-4a1b-ac49-91927695d030",
        "cursor": {
          "ref": "e74bfe1d-2170-467f-a0d5-2bae1aad00b9",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5893f7ce-d298-40bb-aa9b-9798d9e92bbd"
        },
        "item": {
          "id": "bc86a0c3-223a-4a1b-ac49-91927695d030",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56bfd244-ff9d-40fe-9845-680fe66faba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478883c8-700b-461e-8521-36c2da73873d",
        "cursor": {
          "ref": "59befdf2-be0d-4f67-b395-364672ef18d0",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "263bdf0f-1bda-4299-924e-3609b5f55665"
        },
        "item": {
          "id": "478883c8-700b-461e-8521-36c2da73873d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "39e55fa6-0862-4716-a3d8-e030fa14a18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c358eea2-82eb-435b-9030-a1d6b8216eb7",
        "cursor": {
          "ref": "b9ae001b-54fe-49f2-b752-9694b4ecf08b",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9722c951-ae1f-49ea-bfc0-7ed8b163fc9c"
        },
        "item": {
          "id": "c358eea2-82eb-435b-9030-a1d6b8216eb7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c46db201-44e2-4446-9404-ed03a78f53d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9ad1bd-d376-4d47-bda1-dfa1ce6cee4b",
        "cursor": {
          "ref": "18c4795c-b527-4ab5-a4d3-46a5f30c1a2f",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f2a8ea25-db10-4cc2-a596-6ac5bd5a838c"
        },
        "item": {
          "id": "ab9ad1bd-d376-4d47-bda1-dfa1ce6cee4b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "85ac8426-a3be-4c50-b654-e9f74891c668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd81d91c-b5e6-4dc6-bf94-cc3c23db2b20",
        "cursor": {
          "ref": "5db8dc11-b66d-47d8-82a6-02519288e9de",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "143d656b-f7fc-4b78-a8bc-e8148a9171c3"
        },
        "item": {
          "id": "cd81d91c-b5e6-4dc6-bf94-cc3c23db2b20",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4847a1ce-8f1b-400f-8988-88da6f18bdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ded96a8-88a6-4165-80df-3458db68941d",
        "cursor": {
          "ref": "42ae12b6-1a0e-4ee0-911e-41752424e72f",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "63d7ca7a-710a-4006-b9fd-7ae40e01fb21"
        },
        "item": {
          "id": "0ded96a8-88a6-4165-80df-3458db68941d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c0e50344-8ada-4556-839e-28a4de3942ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651f491f-593c-4480-8baa-a94fa4d83ad9",
        "cursor": {
          "ref": "a1dbf8ef-811c-4c51-acab-1394f8b635fe",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5fa10c46-c8ea-42d4-8ed7-de0be235d883"
        },
        "item": {
          "id": "651f491f-593c-4480-8baa-a94fa4d83ad9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1862c768-9f62-4949-81e2-415a72941fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19897635-1b38-4d0d-bab8-b107f6ffbd81",
        "cursor": {
          "ref": "40b67c63-08e0-4193-861e-de6d74b864f5",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c92c2cfd-de6f-4c35-b3b5-d331d9cb3fdc"
        },
        "item": {
          "id": "19897635-1b38-4d0d-bab8-b107f6ffbd81",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bd0f7c52-70f0-47ce-b613-9bdadcc8814f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4883ca45-26a8-4b5d-96ed-0c2f5e58d637",
        "cursor": {
          "ref": "998646a2-2257-4022-a50d-ce39d0905287",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a8391940-3150-46d9-b56f-dc09cb048f0f"
        },
        "item": {
          "id": "4883ca45-26a8-4b5d-96ed-0c2f5e58d637",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6c8bc4fa-5e3e-4015-963c-5204f5e58c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d363c599-585f-4c0d-964d-dcb38dbfc730",
        "cursor": {
          "ref": "6b74a7ad-e2ae-41fc-8b59-edf2907d917d",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "76eef394-d51f-43d2-bd0b-bcdf4f37dd4e"
        },
        "item": {
          "id": "d363c599-585f-4c0d-964d-dcb38dbfc730",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7bfe281b-a2c0-42c8-b5b1-108ffe62b2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110fd75b-bba9-4101-a1ca-6f0d4929604f",
        "cursor": {
          "ref": "c867227f-d61b-406a-a110-165222cc45b2",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8113a09e-0a54-4510-935a-2066073c2e82"
        },
        "item": {
          "id": "110fd75b-bba9-4101-a1ca-6f0d4929604f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "759bf002-badf-4146-bb6a-019facf1e455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728510c9-c73e-4c44-80a4-d7be1c966410",
        "cursor": {
          "ref": "a8b29b91-aaf5-45c1-b4f9-cbf1d3b675a4",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a0e72842-5471-4c98-ba2e-3500d4b1b8fc"
        },
        "item": {
          "id": "728510c9-c73e-4c44-80a4-d7be1c966410",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1a86f1eb-b659-4b8a-8fe0-0a0dce31d3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3bafbd-bf03-4c68-8f3b-a73419f81635",
        "cursor": {
          "ref": "1cde6f01-4a28-4447-9ed4-b2a721ebed95",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0aedd418-1247-40e8-9121-22a86d5cac88"
        },
        "item": {
          "id": "5e3bafbd-bf03-4c68-8f3b-a73419f81635",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f10955a2-26b5-4989-aecf-4e1eb45a3f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a59983b-9498-4c86-89bd-bc4db70b5407",
        "cursor": {
          "ref": "b086170d-11da-4f0c-b63b-7b8f3bd4ed0b",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c45ed127-2363-4cc4-a910-656e4a726d38"
        },
        "item": {
          "id": "7a59983b-9498-4c86-89bd-bc4db70b5407",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "94f3a854-9864-4663-91ae-caa83be0c066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93cd2c5-30e3-48df-93c7-1b34f3f74da8",
        "cursor": {
          "ref": "65b71c59-6f87-4c0d-b2bd-7efd28aca5be",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "db7ebcb7-8e1c-4b6a-9c18-2b0f1cd65adc"
        },
        "item": {
          "id": "f93cd2c5-30e3-48df-93c7-1b34f3f74da8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bef2c41d-cfbb-48ca-98e0-a7b9dbeda33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cd620c-3695-404d-a29c-715cd126c939",
        "cursor": {
          "ref": "4f92f136-2f8b-4273-a04a-f24b608222b5",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "95b7ea32-2207-474a-b94d-9d38465163d4"
        },
        "item": {
          "id": "09cd620c-3695-404d-a29c-715cd126c939",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "78ef8ec5-e7dc-4185-9444-9a2a8149d6cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f487d515-f0ea-43f5-ab3c-0ff12a319169",
        "cursor": {
          "ref": "fbb2f6a1-35af-4ff2-af8d-f7579aa4d0cd",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e52a9d66-422e-4d87-8639-48fa8780b9a5"
        },
        "item": {
          "id": "f487d515-f0ea-43f5-ab3c-0ff12a319169",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9a7aa694-075e-46d6-8eb0-5e1e9ca00b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4812d624-c400-420c-8cfa-8488fc211aab",
        "cursor": {
          "ref": "ba3cfdbb-9c1c-4d22-868e-3c8caf850372",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "89e77a73-4c67-4425-adb1-d0595a9fab56"
        },
        "item": {
          "id": "4812d624-c400-420c-8cfa-8488fc211aab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2f4ca39a-ed24-49ee-9c07-09b5067e66c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae6c0cd-4210-471e-9aa7-1c5f8f8ff202",
        "cursor": {
          "ref": "6f388f34-4b4a-47a0-93f5-c8fe3914bb5f",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b155b928-61e2-4a52-ad65-10460fd117e5"
        },
        "item": {
          "id": "6ae6c0cd-4210-471e-9aa7-1c5f8f8ff202",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7b4ec54e-62f2-49ed-99e8-4c6306127b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd4517e-f525-44b3-8389-27c172948ec9",
        "cursor": {
          "ref": "37f8a83d-84b5-4c21-a4d9-37989b31fa1f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "99dd582f-d361-4d08-8f37-63c9206afeb5"
        },
        "item": {
          "id": "1cd4517e-f525-44b3-8389-27c172948ec9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ae13e667-e3a3-41ed-9ba6-6c3a205fe785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542da27c-5b29-4228-b1e2-0b56a14a6ed3",
        "cursor": {
          "ref": "d135aeca-e527-4430-aec4-5fab3b010021",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3d7f8561-c2ac-463b-b75c-1e0e099db47b"
        },
        "item": {
          "id": "542da27c-5b29-4228-b1e2-0b56a14a6ed3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8204c0c0-5a9e-49d3-91f4-be71fd294202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6ebca6-d092-4a35-8ff8-e361352bb4d8",
        "cursor": {
          "ref": "ee0a188e-8366-493e-90da-21d0ffbdcc8c",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "660212b7-41be-4046-86ea-c6c071903e6e"
        },
        "item": {
          "id": "fd6ebca6-d092-4a35-8ff8-e361352bb4d8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "834cf4a0-5fca-4a20-8f28-68c6d3294e9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "69fee9c9-b5a1-4e67-b426-9346c40638fa",
        "cursor": {
          "ref": "0b555afa-a72a-48f7-a2e7-9f503839270b",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "963e1a8a-cb4f-46a2-bbcc-bc72389ae1e9"
        },
        "item": {
          "id": "69fee9c9-b5a1-4e67-b426-9346c40638fa",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d553885d-33c7-496f-bb4f-bc5eba3a5ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f1f2c8-cbbc-436b-8813-565aba85e7c4",
        "cursor": {
          "ref": "e464a626-0370-42dc-89f1-c28531be5818",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d329dc76-5ad8-467a-a571-2c4188b66d79"
        },
        "item": {
          "id": "57f1f2c8-cbbc-436b-8813-565aba85e7c4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e90e339f-6ce8-455d-bf41-c068663bf62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c32393-cde7-40d7-8bcb-0b09049aaa63",
        "cursor": {
          "ref": "1e7ccfb5-f712-416c-a2bb-ccea57b74e40",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "679e5fa8-1cb7-4069-828f-208aa2d787ca"
        },
        "item": {
          "id": "14c32393-cde7-40d7-8bcb-0b09049aaa63",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c87fa056-887b-46a5-8a41-5c376f12c905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2085c6-00b3-43de-9214-33ab45acadc9",
        "cursor": {
          "ref": "baf161c2-1c5f-45dc-b77b-d8842698c049",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8effd2a0-3ff6-428f-84d6-7aa7277b31f0"
        },
        "item": {
          "id": "2d2085c6-00b3-43de-9214-33ab45acadc9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3272345c-daab-4e53-b445-b32b1c645b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed02f93d-ccec-49da-9698-c5af27bad87c",
        "cursor": {
          "ref": "266a5984-ecad-48c8-9dd4-a9f42433c7c5",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a6ecc59b-ef13-4dd7-908b-255bca4b31ca"
        },
        "item": {
          "id": "ed02f93d-ccec-49da-9698-c5af27bad87c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "29ea7212-3b1e-45da-b105-95c9b15c0f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6985c939-8e20-4a76-825e-dc0f41c7aecb",
        "cursor": {
          "ref": "7d814421-dbdb-499d-b056-c5b07b4c1db8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "28549779-7a65-4d69-a086-9ffd4f5538a7"
        },
        "item": {
          "id": "6985c939-8e20-4a76-825e-dc0f41c7aecb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c145c7b9-2975-4c44-abd7-0dc09c61fd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b85d38-b507-4415-b777-a4a521b50577",
        "cursor": {
          "ref": "fb1504b9-bb54-46ff-bfbc-e982e5ffcf28",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "915e7b74-fc6a-4e96-9428-64795b0bc042"
        },
        "item": {
          "id": "35b85d38-b507-4415-b777-a4a521b50577",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f05280d1-5248-403f-b43e-0e00442e7d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e02a42-b4c5-442d-90a5-d934e8c95a3f",
        "cursor": {
          "ref": "12b62686-ba07-4b77-97db-3d0590a785dd",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b39d34d2-c34b-414b-b472-55949a4d8d3e"
        },
        "item": {
          "id": "74e02a42-b4c5-442d-90a5-d934e8c95a3f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "437c61ec-060b-433d-bd5f-27da7fa505b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7df8ab-710a-40dc-a655-e8b9f3bcbf85",
        "cursor": {
          "ref": "b3314797-7dce-4557-ac4f-257175809662",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4aa0e6ad-2d18-4ac3-bac1-5fe9920aac34"
        },
        "item": {
          "id": "4b7df8ab-710a-40dc-a655-e8b9f3bcbf85",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d3362038-cd94-4444-b521-6fc92a74cec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310c9a77-552a-4474-bafc-90e61359ee7d",
        "cursor": {
          "ref": "f8142f43-d71c-45f8-aa77-ab1ace8a8b17",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "660b1d27-c919-4ea3-abea-c4bc203225ca"
        },
        "item": {
          "id": "310c9a77-552a-4474-bafc-90e61359ee7d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d4772a92-b22c-4f80-846d-fabdf0dcd1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78524b3e-d417-495c-a0e8-8c1fc191ab96",
        "cursor": {
          "ref": "3862bf51-02cd-41d8-adfa-5fe875756bbe",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e1d7b792-426b-4acc-8371-6c7fbd7edfbb"
        },
        "item": {
          "id": "78524b3e-d417-495c-a0e8-8c1fc191ab96",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6588de69-2b75-4288-b99e-960863a4b208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81484fd5-8a81-4ae9-ab29-8fe4975bef0f",
        "cursor": {
          "ref": "532a8773-62f9-4124-b6e0-3560e5f08407",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a47e6fdf-cf58-4b61-9160-d3a379e4892a"
        },
        "item": {
          "id": "81484fd5-8a81-4ae9-ab29-8fe4975bef0f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9e7f7ce0-148e-4d2b-baef-94531f41b771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57689bc1-02d8-4847-bb18-9aacd18c200a",
        "cursor": {
          "ref": "d7ad7c6f-9add-40ce-a9b0-74337fd5ec72",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c26cd309-116c-4df0-ae0a-95deb729ed4b"
        },
        "item": {
          "id": "57689bc1-02d8-4847-bb18-9aacd18c200a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c0b7a4b5-b601-4c1e-a813-49348b21944f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0666ad5-6ec8-4c74-a1e0-0f2a230a35f2",
        "cursor": {
          "ref": "86cf4085-b9e7-4298-9f24-d9dcffe5b226",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3f6f6ba1-6b34-4556-9225-68f84f8ef0e7"
        },
        "item": {
          "id": "b0666ad5-6ec8-4c74-a1e0-0f2a230a35f2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "83738170-ad45-4f43-a0b8-6d232838454b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33448fd4-be00-4212-9884-81bb006f5017",
        "cursor": {
          "ref": "30c4d20a-3c6e-412c-9b5a-a24b3411c156",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3eddf450-718b-4dea-9395-49d41623fcb2"
        },
        "item": {
          "id": "33448fd4-be00-4212-9884-81bb006f5017",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bdfd1e12-5758-4f38-8996-0224763b0d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f716ac64-9247-4e99-bfb8-7591f17be04a",
        "cursor": {
          "ref": "62e99256-2788-4e86-9744-754806a68f4c",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bf92705f-2c4d-4638-b3b5-186916b27050"
        },
        "item": {
          "id": "f716ac64-9247-4e99-bfb8-7591f17be04a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ac26c3a-fdb0-48ba-a249-f1b60620ab6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002dcbe2-af27-462a-a81a-6b6eac3143df",
        "cursor": {
          "ref": "290a3cd8-34bd-4cce-85f6-6cec10a8f3d4",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e5aaf7f5-c0f1-42ae-80cc-029f3a21666b"
        },
        "item": {
          "id": "002dcbe2-af27-462a-a81a-6b6eac3143df",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c0e4ac50-2218-4870-8a8d-f66472a4d510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60acdaf3-2e52-428b-b4a7-d65a9696e9b0",
        "cursor": {
          "ref": "ff24c94d-8419-4c34-981b-7e0008578ce2",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "aab3dea6-2e11-4f8b-91e9-e29d0e22bce7"
        },
        "item": {
          "id": "60acdaf3-2e52-428b-b4a7-d65a9696e9b0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "eacf9fcb-1b77-462e-ba84-e8c077428916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159f8e71-86dc-47d5-a2ba-6225a386338d",
        "cursor": {
          "ref": "33324af5-fd2b-41b7-9257-70a795c96aad",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "13a03f65-8e00-4b93-a6a3-fd28ff7e031f"
        },
        "item": {
          "id": "159f8e71-86dc-47d5-a2ba-6225a386338d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "35088e7b-23e5-439a-9904-42a8522c4478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d3e70e-f0c6-483d-aa43-5761db2d2b7f",
        "cursor": {
          "ref": "8dcacf7a-c3d8-4df5-8050-8bef303abff5",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fcee2b2d-c9f7-4b8e-af1e-7fe36a852324"
        },
        "item": {
          "id": "25d3e70e-f0c6-483d-aa43-5761db2d2b7f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "317513ff-3975-44bb-b707-fbde39c1cb6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3284afe-d520-49a1-90e9-2fa3b430ed35",
        "cursor": {
          "ref": "0503858f-e204-4061-83b6-602e03f6d834",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1b1b5a84-ef39-4d25-8a95-e3df7a017e4f"
        },
        "item": {
          "id": "c3284afe-d520-49a1-90e9-2fa3b430ed35",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e01fd42b-2dd7-460f-96cb-64ef69a67798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3fd389-da5b-462f-af6f-20f90014e167",
        "cursor": {
          "ref": "f77437da-4393-4c07-bdde-547f75da00e2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "78346347-f428-4499-83ba-da675ad4945e"
        },
        "item": {
          "id": "ce3fd389-da5b-462f-af6f-20f90014e167",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c5bd2d7f-f113-426c-b3c3-251ae03c4f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295b9915-c1c5-46c0-82fb-883f63c039ae",
        "cursor": {
          "ref": "78125f54-3308-447b-8168-f660ef6f63b5",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "37dedced-d97a-4428-a1eb-82baeb2060ae"
        },
        "item": {
          "id": "295b9915-c1c5-46c0-82fb-883f63c039ae",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0c7a0b2d-57a0-4868-96bb-fd80ddec63fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b50bbb-fcdb-4650-8b23-e89c82f212cd",
        "cursor": {
          "ref": "4827274b-c49d-485e-b23d-33e8312c795f",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "275cf7ee-1547-471b-9ef1-a9ef2fbd7aa0"
        },
        "item": {
          "id": "73b50bbb-fcdb-4650-8b23-e89c82f212cd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4c120866-dcfe-4da3-8577-bd056ff34228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543c3eeb-a1f9-4591-bf09-c8be9edb842b",
        "cursor": {
          "ref": "171ea07b-af16-4cc4-87af-b2920dfead68",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "30e6c004-1d05-4120-90cb-af8ed1c91e56"
        },
        "item": {
          "id": "543c3eeb-a1f9-4591-bf09-c8be9edb842b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4d3f4ba4-463f-4724-bf1a-26fd60256576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae5c33d-b870-4e59-88aa-8a0cd80246f9",
        "cursor": {
          "ref": "251417aa-fbe7-4984-92f3-e64085df3d87",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7b75040d-7fd4-4b27-9257-63affb50a995"
        },
        "item": {
          "id": "7ae5c33d-b870-4e59-88aa-8a0cd80246f9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "08e5dfdc-f245-4a74-a3a1-19ff80ecb47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2933b334-c5b4-4b3c-9ee7-f3a7a2bb09b5",
        "cursor": {
          "ref": "0b680ccc-850a-4030-a164-3b0b78bb9662",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4d81edc9-45e5-4db0-bc39-5b9cfe065e62"
        },
        "item": {
          "id": "2933b334-c5b4-4b3c-9ee7-f3a7a2bb09b5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "67ff4b99-5fe6-475b-a6ae-6434421068d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef056f8-8e05-4911-bc36-8b3bd5750315",
        "cursor": {
          "ref": "b503d2cc-9d01-4d34-ae0f-dcf25e6ed2dc",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "27fac8f6-f5c4-4b9a-9e22-1e204fba0937"
        },
        "item": {
          "id": "1ef056f8-8e05-4911-bc36-8b3bd5750315",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d0b40f2c-bffa-4e3d-ae2a-5cb241b0e0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6661b3cd-552c-4381-8ff4-e2d1feba1b3a",
        "cursor": {
          "ref": "f989a53d-3428-4eea-997c-663e47aa980b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d3578b6d-3112-4ea2-bdac-a520696a8641"
        },
        "item": {
          "id": "6661b3cd-552c-4381-8ff4-e2d1feba1b3a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d58df0b2-20f1-488c-9a31-0549beec15c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4654062f-5af9-4c17-b99a-e0d3ddce02a8",
        "cursor": {
          "ref": "9a609d75-f544-49d1-ab0a-7068c2411eb2",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "00b7956c-359d-4729-8900-158ffe959548"
        },
        "item": {
          "id": "4654062f-5af9-4c17-b99a-e0d3ddce02a8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "14ff8222-f722-4569-8d72-7b336c6e1daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "68730e8b-fb57-43af-bfce-5b1ff8110a90",
        "cursor": {
          "ref": "d49d5d8c-1bb2-4844-8e55-9905f479083d",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "387faa66-b396-4bf4-b146-5b3a95b3bcf2"
        },
        "item": {
          "id": "68730e8b-fb57-43af-bfce-5b1ff8110a90",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0639b070-1461-4fc9-beee-40afdf32c5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "34bbf23e-3f0c-43e6-975c-8d3159171c36",
        "cursor": {
          "ref": "41c9045d-36b1-4760-8a0e-a38c072e1403",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0e4a1468-c019-4c51-bcdf-c36d4481a602"
        },
        "item": {
          "id": "34bbf23e-3f0c-43e6-975c-8d3159171c36",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df5ee469-6107-4b01-83b8-435739dd18b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7b3c27f3-282c-4a42-8da4-3abe0487de66",
        "cursor": {
          "ref": "1ccb7008-59b1-468f-ad9d-322f2625c30f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fdbc386b-7d2f-4a9e-933f-11fc62682684"
        },
        "item": {
          "id": "7b3c27f3-282c-4a42-8da4-3abe0487de66",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6d7551e5-7b14-4db5-9b81-37a87ca93043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b9d1c5-9edf-4312-9279-d39b3e657cb1",
        "cursor": {
          "ref": "5bdc959f-1aed-4ec3-9f8b-5333ab893e6d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "eee6f68d-8f1d-46d7-8e87-1f072fd31cea"
        },
        "item": {
          "id": "30b9d1c5-9edf-4312-9279-d39b3e657cb1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2c6aaa58-c309-4066-abdb-2399e8dc74aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ae5fca81-6ef4-40d0-b77f-bc4aa7b8cf85",
        "cursor": {
          "ref": "18068abc-63ff-41cf-b86e-24f49af28bec",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "46b15b73-44a8-47d7-bc92-888746015956"
        },
        "item": {
          "id": "ae5fca81-6ef4-40d0-b77f-bc4aa7b8cf85",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d3dc8f43-3d73-46ab-91a4-d281f25758d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 786,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ad164e3e-9590-4d87-8174-b18fd9d9e4d3",
        "cursor": {
          "ref": "dcaf68ef-9fdd-419d-ba24-94072d199f16",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "eb7e77f6-376c-4334-a6a8-e5d5c606b3a9"
        },
        "item": {
          "id": "ad164e3e-9590-4d87-8174-b18fd9d9e4d3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cbf6699d-927f-47fd-97d5-a6e86ba6c3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "66c5d20c-f1f0-46ca-a6c3-ca6ad0577b88",
        "cursor": {
          "ref": "71f25515-e2bd-406d-bd86-3fb592162347",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4ec8617d-5e27-48c5-a617-dc9a41d312e7"
        },
        "item": {
          "id": "66c5d20c-f1f0-46ca-a6c3-ca6ad0577b88",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "51488f05-538e-4df3-88b0-4717aa1eef72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3102a2ba-5368-405b-b528-a6c102c250f2",
        "cursor": {
          "ref": "999dec7d-fff6-4ba3-b44d-c5f321bc76e9",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c30eab9e-c93c-4a3f-a3c5-950b8c790c40"
        },
        "item": {
          "id": "3102a2ba-5368-405b-b528-a6c102c250f2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c8e819c3-5b14-4ad1-81bd-bc529cc7a02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "33fb6c08-4c06-4f2b-9e0d-efe565290a99",
        "cursor": {
          "ref": "31fb533a-97f3-482c-9551-44cc9fb322be",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a1031d5b-255b-419a-9405-7c68594c334a"
        },
        "item": {
          "id": "33fb6c08-4c06-4f2b-9e0d-efe565290a99",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0fdeabc0-75ab-42eb-8073-4e6b8b9f3d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "db9a0d09-05b4-4504-90cb-a3abf95196b5",
        "cursor": {
          "ref": "7844b823-705b-4e31-8b72-cf50774c5c1d",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d8859412-da93-4eb9-9da4-687fb91e2e11"
        },
        "item": {
          "id": "db9a0d09-05b4-4504-90cb-a3abf95196b5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2a72b82b-637e-4218-8dcb-af8fbc38a6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b55b1d-f38c-47b3-8e19-3b0191344a2a",
        "cursor": {
          "ref": "8425e1ff-6c98-4eb3-a5bf-087b129c3f0f",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "494de63a-1069-41b5-b4e2-4d28678662d5"
        },
        "item": {
          "id": "d6b55b1d-f38c-47b3-8e19-3b0191344a2a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9508ed2b-6edb-48dd-af9e-0da7704a973f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95441b7-1d2f-4a20-b8aa-230721309fab",
        "cursor": {
          "ref": "1e93790d-f935-4fde-995e-50781589b048",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b58448b8-e319-4f2f-9cdc-4905f7e87014"
        },
        "item": {
          "id": "f95441b7-1d2f-4a20-b8aa-230721309fab",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9852f4bf-4cbe-4c8a-8c72-ffca4c07bdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a033f21-5c3d-4113-9652-546bbd514ccd",
        "cursor": {
          "ref": "93a32a33-dade-4e6e-a6e4-3b947cc0dfda",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d4a378b2-840e-42a4-80c4-b80ce71f0b2b"
        },
        "item": {
          "id": "9a033f21-5c3d-4113-9652-546bbd514ccd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a2fa7654-c363-4835-8eaf-2cdeab1948a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7271dde-6d8c-4b84-9857-8260f7559050",
        "cursor": {
          "ref": "a790c5b9-f1dd-45ff-a190-e20376011e9b",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "926a2a08-5fbc-4ee8-96fd-0ae67fa383df"
        },
        "item": {
          "id": "f7271dde-6d8c-4b84-9857-8260f7559050",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8a7a2133-67f0-4feb-b04b-14a5e736175a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78399f3a-3cae-488c-8d87-fa11e8c19b90",
        "cursor": {
          "ref": "1c74f3fe-a9b5-408f-b847-14ce4e28d315",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b155f9ad-625d-4016-a0f5-99a7ce7569f3"
        },
        "item": {
          "id": "78399f3a-3cae-488c-8d87-fa11e8c19b90",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1bd801eb-db9c-4b43-a30d-fb53a66eefd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85ab029-4eac-4fa5-b88a-3a9820bf827c",
        "cursor": {
          "ref": "e3a86bc3-7f73-4107-886c-b81101bff866",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b2f470d7-4e18-4368-bd8d-afefc3c25c01"
        },
        "item": {
          "id": "b85ab029-4eac-4fa5-b88a-3a9820bf827c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "53c45d6d-2f20-4ec6-88b7-cc5f4b6848ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4d3a44-25c7-4428-abad-f37c4a6d24c0",
        "cursor": {
          "ref": "d545949b-3276-4708-b4a1-67d4cda42eb9",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "da9fc20b-c44b-42ce-978e-dff3257f49ee"
        },
        "item": {
          "id": "6d4d3a44-25c7-4428-abad-f37c4a6d24c0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8df39035-3c30-4fd9-9496-41419bcfa361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d227c518-242d-4031-8f68-47764beeba0a",
        "cursor": {
          "ref": "da07f746-f202-4899-b8b7-006a9b2374ba",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "93f41fc3-9b07-41ce-bc12-e8caf6ac2c39"
        },
        "item": {
          "id": "d227c518-242d-4031-8f68-47764beeba0a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3bb26343-b5cc-4ab0-a0e2-358dc0a5d84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e119a900-517e-4cc0-87a0-2ef874accb85",
        "cursor": {
          "ref": "62c38ed5-abaf-45b8-8068-f089ba20bb71",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fde73025-f8eb-48b7-95ae-13d88c5ca331"
        },
        "item": {
          "id": "e119a900-517e-4cc0-87a0-2ef874accb85",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "23ac9351-dd69-4aee-98f2-683338cf64b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7b871a-e69f-4fa5-8a5d-e0eb070ffc37",
        "cursor": {
          "ref": "1df772f2-7896-4101-a8eb-d207ee7fe51f",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "514eae9a-79d6-46ea-9db0-2ef87d5ba1c2"
        },
        "item": {
          "id": "eb7b871a-e69f-4fa5-8a5d-e0eb070ffc37",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "72d90864-6b5b-46f8-8e51-3a58d079f763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55787ae-ac8a-4581-bb1a-a631166249dd",
        "cursor": {
          "ref": "84862136-68cc-4875-8bdd-6daf2fb34b31",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ebd8ec0f-bd9c-4dc8-867a-9d93a7a40fc0"
        },
        "item": {
          "id": "b55787ae-ac8a-4581-bb1a-a631166249dd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8d2ad90b-e071-4979-8b66-9f3d1113a581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c666400-9c86-4552-a92b-4579a5eaf41e",
        "cursor": {
          "ref": "89f865b1-3454-42e4-8b42-2a818e4c833b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a5d90462-bef0-4ab3-85ca-00f9d163447a"
        },
        "item": {
          "id": "9c666400-9c86-4552-a92b-4579a5eaf41e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dcd7a193-3d8f-4c0b-9e54-35f0bf52ad36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a747c7a-f402-4ced-b2d4-6b658f9c505c",
        "cursor": {
          "ref": "57b0015f-bd70-4d5b-94fa-23882bb9ae12",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c6763742-8038-469d-8cae-706e4aeb3e45"
        },
        "item": {
          "id": "7a747c7a-f402-4ced-b2d4-6b658f9c505c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9fc72be5-9f79-447d-993c-47726807e35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 655,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "277be161-82ba-4077-bf54-a9f85f5aa911",
        "cursor": {
          "ref": "5d7c67aa-a359-4e45-9d70-eecf6030349f",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "35efef40-9a05-41f4-bde2-6ee8a0c03aba"
        },
        "item": {
          "id": "277be161-82ba-4077-bf54-a9f85f5aa911",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "eedb3f1a-f518-4cf2-8a43-f2425100d1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 681,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8bfeda36-3bd2-400a-87fc-93b9076d38b6",
        "cursor": {
          "ref": "4217ca17-0bd0-4855-bd51-4e213ede5dc5",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "de74e099-b2a4-4548-b8ac-3854bdf4a557"
        },
        "item": {
          "id": "8bfeda36-3bd2-400a-87fc-93b9076d38b6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "97580b2d-c523-42b3-a132-0243088a16bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "65b064ff-69fa-4746-9d8f-cb43c2e34fcf",
        "cursor": {
          "ref": "a72ca56a-e767-4c0a-b0da-c8636312f29d",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "38ed86b8-f42d-477f-ba4c-e7593fe73348"
        },
        "item": {
          "id": "65b064ff-69fa-4746-9d8f-cb43c2e34fcf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1095e19e-464b-41e6-ace7-24c29b3df5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 670,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f570a029-f2c8-4a70-9c26-d1901aa37307",
        "cursor": {
          "ref": "dbb4f911-edda-4797-a9ff-9d39c0494264",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3bedc557-853a-479f-a3b9-c46e2e39b619"
        },
        "item": {
          "id": "f570a029-f2c8-4a70-9c26-d1901aa37307",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7f53a548-a099-46ea-a990-6c23c9f43dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "90e6d209-19c2-43f3-ae83-25c5288c832c",
        "cursor": {
          "ref": "53f3c11e-daac-41ad-adef-efcaf389d4b5",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bd7f57be-91fa-40f5-8f49-464a8e20cc3d"
        },
        "item": {
          "id": "90e6d209-19c2-43f3-ae83-25c5288c832c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bf221485-3553-427a-9a03-3c239eb98fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab63ad7-3f91-4ef3-ae5d-33c9f53ef6ef",
        "cursor": {
          "ref": "9209d486-7f7d-49f5-a483-a0ad8ed217de",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "add44d47-9cd1-4c1f-be22-aec6b8ffa243"
        },
        "item": {
          "id": "bab63ad7-3f91-4ef3-ae5d-33c9f53ef6ef",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "60c47cc4-c2b2-48dc-bc1a-488a1fd38507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf7caf0-7cd9-4596-8a89-f77fd69e395b",
        "cursor": {
          "ref": "bdc7659b-b649-469c-a02b-ddea8613a84f",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ba098bee-d2d2-4b20-a296-b8e6f357b2fc"
        },
        "item": {
          "id": "6cf7caf0-7cd9-4596-8a89-f77fd69e395b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "60cb4da3-57c8-4a1f-a6ec-764c35f40a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a0d8d4-2326-4f5a-915d-d8fbfe93f6a3",
        "cursor": {
          "ref": "88e4f047-a52a-4089-9229-28450a4423ed",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "98eec0bc-af09-4718-bfba-78d6a04d59c3"
        },
        "item": {
          "id": "75a0d8d4-2326-4f5a-915d-d8fbfe93f6a3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c61a926f-b15b-4cd1-a348-0e77011e491f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261c907a-8013-47c2-b194-90452ba8e760",
        "cursor": {
          "ref": "803cc80a-949e-4367-9dbc-82dcc8aa0efa",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b11bd956-95e0-44ff-9ab4-5f753212a807"
        },
        "item": {
          "id": "261c907a-8013-47c2-b194-90452ba8e760",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "db4a29a6-271d-4ac0-8b8e-eb300cbbdb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80977eb5-3c45-4810-9dd1-0d17a4370779",
        "cursor": {
          "ref": "4dfc87d3-fa8b-4fd4-8eea-fe96510c4fbd",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1f590f02-7776-45b9-aad2-b9ad67f024b0"
        },
        "item": {
          "id": "80977eb5-3c45-4810-9dd1-0d17a4370779",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "78146b38-bd54-44f1-95eb-def50230df3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42298bc5-8193-4639-8f55-14241dec6ca6",
        "cursor": {
          "ref": "3c78af29-760c-4715-8384-9a884910ac56",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cfa80ce6-4ee0-4553-810c-769c8106418d"
        },
        "item": {
          "id": "42298bc5-8193-4639-8f55-14241dec6ca6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0c4a86eb-29d7-4c3b-a861-f0d86b3037e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb44e9c-6bce-401e-9488-3ae323e02979",
        "cursor": {
          "ref": "c737918a-3a79-4ae9-b9c9-7ab8a87e4579",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ed9d01f2-5c4d-4dbb-b24b-aeb56b56b6c2"
        },
        "item": {
          "id": "4eb44e9c-6bce-401e-9488-3ae323e02979",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4f1a483a-da0c-4779-af39-619586944d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff609cf6-784f-49e0-bfdb-f66efe595dd5",
        "cursor": {
          "ref": "0325753d-6246-4515-b8e9-dd7c28b40cfe",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6e939d9f-a5fc-44b2-a3a0-8752df91a84d"
        },
        "item": {
          "id": "ff609cf6-784f-49e0-bfdb-f66efe595dd5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6f6c7041-8405-4596-bea4-94826fc5952c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9e82f8-c05d-4df6-b747-db568846b4d4",
        "cursor": {
          "ref": "e164c858-6789-45b4-a38a-4080924a4f97",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fb4b5309-754e-43fb-afd1-2ee3128c1590"
        },
        "item": {
          "id": "1f9e82f8-c05d-4df6-b747-db568846b4d4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "123cee09-d5c4-42fd-ae90-c73e53da6eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788ac733-fecf-47d1-a4fa-d04090268a89",
        "cursor": {
          "ref": "8f3abb19-6d5c-4a3b-aa74-9b878b37dcf3",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7de5a388-d674-4787-bf58-068d0331952c"
        },
        "item": {
          "id": "788ac733-fecf-47d1-a4fa-d04090268a89",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7c9d683c-5b38-4389-b161-b379f2f6d9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c997945-f16a-4d2b-bb35-6908c5432e04",
        "cursor": {
          "ref": "96223946-5a79-4135-9329-b0c70612f8b0",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ce6c11d2-dee9-40d0-bfdf-a521ab9d40aa"
        },
        "item": {
          "id": "0c997945-f16a-4d2b-bb35-6908c5432e04",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "24962855-ddc7-4b41-b390-2bb0a1f75a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd82d33e-386e-4fe2-9259-518b973eec6d",
        "cursor": {
          "ref": "7d7862f7-046e-43f9-a6eb-65f8d9da2dd3",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5f42777d-9635-4e41-9c62-43b8ff74d3bd"
        },
        "item": {
          "id": "dd82d33e-386e-4fe2-9259-518b973eec6d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b88055f9-7da8-4970-8e54-fe0f182d5ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8685d3-a356-4c94-8a59-95c064271640",
        "cursor": {
          "ref": "2d4c8043-f1bc-4369-91a2-da1c62080b40",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "aa3dcea9-cebc-4235-9860-30a866cb684b"
        },
        "item": {
          "id": "7f8685d3-a356-4c94-8a59-95c064271640",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8a5b84c0-2e8c-478a-860e-90567c97147a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2da55a-18e6-4903-8602-facbf1733408",
        "cursor": {
          "ref": "46076148-be4e-4b79-8b1e-38dd4397b8a2",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4116ab4d-3905-4e4e-9dd6-b2af47656fee"
        },
        "item": {
          "id": "df2da55a-18e6-4903-8602-facbf1733408",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6ba37805-ea52-4e92-8de1-02df450cb1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6f7ce1-af20-48af-ba07-bc6d2c749dbf",
        "cursor": {
          "ref": "438fd7bf-c9c0-4e42-bd25-2476eab16b16",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "944466ac-bdea-45f9-a855-9fb88ed90e1b"
        },
        "item": {
          "id": "1b6f7ce1-af20-48af-ba07-bc6d2c749dbf",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "671702fc-3f18-4315-9d42-fae2fdad3f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba415da-534e-45da-9489-6fdd6eb39ddd",
        "cursor": {
          "ref": "bdb413f1-a9a8-48ee-a5d9-ac06b1acded5",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a085bf75-7bda-4558-b2fc-5a08f4a6e247"
        },
        "item": {
          "id": "8ba415da-534e-45da-9489-6fdd6eb39ddd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "45bfac95-ea12-4a33-8a5a-11ba00d583de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a384989-ec5e-440d-8a9f-870bf336fc38",
        "cursor": {
          "ref": "671c28ff-9748-49e6-b774-0ef5a32e8c2a",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "08840be2-6bcd-4132-9b13-7a6506f33286"
        },
        "item": {
          "id": "8a384989-ec5e-440d-8a9f-870bf336fc38",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6e624704-dde7-48ec-92ac-6fb2aca97ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acf8468-bb5d-4ffb-9777-090e49c8e29c",
        "cursor": {
          "ref": "8e259456-3f07-4db3-9ed5-9a8ce1bf77d9",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "98caff2c-ed80-43a5-a87b-ccc4692286a4"
        },
        "item": {
          "id": "9acf8468-bb5d-4ffb-9777-090e49c8e29c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "abb79276-fb56-41b7-b6d2-b24400cbc7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f2892c-a933-4ed4-9dff-43daa0a4860f",
        "cursor": {
          "ref": "d7f6e1f2-ae93-4f71-97f9-20aa28096c28",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "cb30b744-be88-48a6-8450-398ec6ee8663"
        },
        "item": {
          "id": "06f2892c-a933-4ed4-9dff-43daa0a4860f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "01ad581d-d0cc-4bfa-ac50-a4666ad25eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4975622d-f335-4b72-b1ba-67af348b90a9",
        "cursor": {
          "ref": "e50fb8b3-0227-4f39-95dc-6ea4a17f7cd4",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ec724456-4487-4113-a4a2-9108ca6da8b7"
        },
        "item": {
          "id": "4975622d-f335-4b72-b1ba-67af348b90a9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7075cbee-0648-43c9-af78-c2569d287bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3ea397-73c7-4551-a02a-22deae85dd67",
        "cursor": {
          "ref": "3ce0192f-954a-44a5-9962-e10dd076d642",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "43d04414-5a74-4d6b-ac34-711cf219c4fa"
        },
        "item": {
          "id": "0a3ea397-73c7-4551-a02a-22deae85dd67",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6e241864-657f-494b-9feb-e07387736f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac8b971-5ea6-46f5-9fe9-ff4c5fdad1e9",
        "cursor": {
          "ref": "4bc35d9e-d194-4948-8fe4-8887bcee38da",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "be1c0ea6-edbd-41b7-9bdc-d925b25f0b60"
        },
        "item": {
          "id": "cac8b971-5ea6-46f5-9fe9-ff4c5fdad1e9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bee6c82a-57aa-4e32-9ead-ff4eab7ae8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38012239-d310-4185-b492-e49a5f97ccd5",
        "cursor": {
          "ref": "43ae17f5-e0b5-4594-96f3-f7d1e71a74df",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a55f3a03-7e55-472c-8f9e-557b4fd101a9"
        },
        "item": {
          "id": "38012239-d310-4185-b492-e49a5f97ccd5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bc539a1d-fb0a-4eee-92ef-7f4fc627a691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98226c03-c7b6-490f-bb4e-b9d309e0dee3",
        "cursor": {
          "ref": "fc46ff9c-246b-469f-b8ef-aa42d1fc7395",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0f393756-bdd7-4987-b66a-e674716f147f"
        },
        "item": {
          "id": "98226c03-c7b6-490f-bb4e-b9d309e0dee3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "951fd051-fb52-4986-a6b0-cfce6eb6dea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9ebb69-5b96-45e9-8cde-7fd9da5150d0",
        "cursor": {
          "ref": "00cc6218-ac31-474a-8b39-9320a50090ed",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4284e5fe-96d4-4c8c-a2b5-c7731a57fc93"
        },
        "item": {
          "id": "de9ebb69-5b96-45e9-8cde-7fd9da5150d0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8a0518fd-c9d8-417b-a5b6-bfc71172595a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8344129-d599-4f2b-abc3-59dc6b84f432",
        "cursor": {
          "ref": "57cfa17c-ddc9-41db-8338-c65c2bcefef1",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ee439a19-70e3-413c-8f28-18b7eaac35c1"
        },
        "item": {
          "id": "d8344129-d599-4f2b-abc3-59dc6b84f432",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bbb366c0-0ef7-4e17-9400-b89b3efce9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b3302a-90e3-41f8-bfcd-3118f0d3dbb4",
        "cursor": {
          "ref": "1462da89-a483-4b5e-afb1-ce58bc0a4457",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "917efb07-9c06-43a2-a8d0-b2f8d1b64023"
        },
        "item": {
          "id": "c4b3302a-90e3-41f8-bfcd-3118f0d3dbb4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c0ee0ada-5616-4336-be34-6ef1e2b3280e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1052e8-2215-4612-9764-2fbd22369333",
        "cursor": {
          "ref": "2994de61-4c69-4410-997a-757b6bf73905",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6e69a05c-6859-4ff3-8d7b-b23838621817"
        },
        "item": {
          "id": "2f1052e8-2215-4612-9764-2fbd22369333",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c86db923-1ea0-41d3-ba3d-5849d5a8a414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8a9549-69de-40ce-af00-5aee319f45fd",
        "cursor": {
          "ref": "db77fe26-c372-42f2-8923-2de0e16e66ad",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c09f9d3c-3cf7-456a-80ae-29ec434e9f59"
        },
        "item": {
          "id": "5f8a9549-69de-40ce-af00-5aee319f45fd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4dd1a7cc-264f-4124-b5cd-c84a608836b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6e1cdd-866d-41d3-ac9d-97187abff6f8",
        "cursor": {
          "ref": "4edd6400-4d3e-49ac-b9d9-dc39cafa0cf6",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ea70159d-403b-4c98-9480-d3db2dfbf6fa"
        },
        "item": {
          "id": "fd6e1cdd-866d-41d3-ac9d-97187abff6f8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "26569741-f190-4e33-88b3-2e1d129aae51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1213e28f-4cda-49fd-b732-9ea524ee3889",
        "cursor": {
          "ref": "81fed1eb-995b-4d1b-8e9a-a06eaada6fa2",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "fa94c2ab-c17b-4aa7-8024-71bbd54be5e1"
        },
        "item": {
          "id": "1213e28f-4cda-49fd-b732-9ea524ee3889",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d55d3b5b-d187-41bb-bbf6-479554981ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1eac131-702d-45a4-a563-bdbbd0cf9b64",
        "cursor": {
          "ref": "bb9ffd6d-fc62-4130-8109-0e71ca56bf28",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1cd465f0-983f-4427-832e-4388da704b0c"
        },
        "item": {
          "id": "d1eac131-702d-45a4-a563-bdbbd0cf9b64",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3271ccd2-0a13-4c47-8aae-25c0800e4292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d151ef0-432c-4511-84ec-1719e81c5dcd",
        "cursor": {
          "ref": "ab0319b0-a390-4a96-9bc7-908643062e21",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "60053b1b-b4f1-4758-86a6-7b812c45aa4e"
        },
        "item": {
          "id": "5d151ef0-432c-4511-84ec-1719e81c5dcd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "56e76732-ae3e-445f-9ff7-9c0bc6ebe9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393f4a7-f9c0-4425-b9cf-76f99295fd86",
        "cursor": {
          "ref": "506be373-3fac-43aa-82c2-a1a71746a632",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bd34331c-b8bc-4bc7-acc6-c13b95130cfe"
        },
        "item": {
          "id": "1393f4a7-f9c0-4425-b9cf-76f99295fd86",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b390af5a-ed1e-40e4-9e7f-85b015523583",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83182ef0-bac6-4f6b-8534-461a893a8be4",
        "cursor": {
          "ref": "3d06dc74-8ac1-49e1-92f1-626f9d2714dd",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f7a03efa-a6d8-41b3-a2a8-05c0ef417b5e"
        },
        "item": {
          "id": "83182ef0-bac6-4f6b-8534-461a893a8be4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7310687d-bf7d-45ed-b2e3-1eef951a42a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff08938-c22a-41dc-8e8a-786b71078d75",
        "cursor": {
          "ref": "a91f80b9-471f-4164-b186-6454a2b93615",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3d898496-6c50-467d-9783-681c1afa81ca"
        },
        "item": {
          "id": "4ff08938-c22a-41dc-8e8a-786b71078d75",
          "name": "credentials_verify"
        },
        "response": {
          "id": "afbf523a-944c-4979-99bd-38c8249cf238",
          "status": "OK",
          "code": 200,
          "responseTime": 778,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ebfe9d-ca84-40f4-ae23-7151418f35f3",
        "cursor": {
          "ref": "51b5d59a-fc05-4f86-ad80-19a9c5b32cfe",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "610f5ae5-f203-4167-bf47-851bdf1f0ce3"
        },
        "item": {
          "id": "c7ebfe9d-ca84-40f4-ae23-7151418f35f3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3dc46c08-7446-409f-989e-570a32c6df11",
          "status": "OK",
          "code": 200,
          "responseTime": 856,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb116ef-3010-4aab-bf1b-8ce09e32f85d",
        "cursor": {
          "ref": "fef94c0f-9061-40c7-9bad-e7ff9fe43359",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "dcb1c1fe-d5d4-47b1-b6b1-5c45f340293d"
        },
        "item": {
          "id": "ccb116ef-3010-4aab-bf1b-8ce09e32f85d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f036f6-1204-46cd-8d1e-3248d3d3207a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb116ef-3010-4aab-bf1b-8ce09e32f85d",
        "cursor": {
          "ref": "fef94c0f-9061-40c7-9bad-e7ff9fe43359",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "dcb1c1fe-d5d4-47b1-b6b1-5c45f340293d"
        },
        "item": {
          "id": "ccb116ef-3010-4aab-bf1b-8ce09e32f85d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f036f6-1204-46cd-8d1e-3248d3d3207a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244f26b4-64bb-454c-8a79-02f569d08da3",
        "cursor": {
          "ref": "527ef465-0a2d-4326-bebe-c93837bd667a",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "99ed349f-64dd-458d-8b08-78d1e896d406"
        },
        "item": {
          "id": "244f26b4-64bb-454c-8a79-02f569d08da3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0712abad-3b86-4232-9c76-94f8b0776998",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418c7d6e-1c0b-474e-b99b-d2ff46d61020",
        "cursor": {
          "ref": "e04a0d85-cb86-4f22-ada3-e83639cc50fd",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3e061352-37ca-4db5-8227-ade467322dc5"
        },
        "item": {
          "id": "418c7d6e-1c0b-474e-b99b-d2ff46d61020",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "60d3d992-00ff-453b-8f6e-9282662fb557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}