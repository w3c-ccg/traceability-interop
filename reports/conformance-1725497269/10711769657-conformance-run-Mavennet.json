{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e5348565-aa9a-46b8-bb5d-6bbe95a02fce",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3a652a49-7e61-41b6-b664-aaeca5198bb4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "132383d8-2b0a-4c2c-a552-b395f64d7c4e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4e34e0c3-457a-4ce2-8297-e6f311347818"
                }
              }
            ]
          },
          {
            "id": "29bffa79-a050-46f3-8bc3-c3f1da91cf56",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74cc60b9-0fb8-4b2b-8cc0-8f03f82e5e82",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "962c02f7-a5cc-4ae3-9ef7-320283d9306e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13cb817b-735d-4a6f-8e0e-701a5e0c48a5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a03f8e0e-0c76-4391-8db6-07cf154617eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16063418-9673-44c6-951d-e264f5ee8ec5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b374ad74-41e4-4e8d-a869-1bbd673ea715",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbc89b50-4ad1-418b-8f31-40b19551e5bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d6b1291-b1ec-48bb-adeb-5e9a3a233569",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bac96073-f19d-48ac-ab36-565f111cc038"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "106afc48-a2f3-4b1c-9277-36b1550afa59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f805c87d-9fa1-4d3a-9a9f-9ed4b4875d8c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c32f9f8-106f-4de1-b8b7-293ad7d328e5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e69eb575-1899-4383-bf30-1a97f93f3241"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c93ffe6-0272-48ff-8618-abe21469700b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e97351d4-775b-4795-8540-1eeb0c5ccdb7"
            }
          }
        ]
      },
      {
        "id": "0d34c8ee-0869-45ae-938d-03f621bd2fa5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36ae33eb-42e5-45e9-91a1-668a45288e49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf19f82e-d6d6-46e7-8349-151ed2123f41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b6b63fac-cc51-48ea-b828-8948ec0d5b1f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e6578f-c55a-4819-9513-4e5b6864cc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82d0f801-5060-451d-97bd-201bc943c4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57744a2-0ef7-47fd-8d1d-c8e0a8f8d0f2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e1e232-81e6-42f5-8702-f35223d7ed49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c2ad7af-f51c-439e-ab5f-ca06027d57a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc6a640-3234-46b0-93cb-427afdd3f9eb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfccd6aa-691d-481e-948b-7fdc5c5c5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec46b1ca-5cee-47fe-b872-54d08b557f61"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b687fa85-0f91-4dc0-ae31-a6c1c5eb4f3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5dbcebf1-eec7-4d9e-9f21-7130acf082ac",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bf5b53-f6ad-452c-b111-281d03f1b627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcf0f769-1d36-4625-a1a3-baf697deb50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5571568f-483d-43f0-b8c0-dd82598f76bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c9c96a-6c6b-40e0-be9e-b97fef301f73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "65c18cef-35cb-410e-8218-81c386f6d504",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f603386c-c09d-4cbb-a773-25a9fe15c7ed",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f16ead29-af26-4e4c-9197-2391afc8fc47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0406a879-a738-45bb-aa72-e7c40c7783c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95f5f08b-b637-43e4-93c8-87ad71e8d54f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3b34fb8a-5a5d-4c5a-8532-280b70ef539c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e39e442-84d7-4219-878b-44402c4eb9d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d9eca9a-add3-4a34-8d00-ea3eb4f24fec"
            }
          }
        ]
      },
      {
        "id": "4d6b83e5-cf85-4f15-810b-181508b1589f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3e7b0103-bf1d-475f-a377-4cb6849e857d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee2b648a-3f7d-4f8c-bcdd-ea13b65ad82f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3e70bd74-db28-4e5c-9447-e2677e47d452",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6640ae-0687-4cc9-93f0-83923998074c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638c7cc7-65a4-4bb9-9a1c-999673f87366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a37095-ac53-42df-9ad6-cdc4aef08ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e594198-5f69-4272-8c97-ad6b43991c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a31500-d203-4e5f-a8c6-b0afca7de265",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cbaee0-6f70-465a-8ede-19525427a98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657d922b-b762-4e53-895e-537823d36a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26895a93-e67f-4d6f-8ec9-7b43f2297d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caf8073f-9538-4c81-b95f-937c8a164cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e481bdcf-e24b-4e85-bced-8fa452764bf3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe57d93-ff84-46f2-8151-a401b89a1739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a820f87-850b-42ee-bfcc-1d61736c12bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40441d88-7596-4a87-95be-c2f20684769b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5b657eb-7ef5-482d-a0ba-519b5bc2a7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152e0072-f105-4bd6-aa47-20e9fadb41bd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d3ff00-0b0b-437c-b4e6-dfe542edf368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29746bcf-7e9d-4cbb-ac09-0ee615b7a986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f912ce-0742-4dd6-aeba-b9a2f2a009b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c70c2bc-7f89-4e5b-879e-cc37cabe1f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7309a6-0c38-4f43-9888-a4434ce0c265",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73cbe65-7239-4118-88c1-c15878cdd1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7446aaf-014e-48b1-a3b8-aca494224d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ef72e5-1734-4f3c-9747-4d17fec79a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c4d4b1a-280b-425e-b85f-13fd72644375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88488b1-ab6c-4c07-92b2-084adbf9d570",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fe5804-c1fe-4c75-9db0-86407ccbc75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7674ca-31c5-4641-b730-b6c370fa4b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7031631-4f55-4e48-a8e7-e6a167fef0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86eb84c2-d47c-4692-a0b2-d9398ef9dc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bb1330-1ce3-431f-9944-a4168de39f68",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13d5ff7-a434-4d47-84b1-139f2324204e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6159b72b-917b-4c5d-b7fe-fe2ea9a4000a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc62a9d-2820-4546-b15a-4407909a07fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb394845-d3d9-4460-bd13-3237147a9ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a39c545-3623-41be-878b-22b4c4f5ff0c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e21f193-e4f9-45f4-a687-14cb62a98efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42116651-9ca9-4e1b-9fbd-e3ff3917d346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbc5b08-381f-4dcf-bf31-b5e79a61ed2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea4e72cd-e277-4809-ba3c-e56d1b9505b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709a376a-e926-4022-92f4-c7d2f6928525",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e536c85-8127-467c-a054-f9f998cf2e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6811fe8a-0752-416d-9db8-5b70068668f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9716301a-3f7d-4f14-a207-b1973666c86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8adf8b1d-bb29-48ff-ac17-f2496e7086d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652201bf-3dff-4efd-bd91-9bdb6c4124c8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009564bd-035d-4d54-b676-0f0d975750e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ec193a-b020-4858-951b-2db5cffe1a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f574fddc-a57d-4e4a-b609-a7c0e56d17a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a17eb659-bad2-4193-9e3e-d3c40cd37086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d983e9c-04c9-4333-bc24-d4f07aacd442",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955edd7c-936e-4b84-8597-945817e45f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db10b404-8694-4938-952a-122d03773ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1af8a0d-e12b-4fce-bf30-64c5797abec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62db5238-bdad-4575-9244-775600846376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a472e8-8b80-4bc6-a9be-ab4a91063160",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd22425-6c69-452c-bfb1-7212a079b372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a897bee-dc3e-40a2-bc2e-cebdb2bf1375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643828b2-f11b-4745-9dc7-98f40669bd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cd55025-0501-44bb-aeaf-401d5cca205c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d654810-c8c5-4efd-8d7e-d07de122cc6d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204b785f-bb4e-4ff2-a00b-2565b96988cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5532e787-d3cc-45bd-ab3b-7d916abc9f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54d03cd-5cc5-496c-b7b6-e54f75243fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "112e9734-bc49-442e-b0f7-7e573bbdcdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f462370-5d76-4816-9e4f-90a8e825df92",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cd3811-63e1-498d-be1a-ebcc932aa83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68186cf-2a1f-4e4e-a177-7b4fd3ae477e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b092d5c-294b-44f7-a87d-55f2581c1f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3545c04e-7660-402e-995c-2352bbd8bd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00378fe4-ec34-4f64-9d15-e4fa162080fb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa4e82b-32fc-4932-8b0d-339a27335ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9577e895-ddd3-4c1d-8bce-75bc296c584f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfae0af2-2346-4abc-8117-87b49cb6928a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0070c771-72c3-40ed-87e5-226a98fe89bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a35198-b972-4c47-8c6c-5a49a1de1ecb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c06d7aa-5506-4d6d-b295-1f669500448e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e42aba3-d2ed-46c3-85b5-c9d94c197bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbefe7d-f694-493a-9908-7a9b7ffd14b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d194241-e0b7-48b2-b4a9-be7ec66f79d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cbabae-8198-4870-a38e-181f76a82407",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918827fa-dd5c-49f6-b603-5c26125fa52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1371e827-b6c4-4289-96e9-5fb04a32d13c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cf7ee1-8414-4151-8708-cbdccebc7458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cf94e19-51c9-42fd-a466-bdfd82157592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb508aa4-e98d-4dc6-bc16-a017ac5bfece",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d374f0cc-a8bd-4a7f-89e0-769da8b4e1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd23bd2-f8c9-41a0-9b42-49e05b76d13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76699c5-a1d4-420a-a1b0-e5ef42774396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b5ad413-fd6e-403f-bb55-211f6324de7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e1d7f1-b380-43e8-b3be-2774ca25b1d6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be23732-4b0d-4180-9467-defa076a9ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730ce018-47d9-4574-86ee-7290d16e5dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98a8ec1-da8a-4f2d-87be-5b98c7a68bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "770486e4-3940-4f6c-a020-1fde96e111af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7367ef7-c95e-4c4d-b1d4-eba069b9aa48",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aeb508c-fd56-4cbe-ba38-6b1ee09328b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0ba48e-f069-4d98-9021-793ed23cdd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f66a0aa-8f70-4551-8f94-1f5c0f2f1a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be7ff817-7721-4ac6-9fa3-8e658cae20cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023963ea-c008-4bb7-ac79-f57bde55d186",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52f27b1-f0ff-4dd2-9d92-1cb2cd2fccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afaefd03-ef4d-4741-b0dd-4147c113bd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6e8d7e-f569-467b-8a2b-89fb3f0a6369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9fa67b-a57c-43b2-86ec-b13acf551256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6c4f54-cf78-4949-bf48-68c0efe4c1f3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4ad37e-5a67-4bbc-b573-84dd076f91b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500bc55a-42eb-4e3a-84ea-d8c692a06efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0388f6c5-e7bc-48a3-bf9c-0ee1d361aa22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d97a0e1c-1512-41b5-b88d-f302d9487e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6d23cc-a042-423a-9a0e-d93d1ca42362",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618d384d-ec1a-4e86-bb9c-f04f014f65e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2c5758-6e0e-46c4-99a6-502387b808ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446ba0fe-6612-4220-a1b4-c9e6bd2741b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9d4b0d-305f-4418-bc28-2b650347c76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4338bc33-4571-470d-be3d-a4d1c9b3de9f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b336b76c-7653-4092-9745-ab38f9d3e9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4976debe-b01c-4e19-9f5e-779b224b85c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742e3ac5-8b4e-4d43-9097-9b40b9e84bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8afdc2e7-2d0b-49f9-bb97-6edf3273abb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf1c9e2-0040-4be1-9d63-a56e2aa8b7dc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac18173b-a207-4ece-b140-58c73b96d01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418cbc44-05be-4f44-ae64-38390bd7411a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b684be-dc0b-4c58-a3d1-2a2ab1e22c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eec31fa2-47d2-4981-9372-7b1c7610aa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855f8cde-812b-4d24-8be8-c1112bb64674",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d09d29-eec9-4efa-9ddd-8295a2af7645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dacece-ed29-4549-8431-7bf2005a7822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3859cfa4-08fe-4126-8f95-9dd33d08784e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e654a15b-3825-49a7-b4bd-3530ffc3f239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649f7010-34e2-475d-8ff5-4e4a7c8bdb2e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386809fe-74fd-4849-83b1-d925ac76d049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77faf76-16ff-450b-9f06-5463706419b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f6defa-913c-4a2f-99b6-e976420c6e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52e023b0-ce38-4349-acf3-76193e1a6376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378c32b7-3ac1-4a3d-9e95-d3b3feeeb197",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a175ae5b-c1f1-46e6-a818-a64f50f1b6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c754d0-ce82-4a14-a22d-cfeb09ebcb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5fbce1-f6c8-4117-bce5-14d67c4c565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db865b3a-8b55-42a5-9540-03d679dd5938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a4c0cd-2be4-4f2f-ba89-3c18dae8de53",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90462a99-e5e4-409b-a7ed-da4d98e039cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d47e508-e845-40fb-b030-1690df393d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a264cdd1-0cab-4cfc-94f5-361abdaf4fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0c8a0c-67e5-4b7b-96bc-949753a1dc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ddc94a-3407-4190-a7f2-2de94b2a5a12",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26094ab5-d49c-45d7-9935-b55c98e1c802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c99ded7-0295-47df-9166-18ef5c77abfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a24c32e-c9cf-48f7-82e6-a30e408f5dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb34f58-4b03-4fbe-85c4-28489da7def0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b27ea21-cc02-41bb-950f-55ed9e210a4d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace5daa5-9757-4183-ab71-9104604305a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ada797-0621-4636-864e-25e5404eecbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30374f45-032f-4284-be16-c738e97f55c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7727bdc-302b-416d-9f90-cf1a54f38507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccdb23a-76e3-4cec-9330-0ba5f0535534",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d360702-c9e3-414f-aac3-0efea94a861a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a3f590-f04a-40de-996c-8901f4966ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b851357-dd48-46d1-a3d4-8df52b7fc696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d397a1f0-b126-48f1-ad21-e074ad32efdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c27bf7-07cd-41f7-882d-71af74ae9c2b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33214761-f77d-465b-a5a3-e458d26d17fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1e6025-9171-464e-b809-8abbe59682e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bdfadc-6972-49ed-b677-cbc628b2f50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "083bfb1a-97e3-4f65-ba5e-eadee79fe58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c75836-7463-427d-8fb7-121b533ac25e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2704075f-fa4b-4555-9bf7-caeb56a9fb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0223d1ab-be97-4230-a471-9192266b4431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840b78d8-7e9a-4c4c-9d97-3465a835f7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a00252-9d08-4b6d-941f-117690c45f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160de9ba-5be9-49d8-acb8-b3178cbea0f0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba846f3-6d1c-419d-9312-f7b891a163e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8dbd9e-c296-4c2e-82e9-4a3c5e5788ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d358af7a-acd4-4c77-bd97-314494e0a188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf2047d-c1ad-40f7-aa39-e0acc1e365a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdf7a34-017e-454d-b028-26fd3074e906",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d73d28-a6da-4f5d-801e-0a50861a0bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0cbfb7b-267c-48e5-9051-9dd80ffc318a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f0534d-4adb-4ae6-b8d8-2309a8d5c72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ad50ee-150b-4563-a6ae-5e06f27b07ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae627ed5-2429-48f0-b164-456cc9e1fae8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06f9a29-c772-4933-ad51-6187ad53e9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4d3d32-41ad-43fe-9ec4-8f5d5e914d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee6e253-3466-4acd-ade7-6d8a4ea37826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c0a43d-a5b7-4f27-8fd3-8fa3fdc75d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e84e795-ceae-485f-9df8-3f4ffb2e69e0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6782ff94-bc67-4020-ba89-ec4175448b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fe3f68-fe3b-4420-9f01-40e9bed698cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b896cb0c-e485-4ed2-9304-210efb673b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "604abe4f-e46f-4967-a9da-d277d4e77b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d207cb-6b3d-4117-bc65-4db7e68a5a51",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26634af1-f933-40b7-9922-7dee95b6d2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d95771-d317-443b-81c0-c785b5984816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cea0dc5-a0aa-47df-9bc7-79467dc8aa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba29cceb-4964-4d33-8c20-a29dd494dce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d199359-4797-4055-a6e6-d271a19c4777",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2eed9cd-7909-4f81-b962-14ca016ddc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee17617-e5dc-4ba4-9006-10a21381abf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb8748f-00e5-4645-a7ca-d393ec251891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "496ab081-1544-4bc6-97ba-f3b76090d1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a011b2-d5a8-4d31-9b17-da3935371d6d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620e2335-0d6c-424d-82b8-da8ed85a754b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0b515c-0577-43de-9c57-edbe35acc6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb73cab-93d9-4f1e-b9d6-05011d365903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e50d67a8-adf0-4ee8-91f4-b96ddc1d8621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfcd41c-1efd-4a87-9725-dafa3ca6982d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb7d94e-f168-43c6-ae14-ca4f184e79ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c855d133-79b8-4886-9eb2-39e8a7a0ff88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d33a43c-7e1b-4068-96d6-6191c8700e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9dd9fc-f87c-410f-baac-868343206068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d071cfe-b715-4838-b19a-d59af7de2138",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c981d5-9fc3-4899-9253-5e927d721986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdb51a6-c743-4067-8aaf-cd93b76f7b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15cf747-25c0-4c2c-92ca-f7e9285a461b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "44020969-a9df-4a99-a7b5-4ff867f12a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afd0859-423a-4d82-8c09-c2fa424b0517",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0d045e-6189-413b-9e7a-7f373129cd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d188d1-ded8-47e9-9011-e13a9878f441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24700b1-15a0-4b29-a7cc-c610b1979e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "682e1b33-7e90-4625-b31d-d380ce13978b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff22734a-7159-4895-9944-2a000e7c54f9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9df86f-8460-4231-bab1-49b343e553a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5267de-3976-4f41-9e89-9aaa9dbe8219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c10d72d-a6d4-4014-803e-617f4e61c3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "abb61d3d-a1ed-4340-8852-a1829a964dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18952ea2-4f0a-4fd5-a05b-e78d57bc9f7c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63f0280-cd17-41d5-a0dc-95d45caa14a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea6ced0-d99f-42d2-a8ff-062d6465b2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0402be-151b-407f-a0a0-f6461d3990fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b95ee4ab-4942-42b2-9d31-5443f74a12c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033c3ef1-10d0-4828-b4da-713c1b2fbcc7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bf4b4f-d310-42a7-9ef6-4e900e97b0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ac6853-5e59-4a1e-807c-9e2893aeddb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c224d0-721a-4976-ad4a-686dbb79b65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73be8840-ae75-40b5-ac0e-d1a33154e8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0679dd5-704c-4b24-8fd0-bfaf1b136a1d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149bd62a-293b-402e-a742-4c22f8db77c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7826caa5-afde-44ef-b880-ea36803f6c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b53cf5-9423-44d7-8c83-25e607d67349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe458c7-a38c-41f9-bd74-c16132b8d769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d9a48b-7de5-4690-8871-e46b99d11d27",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9f1c3e-3a78-4b98-b1db-19da5f5a0c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80c5e60-46ce-45e2-b075-ae37136e521d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122f7502-c179-47fa-8440-22c82d031eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4511f8d8-0007-448e-bca3-97bc543ddfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c648bcfd-fe97-4a0b-9575-ab5e73c00c34",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6f0935-44e9-481d-b235-b5fa7bcd12ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca848ff8-9751-44c3-a5bd-a747d870dcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f670fc70-c4af-4cf0-8b51-4aab6d906225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "648bc9db-a374-407f-83c9-27ad752f0a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d652386-d0f1-4746-bcc4-acb79e49b4a3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933b81a0-984c-460e-9ad9-10257f936403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7247197a-1baa-4e88-9ee0-dce39582b4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e94d971-9bfb-4434-99a0-b12cd6fe7844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bac2ef8-e13c-43f8-8917-5d1783924c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70627adf-df7e-4c20-9cd9-88130903673d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780c34f4-bad9-42d9-a4dc-3b0b43956e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2751b21d-fd7e-4c6e-a494-52e9e7aee792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361f002c-b909-40c0-b088-0c284ee4a73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aed787b-77ef-4587-8e2b-8c7f1d3c8aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d5eced-c8db-4c87-a1d4-1d996a416356",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673a59c8-419e-4d4d-a8de-19f7937435ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89408f5e-4dbd-4c44-8c54-e5c1bb5b6797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63ba0e7-7caf-4a2d-90ab-6bb464942d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14368c2a-9fca-48de-9da2-1f9e4dd4100f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe6e6fa-073d-4ec3-b78b-7088e603db07",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d16158f-a7b6-419a-bc52-6cc90104d584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc91c73-4ba4-4ca9-9ea8-7c3d676ee13c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed427992-3d26-485a-9227-65567d60c47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "174522e3-5ad6-4b9e-b9f4-2514bbf6763e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151d4f97-0f55-4b8e-9d4d-1d2b2fb2761f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c487cb-64e4-4024-9ca9-3e580756a9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd09b3e-f7ee-43c2-a69d-c5083440c6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68e8278-3857-4d07-b2db-dfcbd9f90315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "919caf08-f4f1-4ca6-b250-10671e74a2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6005d9-1f76-43bf-85c0-b2903fe2fff1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfb4c5c-ef4b-4974-9672-23c662f1dda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7021eccf-fc20-4b20-8056-645219cf1e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f0dac9-2a00-450e-b20e-9f8ee82cf5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8922c182-ee67-4cd6-bcf5-897a75e459db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b8df0c-6b9b-4649-91a0-5a63bd2f618a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c9838d-f6e5-4289-8a0d-3dd9d979f53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d736e10-e8d6-414d-a0f5-214a3cef1eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96ebaad-3973-4b05-b324-f99e94e86100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2deb01f-fab6-438f-96b7-330a34faba65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf973bdb-388f-4108-9d2b-106533b0a705",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ce0f05-d9f0-4193-9217-47d30091d78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab54b97-cff2-4e73-b040-aaba11169504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e612eb-5c95-4006-894a-f099d3789d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c53a97e-8682-449b-a00b-50bbbdb549e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e867f94-077b-4fe3-881b-4a16f4b03db8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef5787c-8b89-40a4-af0c-539e3b0d0a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3daad64-7914-40f8-b4ea-57565305bcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c16dc6f-0df6-404a-b5f6-9835bacf02da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff08ab6e-0d59-46d7-8cec-2fa7900732fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b3dba5-f6ad-4821-a8d3-4badf6109bdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0f9781-9b30-4c74-a1d7-c72fc703433e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408c9f34-1226-48eb-8755-dfb7311e867f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4c83a5-9226-4c50-804d-9d4fe9851576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "94eb7aaf-383f-4845-8de5-59113b83c4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cc6683-7576-491e-bbcb-c88fb4319159",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1746eba-ef45-4499-96ee-82f9d0155097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2209ea7e-1ac5-435e-ba03-7e2d3f920afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1239d485-5697-4a6a-9405-02316e2d4ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "101c0f37-ad7b-47cd-9773-b256f449262e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77daf448-25b6-4379-b45b-bf6f6e5a6192",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4aeb38-53fc-4804-9d3a-ad269f99e794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d500e8-f91d-49ae-944e-4495244b8bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f978215c-65af-4bf0-9d97-7b6fed477818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5257b293-39fc-40ca-91a7-a1b6c086009b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b710ec9-73c7-4737-9ce2-42d2f1082541",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52fb496-a720-4437-90a0-1c37eca0362e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8aac578-ffc4-4d5d-891a-f02de31caee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244c8d78-78ef-4fff-94a3-8b43da2c2ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2075f4c-4157-4214-ad27-2dfab3ce943b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740d80bb-fa7d-4d68-b751-c7dae016a020",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a44f22b-f2bc-4ce5-af82-eb52470af822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfe805c-a3c4-47d1-a916-e19612bba201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7965e7-4aa0-468b-bcac-a6a366eb7fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "542435df-c23b-4592-b3ec-3e4b4ac78fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe83499e-a1de-4f04-9515-89bedd2249dc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f255968a-1a2a-4b3e-bcd2-2faf405cf9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe9ac1f-1a2d-4ddc-8aa6-0ad876f689af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed50bd9-fec8-43d0-b6b7-1a1ff5122c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7803f96f-e584-4495-a412-3fc85b5dda35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68cd921-b563-416c-b49c-62fdfb6cbd81",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9299f8-dc9e-4980-ae1c-ef9e7aae9149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581b86cb-2965-4900-92a1-444587704028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dccb81-25e0-46bb-950a-e58f1597a95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "162f4a0b-e1df-4d5e-b7fe-45bc4c40a720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1118171d-73aa-424f-864e-90b2157afa6e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb48b096-9c49-4dea-9b2d-cdf2b8d78da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15640e7c-c645-4fb2-b62c-62083c2fa42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a035e17e-57bc-40c3-a79b-47d336f7fb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84236962-6629-4270-87a8-60cc52b4b882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ae8c77-6c76-40eb-86c1-1827b5b20ccb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e79337-55c2-43b2-92a5-ce2b3c5e1f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09df559-204b-44b9-9ab3-5e1e68fc0760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93565eb4-6726-4f31-9173-5b1f4023cf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "01857624-ef89-4566-927b-57e75d72dbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6183ac-0f53-4e57-90b3-350e1fa0663d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa239d7e-ac30-4983-9207-07a3d8bc0fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8075a76-70be-4420-933d-02b30b83a9fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72668d47-f320-4a2d-be2f-82908149b463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6606019-ab08-43b4-86b4-f745fe13350a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e81c2f-a47b-4869-9c87-be84f6cc412b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8b3c52-f31f-4780-a23a-003fcdb9a707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dace2f3-8de2-4aa5-a486-41cf76f368b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360a2e59-5f32-4f2b-b9a1-8581aeda5392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "632c62f8-98af-43e4-9f07-b8b99dd9c31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7566c2d-877d-4aa8-a1cf-be694598d87f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee890de-cb79-447e-ab03-a25fa1c8dd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226df7b4-cc1e-4755-93be-c3229ce72905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea4b209-2162-403d-b978-8f47b2d26336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3c1a36-e9e0-4248-abbe-18f407f696e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d0df32-d250-4d4c-b5a4-cf093b755bc4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce93ca5a-3d6f-4a27-b279-0802564b573e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcf207a-f540-4944-83eb-8faf9aa61e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f45feb-e32c-4c52-a300-25a4f6b6e3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e61ad0af-71ea-4e5f-b372-6479b962c053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59161796-9222-4879-8c58-e1eaccbaef85",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19fadc1-3546-495f-943a-fe6d51463e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4e575b-b997-495e-88b3-c530973929fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dacf3b-ea9f-4701-b5ca-800fe549d8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "beaa9da8-44a6-4a52-abcd-ec49cd155d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9442191a-29dd-41a5-b1aa-48464a2c81a0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0ce521-a9de-4eb2-9ba6-0b5a6cee9b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ec258b-c2b8-4c25-bdb7-c6fbce129f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb5d5fa-3757-41f7-b015-5f8ef7d792d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8fc8e1-9c8e-46d9-aca7-9fc78f1c2308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600b1bea-2914-4914-8af8-46e2a3475178",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ae94c1-1419-4796-905c-54cf71c70d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf61c175-498b-49df-9b82-7e5fc7a4f8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719eb7b9-7ffd-4ba5-8705-63c73d05797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ada6d1da-9a1a-41a9-8a31-c60ff0b42147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2a6fc5-f2cf-4a14-8994-9350ae92ba46",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb3c4fe-1453-4696-87bc-8c68902ec0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d51a75-36b0-43e5-941a-47518733c395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdcc558-2f98-4b7f-b27c-690feff3e063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c630167b-56e1-4139-9072-5a0a59ff9cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d553e0f6-f853-4bca-877f-96838652dd1c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0528ba-8547-458b-986d-33b5eb5121f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ba62f5-794c-407b-8a6b-be0d305ff59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f640a19-7b7e-4500-ad55-2370cf15e1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5d3350-ff3a-464c-b3df-0ca70c122c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299a13ef-d7d8-4b25-9b2e-5dbdaa438bd0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf35d63-ea2b-4b8d-b07b-38937a765387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be62d69b-dadc-4374-90e4-403b2d66da69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9505244-3d74-40df-bb2b-f5836bf27ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e501df8d-3a3c-496b-8df3-b327c8cc1ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7dd874-fe66-4095-8d87-6af15583885f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa964089-3ef1-4b35-aaf4-b3364f70ac7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1ec8fb-84bb-4abf-b174-f21457c38d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2d951d-acea-4954-b489-5021949a7534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b34142ad-2ecf-46a0-ae36-c820b906e1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d88040-ece5-4987-bbb2-31c524ff572c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7257d9f-0b39-4611-8dcb-cef2f5c6eed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92af0d71-5fcd-4b86-9171-4afba44d2373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf10d0e-b130-4935-a606-34ae160938e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8415ac06-c4c4-4123-86cb-a75933074c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c51abb-215f-45b2-a889-5d021d1a4b3a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740ad1f1-3c3c-4fac-9200-caaaf0ae9420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ede6497-a11c-4ea7-ae0c-589fd48972d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22378195-fde0-46b9-ad90-814410fe7349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "caa62d1c-da9b-443a-8db9-404662897db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52c3f11-336e-4208-9c7c-123b402cb105",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062bde7a-c2e5-4034-8bd1-19af4aba5df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952553e2-2c3d-40f7-9f9e-13b3200d7fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa91b65-65be-4be4-819b-0d0f6f924157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec15e4d8-f6ee-4279-ac1d-02b06cb517da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bd3791-3fc5-47f8-9dce-b87f33155f60",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fc00da-e4e0-4971-8ca2-27f29d827e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2ed549-1b07-4a29-9c3b-ebcf70ae6b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e6a0a6-ea36-4c05-b94a-723522261324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf6e634-b7b5-4396-9d4d-7407f5a10fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7547454f-650b-472f-b123-3ef1b6a87cd7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ceffed-7ab5-4d5d-8f4d-1c76dcd0cf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af61dc2-ebae-454e-81c9-0109dcaf64b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecb1078-f964-4d9d-996f-1c2b23694ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40b8e21d-c79d-4e1b-8a82-dc337f434a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0d563d-8615-4346-85c4-b86ec45974d0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9eb466-326c-445c-8a16-6388f79ce9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7240c5a9-96de-4d90-8f06-6c9ff324323e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98802312-e779-45ab-80cf-41041e099de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66f23018-ac4c-478d-afc1-69eba4e1217c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060c9843-0221-45ed-bdb9-da711eebf544",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50ddf12-aa20-4695-9b8d-42147e161617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65d6794-1e2b-4211-b430-a6a99158b63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcb34af-29f9-446a-b2e6-143ad0379c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a376ec-9767-4b65-ad57-23881faa7ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d091bae-30ec-4ccf-9a01-26922e42fdab",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d6ae78-b037-460a-8012-ecb31323326c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc5bcc9-0435-4e62-8d7d-55114d2d0c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4ef9f8-2d63-46bd-8299-861c9054a750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e27031-89fb-4d3f-9f4e-f0eeda1ac223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944d2a23-3142-4e44-9630-77e0e64be2c6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c06510-70a5-45cc-a58e-7f609854ccf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83686619-4ad4-4012-abbd-a0d0ddc343e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c044dfd-1f8a-40ec-873b-ae4a984190b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "595b575a-680b-4658-a72d-60440e3eb135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79571e1d-db77-47e5-aeed-5abf6556968e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179f0115-49eb-42fd-af88-4dd530eff032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c155f9d-b140-4b34-b253-61bb8bd49b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36852a4-6c91-426f-bdec-3f77c63b8e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "102dc5ad-adb5-4815-9f96-ef8725a18809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0986a41b-d950-48f1-8e9d-05c4508a0208",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6ea553-370e-4ca5-9039-847a5bcf6506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1616dbc4-0a5d-4ed9-9718-387401c935b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6917beac-071c-4d19-82ce-bf9ce3e7f332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6e4812-874b-4545-948e-c68923615674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f965b88-dd5b-40f1-b6d7-54846d1998c2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27d8172-262b-487e-b103-8c48f422be50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40aea407-93bf-49e2-888f-e1a4c5fa987a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90278de-5feb-4d8b-8d79-a30fa42fe1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2714f41f-a6b3-42ff-9716-177ad4834105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbd4b6a-2dfe-4289-9816-8c6a2e2df07f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17470f3-0b86-4b65-9ee9-9bd99beb22fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "53594ceb-6eab-41e4-acd8-4874473fbbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c88029-6171-4607-8a33-42a22bdcf16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6eeac54-e87b-4955-9aba-a889446cb09b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b3db584-ad1f-4c4c-9df1-f177eeb65f16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1d2b4f4-dbe9-418c-b43d-82a788b6273f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f85d05-0a17-43ff-8d22-40d515e3fd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce68cf3b-acd1-4240-8c21-1558e36963f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc6895d-38dc-46c9-b0ba-04e0cff74c47",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf14fa7c-673c-4237-a215-483c1a521574"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa249630-1eef-4909-ae3a-9774a23fe411",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfde227c-0ef9-446a-bc04-629a7bbda6dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6024fa27-35be-4f05-bd21-8392ba10f6af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2661b156-26d6-4beb-8312-7d81106daed6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a337744-75a7-4b8d-b13d-c0974ddc3a7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff642d55-8e67-4e89-ae3e-77cbf89fffa6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3333b113-e9cb-4a4a-87f9-976245763023",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "359a5217-a31d-4c48-96a2-ecc1951d82ac"
                }
              }
            ]
          },
          {
            "id": "a56cab9c-c463-4f39-8fc0-ed1d8401cbc0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4cafc0b7-48dd-4338-bf52-135184f2564a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "266e5228-9b30-476e-b109-c7ed7fdeba26",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81be94e5-05da-408f-961d-c518fa036bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2807ce0d-7a13-4d60-aea6-7e64e4f8a581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319bb293-eb2a-45e9-937a-b18940fc420e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2229d9b-a2c3-4319-b114-ad5b0037de91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c60270b3-cdd3-47e9-9288-b31af7de3302",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15ea7ad8-27a3-426b-83cc-9fab023dac80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee7f86a7-4e0e-494a-bd65-cf1197c95ea6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ecd5297-3fbe-4637-baec-2d2249f01db6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c88b5fe1-3161-495f-bd6f-e28411414135"
                    }
                  }
                ]
              },
              {
                "id": "d0c139b6-e968-4da9-8c3f-82f4cd96e4d2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0654674-d86e-4b11-818e-82b5c5c8cf09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1141ad58-af2a-4bcc-8f82-f4c07c9f854e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff6c0456-59b7-4183-9676-3524e750f3dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c636718-f397-46f0-b458-2cd04c63c0f8"
                    }
                  }
                ]
              },
              {
                "id": "b30c1450-942c-4bde-ad04-5d96abb51f22",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79847447-7037-4e11-a82b-72c804ef6661",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e58a20d8-4e2c-44f4-a3f7-7353c9a5fcf3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2834c319-b34a-4808-948c-f5259ce4df7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a00eb8b5-3737-4a39-be7b-b3824cf1c6e6"
                    }
                  }
                ]
              },
              {
                "id": "0cfc7fcc-25cd-422e-a2c1-346a26e9a802",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "096f31a0-7da5-480b-ab75-e92903f9349d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "402ea33f-eb7b-4d13-ac6f-b5a00d877251"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a54909b5-3e22-461c-bf4d-48c511b320a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "68453830-222f-492a-871a-ae9027c78739"
                    }
                  }
                ]
              },
              {
                "id": "c8a2baeb-c3e7-4dd2-b559-aa2444b22e6c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d6dbd2c-f065-46af-b0d9-db9594f8a7c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1bec0bd-7c20-4c5c-ba05-ad608b23cbb6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0428e093-7154-48b6-9f21-63377096d4db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9b3825bb-fc74-446a-9cd7-132445bf8ded"
                    }
                  }
                ]
              },
              {
                "id": "c799a0d6-2f17-4427-b8ff-08ef1724ed31",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8963d8a5-6d8a-4936-b003-f258c2754e39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1c0f3d0-d8d7-43ee-b1fb-a407ac9bd1b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7487d81-d61f-4e9c-ad67-d27975b27c6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ddaab5c-a228-4288-a52c-596494de16f4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cda9a98f-9ddf-4844-854b-84369b17aac6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c6df3c4-aa49-43f9-b459-3362c1275962"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f39bffe-fd97-43c9-b26d-1fd3da121d0b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d06d88d-1606-413b-af7a-5a38a477d2bb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2c576de-514e-4c1e-b704-ecb71f339f39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2ac2a2d4-2d6f-46c1-a8e4-200a88e1296e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54683567-228d-43ab-8236-cc0a840a383b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3b60301-7cae-4cd8-8c3a-819b8172a4fd"
            }
          }
        ]
      },
      {
        "id": "0891a613-70cb-4c77-89ea-4bf673fc1ffd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5eca87cc-29e2-43dc-bf78-5c33e011c1af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed731c7a-4af7-4eb1-a530-5d8bcae071b0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c030e2a0-78d9-47b2-b571-5f5e73864652",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7b9ce3-21c6-425b-a4f5-896aeb8a5dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa6ad23-2982-499f-99be-b1add9acc880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507b9495-d29f-4659-8517-8904e0e96c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "780c8287-9c8d-4cb0-9072-7adb54a43085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0b4066-e1e0-408e-be64-e7f5a963363a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc76894c-2f13-45ca-a101-942f349044e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e27bb6-8d68-47dd-9a7f-da0b06629658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8f8c86-53e5-4ab4-a3db-162cc2b1cd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab94013e-57e1-42ea-8cc7-0569bd559bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef804679-1188-4427-b417-21c5242d82b3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5f4a14-b3ee-4202-94f0-e0a5b31940ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f659d6f-e6ef-4a9d-bf53-7cbead9de5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6588c933-bf2b-439a-a450-ea1581d2310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1e6e11-0f0e-4aeb-8401-bcfd26910c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ded8f78-4c9a-4759-8451-bf04f462cc78",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86f7d7d-3036-4a14-a24c-cbdb7c7c6e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040c2d69-f401-4ce0-a71e-5b670e0f14a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21f2617-cc2e-47e8-b238-b39a924c2b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff95d5d-e054-45c7-b3de-dc27bded0f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d35775-8c97-42c9-8764-7d5b97069f79",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fcd0ac-57ac-4d3b-bc62-cd050209307b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f090ef0c-f636-46e4-a794-015d436e34cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b380e3f5-f236-4b23-a894-823f188ebc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "692974e3-7c8a-4ab0-a7d2-826286634fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27249817-445e-4daa-8d0a-3043324904f1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dbf937-241e-46f1-8b4d-2828b7f5b49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74a48a0-4f9d-4701-9282-3943712ec61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848977c8-7b9a-4839-80da-4200d6a41c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9304f1fb-4b48-4dcb-b5d2-56256d4eb47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc79c40f-e7f5-4a52-a314-6f76373bfecf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da336d6-6c13-4b95-833c-3da7dc901d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07aa6b07-40dd-4264-a42e-5faeef8e34bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35426c5-c7ff-4f4b-817f-7215f7c1549a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a0c20c-e052-4afd-9567-f65e3e246670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70ab854-fd9f-4865-98f1-cc3a6594fade",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1fb76c-f5c6-4bf3-be22-22fa8cff1687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48580f50-7a42-4aaf-9a87-f299133d9a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad81d09-bfc9-4f8d-9e64-1393fad3c994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "555721d9-32e5-4d8e-87c0-83a459c39ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafe0a5e-5510-4198-b698-376024335af8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85a5a45-d41f-45ba-8baa-6c09a0011921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88c6e70-46b2-425f-a45a-6d817e62d338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8af8814-b53b-4485-8fd3-22c079cfeebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b16c38f-8dcb-49f3-b6a3-a3e2e36bf560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aefbf7f-133f-474c-a689-1e3606791194",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1076c334-6305-40c0-bdb9-3ee3105f879e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0394273-bc78-4b95-abbe-d88bada643bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1c1c98-5a23-43d1-95f0-a08d419d0d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9ecb72-8e62-461f-8033-a558157febef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f63091d-531f-4e2c-be50-57ff9ea2826b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d694122-46b6-4bdc-9b94-d97b57a4e4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baebce16-37ea-40bc-83e8-c5de318f007e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049e7292-e600-4d73-91e0-7344987416cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1172c1bb-b041-4725-94e9-8be1655a06dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1036319d-0290-4d8b-81f9-a4420ae32f04",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c59c0c-4920-4b0a-84bb-d6cb9d022562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61cc51f-91e6-4aff-8208-ea0afd123ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b6f833-ba8f-4908-9c0b-bc98467853fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee771090-1b01-4376-ab18-ec9f04935a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c03baf2-a9e1-4038-84e1-b767fb7f62bd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72df91c-9ef2-441e-b156-85c21b124bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8560af-a764-4431-a829-1a3bc2cc823e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb7c65c-cc98-4c3e-99eb-8d638944cc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "325761ab-99e6-4c70-a288-c399de3ba9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145c83cb-a386-4ccc-ab59-918083a8df35",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b791ce7c-2fce-488e-b3e9-e19f069569ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1326e69b-f3fb-4ac5-a96e-243b7c9c7b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba62ed0-98d2-43ac-9324-fad6121ba27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa636e4-f23d-4d9f-b988-9e005c473389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5062f3-5e73-4611-9f64-05f72568031c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b301d0aa-cff9-45d8-afb2-3e2dce308979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146eb5cc-0937-422e-94a4-d3ac80653f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6f32bc-75e9-4dbb-bb4f-083149f810e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec4c558-23fd-410c-8d35-9a8243a6ceee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a8e3dd-30bf-4130-8a80-af73502f0456",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5834249f-aac2-46bf-8738-45121fbe4bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9511e5-851a-44e8-bbee-2d7bc816b6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02590a3-1682-4179-b147-3382a60a76bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1458818f-2a85-417b-87b3-d94c3b7dfc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60884a17-a705-48b6-91e4-ed269a19e81c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a9bd6d-acb9-46d6-8ce9-2f7e20e5a8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eea94be-2e9e-4dbc-9554-cd2b0fe491bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1192ae57-ed55-4f02-ae76-82d90e8d78e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2083d3c6-a9a2-40c4-8cce-ce42e95f33b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebab796b-53c8-41e3-9d83-5181aff947a5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59081af6-7595-4204-a828-bcda01a2388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cafb7b-9c1f-4e48-bd29-e7050c32d805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a366b317-9625-430d-b6be-c10177beff49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6ad413-3977-48bb-9867-cf42972c635a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe91e8c3-c598-4b50-b78d-e5179e831bf1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4375a3-aa29-4215-9a8c-f91f4bc4d7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d945b4-1d11-464f-8b5e-8cec8a4d36b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5eb43a0-73ae-464a-bc22-dcb43bc81c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96188074-307f-46dd-a32f-248d40e0d6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f459da-548e-41a5-ad8f-40184db5084d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a34152-e051-47cf-9316-d54e11eddcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b117c4-58b0-43f1-b0a6-5ee0db98f32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9020ca-04b8-4a1b-b28e-70a53e8cc3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e78130-bb57-4912-9cfb-224dcdb3bc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b111170a-aab5-4a28-b076-bacc510ba519",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c510e2f-a5b8-4882-a6bc-1665990fa4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f1145d-3ef1-4dfa-ab5c-3c66a510a6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e975f294-35c8-4308-a36b-8ddf0b9b5c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80cfe49d-db1b-4f9c-a4f0-2399b2269c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d937c5-e458-4cc7-bd8a-42525e03c83e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b580e8-49fc-43f7-953a-a3cab6b348d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1e0f9d-1969-494d-b18f-5866050cb1fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad637c1e-a1d6-4a7c-ab52-2c54a616712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f081615-fd6a-4d51-9e85-3b0d30736e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7e9747-b3a9-40a5-870d-8a2787f1350c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3852fb-ddc8-4ab9-b776-f00e2b14a639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc38139-c0a3-4b5d-8097-ba1681c94e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3e865a-9ac7-4dd8-a6f0-4baf017b9069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a00e13f2-a226-4d96-b97a-64a96f77ab47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7296c92-83a7-40bd-ae24-9c7aa1ebdc70",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4673eee-4f7c-4861-b380-a867415e900a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7485f72b-37cb-4e0f-8377-f3e166a2d1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5babdeae-ee1e-4d4a-968f-337e4f3e8465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17b9f44-d703-4ae8-a5da-c4c799981241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b37c67-155d-4abb-b1a5-0f3a903923f9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1ebc1c-1a4b-4085-89df-d02b1ebb1c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a61543-4152-461b-9e78-fe845d826178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72599ca3-b814-47b2-b66c-c85cf1f99675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f564db-a736-4615-ae96-8ff8161f341e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc9858a-ea90-487f-af55-a5756efaed54",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e2e7ca-da6f-40e9-ad8b-ab009a073793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af97235c-27bf-4605-84df-1b9b99d6bbc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12afbb4e-08ec-4cb3-bced-c4be3f5bc766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "288730e6-0d10-4b9b-afcb-9298aa13cb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a302c9-21c0-4f03-9e70-d286c8e2401a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cc97e9-7b41-4f9c-9f21-25d238145fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d8f7ee-19fb-434d-ac5e-3fd4df2dfeda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5375243-1753-4360-880f-855b6e1b202b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e919e37e-5e34-47c0-bb66-29bfbf47e62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66893aa5-dc8a-47b0-bc9c-75698e9ffbd4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ceed29-536e-4e6a-ba39-24f9fd01f22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafe8f01-8b44-47e6-b0ca-ea4ff2f03805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ca5a04-b651-4511-9979-d19270fd005c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70faff22-6939-4922-9af1-bad3cbbd0a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc38202a-741d-4401-8f80-918ba7ac326a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acaf05b-ef1c-49f1-9e96-4423292843df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e827c4d-8ae1-4e90-bb49-2600f54da13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa05a780-7de8-43ef-9b1a-19db03027c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2c8008-24a3-4aa7-8486-d7e1d455da4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ad0df8-ba18-4197-92f9-8cc052d4eb42",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b4c256-f564-4e77-b4cb-db450dc57da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dc88a0-0d8d-44bf-9672-15e5c3bb6a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0466ee60-7ca0-4f7a-9348-c0e6e666715e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4764ab05-a0df-4a36-bb96-ac319be69437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c064e24a-c03b-4569-a672-2964e319c3b6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3c8678-3a87-4b0d-9b02-d23e2d569fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc29e92-d8e6-4f59-bf11-f7d788eb8c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8bcfea-ff9a-4ce4-97a3-f85927056584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba56e74-1c5a-4800-848c-778cc0d0aebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0df252-e83d-4765-a088-a16c2e72da60",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d90f300-64c4-422e-9d45-f192cf187212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f0d2c2-0830-40f0-8289-a921d661f857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4f095b-f71e-4a93-a788-af54ad8be22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9800e402-1a46-43f5-a710-a079c0de6466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4658582-ab6e-404e-a437-f66f91ba658c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370bdc42-da81-4290-8965-c83560f18b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef042836-a682-4658-9d8a-01d865891812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1a018c-cd74-43e6-a304-933d0578e6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78d99d11-b448-4296-a6ef-8ba2d6e810ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18525ad8-3332-4955-8ad2-d09de086f6f5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3dc255e-8445-4678-85ee-40b969a0c0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3315f2f2-283c-43fe-b6cc-0a429e2502b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778df4d0-84b7-4234-947c-e696a5e996c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc720aa0-64d6-415e-a10b-c9cb83610d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4b89de-557a-474d-94be-ba66b6c7d438",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43d576a-50fb-4ce6-baed-d17dca3ff6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e35b26c-fe1f-4453-ad21-cb996f01f930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f916882d-72e1-40d9-b94a-511cb1bd7807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8de99c7c-2b1c-4870-916e-1b8a97458122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb1f584-0d27-4460-944b-4919a5e96b1f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed04fa35-eb4a-4dc6-abed-e397cdcf34fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d8b504-d0a7-491d-9b9a-0b5f176fe6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99461076-03ec-41f4-b8d9-67a937f41418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65aaa0e2-9e55-4d6f-b65a-4a9d6febec02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89b170b-024b-4a69-a148-2448f80f5562",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb10ab1-e5af-4b12-afa1-8ec4d4c4781c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cfcee6-5919-4abf-a42d-c20ef104baf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30161b2b-4c4b-4703-9c8b-c8c9f0c37226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f991df-b316-42f7-87ff-0c20f711a60e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "246dd521-ac0f-440f-89b8-6e045e5c814e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "68fbe643-9c44-4204-b3ef-8825299f8f18",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2393e9-deff-469a-885e-7f53396c29e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "552bb157-3b26-47cf-868a-c0639a9c479e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653ae804-0633-42ff-ac58-f27de7eccfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b5f0519-a761-45f8-9775-9f1f344c5148"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b73d84b8-ee2c-436a-9241-1f733a05c9c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d1cc516-60e0-4efc-8fd3-8983abd7536b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99a6a468-a0f0-4ebf-8774-c0252fdc3968",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "197c21b5-a149-4538-8580-108e19bc3d0c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "075d9b5a-7f15-47e0-a824-fa9917215d1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2b0df929-104b-46c7-beae-5e63186afa09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52cbc088-8c5a-4852-ba7c-22692b91990b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34b82cf8-bb94-427f-95cd-3f84ab1eac92"
            }
          }
        ]
      },
      {
        "id": "278033f1-7953-4b0d-bfcc-1b4bda59a09f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8ca4ca2e-2b16-4fd1-851b-b60371122f62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5963ec9-00c8-480a-8731-4b2e9bb7499d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d6ec2fd6-a60a-4a1a-b960-8857a9fec8ba",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9c70c6-e76c-4641-be73-5c31f9c4c343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ccee6c-84ba-4610-992d-af4cdcc5f5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9237a2-352f-4569-8319-909aac18423d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da08d57d-691f-4231-8c6a-4f3b73958f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83f7088-008a-4704-ba12-85a3dec3b77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728e0a85-7d40-4220-a7ba-7e3dbc1f7407",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56543f1b-465b-4311-a271-d1fdd9f865cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8970a5-653e-4282-81db-946a6f4cd44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6f4f4b-3991-4581-a672-94e6342e78d3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b56a93-db56-4f73-96a7-821815c3acde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85349ef-9a78-400a-865a-15ee124f2c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e369c7-5dfb-42bc-9af0-debfd801c1aa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1e049f-4c6a-4858-b401-7ef2fffaafe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6d288c-bfa7-482b-9943-54d0afd06d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223cfc41-b5df-4c20-b61e-eab05011f72a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8684d657-9cee-47f9-b579-860f844ea71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3327ce2c-cbc2-44cd-946b-a4579e1d8e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5179b40-fcdc-4570-bafb-54c41751754e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83514bde-ab62-49d5-a78a-29d84d0be6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8feee4-db18-4249-b88a-9d9e86166336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e575a895-9950-49d1-914b-4203f0515fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fd0b91-236f-494b-a73e-26f831f0a903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e99a885-4b4a-4aed-a1d2-7c8a44219114",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a02f482-7bca-4deb-93a1-0ca6855038d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68373564-d4f9-45e3-bd68-02ca7f4a598b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadf89e1-654e-4a73-9130-f0ad775992e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fffd4deb-5ad2-44c6-923b-fa188ff7cc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5250a7ea-0310-4122-8e7b-7e154f7ace77",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61e346b-7c22-4d47-9615-bc22a803d017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c6908c4-7bf4-41a6-be46-7c8e149c54d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae084826-9b7f-42a1-82c4-e25b82ebf5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90910b81-dcda-43d7-97a1-e97c9a5733b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3644b6c7-0c08-4e40-8921-e8bf1c3b5803",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a238940d-b0dd-4c7f-9453-19b9ddb26986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28993bdc-7897-400d-9c3f-cce61c9207b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d42420-486d-422d-bacc-765892d647be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4921a6aa-d84f-4a41-b50d-c3df11cb9142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dec3e8-d465-459c-88fc-f67fba2e8d29",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc832218-e8e4-4add-be55-dd32dc235de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12e06e8-2769-4310-ba99-65c88abeffdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2e9785-32a0-40af-af1e-2ab69604b012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825f2398-fb92-4cda-b01d-dee36b40e36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e6e72f-a787-4705-b320-f0ae05567bb8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fc8ad1-3772-4e79-84dc-fc6089f461c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230f7778-bc66-4539-9ff0-a0e484a54e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076e2a74-7d24-43c4-883a-e929ef8922db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b93bcad-5af1-4309-b79a-5756c6a6cdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e7e202-a29e-456c-aeeb-6031d8758c75",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3df8db-4b38-4370-bc11-2ab18063d59e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d32e191b-0fb8-444f-841b-dec74f136d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5654152e-4e61-497a-b2a0-07d160adce65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70838f51-4510-4e96-958a-3a14dade2c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f712b6-7d95-4052-a0e9-339b18773f41",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0271745-ca5c-455c-b0e1-65e6ee983aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "472afbbb-4d26-4d50-a895-71b99d1f6c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69139209-06e5-49a9-8fd6-4f1c1c35555d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b3b231-070b-4efa-a999-c444408e9119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce8f424-aa29-4aaa-805b-bf3a4dee431e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00983711-6554-4dfa-aa34-0e6bc33ed5f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec82ca4c-85ea-40b1-b947-63fb2d1b2fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b35bc2-e56e-46a7-949c-55ab596bc82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc0d2a6-ac19-4616-b0b3-ee43cdcca013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c1ab6b-15b5-4881-a038-16beed6bcc42",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4d41d2-7649-4804-932e-b332c2effe90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "850eaef4-a1c7-401f-b6a5-51501da25dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a58249d-37cd-4eb4-9263-958f6ed0775d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f47840-22dc-46b1-a878-c862dd247170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bbd3d5-7b9e-4409-b068-1f7bf646429a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70294fbb-7ff6-405e-b471-3f8de45b841a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5685fe3b-39ed-4166-ace9-28239406a7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c109564-5d24-4cce-a185-10d1ecb8a77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19a67ef-29c6-4f24-92dc-b33ce135a6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c8088a-2963-4454-9617-80592e11db09",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b618a88-7531-4a25-bf50-9abc140d0fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1f82db-2ba1-4f8b-8433-1a79f1e41981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179b3285-1bc0-40ab-a756-99751df2e051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58cb7db-ae44-40d2-b195-76e7ad46fa8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c76d5b-81fa-4f80-8f4b-c420e32a313d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda46a0b-919c-4fc9-8bcf-17b3e9257b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7eaafa4-1e10-4f77-bd19-a84bac0dc855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550a2bf4-2feb-433c-b568-9aa65d2d8acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1d1336-654f-4724-b9cf-4caf45145a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0e1685-067f-4dcc-9406-14a4fc06c028",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed168d64-92e1-417b-a9d3-644de04c2b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f04cf4-0eef-492a-9fe5-96213995b73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b322f8b2-53c7-4727-9a8d-1a419be9f400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e973761-facf-4e90-9021-0b2d48a87ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c670d07c-9ba1-4eaf-ad55-7f89294d35c9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f42350c-48ff-4f51-98c4-4084f754ce51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0160fc5-1da0-4019-82b4-facb30cbfd6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d934ade-c3de-4588-8ed7-65ceab16601d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6428bbd9-d8a4-4167-a2ce-f11c5dd9da46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4629fa2f-3e30-4d3b-ad78-4c947ebb57b9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347616c6-94ca-4855-b9e6-d5d0ea938ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b972f7a-0604-4548-9dde-976251d6ec98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c1f2b3-3d04-4578-bc25-6e9968dc6083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c41f4c-62ec-4b93-b70b-4dfd3cf14bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac68c67-c27f-42b8-91f3-40fc061e0126",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d2b6ee-5508-49e6-a66e-23178aa0e071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116f278a-94fc-49ed-9575-d411d3343673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6346a8ba-cdb0-4de0-8d12-079946fb5054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecc6a84-7438-4a77-b07e-de4754bf13f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307b79cd-ec16-448e-9da7-d24e97099a91",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76792b43-36b7-43cc-8765-aa4478aa22f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "879857b1-9d6f-41b7-815a-e6b0fdd1e8f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7dcad3-7f58-4ff3-9ce6-97496aafb281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd03f56-b9b6-4c3d-9ebb-65e93271f97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c197df-b2d5-4423-b4a9-55121cfcc557",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954a52b2-2e16-48b8-ba14-4b9590ffd052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe408861-dddb-4e84-8fa2-b7b1b16636c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978e539a-7579-457b-87e3-fa995024087e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538f0f01-63ab-4785-b652-5931af6cfa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f866b2d-051d-4647-9612-6c4ab705f298",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4286680b-67fe-41c3-8eb9-c510f463d654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99221dfa-ba2a-4791-8699-9f2236bc9a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac97222-5022-4e13-972a-a768a3a94aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512f038d-c347-49f5-a7d8-7acf3741aa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a239145-174f-42e1-b083-7594679e05ca",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdec57a-680b-4409-920b-7b8e4539b7b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6d7e32-dbd8-4ac1-82ec-6091895dc5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da4cdde-4bac-45a5-ad8d-71247b43d9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cf8388-c8d6-4fd7-99c7-8273bbbb85c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b7539a-d3d3-4447-88f4-d3a7f2fefdb7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbc7b2b-8d02-49bb-9d09-d7f762157186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8788a00-aeb4-4c43-b09a-c0f483d4e077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dc5c79-a082-4d0d-8297-06afa5f2432d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16667de-b765-46f0-adde-0a4fbb00dd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17797990-ae3e-496c-83b2-4d1eda5f328a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd889f6-f80f-47dc-a2b1-aa118c758b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7794634-d9ee-4795-89ff-96a07252795f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d84ac7-2560-4219-8052-78a677171b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5d6c52-a53a-4c71-94e2-13c62a37d76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c508243-64c7-4c53-b2d0-239f3347097b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d02a099-a529-4b08-b00e-d398fee2c90b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa2d8392-1427-4872-b89a-a061e5384dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825630e1-c553-4adb-b91e-a7a7e888daf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9627c57-acbf-4b36-a953-3b7f8b88546d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7014a847-dbed-47a1-8e73-e448a1e163dc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85eac014-89bb-4268-b91e-96d53cf01c69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c25b770-6938-4a32-91f8-ea34b88dbed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5354fe1d-f636-4e40-8511-09a033c87db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dce577-b1d9-444e-b69c-14369cb3e360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91089e0-0a71-4a26-b063-4eed4d26037b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2663b26-5540-41cf-92ac-c9118f2f3ddd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "460281e0-d32b-4798-9703-699458105c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf5fd99-342e-4d45-80fa-08c6e50ae4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6f807a-9723-4810-98bd-df8d0ab1d764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db084825-70da-466f-a6c6-0d0e6c41fb48",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db252580-6781-4355-94e6-79e61e1f230a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727aa565-4357-441f-b816-2f0f814777d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70afb326-7855-45e1-9b8f-481b8dfa14f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d636866f-333d-4039-af1e-e4aa7c14bab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a46d0a7-81a8-4272-8b9c-74ce7501a132",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39e9994-47c7-4a6b-b86b-ec060c10617b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91c8035c-a7a4-468e-9bbc-018306d060e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3414cecf-e315-4ae8-81b7-30b0b25e3f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ffe212-cd53-4364-8b8e-786604913b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c843af2-1df1-4ced-868b-5802eef62f68",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c522df-9bb5-474f-8ac6-b5bb0ce9d76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a22dd8-9381-4ea3-ad08-ea6e9c6d1cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63ce449-a9fb-4d0f-9270-cf9e079809ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f666ec8-31bf-423b-85f4-edb094878372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d092211-b4ff-4d81-8cec-f949a0105912",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61d68f3-272e-451c-8b21-85dee762c9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04311c2a-b684-4174-a879-36f58c2375db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba66b9a8-29a5-4e3e-a7b0-5fb2189f653c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "009bee28-cd82-4218-bdb8-dae337e6cd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4311f38-a2a2-49cb-b9aa-2886971a43a6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e89999-be58-40ac-aa97-3b6cb18deffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f2b5c0-7d53-4c88-a990-62b0d3be3d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc4b1b2-ba39-4b26-98cf-2863ae5439ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6a2762-187b-4008-a3d6-a655c444e047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987efc38-341c-47d6-81f1-34777e3a8d5a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62bbd1b-b4f8-47ad-8eb0-cd15b592d8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace7db19-4526-4415-b4ba-5e17d25dcd13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "482caaae-81b1-4dda-82b4-484adaa0b16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cd0cba-1cc8-4328-980d-69e0c35e8cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df32868d-8dfe-4194-b7aa-bf3a3cb670ab",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeda3be5-1361-4ac5-9e28-ac2aa4c2be17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15211970-7244-4010-95b4-b3e243f74d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b83708-144b-4af7-9adb-ff95cf592cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365c2a92-0e47-4e78-ae01-bc2e20a0e003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a097e30-f852-4793-a4e8-aa4492b78701",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b452b90-14a1-4942-9e13-5ea9f2110ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c026925-8ff1-4f34-823f-f665dff34009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda31a58-7dc8-40d4-ae76-cc718a4d1a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b490cea-ddec-4ca2-95d9-d0744010117e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03a4c49-6670-469e-a2ba-f67b33adc4e7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd76f2c-4e60-43bd-89eb-aa6408b472ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0d168f-cd25-484c-8f95-fc4aeffaa7a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec079da8-5d5f-4169-9bd4-4d5d58a1dcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1981a1a-563b-4d93-9727-1619e13ce5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc05bf5-2fb0-4425-bd0f-928bc71b25ac",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d291fe3-caf8-45ec-96ed-e5b0d08fed0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9018ab3d-da0d-4419-8b75-5a0863dd248f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c03dd49-e9f3-46fd-bc48-772256d9ee48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cd1fe4-347d-41d6-8d0c-bd2ca68167d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ec2778-a210-4253-a11a-d737d7d503a0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236a516e-8c8c-404e-a3a3-a73439f6be89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f177fc-8fbd-4637-9e05-2e5597af5d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4cc8fe-c351-4850-9081-bfb9f932c464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3d0272-3746-4e5c-be66-e2b9d204ce26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5147cedf-408d-4bca-a363-75b045b11159",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07232b4d-02ae-4ab6-b989-2825f152fca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc7b86a-924e-4295-8bda-47fa1f817187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb0bbd1-96e4-4e8c-91f8-27632f44d6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d7ca75-01d5-4b68-8f31-57dd7116e4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c515bb-a5c1-4067-9bd9-28056e2781f5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403c0679-b8dd-4c2c-97ed-4a5083b87f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d799e1-d6ff-40e4-9a59-285dc7e233d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1b741a-849d-4ff1-887b-01ca45c9ba1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3248ec-c96b-440d-86a4-34e087d27213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16962b1-f2a8-429f-8071-90b66da1316a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd316bb-3d61-4279-9f2d-ee123c295efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa0330b-6b67-4782-8133-60b84d90e059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f4be2c-d8c3-4cd7-ab60-64af7e198748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6845c23c-fb37-4c7a-b23e-4fd6afbe7429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e5f86e-0c24-44ca-9b03-9a4b9c1cb7da",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9761136-38cf-4353-b275-ecac60837c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb8c406-b0a3-4dab-bcf8-e1a65e1f27ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdc766b-8a39-46fa-bbeb-35f02bbed4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566e01d9-b508-42d6-938e-9a8c72371f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185e437b-0548-493e-a78d-8842b94dfd3b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157ffad2-fe50-4587-aeba-659e01528617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b883a0-9517-4e61-9c6a-5ab7102a5435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a54afd-3260-46ed-b61b-c2b6c1de8604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceba28ba-0227-45f5-a4ad-c9b6cdf2b801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e752b5f-5864-4b55-80d0-42a543a1aa5a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8812a3d-36a5-4b56-befc-0c01ea334bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39bf7588-5ea5-42dc-b012-63a8ebc9b882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad74b2f6-f01f-431f-9f8d-97483e4a47b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfbdc1af-f6e4-4668-8fb6-1a4a8a4ac30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8fee1b-0a53-427d-84e6-d051d4721803",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c64e8fd-138c-4b15-95ca-d4f74354a2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5ab41a-18e5-4b5d-9f73-322fbbbcb19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82900cc-f5d8-4b0a-a9e9-bdfb4a2f3315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cda0ab-f948-49a4-ba5a-a634275cbb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeb338f-c66d-422e-bb08-713acf7cc26a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d101ac5b-710a-4e47-b972-306cc76ef6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdaee6af-ee6c-4c53-9a27-17dc20783bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc24fbe-e13e-418a-825e-885366d88d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba04dd6-153f-413a-b21d-172d31831ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984c092b-43b7-4b7e-8bca-9f3fc8ded2c0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf75692-2bbc-4de7-81fa-a1e6d9b3a146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77681f3a-ee38-48f7-ab47-0d70dfdb3dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef6a96c-1c0d-465c-a1bb-0c7f2e65dad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0578c5-5b44-42b8-8cb7-50ee900cbdf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c64f68-7a67-44bd-adec-841c3ff2a949",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6d9f3d-0192-4329-a281-6d46af9954bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82afdc0b-b9b0-4563-86a7-4f5dc999e778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa582339-fc7e-48e7-b050-f18722e3915d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88ee0e3-8c31-4569-b6ef-6632d5d66c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62928497-082d-4cff-b3b6-c3beba0e0f57",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818b2f10-2906-4990-99a3-faede5c6458f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ee432c-a759-4c70-ab80-600a9397c95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e3573c-a56f-493d-ae0c-81a624cd623e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa42aba6-7bff-4a74-af9c-af1993e0ba46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845b2916-a6b0-4e9b-a49b-0654ae7cfc01",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62f41d4-fe1d-4250-8ca5-c6dac57760e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452a1d6c-0a85-4828-89c5-5b1a5c284c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0202f5e-43c5-4517-ba7c-ecbff7d85136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf493bc-e002-4775-a936-6c66932fc58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948f1cae-1e09-47ae-8cc0-a5e1fb9d3fb2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7207fa-9dbb-4328-8b46-23146efbece3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6368b81d-bc59-4311-890b-da97e2e4b7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46032419-a916-46a3-9e48-41204882db0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c68368-639a-4dee-85f3-437d0d611130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e377f22-72ec-4058-a00b-df8fb4520c99",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e79f7b7-c2bc-4e20-9b00-a75a4b15794e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2512c3-bf69-45eb-9bdd-49b465e2e8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2676e94-8574-4f62-bde1-1cee4a0ac205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a6836e-46b5-4354-a913-007c2aff72dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e4bd7d-cfd0-4e09-8fc8-404b987ea43f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba844c1c-6af8-4407-9f6a-e6e1e2fa1055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a76053-3f29-482f-9c13-2fb704273355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef5b200-cf7e-40e2-b895-80c8cec505da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbef41a-e64e-4aed-b997-0938b1f51d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543f8f88-5f8d-4b8d-b102-5eccdb21e88e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64832f0-88b8-4909-8797-84000d296e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5d4ba7-384a-4762-8acf-8a1c8ffc1f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36adffde-a355-4457-b619-c070153a81cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd836b6-0d5a-4923-a4f9-d332a971ea18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef05bbd2-0ad9-46ce-8c82-1b80c7ee00cb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21c3393-6398-44db-a8f7-820049e916d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1083947b-ff68-4ba3-bfd3-48f1bffe28e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebd2854-29f0-4508-98c0-905738b9efb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a7d146-43b8-4c25-a57a-c89d74111ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a864a94-311c-4b3d-890e-b5d23d721093",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40324b4-4452-4b01-9430-bb9e2e50b9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a0db38-e76e-4e14-b9cd-f91d7f09c4bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113a2583-0e0a-416d-9b15-9f09e2cec2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c63fe18-923a-43f7-a2c8-d28e0eb71b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95cfded-4db8-4cd6-8ec9-ef69c42f2039",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b053ac-4c55-45ad-b49c-3f2a480aeb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f672f540-426a-4dcb-9502-8ac5322aba55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a084e0-a8f8-4230-b5ef-6dd0115bfe7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df79fd71-da13-41f3-93d2-e7c35c342657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4bb43b-0e7c-4cf2-9f96-036d40de2c49",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be6038f-3f40-4bc6-a6cd-c8a2e832b910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7aa67f-e2a8-4fa7-b09a-ee61349ddca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab9a229-1a87-4a5d-aa13-8b7d798e2e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23a9a9e-628e-4cba-8c6c-23e359d7c451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e9fa97-7af5-4799-86c7-f2ac7812d921",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3b4411-a58b-4542-902c-f842f6abe75e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52207b0d-f4be-418b-80dd-b2007ed8783b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa36c1-61f2-40b3-bd53-8f9f0c9015b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb19c08-ef91-422a-bb54-0399e07f2721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bb9342-c075-49fb-a81d-798cba6f3d7a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75fe051-47e2-43c6-a326-c9c80cafdf06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5774b7-0e41-49b5-bf32-a78dbf448ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165a33b8-97c5-4a18-9b3f-e61057ab1eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82426e61-fa32-4a74-be06-ab8f0ad581aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c7edbb-4887-412e-aa60-960e52d797e6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c035043-4d40-4bb6-8f46-8a4efa5671ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5541fb6-7382-455d-9547-fb2d7c37f38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2320a48-ab1c-4098-aa2b-aeaed87aed2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd1d216-4ec5-431f-bc3d-3dbef3c16d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11533935-d22a-4638-8bd7-116f486315e7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db9a091-80ad-4b19-97f9-ea700f4214bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb1f59b5-d9af-4730-a79d-b81a5ab08a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1039789-9bf4-411b-b116-86e59413588c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231ad705-cc93-4f23-9a47-d0c1d1193fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02640352-6c8b-43ef-b8b7-a8764042d28f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46d30e5-91a5-43d6-a199-b3c02dbd752e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07baf095-faf5-42f6-93a8-b3fd87481a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c565327-fe7d-4ada-9389-1a354c585f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf42193c-6d5f-4cff-b9ec-850357545a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc441a9c-d7a6-4a8e-bcdf-e58b71f9b838",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec4100c-a2a3-40be-8364-f8855a770e51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ca6988-5e56-44b0-803f-1e9ab37cb985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9ff19a-515c-43aa-9a6c-c6fc97f86534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c822d55c-f746-4608-a22a-55169b9813a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270f3d71-2ec8-4793-94fc-0de52e99a2f4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66876420-cf16-4d2d-8cb7-000d578d4035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabb254b-8187-4dd7-b635-fe609d430193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb14fbe-d412-4e1e-9172-2aaf7ee5d53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e1aca6-3ec8-44de-a26f-fc6d77d3b430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25961b56-5db1-4183-b13a-721cc318a960",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2c4d02-110a-4bc6-a85c-0530aa78616f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c3f286-7449-401a-a90f-b8ffa3f03a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a035b5c-9882-49c7-aa85-09258f4e95c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebd50b9-403c-4564-9d0f-b24d87cc6359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6e4537-bbc7-4600-b796-144fa97b6838",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b248d1-1d3e-4f34-bcce-74b9d9464021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91c347ec-6842-48b0-a37c-46ba8dc6d015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc44e894-fc73-4ac8-9825-8d58a1ec8c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97cf3a3-48e0-45a8-a7e1-7063822daf50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af23372-75ef-4c4f-8ebc-7ddcbe7d3b93",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f6c4d1-03f0-49ba-ad58-ec7c8bcea877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97300562-a75a-4227-9fa1-3f0f2c65b59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89390c4b-741d-4c4c-bbbf-17b30c2c179d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b329dac-d28b-46de-b0a3-a2ed03e69b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee93477-99a0-46bd-91ac-12e3d0ab0544",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07da980-caf3-4a6e-85b6-731dd11e2e83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b7184c-4dfb-4aff-86eb-0e6cf46d911c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e238f6-8931-483a-b950-0973c2af532c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45676c69-aedf-4912-a0a8-d9ee3adababe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef9d55d-ff9d-4a63-bbe5-e3811f7da116",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ce46b7-28b8-4b0a-9434-9d8ee83e77e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d75d153-c82c-435f-bc14-32211caac1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b94cca-31de-4889-8c9c-21c727b00f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426869a1-dc59-42b7-86f0-8733989bc7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d281b59-f544-4732-a784-64b6b2561817",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c7c44e-c265-4578-9db4-3c6bbe795a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e3754bf-46ab-49c5-97fb-3ca017d31bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "439a95a0-366f-4d5f-8874-884e17e57585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff027f1-0427-4482-a93a-254befb7457d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c940f555-f9d7-4740-bc1b-37bc637eb4e0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f61506b-3e48-4d1e-b7fc-b1521c600abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e135063f-bb1a-4ad8-890c-f9be559e07c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c7e3a5-b946-4597-ae20-9382a0874100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3488ebee-6ed4-4d35-83f9-302920aab559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fbff41-284a-40a8-b0a3-3a809d111e6d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfa4a7f-aa1b-40bf-9939-d3ec8ccb7b09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b0f5cb-ed6e-4e44-a4dd-4768d4e12f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b67c255-0eea-4753-8f95-cb6a5825f99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8296423-a169-4464-98ff-280cea3f796e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed234613-7e9f-4c08-bf11-fde456c2436f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30501dbd-95aa-41a3-878f-e39facf215fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942fb848-041d-4bca-9b96-0c44e4dbda0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b6b3a5-17a1-4588-84e3-a662af970063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df678d8-694a-4e98-a48e-1c31e0b28dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c066c0-9879-450d-aa09-49df53efdc92",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c8db91-5d85-4b54-ac83-8cccee64d6e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "863860f7-02e3-4f18-a3c4-1d3d0a3d5602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b441d1f-e44e-4cd5-a9cc-52eb734b5918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e83474d-5be1-480d-83e8-3291fbe9ab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c619a18b-02fd-4ba0-9afb-10c2a289f963",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651cafda-ce09-42c2-9474-b873d4aa1ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e982c7a1-cf1c-4e73-81b5-fe606ff4ffe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a997e4a9-24a1-4d18-b8ec-5a2982e76f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ab8a54-ca89-442f-94d2-568b8db4e493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8159dc87-471b-47d9-b905-3e5ef97ee7ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a64990f-a17d-4d20-b6c4-c288fa500dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5be75b29-920d-450d-97bc-8606b8047a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c79ae0-6c41-48be-a5e8-5dd5cd1413de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785c1ff6-d158-4f8d-8ecd-d7ebbf95ce29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527950ad-5c2f-4cdf-85bf-377ede69eaa9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd23e01-93ec-43e3-a799-457b35602628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e7964c-7661-4102-a08c-7e800966f745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b656fbe-a282-4d7a-9aaa-273440e5feee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c747d8e3-aab3-4356-b622-eddc1d051c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b66b289-432d-4abf-91b8-e3e290524179",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e999fcc4-4377-409f-8329-661b2a99c10c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a314c185-ddef-4eb1-9138-1320336b419c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479e7bba-b5cc-4cdc-ace7-ff5fbb00b17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddaea85e-7782-432b-a6b1-0d4df3f35498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674f0601-6825-4ce8-8d73-c3047862a638",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf56596-f1af-42bb-ab65-d903bd63537a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15dc1d1f-0692-49d7-ac05-96edecff7735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94ab93c-1a5f-4204-b9ac-7fb1adb0f47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643b1596-f405-49a7-8755-4d8ecfc1b52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ef9ab4-b72a-4be1-87b3-2f1c8bde6a70",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92dacd7-3754-433a-a813-133bf65c7ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fbe8d0b-9ad5-44d9-a82b-86c7b4596f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5102e021-62ee-40b8-907a-d86ee64032c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277219ef-afa9-4cd4-b240-5834befb16f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677b3979-8553-42a4-98c1-bc586291bce6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bd827a-1dd8-45c3-b063-24e802796057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00391d21-4c0b-4319-b0a3-187ee1133845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d908ba6e-7578-4ef4-b568-388da3ccd1ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a6e9a9-6eb4-452d-b486-b9a24d4dbe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d67756-3c64-4047-a79d-790d94787d32",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561dd661-ed6c-4ac2-81f7-deeff724c08b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d8f1c3c-5819-4ba2-b2c0-4647b11a4b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fc4c4b-361f-4079-9049-39f67fe7f384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668d0d89-00c2-4b63-9292-fcfe8f18a021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383bb525-abdf-4cb2-81dc-49d1fdc535cc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3196fd12-6ea1-401b-9ae3-c2187f1cdb46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2620b0a-89a1-4f5e-80ab-57ccc520b8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b6d685-a380-480d-9f0a-66eaac6c3df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33450494-619a-45ab-a025-ed85b8d8a784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa7e7ce-c927-487b-8cbf-24027ad26680",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9968f956-f120-4645-a074-b715cacd8c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1198faea-f9b4-4e19-b733-81b1c669efad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c5d92b-8ffd-4da8-8b90-c279cc26f092",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f982b90e-9c90-4e46-8a27-ab81d90f8f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009c597f-95c0-418b-8180-44bc02e1a88f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664a36d7-ce55-4158-afa6-362ceab93aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d170f19-8b97-4b99-a565-4028783513cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c619497a-d08f-4e3a-aac6-0ffd9e22146a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5089ff98-2b29-44dc-8af0-1e5c8fc275f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f4425a-3a1c-471a-88a4-1fea5d74f5ac",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea45b98-4e52-4f08-8d5b-39f0badcc8a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3568a7e9-05c8-47eb-bc39-6eee6f1a204e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22790677-9e6f-4cc6-90a7-598382b238f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e25eaac-8b56-47e0-9d45-77e4d485bc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83df322-1108-4f75-9a4e-9d09bba0b1dc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf305fc-13eb-47fb-836b-679590bf7e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db08f55-ecf0-4000-8dc0-3eb90fc60291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed993f78-6cbc-4207-aeb0-80f6ca85a94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071fd5bb-9288-4483-8f9d-e26e35075491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdd95ec-2ffb-45fa-94d7-466752caab11",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166b1020-5f91-42c6-9d71-7f36325c19fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5424570b-94f7-4d6f-b2fb-6cd767c07134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e680d2-e3bb-4b70-83f2-dc2e9ac17b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55895968-6043-4b1d-add2-3bbc61bb7b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dfd9a6-189d-4d8f-bcef-78cf9c8a03ae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251d503e-39a1-4ba8-9bdc-feaacce7c9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d786dd8-48ba-4ef6-8774-91361a646c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a1d755-a1da-471e-9e63-aa4bc93d82c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6fd5b3-d101-4294-9bd6-7d86a09e5fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e45b27-c9b6-4e85-ad69-370ba1867645",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e779a2-7c0c-4636-9a59-99951992da3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1207381b-f1c9-4359-8e69-84de492cbd23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f0c2f3-c067-40f3-8b52-9edf2d79ea25",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688fa5a2-04b6-4535-831b-4c072c1296a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072e3343-e75f-463e-882c-ecd9bc68ad3f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96ae6cf-9d49-4ed4-b859-79e0489dc35f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f913d9-a34b-4a92-b9b9-8b7e2ddb3220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e8c2e9-bfff-4ef9-af6e-92ce1b17ac93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4866bfa7-8d73-41ae-ac35-ad62bbdf3fa1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37a0afea-a0d4-4328-8d1d-0f76da2a7f27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81b6e587-7734-4892-9e45-e4a0d2472f94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87718b51-8c44-4c4f-93d2-57480c06b54a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a12f0ab-4e2b-4365-8124-ecafd9ff489e"
                    }
                  }
                ]
              },
              {
                "id": "421b3b68-de50-4489-bff0-c6c191626f56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30c99852-5521-43c1-b324-200fff7fcf99",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7470a988-7f99-4f0a-96d6-17a6ab6ea699",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ac113e29-2c41-4629-b36c-c9f68568d0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b567329d-212e-4376-8157-3617585b3486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "021e611f-2185-4162-9fb0-9e1fdc762977"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "169946a7-4efe-4e6f-add6-b63f12502554",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9995eee6-7b10-4a31-bba7-f3d6d04ab685"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ba5c3d1-71d9-43d5-a9b3-2342409371d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d35b31c7-e25d-471c-a1a2-65f6f60530e9"
                    }
                  }
                ]
              },
              {
                "id": "ddbb72ff-c380-4d02-9283-ff91b8d6be72",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2705a729-8590-4963-ae1c-afefad3c7aa3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3033accc-7145-47b3-9e57-30dbdf2255a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "df714d98-3d96-4007-b158-6cef0b8c6522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351f0661-1c25-4882-b7dc-ffb96ab39042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afc9bd9-6160-488d-8efb-c7c3886dcae8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb8d19f1-5101-4b10-971d-07649948c1b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d608d7c-0cb6-4172-ad5c-ebc7f79e25aa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fff6898-13dc-478c-b567-c77fc024f4f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "13070b07-9daa-483e-bc5e-24afcccd4e9c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6646c0fa-f43e-4d3d-9648-0c215e1c34da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd3d95c1-4534-40ad-9575-c681d0277750"
                    }
                  }
                ]
              },
              {
                "id": "b2933cc4-a98a-49a9-9606-6a9308dedc4c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c9fba78-d92b-4c67-a136-34e3d800ff11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1ab98a5a-9a12-4251-823c-5c71ab6d814d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "407fe07e-86a3-4ad0-b9c2-cfe005308b7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6ad44cf-b26d-49b5-9d09-0a0ab221f967"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb12801e-322e-449c-95ae-92a2dc20a934",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e67feadf-467c-4d77-9cbc-e4ad7cf093c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1755de51-3ad6-4e76-8589-335e95de5b13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b10afb1-0e34-4a13-bed8-ee87ebae8167"
            }
          }
        ]
      },
      {
        "id": "e924fcb1-a1f1-489d-9cd1-aa44e02bb632",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "706eb33c-e7b5-4750-99c2-052d0849e41a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7d0f56b-a125-4704-ade6-0e2f488aef02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab0c1d86-d29e-4d22-ad38-825fbaf610f5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f150a55-ba87-4b11-aad3-a5fc0e072a21",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9c24090b-2b9b-4db8-b991-b86ba443fd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b36d877-3a1c-4394-9ba5-5fa83095f185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcab24ed-f72d-4c22-8b6b-aaa7ba56c2bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fdd50fd-798c-4435-bb84-aec0bdd8aa5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3083c63-cbc4-42f4-b656-3759cd06147a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efee73c4-13bc-4155-a323-f27781d72617",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13f3f57c-305a-4dec-a200-ea5689a5810f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c1f949b-498e-4097-9eae-4ed83c49b120",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bd609c35-d1f1-478a-b8a6-b94940137b8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2c0a78d-8d0b-4e5f-8a2d-72d7678ae56d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5601b2b-ec83-4554-b51b-6d3da7e6af6d"
            }
          }
        ]
      },
      {
        "id": "eea5bc38-2a77-460e-9398-da72412f00ca",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "529b90de-3eb3-4041-b106-1c8387e56ce9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a24d321f-c0b1-4928-8a23-6884c492d2e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1377f877-5c8b-4ae2-8815-be9162059d62",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cd7115-ea8a-40b4-9b99-0e144dcf6d6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c6daec0-7728-4f4c-97e5-0fde248e6fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e7789b-b127-4527-a264-4147feb8c22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b320e0f-43d1-4242-92bf-aec616eae67a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1593f76d-eeba-4383-963d-599bfc5a019a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "460767f7-df22-4cf2-ad42-be41d5b262d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39fff0ee-47a7-47a0-86da-c8bc5341c08d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7b01414-5aca-46c7-8627-31dc90ccda14"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75097d6c-a8cc-4983-983c-432c16e30a18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "354680e0-3dea-4271-915d-dd2101def5ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "202bad21-6656-49dd-ae71-ef88e32ec184",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "467161a4-bfed-4363-857e-7b31f7bc0123"
            }
          }
        ]
      },
      {
        "id": "a977a955-3cf6-42b0-957c-300e8cc42e04",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "634bf8be-4d4d-454a-bd14-022a152d4ad9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91d6f9ba-fdda-4346-8eca-c21d4d011b4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8125e9e-a22e-416a-8ca3-e308e7a5a9d2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5c18c6-fda5-46ea-9082-881c95a68388",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "440e74f0-bfb9-451e-a25d-c2442eca6684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c42cfa5-bb03-446a-aa5f-fb251b5ecabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90b86c33-367b-4d1d-b312-64408ad4879e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "683d7d46-0841-4b54-8107-bf58c07fbfcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2914495d-3389-4091-9fc6-945521f70eae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc8a46cd-b2c0-4e02-8e70-f2316d7e9fee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1bf7678-a95d-45e9-94bd-2e913817cd0c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa1e5fa3-f0f7-4798-884d-18fd7f099a9c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42003f3b-0b96-48d3-b563-60f75d8a0ed4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2226bc85-fdb9-439f-8a70-877de2b730ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa85c5bb-1bd0-4930-b82a-4762b229ba89"
            }
          }
        ]
      },
      {
        "id": "debbc8ee-3c65-48e9-af3d-86e695748de5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46bd9796-c3ce-43d6-9138-b8f0d3d5f373",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0246acc-aed3-43c1-ab91-3847ec3222b9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dc868918-c098-4161-b425-437e40956b6e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b19d12a2-726b-4259-94b3-e272a2e6c2c0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea1e65b0-4f20-4f66-a03d-9edef3c187e6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.51587301587298,
      "responseMin": 7,
      "responseMax": 827,
      "responseSd": 89.35573938335347,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1725496957742,
      "completed": 1725496995669
    },
    "executions": [
      {
        "id": "3a652a49-7e61-41b6-b664-aaeca5198bb4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d30b8e8d-bf77-46c4-a40a-ee07f55a7788",
          "httpRequestId": "77306ffd-5a10-4e4d-9dd7-628f830300cf"
        },
        "item": {
          "id": "3a652a49-7e61-41b6-b664-aaeca5198bb4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "eeacd82d-2d5a-40ca-920f-d31f28c3da75",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "29bffa79-a050-46f3-8bc3-c3f1da91cf56",
        "cursor": {
          "ref": "f9f9320d-7ad9-4c21-a199-8d36f7ce4aba",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "48a17177-d270-4e06-b594-4f13841b3374"
        },
        "item": {
          "id": "29bffa79-a050-46f3-8bc3-c3f1da91cf56",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9be589a9-4ab7-4a4a-bbe4-172726c16b7d",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "16063418-9673-44c6-951d-e264f5ee8ec5",
        "cursor": {
          "ref": "ea1a0493-1f98-47cf-bd1b-a82e9352aa20",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ac0bb376-efe0-43b8-838a-a6de35f3b27c"
        },
        "item": {
          "id": "16063418-9673-44c6-951d-e264f5ee8ec5",
          "name": "did_json"
        },
        "response": {
          "id": "127b1b70-5750-4ce1-a533-2f268c85bb7c",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b63fac-cc51-48ea-b828-8948ec0d5b1f",
        "cursor": {
          "ref": "31df4b6a-b4e4-4a4c-857d-1f35a297c9ac",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "68af4963-9510-4210-ab4c-241fd87b0992"
        },
        "item": {
          "id": "b6b63fac-cc51-48ea-b828-8948ec0d5b1f",
          "name": "did:invalid"
        },
        "response": {
          "id": "ae0a040e-f074-4f35-b4ac-082f826fae88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b63fac-cc51-48ea-b828-8948ec0d5b1f",
        "cursor": {
          "ref": "31df4b6a-b4e4-4a4c-857d-1f35a297c9ac",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "68af4963-9510-4210-ab4c-241fd87b0992"
        },
        "item": {
          "id": "b6b63fac-cc51-48ea-b828-8948ec0d5b1f",
          "name": "did:invalid"
        },
        "response": {
          "id": "ae0a040e-f074-4f35-b4ac-082f826fae88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57744a2-0ef7-47fd-8d1d-c8e0a8f8d0f2",
        "cursor": {
          "ref": "b1ac793b-9283-46d6-8574-bce6e6f6d844",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e9f33abd-4243-46b3-a02d-e83c24b9a2ac"
        },
        "item": {
          "id": "f57744a2-0ef7-47fd-8d1d-c8e0a8f8d0f2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7866780f-4beb-4546-a19c-f4a1f25be04a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 145,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc6a640-3234-46b0-93cb-427afdd3f9eb",
        "cursor": {
          "ref": "c4377494-b206-49aa-b6ea-936671b24eae",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d3519929-0e42-4ce8-ba8e-6f57833bb96d"
        },
        "item": {
          "id": "8bc6a640-3234-46b0-93cb-427afdd3f9eb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9bf595c2-e9d0-48b2-8b69-68ecf4fd7456",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbcebf1-eec7-4d9e-9f21-7130acf082ac",
        "cursor": {
          "ref": "e5a739f6-0777-4329-b99e-7339b91c6881",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "06ab3d6b-c904-4a00-a32b-39c4914a0aac"
        },
        "item": {
          "id": "5dbcebf1-eec7-4d9e-9f21-7130acf082ac",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "09085c85-d5ec-42ef-908e-bb43862cb250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f603386c-c09d-4cbb-a773-25a9fe15c7ed",
        "cursor": {
          "ref": "118e0b09-9720-4b55-9249-d5de1d7f856c",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "064f97de-22e5-4305-a35d-c6dd882abf58"
        },
        "item": {
          "id": "f603386c-c09d-4cbb-a773-25a9fe15c7ed",
          "name": "identifiers"
        },
        "response": {
          "id": "528bf670-ae3c-445d-a31c-ff20fe92fe11",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e70bd74-db28-4e5c-9447-e2677e47d452",
        "cursor": {
          "ref": "84f8fc1e-443b-43bf-8478-74e8ac816088",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5997f82a-b898-4a46-af92-f2543b0202de"
        },
        "item": {
          "id": "3e70bd74-db28-4e5c-9447-e2677e47d452",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bd9656cc-1f89-4bb8-9387-2c217d36e177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e5a31500-d203-4e5f-a8c6-b0afca7de265",
        "cursor": {
          "ref": "2781ba50-685d-4a92-b08a-94ef020e7f4d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "646538b2-7c43-4105-945a-ca334d033470"
        },
        "item": {
          "id": "e5a31500-d203-4e5f-a8c6-b0afca7de265",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fd424d69-89c9-4b55-b6f9-4703c5e13d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e481bdcf-e24b-4e85-bced-8fa452764bf3",
        "cursor": {
          "ref": "ca5069c7-5978-4f69-b280-1e3aa006c690",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bca2f9f1-3dd6-4dc9-a742-02b80f18ec2e"
        },
        "item": {
          "id": "e481bdcf-e24b-4e85-bced-8fa452764bf3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "325dd71c-4634-4bb4-ab5b-d50290af5f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "152e0072-f105-4bd6-aa47-20e9fadb41bd",
        "cursor": {
          "ref": "7a1162ca-2aa6-475f-908b-9a509a21a07a",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "51f41d97-95e3-47b2-849f-d408df161a50"
        },
        "item": {
          "id": "152e0072-f105-4bd6-aa47-20e9fadb41bd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a1b919ef-716b-4a48-982d-44fc445673ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6d7309a6-0c38-4f43-9888-a4434ce0c265",
        "cursor": {
          "ref": "312f6298-4904-40f2-b314-0685203f12a0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "79941d26-f720-42b8-bcbf-62bee221d399"
        },
        "item": {
          "id": "6d7309a6-0c38-4f43-9888-a4434ce0c265",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fc66417b-c023-4a89-a23a-af2bf9101011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "e88488b1-ab6c-4c07-92b2-084adbf9d570",
        "cursor": {
          "ref": "433b5e99-868c-4535-af33-5e2ee9c23270",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e188cdfa-6ec6-402e-be1a-99f8bcc6c2bb"
        },
        "item": {
          "id": "e88488b1-ab6c-4c07-92b2-084adbf9d570",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "19480c50-b643-4abd-b16a-6bc513cba4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "19bb1330-1ce3-431f-9944-a4168de39f68",
        "cursor": {
          "ref": "46186c4c-579c-4f66-85da-f8c506eee11f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "63024bc0-db19-4360-af3c-87d6058be5db"
        },
        "item": {
          "id": "19bb1330-1ce3-431f-9944-a4168de39f68",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "25346f43-8c4c-4bd0-adb2-ee9b6a21cc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7a39c545-3623-41be-878b-22b4c4f5ff0c",
        "cursor": {
          "ref": "c7117d7b-795e-4f15-936b-ea3e2581b1e1",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fe409fbf-e911-4663-a7bb-8c2ca610c588"
        },
        "item": {
          "id": "7a39c545-3623-41be-878b-22b4c4f5ff0c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8780377c-7ae9-487f-bb2a-db96079ea6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "709a376a-e926-4022-92f4-c7d2f6928525",
        "cursor": {
          "ref": "49d7a719-7f15-42d6-bb34-202e646ac2e7",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "30d0eb78-845f-4600-970f-ae5066a81392"
        },
        "item": {
          "id": "709a376a-e926-4022-92f4-c7d2f6928525",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "75c8bf47-9fae-4ff4-b0c8-b18f63396c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "652201bf-3dff-4efd-bd91-9bdb6c4124c8",
        "cursor": {
          "ref": "2bc2bcac-7c2a-4288-bc55-e3069d0ff8bf",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f7302d5d-9792-45e1-9187-f192f089bedd"
        },
        "item": {
          "id": "652201bf-3dff-4efd-bd91-9bdb6c4124c8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "261941ac-5781-46ae-9634-d33efee845ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "4d983e9c-04c9-4333-bc24-d4f07aacd442",
        "cursor": {
          "ref": "f8b94bee-f510-42a3-82c7-d28e655009c0",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ea3e774d-7b31-43ce-9f34-0735dcfe439f"
        },
        "item": {
          "id": "4d983e9c-04c9-4333-bc24-d4f07aacd442",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "29e81657-566e-4ba2-a770-0c798e7e82a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a6a472e8-8b80-4bc6-a9be-ab4a91063160",
        "cursor": {
          "ref": "6b1dfe26-93a5-4031-842d-33fdbcf04d60",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e61f2951-c363-4162-8a2c-3a08957273c9"
        },
        "item": {
          "id": "a6a472e8-8b80-4bc6-a9be-ab4a91063160",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1bd61310-80ec-4160-8b1b-bc527ec5dcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2d654810-c8c5-4efd-8d7e-d07de122cc6d",
        "cursor": {
          "ref": "6ac87e04-9ee9-45b2-b9e5-68c037b72cf9",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1cd1ffb2-bc97-4013-ac07-63650e8bd863"
        },
        "item": {
          "id": "2d654810-c8c5-4efd-8d7e-d07de122cc6d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "02b4b2a7-6f18-4c3a-b574-dcf3fc3c0e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1f462370-5d76-4816-9e4f-90a8e825df92",
        "cursor": {
          "ref": "3ebf9b53-f688-4c1a-b3e5-ce0b966808e4",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "72fc0026-111a-4faf-b89e-a5404fbe47c1"
        },
        "item": {
          "id": "1f462370-5d76-4816-9e4f-90a8e825df92",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9b432fb5-aec5-437e-b886-5d51c6ab0698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "00378fe4-ec34-4f64-9d15-e4fa162080fb",
        "cursor": {
          "ref": "61b11e33-59db-44ce-80c6-90b3a27aa937",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7ec846df-20fa-40c4-8e4c-fa1f1a33d1fe"
        },
        "item": {
          "id": "00378fe4-ec34-4f64-9d15-e4fa162080fb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "faddbf7a-4316-438d-9b75-c8b7e4e21106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "78a35198-b972-4c47-8c6c-5a49a1de1ecb",
        "cursor": {
          "ref": "8e2cf41d-d054-4cec-98fd-c68fbd0099db",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dee31a6d-c2ac-4809-8e59-9f25e9dbbe87"
        },
        "item": {
          "id": "78a35198-b972-4c47-8c6c-5a49a1de1ecb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "79b26a6f-a5be-4ada-8327-3505b8481f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c6cbabae-8198-4870-a38e-181f76a82407",
        "cursor": {
          "ref": "cb9787fa-6f79-4704-9c44-35d0a63bb7ff",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "21e0c66f-5b56-45b5-85c5-e8caf2be553e"
        },
        "item": {
          "id": "c6cbabae-8198-4870-a38e-181f76a82407",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "20d3a760-9cba-4b8b-a0ca-f88d6bdff5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "cb508aa4-e98d-4dc6-bc16-a017ac5bfece",
        "cursor": {
          "ref": "9dc1d12b-4800-4336-baa8-d7eef61b8da9",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9c3cb609-7e7e-47a0-b059-eb3d1639ca9e"
        },
        "item": {
          "id": "cb508aa4-e98d-4dc6-bc16-a017ac5bfece",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f278ad68-010d-4579-b8e4-5b5ab793cc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "11e1d7f1-b380-43e8-b3be-2774ca25b1d6",
        "cursor": {
          "ref": "d176ed53-f3f9-4d1b-bea3-2580ac2da518",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "66c7ff7b-859f-4824-9306-aeab03cb6042"
        },
        "item": {
          "id": "11e1d7f1-b380-43e8-b3be-2774ca25b1d6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "26c26616-a67e-41fe-a8e1-8c51c9d24a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "e7367ef7-c95e-4c4d-b1d4-eba069b9aa48",
        "cursor": {
          "ref": "2d58f73f-b366-4e08-850a-341d4bcec6ac",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "25570500-727b-4867-bd2d-5e9603f18b0c"
        },
        "item": {
          "id": "e7367ef7-c95e-4c4d-b1d4-eba069b9aa48",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "261b1067-bf4f-4205-8d18-2b9b1a33885a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "023963ea-c008-4bb7-ac79-f57bde55d186",
        "cursor": {
          "ref": "738e81d9-a8ad-4ec3-9de0-01aeae081592",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5e5d58a4-53b0-4caa-ad22-f63732243102"
        },
        "item": {
          "id": "023963ea-c008-4bb7-ac79-f57bde55d186",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "530bf8b0-4984-42e6-9a2f-780ca4fec4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "1c6c4f54-cf78-4949-bf48-68c0efe4c1f3",
        "cursor": {
          "ref": "1f98f15e-4e32-443b-8335-8cd39e19e266",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "64d8c02e-8787-4b6c-94a6-61ef812d76a7"
        },
        "item": {
          "id": "1c6c4f54-cf78-4949-bf48-68c0efe4c1f3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7d5f6df3-ee2f-475d-8478-fd16c32e0056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ef6d23cc-a042-423a-9a0e-d93d1ca42362",
        "cursor": {
          "ref": "55d6f15a-ab03-449c-8a9c-ac19e292ba5c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5243074d-2308-46be-8e3a-28c2a7f2e601"
        },
        "item": {
          "id": "ef6d23cc-a042-423a-9a0e-d93d1ca42362",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8ca8c98f-de88-4854-b77b-bd41e568f511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "4338bc33-4571-470d-be3d-a4d1c9b3de9f",
        "cursor": {
          "ref": "52c90a64-706c-4bf2-827c-47557199ccd1",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "430d5b98-7dd0-4ba9-8e0c-56148f391b67"
        },
        "item": {
          "id": "4338bc33-4571-470d-be3d-a4d1c9b3de9f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1965ee9a-5f47-4d17-b392-02149393cca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0bf1c9e2-0040-4be1-9d63-a56e2aa8b7dc",
        "cursor": {
          "ref": "84e52517-91b1-456f-b361-123b19fe554e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9f207089-127d-4262-b4aa-f2bf77cf19fa"
        },
        "item": {
          "id": "0bf1c9e2-0040-4be1-9d63-a56e2aa8b7dc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "18366d77-c909-4814-aa19-3593f65d4ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "855f8cde-812b-4d24-8be8-c1112bb64674",
        "cursor": {
          "ref": "2b4cd280-50f7-4bfa-8cdf-f7e2fc4d3651",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1bd8f2e6-f148-4a65-a13e-3ef4d17d2a67"
        },
        "item": {
          "id": "855f8cde-812b-4d24-8be8-c1112bb64674",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f0148d94-d38b-4b89-8824-9ef5f3009289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "649f7010-34e2-475d-8ff5-4e4a7c8bdb2e",
        "cursor": {
          "ref": "dc9e61dd-fdf3-41dc-8ab4-148270d6423f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8c1afd76-b3df-478d-af6b-c817285bd5d7"
        },
        "item": {
          "id": "649f7010-34e2-475d-8ff5-4e4a7c8bdb2e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7b906e69-2d8a-49d7-bf88-fa13c16036b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "378c32b7-3ac1-4a3d-9e95-d3b3feeeb197",
        "cursor": {
          "ref": "5845e78f-5c07-4d2d-8720-8051f6b089b2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "717cb188-1e3a-4573-99af-527de8a3fc83"
        },
        "item": {
          "id": "378c32b7-3ac1-4a3d-9e95-d3b3feeeb197",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "08c1aa90-6a0a-47f4-b6cf-9df50baae5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "38a4c0cd-2be4-4f2f-ba89-3c18dae8de53",
        "cursor": {
          "ref": "e57b3f55-b898-4309-931f-1426622d3567",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "771ba470-bb01-4a82-a05e-c76bd3409c66"
        },
        "item": {
          "id": "38a4c0cd-2be4-4f2f-ba89-3c18dae8de53",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7211f621-4330-474a-869d-bad5fbb5686d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "82ddc94a-3407-4190-a7f2-2de94b2a5a12",
        "cursor": {
          "ref": "4acbf66c-50a7-4785-89f9-f7f13e0a2bb3",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "37e45f21-fa49-407b-87e1-cd311dcb885a"
        },
        "item": {
          "id": "82ddc94a-3407-4190-a7f2-2de94b2a5a12",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0703d0de-7844-453c-b159-f0ddd3c9c7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6b27ea21-cc02-41bb-950f-55ed9e210a4d",
        "cursor": {
          "ref": "e0711058-3c50-4d1c-a61c-c404406d6a63",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dd263bb2-cbb8-4e99-a45b-b0db8b213e81"
        },
        "item": {
          "id": "6b27ea21-cc02-41bb-950f-55ed9e210a4d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0b260efb-713e-4363-99b5-f39d78e9ed43",
          "status": "Created",
          "code": 201,
          "responseTime": 827,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5ccdb23a-76e3-4cec-9330-0ba5f0535534",
        "cursor": {
          "ref": "6ad06bed-4bed-4fe1-8965-42fd1c3f2726",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3ad11d91-b27e-45d6-88e1-a4828dee3fc6"
        },
        "item": {
          "id": "5ccdb23a-76e3-4cec-9330-0ba5f0535534",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "832e2c3e-5e8b-4f33-804d-ceb2a406af42",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "08c27bf7-07cd-41f7-882d-71af74ae9c2b",
        "cursor": {
          "ref": "ab849ed7-cd3e-4522-b8b2-bafce36cec75",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ecd8cda9-8c25-499f-9b56-9a367d4e5ef2"
        },
        "item": {
          "id": "08c27bf7-07cd-41f7-882d-71af74ae9c2b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d608fc18-1f76-41d9-b442-69f6bb5e617b",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d9c75836-7463-427d-8fb7-121b533ac25e",
        "cursor": {
          "ref": "0389c0ee-23a8-43d4-813d-4a1e1048de86",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0bdce177-dc97-423a-9c1b-f4bc03c38b46"
        },
        "item": {
          "id": "d9c75836-7463-427d-8fb7-121b533ac25e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bafd4bd6-9c5c-4d52-9b5c-2d5bc409078c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "160de9ba-5be9-49d8-acb8-b3178cbea0f0",
        "cursor": {
          "ref": "40d40ba8-9bfb-4494-9b4b-64238a201977",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e4a910b6-93ab-4712-a69a-d56d208b226a"
        },
        "item": {
          "id": "160de9ba-5be9-49d8-acb8-b3178cbea0f0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "78937ba6-34fd-43cc-ae1d-53c671dc0d7f",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2fdf7a34-017e-454d-b028-26fd3074e906",
        "cursor": {
          "ref": "637bbfe5-51fd-4028-ba11-d77b1f9a77b1",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "09437308-a43d-44a3-bdca-bc5a3281bda4"
        },
        "item": {
          "id": "2fdf7a34-017e-454d-b028-26fd3074e906",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "60f993cc-0a36-4e04-92f3-43e5c04ded87",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ae627ed5-2429-48f0-b164-456cc9e1fae8",
        "cursor": {
          "ref": "e72b17ee-6580-4147-99f1-6ecc6e95ffcd",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cd18bd89-235a-4eca-a930-e59711d8bd93"
        },
        "item": {
          "id": "ae627ed5-2429-48f0-b164-456cc9e1fae8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a529668f-2161-47cc-81c4-90b2aa85b6b9",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0e84e795-ceae-485f-9df8-3f4ffb2e69e0",
        "cursor": {
          "ref": "890cd1d5-2bee-4fde-8b1d-fb26d746a85d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a712310e-64e9-46b1-9bdd-f48226760235"
        },
        "item": {
          "id": "0e84e795-ceae-485f-9df8-3f4ffb2e69e0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "875251e2-02b5-41ff-a10e-e01f4e2fd93a",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "26d207cb-6b3d-4117-bc65-4db7e68a5a51",
        "cursor": {
          "ref": "2d5fd36f-77a2-47a7-b48f-62c3615afdd5",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "65a37a0d-96aa-4c55-9d8b-a32ecd051b43"
        },
        "item": {
          "id": "26d207cb-6b3d-4117-bc65-4db7e68a5a51",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "af209641-5672-48f5-910d-9cc2cf5789ac",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5d199359-4797-4055-a6e6-d271a19c4777",
        "cursor": {
          "ref": "845baa9d-95d4-493b-a2fa-9c5d15c6fbf3",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "68f0225a-209b-4ed9-be84-fa0e70bd484a"
        },
        "item": {
          "id": "5d199359-4797-4055-a6e6-d271a19c4777",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1fa962c4-9c7e-432e-a634-37e26641f31b",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "25a011b2-d5a8-4d31-9b17-da3935371d6d",
        "cursor": {
          "ref": "045bce87-5747-45d4-b715-443f19c69811",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9ce0f8d-c070-4e2f-ab3a-912e5b54216f"
        },
        "item": {
          "id": "25a011b2-d5a8-4d31-9b17-da3935371d6d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "732be607-2a78-453b-bf22-37c113543ed2",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8dfcd41c-1efd-4a87-9725-dafa3ca6982d",
        "cursor": {
          "ref": "887b9622-3183-4566-a767-b9f4291bdf79",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d86037b5-fcc9-4091-a832-ad8f64d719c7"
        },
        "item": {
          "id": "8dfcd41c-1efd-4a87-9725-dafa3ca6982d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "785bee36-d862-4ef7-b178-475c787aa9bf",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5d071cfe-b715-4838-b19a-d59af7de2138",
        "cursor": {
          "ref": "aa8ba3b9-4a70-4738-abe2-0b3a2ad3d53b",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c4cc134d-a5e9-4baa-a37c-e2f3655aa6bd"
        },
        "item": {
          "id": "5d071cfe-b715-4838-b19a-d59af7de2138",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4230f0d6-9f35-4532-b525-c6abd6b57c5b",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5afd0859-423a-4d82-8c09-c2fa424b0517",
        "cursor": {
          "ref": "4e092007-03e7-41c0-9d57-fa5bcaa26ed4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2b595125-b6aa-4d74-9891-15a74a1172b0"
        },
        "item": {
          "id": "5afd0859-423a-4d82-8c09-c2fa424b0517",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d123da1e-e242-4df9-85ba-8024f295fc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ff22734a-7159-4895-9944-2a000e7c54f9",
        "cursor": {
          "ref": "ed25b03e-56ef-4a41-8ddd-53e00ba5ccef",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0f320def-79ec-461c-9471-c413906daabc"
        },
        "item": {
          "id": "ff22734a-7159-4895-9944-2a000e7c54f9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "38aa43f5-bc33-403d-a08f-2f0c757da51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "18952ea2-4f0a-4fd5-a05b-e78d57bc9f7c",
        "cursor": {
          "ref": "ed994a48-d404-4f3a-83f4-b52059898e3a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c5506e8b-adbc-4b19-bf9e-e3ba87203aad"
        },
        "item": {
          "id": "18952ea2-4f0a-4fd5-a05b-e78d57bc9f7c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "85a0560d-7fb8-4326-a8a2-46bb3f842073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "033c3ef1-10d0-4828-b4da-713c1b2fbcc7",
        "cursor": {
          "ref": "f34159f2-b91e-4d80-a13f-2b1e74028f99",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f0ae51e9-cac3-451d-8de6-1c0e6ef7f6a8"
        },
        "item": {
          "id": "033c3ef1-10d0-4828-b4da-713c1b2fbcc7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eeb906b8-6fdc-44ea-a341-12edb395bb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e0679dd5-704c-4b24-8fd0-bfaf1b136a1d",
        "cursor": {
          "ref": "de978d24-7bdc-4731-84b5-9e85777dcb8e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "250142b4-35a0-462c-8c5f-2913484d9394"
        },
        "item": {
          "id": "e0679dd5-704c-4b24-8fd0-bfaf1b136a1d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "00992d0e-dac1-4da5-b0dd-e4fd0fad6b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "d0d9a48b-7de5-4690-8871-e46b99d11d27",
        "cursor": {
          "ref": "2392adcc-f854-4caf-86f7-2d84a6cdb7af",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "82ba14a8-c826-4986-b3b8-0b7a8b6b51df"
        },
        "item": {
          "id": "d0d9a48b-7de5-4690-8871-e46b99d11d27",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "eb88f7e6-7c01-4e32-a5f2-c8a51ec92013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c648bcfd-fe97-4a0b-9575-ab5e73c00c34",
        "cursor": {
          "ref": "87f169e4-bc63-4e13-8284-543072082145",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e0e81f61-68ee-40b8-94cc-74e5764a7346"
        },
        "item": {
          "id": "c648bcfd-fe97-4a0b-9575-ab5e73c00c34",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8a8475f2-c7d5-4d10-9863-07e2f2ed3828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "4d652386-d0f1-4746-bcc4-acb79e49b4a3",
        "cursor": {
          "ref": "61206d59-c6c2-4cc6-a1cb-fd9597e1ab2f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c1b8ee49-2d17-4c2c-9cfb-2a2804bdde28"
        },
        "item": {
          "id": "4d652386-d0f1-4746-bcc4-acb79e49b4a3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1cab18aa-5676-4a88-98b7-c1aa97178a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "70627adf-df7e-4c20-9cd9-88130903673d",
        "cursor": {
          "ref": "06378bc6-e616-4ebe-a59a-b8f7b6dab81d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "10dd9dcb-60de-4b03-8156-305c20f96a78"
        },
        "item": {
          "id": "70627adf-df7e-4c20-9cd9-88130903673d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "43e9a019-5173-4333-b6df-2cc47a698632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "36d5eced-c8db-4c87-a1d4-1d996a416356",
        "cursor": {
          "ref": "0c02acfd-3184-41b0-948d-b9cd6c9201a4",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "63d935cf-8184-4cbb-94bd-5276a358e422"
        },
        "item": {
          "id": "36d5eced-c8db-4c87-a1d4-1d996a416356",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0acf0154-df88-4183-a64d-7e6df01ffe00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ebe6e6fa-073d-4ec3-b78b-7088e603db07",
        "cursor": {
          "ref": "0de0f017-c863-4f5d-999a-d48159be1e5b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d6bf4a03-4c62-49f3-b5d8-383164f3cf7b"
        },
        "item": {
          "id": "ebe6e6fa-073d-4ec3-b78b-7088e603db07",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "30dc7085-6a57-47c8-881f-3f82c6790ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "151d4f97-0f55-4b8e-9d4d-1d2b2fb2761f",
        "cursor": {
          "ref": "849eb79d-6070-4005-a929-83c9808a1923",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b20a1b28-fb51-48b9-aa48-388bf20bf98c"
        },
        "item": {
          "id": "151d4f97-0f55-4b8e-9d4d-1d2b2fb2761f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "11a8b22f-f489-4f1f-a2a4-3f3a9bf927e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "8e6005d9-1f76-43bf-85c0-b2903fe2fff1",
        "cursor": {
          "ref": "c1c51dff-2b0e-448b-b9ab-e40f29348207",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e189db2b-3c03-4914-beef-e377f1ffc260"
        },
        "item": {
          "id": "8e6005d9-1f76-43bf-85c0-b2903fe2fff1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "14ba6c28-c34f-490a-bfef-0dbe33666b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "f0b8df0c-6b9b-4649-91a0-5a63bd2f618a",
        "cursor": {
          "ref": "1788c8da-0267-42bf-897f-518f069dd531",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "db70b205-a90f-49a8-91f2-2ae9e8796164"
        },
        "item": {
          "id": "f0b8df0c-6b9b-4649-91a0-5a63bd2f618a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "582dfa59-88b8-4493-819d-b3858db9d40a",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "cf973bdb-388f-4108-9d2b-106533b0a705",
        "cursor": {
          "ref": "371acddd-9e20-4026-8b20-10e646eafe30",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a041d62f-5945-42ef-b483-3d201a6e0663"
        },
        "item": {
          "id": "cf973bdb-388f-4108-9d2b-106533b0a705",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0de54d1d-8038-4003-9f77-069665f9ef84",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4e867f94-077b-4fe3-881b-4a16f4b03db8",
        "cursor": {
          "ref": "6c7c3ab2-ef00-4204-92b7-7916d0bf1149",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b7bfc4dc-8e1b-481c-b088-ecaef52e46df"
        },
        "item": {
          "id": "4e867f94-077b-4fe3-881b-4a16f4b03db8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d9d65667-5262-4e37-8286-2df98c0be0c7",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a6b3dba5-f6ad-4821-a8d3-4badf6109bdb",
        "cursor": {
          "ref": "372bf954-3c78-4640-870d-ec99c1b9c2ab",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "062ab820-b81b-4bce-afc1-da856581c448"
        },
        "item": {
          "id": "a6b3dba5-f6ad-4821-a8d3-4badf6109bdb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1c014e86-3b1c-48ca-bf14-2f15e6ec1b22",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "63cc6683-7576-491e-bbcb-c88fb4319159",
        "cursor": {
          "ref": "18a37340-8242-4aea-93b6-facc8de0552a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e9535742-1558-4cbd-b0f2-bf59418b43f5"
        },
        "item": {
          "id": "63cc6683-7576-491e-bbcb-c88fb4319159",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7e188854-d23d-4917-9711-643702b5ff41",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "77daf448-25b6-4379-b45b-bf6f6e5a6192",
        "cursor": {
          "ref": "c5701bfd-2da3-42c6-89f3-d3ab01beacef",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8ac1286b-8a46-4fc0-af36-2843d245aeeb"
        },
        "item": {
          "id": "77daf448-25b6-4379-b45b-bf6f6e5a6192",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3c14d10c-4304-4b06-a32a-95e633615830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9b710ec9-73c7-4737-9ce2-42d2f1082541",
        "cursor": {
          "ref": "3db2b2b9-87d4-4330-85e0-a594c108f956",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "45adffcf-7f3c-4775-999e-af09e341cac7"
        },
        "item": {
          "id": "9b710ec9-73c7-4737-9ce2-42d2f1082541",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fb9072e7-9c12-48a5-babb-94ec1567e70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "740d80bb-fa7d-4d68-b751-c7dae016a020",
        "cursor": {
          "ref": "4657ff5d-687c-425c-97a3-50cb56d8952d",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ad3fb7b1-1f0b-4930-846b-af92ec47d9c7"
        },
        "item": {
          "id": "740d80bb-fa7d-4d68-b751-c7dae016a020",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "07788879-ca59-464c-8cac-948423419daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "fe83499e-a1de-4f04-9515-89bedd2249dc",
        "cursor": {
          "ref": "ffe23ff8-8b28-4ad0-98b6-221693c52779",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "17cf760f-056f-4bb7-bcd4-15cdbde41e7d"
        },
        "item": {
          "id": "fe83499e-a1de-4f04-9515-89bedd2249dc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8b8ef20c-e0a4-426f-ab67-ea6d5635638e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "a68cd921-b563-416c-b49c-62fdfb6cbd81",
        "cursor": {
          "ref": "c0025b83-c09b-4a7e-a213-8001b0eec5d5",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c022716f-5a44-4996-b8a1-377ffddf31be"
        },
        "item": {
          "id": "a68cd921-b563-416c-b49c-62fdfb6cbd81",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "12cbe56c-8ae0-425a-b1bc-13078c7aebbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "1118171d-73aa-424f-864e-90b2157afa6e",
        "cursor": {
          "ref": "3a794d28-2a45-46cd-83bc-1012c0a92e1c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b117c799-7188-4920-898f-e9a15e38ea27"
        },
        "item": {
          "id": "1118171d-73aa-424f-864e-90b2157afa6e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "db1de8cf-84b2-4721-aade-482d632ebdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "42ae8c77-6c76-40eb-86c1-1827b5b20ccb",
        "cursor": {
          "ref": "efc8c536-30ee-49e1-964b-2f4260402030",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2c19b586-a9a2-4ec6-9b42-a372c5bc8ec5"
        },
        "item": {
          "id": "42ae8c77-6c76-40eb-86c1-1827b5b20ccb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6a6a335b-6c7a-443d-9c85-fa9ad63dca63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "1d6183ac-0f53-4e57-90b3-350e1fa0663d",
        "cursor": {
          "ref": "4b96bb05-4572-4f81-9d79-4197b3a50568",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "69e52d16-1c84-422d-a763-66a412e0af1f"
        },
        "item": {
          "id": "1d6183ac-0f53-4e57-90b3-350e1fa0663d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a5ab5c5e-d8f6-4680-8ae1-ad8bacffdb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "43e81c2f-a47b-4869-9c87-be84f6cc412b",
        "cursor": {
          "ref": "7da5e309-b61a-411f-bbfe-c6c373d7a81d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ff664d0a-97c5-485b-989e-9288febec8d3"
        },
        "item": {
          "id": "43e81c2f-a47b-4869-9c87-be84f6cc412b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4e1aa7d1-2c79-4109-83c1-73503f944938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "a7566c2d-877d-4aa8-a1cf-be694598d87f",
        "cursor": {
          "ref": "ad3c34a9-827e-4053-83a4-682ed7382d42",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f4735007-1748-4fb8-9b67-e1cd6416c251"
        },
        "item": {
          "id": "a7566c2d-877d-4aa8-a1cf-be694598d87f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "19455977-7c91-42d9-91ca-62b63ed9b36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "34d0df32-d250-4d4c-b5a4-cf093b755bc4",
        "cursor": {
          "ref": "18ef2cf2-4eff-4d52-86cb-cc8ca282431a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "12f646d2-c0ee-437a-b796-e05b86675862"
        },
        "item": {
          "id": "34d0df32-d250-4d4c-b5a4-cf093b755bc4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d1560f70-2c51-4397-98f9-9f90b17dcb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "59161796-9222-4879-8c58-e1eaccbaef85",
        "cursor": {
          "ref": "563a307a-3d64-4542-891b-80151f98fa66",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d43674cc-e68d-48d9-a47d-6a67fbde12b5"
        },
        "item": {
          "id": "59161796-9222-4879-8c58-e1eaccbaef85",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ada374c0-82f5-4705-8117-0d86f9ed68e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "9442191a-29dd-41a5-b1aa-48464a2c81a0",
        "cursor": {
          "ref": "fbe404fa-d358-4d68-9ce2-376a4f82b739",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "62e88ead-b5df-46c2-ad60-6e1bbb58e712"
        },
        "item": {
          "id": "9442191a-29dd-41a5-b1aa-48464a2c81a0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "039c49f4-a37d-44e7-bef7-ca727d3137d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "600b1bea-2914-4914-8af8-46e2a3475178",
        "cursor": {
          "ref": "5465c7e9-924f-4c51-955b-c2fa5aa9a0b5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3a80f8cf-62a0-4959-a199-a66509f4b418"
        },
        "item": {
          "id": "600b1bea-2914-4914-8af8-46e2a3475178",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "758311d3-04f3-4845-9b2e-5a87120c5b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "0d2a6fc5-f2cf-4a14-8994-9350ae92ba46",
        "cursor": {
          "ref": "d3468f0d-b073-4ba0-879c-6dd4d0ca4fdc",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c10291ff-6d4d-4efa-816b-1e547cb49d40"
        },
        "item": {
          "id": "0d2a6fc5-f2cf-4a14-8994-9350ae92ba46",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a6045a9b-dbd2-4454-a324-4f6de4fc3826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "d553e0f6-f853-4bca-877f-96838652dd1c",
        "cursor": {
          "ref": "4e6743cb-a701-4c20-b321-4874902242e4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6d0160f7-6946-49fe-925a-a6e90367c769"
        },
        "item": {
          "id": "d553e0f6-f853-4bca-877f-96838652dd1c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8e5be7dd-4d5c-44a9-a950-337a97749ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "299a13ef-d7d8-4b25-9b2e-5dbdaa438bd0",
        "cursor": {
          "ref": "723e7282-b31d-499c-9073-11d865f14137",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3739d717-4995-4de7-9f05-84b942aafea0"
        },
        "item": {
          "id": "299a13ef-d7d8-4b25-9b2e-5dbdaa438bd0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0a24a5c6-06bd-4e8d-911f-da1cf4649e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "6c7dd874-fe66-4095-8d87-6af15583885f",
        "cursor": {
          "ref": "4cd2cddd-633f-4926-8abb-7858ae87431f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8e63043e-52c7-4615-8dc8-c79cf0466bc1"
        },
        "item": {
          "id": "6c7dd874-fe66-4095-8d87-6af15583885f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "78e916e7-788e-4928-916b-256d896ce2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "99d88040-ece5-4987-bbb2-31c524ff572c",
        "cursor": {
          "ref": "17646aca-3b11-4a7a-a229-d0dbd5c2b0a5",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "33cacaa4-a60b-4ad2-b319-d616ae100c8f"
        },
        "item": {
          "id": "99d88040-ece5-4987-bbb2-31c524ff572c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "da37d029-018d-49d1-8aa9-2271218bc15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b1c51abb-215f-45b2-a889-5d021d1a4b3a",
        "cursor": {
          "ref": "8c553ce3-df34-43fe-9ad1-4bd624099587",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7f171916-69d9-48da-82c4-90b6c02b7aad"
        },
        "item": {
          "id": "b1c51abb-215f-45b2-a889-5d021d1a4b3a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d31daf44-a73b-4df1-97d0-66ab34f8a3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c52c3f11-336e-4208-9c7c-123b402cb105",
        "cursor": {
          "ref": "9213e6eb-2b9d-4b2a-8a2e-210d304d6424",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "24457457-e467-4ae7-8b1a-7164b8411905"
        },
        "item": {
          "id": "c52c3f11-336e-4208-9c7c-123b402cb105",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "47000b49-8c1d-48e1-b9a1-64905d33e469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "86bd3791-3fc5-47f8-9dce-b87f33155f60",
        "cursor": {
          "ref": "b5ac8a1b-aea9-4d32-b54d-8fdba503222f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e81d24df-391d-44a7-ba72-5f352d34769a"
        },
        "item": {
          "id": "86bd3791-3fc5-47f8-9dce-b87f33155f60",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "281f65d9-5844-49f1-a2ca-9d35c203a61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7547454f-650b-472f-b123-3ef1b6a87cd7",
        "cursor": {
          "ref": "2c4e29a8-e661-4ff5-8f19-ff8d7f086e39",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "faf84a81-1489-42a3-bc41-2311687cd379"
        },
        "item": {
          "id": "7547454f-650b-472f-b123-3ef1b6a87cd7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e7d587e0-cd12-49a6-b16c-1eca59672d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "5c0d563d-8615-4346-85c4-b86ec45974d0",
        "cursor": {
          "ref": "423be04e-d8b6-430e-b910-6f6cd70ec8b2",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63d34b8d-caf3-426a-ad07-ebc6b11e1f88"
        },
        "item": {
          "id": "5c0d563d-8615-4346-85c4-b86ec45974d0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "68589891-0f5d-463b-b137-88f461e6e4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "060c9843-0221-45ed-bdb9-da711eebf544",
        "cursor": {
          "ref": "b79eb5ca-2da5-4574-b143-1ba952ff2cb0",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "992ea74a-ace9-4be2-9bc3-a5e832024f73"
        },
        "item": {
          "id": "060c9843-0221-45ed-bdb9-da711eebf544",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e3d234a0-57cb-42bb-a1ec-fe1b5a03ca8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "9d091bae-30ec-4ccf-9a01-26922e42fdab",
        "cursor": {
          "ref": "75c70bc5-d4c2-4326-9128-99a4d586f68c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aca410f0-6cb9-4112-9cbb-34d5ba8f022d"
        },
        "item": {
          "id": "9d091bae-30ec-4ccf-9a01-26922e42fdab",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7f4d08c1-0285-4eaa-be04-fc9b84787747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "944d2a23-3142-4e44-9630-77e0e64be2c6",
        "cursor": {
          "ref": "18a97aa5-5062-42ee-9c2e-a10f6acffa87",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "165c8bf4-f27f-4625-84ee-a738970a9436"
        },
        "item": {
          "id": "944d2a23-3142-4e44-9630-77e0e64be2c6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fdc11247-d974-4a8f-8ff2-b4ef42e5f90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "79571e1d-db77-47e5-aeed-5abf6556968e",
        "cursor": {
          "ref": "1e6a2ef5-2319-4d18-a820-d2ce7b013f61",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9c39f1f0-b2f5-4048-b193-d82eb8ecd536"
        },
        "item": {
          "id": "79571e1d-db77-47e5-aeed-5abf6556968e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2526fa99-8b80-436f-9b6b-b6f297470369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "0986a41b-d950-48f1-8e9d-05c4508a0208",
        "cursor": {
          "ref": "caad0c8d-0f64-4f1f-9625-939bb790046c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "200df85e-13b9-48c9-8799-6e89c484e31b"
        },
        "item": {
          "id": "0986a41b-d950-48f1-8e9d-05c4508a0208",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "80f0b670-259c-4378-ba4b-7ead6d697291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3f965b88-dd5b-40f1-b6d7-54846d1998c2",
        "cursor": {
          "ref": "f6381215-401c-4cd4-a70e-17e2a24812a8",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a88020a8-7811-4927-8078-a8cc73ff60d6"
        },
        "item": {
          "id": "3f965b88-dd5b-40f1-b6d7-54846d1998c2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7b12cb7f-d393-4aac-91bb-5ee2e4032064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "7bbd4b6a-2dfe-4289-9816-8c6a2e2df07f",
        "cursor": {
          "ref": "57cae3da-2060-4964-8bf5-4938484790f7",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ef372e7b-b7d5-44b3-a985-40c3788a9166"
        },
        "item": {
          "id": "7bbd4b6a-2dfe-4289-9816-8c6a2e2df07f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "84b679ad-b625-4ad4-88c6-d66f78bcf178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f1d2b4f4-dbe9-418c-b43d-82a788b6273f",
        "cursor": {
          "ref": "2b1f91a7-a620-44c9-aa8e-9efd13f89ff9",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bc71519f-c97d-4638-9787-a8c8e731fdca"
        },
        "item": {
          "id": "f1d2b4f4-dbe9-418c-b43d-82a788b6273f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4481a931-f531-4fe9-a6f2-e469d0151673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266e5228-9b30-476e-b109-c7ed7fdeba26",
        "cursor": {
          "ref": "58487e70-7e9b-419f-aac2-5fa9747e0d2b",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ab4b64de-b70b-473d-9f58-03db858a21b4"
        },
        "item": {
          "id": "266e5228-9b30-476e-b109-c7ed7fdeba26",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "68493c77-ca26-4525-afb8-d7ea898b1351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c60270b3-cdd3-47e9-9288-b31af7de3302",
        "cursor": {
          "ref": "0b3a7713-c963-4640-8b43-19629b4422cf",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2fcb4664-f044-47ca-9eb1-25ad31ed3a2b"
        },
        "item": {
          "id": "c60270b3-cdd3-47e9-9288-b31af7de3302",
          "name": "credentials_issue"
        },
        "response": {
          "id": "001417f6-3c99-4ebf-aa11-adbce4e2674c",
          "status": "Created",
          "code": 201,
          "responseTime": 432,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c139b6-e968-4da9-8c3f-82f4cd96e4d2",
        "cursor": {
          "ref": "db387c3a-a564-4e55-98b1-61afd80d6a5c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "51dd4140-9eb9-4ed7-a66c-268e35688af5"
        },
        "item": {
          "id": "d0c139b6-e968-4da9-8c3f-82f4cd96e4d2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7d7f4fa0-a00d-4fea-97f3-c81f23b721cd",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30c1450-942c-4bde-ad04-5d96abb51f22",
        "cursor": {
          "ref": "c36d729c-df0c-4afb-b506-3c8100eb3bd1",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e94c64d5-7ee4-4102-aaa2-c6d79fe7a992"
        },
        "item": {
          "id": "b30c1450-942c-4bde-ad04-5d96abb51f22",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f2bc5dd5-aaaa-4f83-ba58-506fe62608b5",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfc7fcc-25cd-422e-a2c1-346a26e9a802",
        "cursor": {
          "ref": "b1d91fb5-98d7-4b39-8d28-fe938715eaa9",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1d90c5db-b272-4739-8f2b-dc123d28b04a"
        },
        "item": {
          "id": "0cfc7fcc-25cd-422e-a2c1-346a26e9a802",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "84e34ea8-bae0-47df-816c-6e73120ad3c5",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a2baeb-c3e7-4dd2-b559-aa2444b22e6c",
        "cursor": {
          "ref": "293d553c-23db-4b2c-b364-bf6cff1853e0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5a6e45d3-d350-4aeb-87ec-05d620ae4dcc"
        },
        "item": {
          "id": "c8a2baeb-c3e7-4dd2-b559-aa2444b22e6c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7a556f6b-3f54-4338-9fa3-1e0b3c3de62d",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-09-05T00:42:57.210Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-09-05T00:42:57.210Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c799a0d6-2f17-4427-b8ff-08ef1724ed31",
        "cursor": {
          "ref": "b2d96f90-4e74-4c3e-ab87-cbaef60db58f",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3ab41885-b5ea-46f0-a2f5-3832fd3ec839"
        },
        "item": {
          "id": "c799a0d6-2f17-4427-b8ff-08ef1724ed31",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f46403f5-21f8-41f6-9d32-ff4a4a017c57",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c030e2a0-78d9-47b2-b571-5f5e73864652",
        "cursor": {
          "ref": "e4abbd48-1a43-4fa8-8e2f-0d41380b5661",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b4647e86-fe91-47bc-9eb4-9d8bf3db6804"
        },
        "item": {
          "id": "c030e2a0-78d9-47b2-b571-5f5e73864652",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ee8f1a11-dd27-42bf-84c2-85c31485b5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "1f0b4066-e1e0-408e-be64-e7f5a963363a",
        "cursor": {
          "ref": "67ed4b69-f18a-4d3d-8fa2-e68f4f33ee64",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3c9626c8-d46f-4b88-a02b-a0063534cdfa"
        },
        "item": {
          "id": "1f0b4066-e1e0-408e-be64-e7f5a963363a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "80cde60e-de8d-44e1-8924-aa5157b0d337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ef804679-1188-4427-b417-21c5242d82b3",
        "cursor": {
          "ref": "99bf8dca-7234-4092-93cb-d424491943a6",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5ac720b3-26fa-457c-87d6-574dbc079523"
        },
        "item": {
          "id": "ef804679-1188-4427-b417-21c5242d82b3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "52c1c7f4-7b90-4f05-9728-9d036d3bf99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9ded8f78-4c9a-4759-8451-bf04f462cc78",
        "cursor": {
          "ref": "c1fef80a-4ef1-4d87-814a-b62d18f5e378",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "941c44eb-1aa2-409e-992e-70366e32a935"
        },
        "item": {
          "id": "9ded8f78-4c9a-4759-8451-bf04f462cc78",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6e117f1b-dedc-4e5e-b0ba-e37d557e3cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a0d35775-8c97-42c9-8764-7d5b97069f79",
        "cursor": {
          "ref": "e994e3b1-00e7-456c-8b19-7e1a0c7cdfcb",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1581b6d4-98ad-4eef-ab44-bcd94c694234"
        },
        "item": {
          "id": "a0d35775-8c97-42c9-8764-7d5b97069f79",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "859ec031-1c8c-4340-b78c-0774e0fd9a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "27249817-445e-4daa-8d0a-3043324904f1",
        "cursor": {
          "ref": "b8611dbe-dbb3-4935-9629-728a22dbc0bc",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "95ff2dc2-44f4-4ff0-9c9d-1a24e6d7b06c"
        },
        "item": {
          "id": "27249817-445e-4daa-8d0a-3043324904f1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dfb5ca5b-a9a5-4401-82eb-e71147ce1008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "dc79c40f-e7f5-4a52-a314-6f76373bfecf",
        "cursor": {
          "ref": "c3809a9b-c3ac-4dd3-ba13-5ca47479ef02",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2100c04f-03a5-454f-8cd5-c34d5008a5e7"
        },
        "item": {
          "id": "dc79c40f-e7f5-4a52-a314-6f76373bfecf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f8d95aaa-b379-4a9f-8c36-0914a5628e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a70ab854-fd9f-4865-98f1-cc3a6594fade",
        "cursor": {
          "ref": "f9963832-91b3-42d9-b8df-b965632f6713",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "83ec52ef-0412-4086-afe8-fe1f779b9149"
        },
        "item": {
          "id": "a70ab854-fd9f-4865-98f1-cc3a6594fade",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "55df411b-d462-4192-b531-653edf758469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "cafe0a5e-5510-4198-b698-376024335af8",
        "cursor": {
          "ref": "f7a34d84-0c7c-4520-a399-d94b4f142b68",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "526267d2-6627-4f70-90b0-867f5811a241"
        },
        "item": {
          "id": "cafe0a5e-5510-4198-b698-376024335af8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a4ded10e-c22d-424e-b906-91ab2ef7d3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1aefbf7f-133f-474c-a689-1e3606791194",
        "cursor": {
          "ref": "c13572f2-8743-4ebe-996d-8b883e4b033b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a385aa17-abd1-4700-8e4b-c854392080ef"
        },
        "item": {
          "id": "1aefbf7f-133f-474c-a689-1e3606791194",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8e1c00d7-78a1-4dd1-a646-96d452df078d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "4f63091d-531f-4e2c-be50-57ff9ea2826b",
        "cursor": {
          "ref": "fd353a48-554d-4640-9db3-a50c386e712c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "74c295cf-ad7a-4cac-aa1c-e22b17d00566"
        },
        "item": {
          "id": "4f63091d-531f-4e2c-be50-57ff9ea2826b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "34beaed4-e1aa-4e63-b3e1-8026fbf9c1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "1036319d-0290-4d8b-81f9-a4420ae32f04",
        "cursor": {
          "ref": "3ba35ef1-8dc0-4cc7-bdc7-d016ab285ce8",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9435a4e9-d93d-44a2-ae39-89f128a146dd"
        },
        "item": {
          "id": "1036319d-0290-4d8b-81f9-a4420ae32f04",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a72a4bf0-3796-4a64-b87e-13402aaa1a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2c03baf2-a9e1-4038-84e1-b767fb7f62bd",
        "cursor": {
          "ref": "952b4e66-dcef-4be7-ac69-99a936467f19",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6bc7e4d9-2a86-47ac-8ee7-c3a16944b7f0"
        },
        "item": {
          "id": "2c03baf2-a9e1-4038-84e1-b767fb7f62bd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "80f621cf-f2d5-47cc-8d01-4f4e7b5fd5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "145c83cb-a386-4ccc-ab59-918083a8df35",
        "cursor": {
          "ref": "53edfb73-ff36-4235-84c1-dedd3ed2d6c4",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9c8699b8-7ddc-429d-b063-b88d327fe183"
        },
        "item": {
          "id": "145c83cb-a386-4ccc-ab59-918083a8df35",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c3e226a2-9684-4698-8a60-3e4cca6e8456",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 116,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4a5062f3-5e73-4611-9f64-05f72568031c",
        "cursor": {
          "ref": "5398efcb-a2ca-44d2-ac42-a53ae78375db",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "39612c92-9999-49c0-b574-9c5e77c29819"
        },
        "item": {
          "id": "4a5062f3-5e73-4611-9f64-05f72568031c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0bc7feac-68e8-4f5d-bb2f-739b997efa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "42a8e3dd-30bf-4130-8a80-af73502f0456",
        "cursor": {
          "ref": "bcedc685-0562-438a-9a1a-5d87b6c044fb",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1014138a-9b7e-4794-8f83-4e5f8fea26e6"
        },
        "item": {
          "id": "42a8e3dd-30bf-4130-8a80-af73502f0456",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "23edfdea-1841-43be-9f3f-11334879be6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "60884a17-a705-48b6-91e4-ed269a19e81c",
        "cursor": {
          "ref": "bff0944e-ca9a-4f51-b0bd-966cdacd2ebb",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4c9d4fb4-8314-4613-a903-a168f6a882fd"
        },
        "item": {
          "id": "60884a17-a705-48b6-91e4-ed269a19e81c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "53df9723-b5d7-4948-ba41-1f19f3a5a020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "ebab796b-53c8-41e3-9d83-5181aff947a5",
        "cursor": {
          "ref": "36353f10-04b3-4bb2-a9a5-3227ac38204a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "568db570-86da-4105-9f74-78427f1782f2"
        },
        "item": {
          "id": "ebab796b-53c8-41e3-9d83-5181aff947a5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5d59305a-1419-4dbc-973c-1a1b40bc32c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "fe91e8c3-c598-4b50-b78d-e5179e831bf1",
        "cursor": {
          "ref": "ef2560f9-9063-40e4-9a60-29870e695224",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0384cceb-dd2e-41dd-a470-fbe6eb252243"
        },
        "item": {
          "id": "fe91e8c3-c598-4b50-b78d-e5179e831bf1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "646396fc-0a24-4cb5-b449-7ccffb056556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "09f459da-548e-41a5-ad8f-40184db5084d",
        "cursor": {
          "ref": "8ef54fa5-e7a3-4e3e-935a-459a371dfeb4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4cea73e4-9315-4454-8227-b253f9013cce"
        },
        "item": {
          "id": "09f459da-548e-41a5-ad8f-40184db5084d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e007d419-54cc-4022-91d7-8769de669d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b111170a-aab5-4a28-b076-bacc510ba519",
        "cursor": {
          "ref": "117c5acd-99ae-4087-8300-3a21ae0fe6ff",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5b8800d6-3a8b-4bf8-b0da-92bf962d59f9"
        },
        "item": {
          "id": "b111170a-aab5-4a28-b076-bacc510ba519",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c1ee5cd1-9152-4f26-a6e7-1317f7959bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "31d937c5-e458-4cc7-bd8a-42525e03c83e",
        "cursor": {
          "ref": "ca50037d-8129-4369-893a-432d84973aba",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dbec1487-710d-4977-b6c7-731071fb574e"
        },
        "item": {
          "id": "31d937c5-e458-4cc7-bd8a-42525e03c83e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "742bd657-e2ce-41be-a141-97ffe30baaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fb7e9747-b3a9-40a5-870d-8a2787f1350c",
        "cursor": {
          "ref": "a5cc3f06-cfaf-4ce5-a851-c5fa0ae9d03b",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9910502a-87a6-4e7e-8863-486bc491e3ea"
        },
        "item": {
          "id": "fb7e9747-b3a9-40a5-870d-8a2787f1350c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f2480a8d-7071-42c8-b6ab-f3fbf9d38525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b7296c92-83a7-40bd-ae24-9c7aa1ebdc70",
        "cursor": {
          "ref": "9fd52637-d8af-4121-804c-174e64cf3736",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7abb66ce-ee04-4c43-8c12-77b636ae11f2"
        },
        "item": {
          "id": "b7296c92-83a7-40bd-ae24-9c7aa1ebdc70",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bb28d2d3-022a-456b-a2d5-ccf8c4773424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e5b37c67-155d-4abb-b1a5-0f3a903923f9",
        "cursor": {
          "ref": "f8c5f8e0-ab33-492c-8754-75f674499875",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d74769a1-1425-4ab9-bb2f-cdee7882a3ca"
        },
        "item": {
          "id": "e5b37c67-155d-4abb-b1a5-0f3a903923f9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fabdbced-b51d-4727-b4d5-28be1dac8c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fdc9858a-ea90-487f-af55-a5756efaed54",
        "cursor": {
          "ref": "a83e4512-1c92-4b6a-b602-9ff66ef5b66d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "15681a9f-8580-4af6-b023-bdee0dd98bac"
        },
        "item": {
          "id": "fdc9858a-ea90-487f-af55-a5756efaed54",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "68b3c0c1-286c-426a-96c4-680c53e9e46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c0a302c9-21c0-4f03-9e70-d286c8e2401a",
        "cursor": {
          "ref": "039f7f19-fbab-482d-adb7-ffd735c3d05e",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "98f8b0ca-b31e-4123-9a7c-4c2acae1f09a"
        },
        "item": {
          "id": "c0a302c9-21c0-4f03-9e70-d286c8e2401a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a7ac00d5-773c-4266-86f9-609e3aa5c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "66893aa5-dc8a-47b0-bc9c-75698e9ffbd4",
        "cursor": {
          "ref": "625c5062-4186-4788-9402-15a98b4c8849",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "937d0a62-2a3a-4b1a-baa9-ce03aeec0c46"
        },
        "item": {
          "id": "66893aa5-dc8a-47b0-bc9c-75698e9ffbd4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ecee673a-67fa-46ce-8cb5-d7524af64cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "dc38202a-741d-4401-8f80-918ba7ac326a",
        "cursor": {
          "ref": "8f52815d-b72f-4090-af0c-3b10c92b7ece",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6ec182b3-6f7f-4f09-8c0b-9a084a7bdf3b"
        },
        "item": {
          "id": "dc38202a-741d-4401-8f80-918ba7ac326a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "87235f47-8bc6-4a89-b4c3-14016d3940f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "48ad0df8-ba18-4197-92f9-8cc052d4eb42",
        "cursor": {
          "ref": "1910cf42-3708-46c6-93cc-23cf34b10602",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e5307618-07c0-43f1-8b5e-865f56a9a87f"
        },
        "item": {
          "id": "48ad0df8-ba18-4197-92f9-8cc052d4eb42",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fc619328-33ae-4bca-8829-4e5654819562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c064e24a-c03b-4569-a672-2964e319c3b6",
        "cursor": {
          "ref": "2b7ed1d7-fa75-444c-8919-632ea6075526",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2480d000-7a3c-4b24-ab7c-3ca534af252c"
        },
        "item": {
          "id": "c064e24a-c03b-4569-a672-2964e319c3b6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e0c9528d-a01c-4f5d-9f50-3d3e6317b751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "aa0df252-e83d-4765-a088-a16c2e72da60",
        "cursor": {
          "ref": "21cd921a-6d52-4e35-a3ab-b8d3ea794131",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b2cfc847-2fb5-48a4-98dd-51f9a65ac92c"
        },
        "item": {
          "id": "aa0df252-e83d-4765-a088-a16c2e72da60",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8260130b-de2b-4e8b-8cb4-1f20b9f75c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e4658582-ab6e-404e-a437-f66f91ba658c",
        "cursor": {
          "ref": "ee884553-0818-4e05-8293-729788a746fc",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "27e8f50a-944f-4cc7-aafa-1770194ee254"
        },
        "item": {
          "id": "e4658582-ab6e-404e-a437-f66f91ba658c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8a9d09f0-96f5-40c5-8cba-497908916f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "18525ad8-3332-4955-8ad2-d09de086f6f5",
        "cursor": {
          "ref": "0191f361-b2ce-49ab-8983-c00cccdcf2dc",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c79a4bbe-d1c1-4b22-bc11-ff17b9d89d4f"
        },
        "item": {
          "id": "18525ad8-3332-4955-8ad2-d09de086f6f5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b99773fd-e8cf-4f3f-a926-fde825508815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2f4b89de-557a-474d-94be-ba66b6c7d438",
        "cursor": {
          "ref": "b3f9e7b3-f459-4fed-b949-8c63c25a8e99",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ddff7712-36c5-4b44-9dfd-15927c571428"
        },
        "item": {
          "id": "2f4b89de-557a-474d-94be-ba66b6c7d438",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7f190dbf-4656-4839-86f4-6d3dd714c624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5fb1f584-0d27-4460-944b-4919a5e96b1f",
        "cursor": {
          "ref": "00481cfa-d882-4a61-a359-ebba97949c72",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "14900bea-1cb0-4fce-820d-47725b34ce3a"
        },
        "item": {
          "id": "5fb1f584-0d27-4460-944b-4919a5e96b1f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "56824a77-5e7f-4bd8-ad26-05c2a5129057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d89b170b-024b-4a69-a148-2448f80f5562",
        "cursor": {
          "ref": "3c414f52-95d1-4884-b578-929a7e8df61a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fd8e5244-26aa-4293-b131-84ba0ffd0f83"
        },
        "item": {
          "id": "d89b170b-024b-4a69-a148-2448f80f5562",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fd9ff25f-9033-4c97-afb3-4b66a7b84b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "68fbe643-9c44-4204-b3ef-8825299f8f18",
        "cursor": {
          "ref": "70dc7c0a-0ad2-4ca0-a8e6-2d7bff6c9473",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2d3fd19f-6aff-4a1b-b63f-183ea65c01dd"
        },
        "item": {
          "id": "68fbe643-9c44-4204-b3ef-8825299f8f18",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6ca6e551-cbf5-4dc0-bbcc-13e507ed2250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ec2fd6-a60a-4a1a-b960-8857a9fec8ba",
        "cursor": {
          "ref": "a3daa64a-cabd-483c-acab-2292c0732281",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d541c86d-4bc9-4457-98c5-de087e9c73ed"
        },
        "item": {
          "id": "d6ec2fd6-a60a-4a1a-b960-8857a9fec8ba",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3429fd72-4644-4989-a94a-bcfc89bdd70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "0d9237a2-352f-4569-8319-909aac18423d",
        "cursor": {
          "ref": "c90e0b61-fe1d-463a-9b86-3dadab6fd300",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e15e0d7a-b0a1-4597-806f-a60dd090611a"
        },
        "item": {
          "id": "0d9237a2-352f-4569-8319-909aac18423d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "56830e4d-39f4-467d-b25b-9ff1fb787ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "728e0a85-7d40-4220-a7ba-7e3dbc1f7407",
        "cursor": {
          "ref": "5e01a228-7ea9-41b9-af87-bc1cbfb6acde",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e80c2042-156a-45b9-a2a5-5d994996bd6d"
        },
        "item": {
          "id": "728e0a85-7d40-4220-a7ba-7e3dbc1f7407",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b067932b-05e8-4054-b1b3-d75ee013fc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "9d6f4f4b-3991-4581-a672-94e6342e78d3",
        "cursor": {
          "ref": "91aaaca7-7e93-4b9d-87de-2192284f5e6b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "93bbd668-f207-499a-87e7-f1bddad03f41"
        },
        "item": {
          "id": "9d6f4f4b-3991-4581-a672-94e6342e78d3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "08d28ee5-8f74-47f5-8377-b88942fd4ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "51e369c7-5dfb-42bc-9af0-debfd801c1aa",
        "cursor": {
          "ref": "eee0de20-4176-41bf-8463-31dc8854db43",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "80614cda-1a66-4c5c-8b23-06649901795b"
        },
        "item": {
          "id": "51e369c7-5dfb-42bc-9af0-debfd801c1aa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5feb55ec-1068-40ac-bee3-5d2d7b14fad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "223cfc41-b5df-4c20-b61e-eab05011f72a",
        "cursor": {
          "ref": "8505dd75-ee25-4a4b-9589-c8ee7d7da338",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5c7cca88-cb4c-4ab0-b90e-24cf48ff7b2c"
        },
        "item": {
          "id": "223cfc41-b5df-4c20-b61e-eab05011f72a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "16fd74d6-2899-4355-ac9d-9318a6ca1bac",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c5179b40-fcdc-4570-bafb-54c41751754e",
        "cursor": {
          "ref": "1dc3df18-f98c-41ec-be3b-66d43929f540",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "22f0572b-be58-47da-9f4c-bf03f94e1720"
        },
        "item": {
          "id": "c5179b40-fcdc-4570-bafb-54c41751754e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b3ba6016-50cc-4f1b-9f64-f8b8b4eaacf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1e99a885-4b4a-4aed-a1d2-7c8a44219114",
        "cursor": {
          "ref": "606ebe81-7a09-44d5-a7e5-eb9c3ec6e671",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c7b056b6-c3ec-4d33-8fe1-19e48637ed8a"
        },
        "item": {
          "id": "1e99a885-4b4a-4aed-a1d2-7c8a44219114",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "97bda1ba-a4cf-412f-8d19-22e114a45504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "5250a7ea-0310-4122-8e7b-7e154f7ace77",
        "cursor": {
          "ref": "e0185a78-b5d1-4f80-a190-98f46cc7b2b0",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed4d3ca7-fcdb-4dda-92ca-a140a18b54cc"
        },
        "item": {
          "id": "5250a7ea-0310-4122-8e7b-7e154f7ace77",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "022fa33f-1f5b-41c5-a486-72fc81fdab6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3644b6c7-0c08-4e40-8921-e8bf1c3b5803",
        "cursor": {
          "ref": "9800b142-97e8-4bc7-86ff-d589b6407882",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d262be6c-eebe-4529-bf4d-00df624c25c8"
        },
        "item": {
          "id": "3644b6c7-0c08-4e40-8921-e8bf1c3b5803",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9f718599-4bd1-4959-94a8-d10629bca087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "08dec3e8-d465-459c-88fc-f67fba2e8d29",
        "cursor": {
          "ref": "4492a2e0-813b-4289-ab5c-b491b22ed639",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "48d7ea36-a904-44f0-98c2-001217472f51"
        },
        "item": {
          "id": "08dec3e8-d465-459c-88fc-f67fba2e8d29",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "96c6cb5f-fadd-4532-b454-2abbc1c34e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "35e6e72f-a787-4705-b320-f0ae05567bb8",
        "cursor": {
          "ref": "e947c647-8731-4be8-98f3-46989f9ee1f1",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4a7afa8d-9fef-4204-9632-448d38a9f5f0"
        },
        "item": {
          "id": "35e6e72f-a787-4705-b320-f0ae05567bb8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "965ea760-638c-4a80-a310-b955d1a48f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "79e7e202-a29e-456c-aeeb-6031d8758c75",
        "cursor": {
          "ref": "a5e64a30-c566-44b5-ad4a-09c80f73664d",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1abf8c62-6585-4c5c-b6ee-4e6d766ae05f"
        },
        "item": {
          "id": "79e7e202-a29e-456c-aeeb-6031d8758c75",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2fa8a0bf-5c68-4f6f-8785-a2de2c5f1d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "97f712b6-7d95-4052-a0e9-339b18773f41",
        "cursor": {
          "ref": "3beeb0d8-93e9-4244-9021-e5630cdf4d76",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "28cba712-9941-432a-babd-476f8abe515c"
        },
        "item": {
          "id": "97f712b6-7d95-4052-a0e9-339b18773f41",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1a253026-b8e3-4874-ac87-2d07509550af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8ce8f424-aa29-4aaa-805b-bf3a4dee431e",
        "cursor": {
          "ref": "bac8f344-5cfb-4444-a714-e05df14770d7",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3480c388-3173-4d97-8735-be4476bdf59b"
        },
        "item": {
          "id": "8ce8f424-aa29-4aaa-805b-bf3a4dee431e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dff485c3-bcbe-4f8b-b6f9-b44c959d51a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "96c1ab6b-15b5-4881-a038-16beed6bcc42",
        "cursor": {
          "ref": "1e0eb122-4da6-4a4a-bb42-db5c7b5dcf3e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1c6f3ce0-b522-498d-bb03-2036b769965d"
        },
        "item": {
          "id": "96c1ab6b-15b5-4881-a038-16beed6bcc42",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6dad1a57-74bc-4e96-b50e-06441d9d801b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f4bbd3d5-7b9e-4409-b068-1f7bf646429a",
        "cursor": {
          "ref": "27c6408a-ce4b-4e0a-b513-73c68e422728",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "218a66ee-81db-4ab1-8731-aa923be2e331"
        },
        "item": {
          "id": "f4bbd3d5-7b9e-4409-b068-1f7bf646429a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ca5bd31f-7573-4d2f-a29a-25a94f7adcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "66c8088a-2963-4454-9617-80592e11db09",
        "cursor": {
          "ref": "df68e33d-6e84-4b08-86f2-2e550fa4d94f",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "348d28a4-0b9b-4979-bca5-8bbc0228cfa2"
        },
        "item": {
          "id": "66c8088a-2963-4454-9617-80592e11db09",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d0808c26-9ea2-4671-a388-e9b839ce79ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "c2c76d5b-81fa-4f80-8f4b-c420e32a313d",
        "cursor": {
          "ref": "d39c0c73-2dd0-40cf-80fd-4f376e1b9442",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "13d72d2b-9ea1-40c3-8ac4-c852c8b95477"
        },
        "item": {
          "id": "c2c76d5b-81fa-4f80-8f4b-c420e32a313d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c4fd894f-e20c-4d38-b197-a08f2f642911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "ee0e1685-067f-4dcc-9406-14a4fc06c028",
        "cursor": {
          "ref": "ef1a622d-de48-401d-bbaa-e429e7409244",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fade5162-90bc-4695-b0c1-3e1bbb3a63d3"
        },
        "item": {
          "id": "ee0e1685-067f-4dcc-9406-14a4fc06c028",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ee04dae8-42cc-4ef9-bfbb-9f5f5e51c001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "c670d07c-9ba1-4eaf-ad55-7f89294d35c9",
        "cursor": {
          "ref": "3bf56ab6-5d45-4a8d-8d08-b48cc9d50503",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bf184eca-c3cd-4176-83ef-59212dbe85ab"
        },
        "item": {
          "id": "c670d07c-9ba1-4eaf-ad55-7f89294d35c9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f93c4d5-d808-4aab-b8e1-fbac47ee5f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "4629fa2f-3e30-4d3b-ad78-4c947ebb57b9",
        "cursor": {
          "ref": "3e66a827-2002-4e17-9c69-8afb920784d2",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f6f14a98-7b41-4368-aa92-cad80e86a0a5"
        },
        "item": {
          "id": "4629fa2f-3e30-4d3b-ad78-4c947ebb57b9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "035e6f3c-9d0a-4e96-8586-d21284497639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "cac68c67-c27f-42b8-91f3-40fc061e0126",
        "cursor": {
          "ref": "d30514c6-670f-4da6-af10-af38a0689bbe",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8a1ca453-0681-489b-8e3b-d24410b4b9a8"
        },
        "item": {
          "id": "cac68c67-c27f-42b8-91f3-40fc061e0126",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e2cd2761-8b4c-4b47-90cb-676d8be3c262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "307b79cd-ec16-448e-9da7-d24e97099a91",
        "cursor": {
          "ref": "821ca5cd-0fd2-45cc-9cd1-3b948ac80cfb",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0fa0b979-f378-4174-a740-d9f16734fd2b"
        },
        "item": {
          "id": "307b79cd-ec16-448e-9da7-d24e97099a91",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5c35e1d1-0aca-47c4-ab5b-32896b8f8afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "64c197df-b2d5-4423-b4a9-55121cfcc557",
        "cursor": {
          "ref": "1ddc87c6-62b7-44da-9d01-4a66d3f29c66",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2745ff3f-a79a-4909-9848-dff7c76523a6"
        },
        "item": {
          "id": "64c197df-b2d5-4423-b4a9-55121cfcc557",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "33827ace-2f97-431b-8e78-3cc0cca7df31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "7f866b2d-051d-4647-9612-6c4ab705f298",
        "cursor": {
          "ref": "e9daa7b7-64a2-4902-ba4a-a275da5f9b11",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9a4585e7-179f-45cb-b216-46f8e2e8069a"
        },
        "item": {
          "id": "7f866b2d-051d-4647-9612-6c4ab705f298",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4392bbdd-5ee1-4bce-b1d0-afb3603c1e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "7a239145-174f-42e1-b083-7594679e05ca",
        "cursor": {
          "ref": "5662c00c-278a-4a37-a655-f11bce403bb4",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7480a408-930d-4ced-8197-4de9ff8b819e"
        },
        "item": {
          "id": "7a239145-174f-42e1-b083-7594679e05ca",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f32b2ee9-f9eb-46ab-9c32-bdf2abb70abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "c6b7539a-d3d3-4447-88f4-d3a7f2fefdb7",
        "cursor": {
          "ref": "9d3395cd-25e5-4dfb-b29f-7d49568e5792",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a83a17a1-e517-4e67-ab0d-a7149ef950e3"
        },
        "item": {
          "id": "c6b7539a-d3d3-4447-88f4-d3a7f2fefdb7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "413fa87d-0ae7-42db-b834-9d5fa184bf2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "17797990-ae3e-496c-83b2-4d1eda5f328a",
        "cursor": {
          "ref": "6312dbdb-422a-406c-8f05-0af2ebfeab3d",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9d06a54c-a197-4e53-b538-8291cb6a8a1a"
        },
        "item": {
          "id": "17797990-ae3e-496c-83b2-4d1eda5f328a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "88ad0df8-55fd-40f8-918f-e23f28dc0af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "4c508243-64c7-4c53-b2d0-239f3347097b",
        "cursor": {
          "ref": "2a9fd201-6e68-4d3c-9604-55678cd35908",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5be64c00-a0b9-4c15-b41c-007b9befd254"
        },
        "item": {
          "id": "4c508243-64c7-4c53-b2d0-239f3347097b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bf50eb6a-a505-40e5-aa0e-0894b46c4ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "7014a847-dbed-47a1-8e73-e448a1e163dc",
        "cursor": {
          "ref": "f3316d85-3bdc-46a5-b68f-d68183f02af6",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7d640438-d630-45b7-82f0-d725cff2edbe"
        },
        "item": {
          "id": "7014a847-dbed-47a1-8e73-e448a1e163dc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e4726a1b-e2ab-4179-881a-04bf8cf24962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "d91089e0-0a71-4a26-b063-4eed4d26037b",
        "cursor": {
          "ref": "d6cbf9fd-be1f-4aca-b555-0d7f88c2c801",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d75a9946-cc1f-4404-a7ac-afe8f2310d56"
        },
        "item": {
          "id": "d91089e0-0a71-4a26-b063-4eed4d26037b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "66a610ad-b341-4d74-8044-5153f5c0d874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "db084825-70da-466f-a6c6-0d0e6c41fb48",
        "cursor": {
          "ref": "f72de70c-af1d-408a-b812-d48524d46e24",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e600755e-3fc1-4a1a-82a2-45b887a89de6"
        },
        "item": {
          "id": "db084825-70da-466f-a6c6-0d0e6c41fb48",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "75d3db74-129c-4c6a-b4d3-95f3db6658f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "1a46d0a7-81a8-4272-8b9c-74ce7501a132",
        "cursor": {
          "ref": "af74090b-5f17-4e1a-8dd2-51f9649c7ba2",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d35fbfea-cc87-41b0-89c7-86031b89c12e"
        },
        "item": {
          "id": "1a46d0a7-81a8-4272-8b9c-74ce7501a132",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b2f6cb58-507a-41e2-ae9e-1c0dc2731650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8c843af2-1df1-4ced-868b-5802eef62f68",
        "cursor": {
          "ref": "d4692665-34a0-42fc-bf27-5f84ccadfa1b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "74237f07-81fb-425f-b078-9bc4f2204a61"
        },
        "item": {
          "id": "8c843af2-1df1-4ced-868b-5802eef62f68",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f025fa17-9486-472f-9307-661b0e864cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "5d092211-b4ff-4d81-8cec-f949a0105912",
        "cursor": {
          "ref": "fee6b4fe-cc78-4237-ac25-fc3bb846dcad",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d58d0891-e695-4541-8c60-a7b4b9f33723"
        },
        "item": {
          "id": "5d092211-b4ff-4d81-8cec-f949a0105912",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "74c1c3c8-eaee-47e9-a18b-3f511950c3bd",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f4311f38-a2a2-49cb-b9aa-2886971a43a6",
        "cursor": {
          "ref": "434ccb73-5eb9-49f0-aae8-2ac38866a293",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "032ebbdc-9dd8-4060-85bf-d38e85cd5431"
        },
        "item": {
          "id": "f4311f38-a2a2-49cb-b9aa-2886971a43a6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "09758667-111e-44fd-a756-134ae75de0e6",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "987efc38-341c-47d6-81f1-34777e3a8d5a",
        "cursor": {
          "ref": "bcc7d213-15e2-4867-862e-ccc838a1586b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dbe9c448-ec54-4197-9c3c-324bf63a926b"
        },
        "item": {
          "id": "987efc38-341c-47d6-81f1-34777e3a8d5a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9886319f-a9e2-4718-9bd8-0a87d70429f2",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "df32868d-8dfe-4194-b7aa-bf3a3cb670ab",
        "cursor": {
          "ref": "768418d2-adf3-46e3-ad46-d31ba1fcdc9c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "714d5d8e-0a0d-4f64-9893-30a198de6345"
        },
        "item": {
          "id": "df32868d-8dfe-4194-b7aa-bf3a3cb670ab",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c12ac7d7-8951-48f7-b539-47fc12e0f3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2a097e30-f852-4793-a4e8-aa4492b78701",
        "cursor": {
          "ref": "e43896ac-0a87-4149-b431-a9ec1e0d8252",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7e943b0c-d278-4209-b535-e41610633234"
        },
        "item": {
          "id": "2a097e30-f852-4793-a4e8-aa4492b78701",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7cb575ec-3931-4598-aa7b-12e56933364c",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c03a4c49-6670-469e-a2ba-f67b33adc4e7",
        "cursor": {
          "ref": "22cc26f1-8fa1-4eb7-9581-73872d298802",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a315c0c3-e1ef-404f-aaff-c373dfb15209"
        },
        "item": {
          "id": "c03a4c49-6670-469e-a2ba-f67b33adc4e7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "97174b18-b2d4-46b3-a13f-8acf140ca6d3",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bbc05bf5-2fb0-4425-bd0f-928bc71b25ac",
        "cursor": {
          "ref": "a396794a-7619-44b8-a776-fb33fa55f7e7",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4ac25ef8-d706-46aa-b627-5e59968c6473"
        },
        "item": {
          "id": "bbc05bf5-2fb0-4425-bd0f-928bc71b25ac",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "153ffe36-d18d-436f-9f1d-51785b213a52",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d4ec2778-a210-4253-a11a-d737d7d503a0",
        "cursor": {
          "ref": "1fdc25f2-2204-4f35-9f82-999eea76fd06",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5a2c7d73-ea40-4ac1-9bfc-31fe9f9c984f"
        },
        "item": {
          "id": "d4ec2778-a210-4253-a11a-d737d7d503a0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "201cf542-0dcc-43c3-a767-24a8fef253d8",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5147cedf-408d-4bca-a363-75b045b11159",
        "cursor": {
          "ref": "8f498a50-8e3a-4d0f-9dee-d2a0b9ac6cf4",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6a20f90a-216e-43d8-a82e-f6fc6fc51080"
        },
        "item": {
          "id": "5147cedf-408d-4bca-a363-75b045b11159",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6275dc63-b2cf-4e48-ab23-3bdf9f514a10",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "41c515bb-a5c1-4067-9bd9-28056e2781f5",
        "cursor": {
          "ref": "74af2401-32e3-48c9-9bd5-716f5302719d",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3e061ea1-4746-436b-8a65-9481b7257387"
        },
        "item": {
          "id": "41c515bb-a5c1-4067-9bd9-28056e2781f5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "992b1e0c-eafa-415d-b917-82b7467e90e5",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b16962b1-f2a8-429f-8071-90b66da1316a",
        "cursor": {
          "ref": "9f91c8f3-67de-41ff-9d68-e8741bfc9853",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b8791757-6b6c-4e0d-8808-baa874bb751e"
        },
        "item": {
          "id": "b16962b1-f2a8-429f-8071-90b66da1316a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cb04b010-8efe-4c1f-b597-cc5e92d6706c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "02e5f86e-0c24-44ca-9b03-9a4b9c1cb7da",
        "cursor": {
          "ref": "6ae8c285-70ec-4fb4-b2b8-8e2225c15bcb",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5a19e9f0-7ef6-4146-acc6-f3318969d6e6"
        },
        "item": {
          "id": "02e5f86e-0c24-44ca-9b03-9a4b9c1cb7da",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e7a5b474-3ae5-4be6-aa6c-d68eaf19a74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "185e437b-0548-493e-a78d-8842b94dfd3b",
        "cursor": {
          "ref": "e57a23b0-ea6e-4723-9a57-1619ea497697",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8547c76c-b175-495d-b644-7b9ad9dd7c5a"
        },
        "item": {
          "id": "185e437b-0548-493e-a78d-8842b94dfd3b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0e38244e-5b00-46d3-ad38-0b38aa69f1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "4e752b5f-5864-4b55-80d0-42a543a1aa5a",
        "cursor": {
          "ref": "b649f2b3-236f-4f09-9b94-b47f759bb680",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b01000d2-8546-4a30-b33c-1bc93e3c2999"
        },
        "item": {
          "id": "4e752b5f-5864-4b55-80d0-42a543a1aa5a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "45a89277-799f-4c49-83c3-51e203d87759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "8c8fee1b-0a53-427d-84e6-d051d4721803",
        "cursor": {
          "ref": "5339a2da-4dcf-4be3-9661-40aac4c340d2",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "27a7432d-8dd9-4704-8254-107d6e723268"
        },
        "item": {
          "id": "8c8fee1b-0a53-427d-84e6-d051d4721803",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4c352b87-4e63-44c3-aa3a-067e0b848af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "0eeb338f-c66d-422e-bb08-713acf7cc26a",
        "cursor": {
          "ref": "4f81d17c-ab0c-4095-bbc1-9080205d06a2",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f4f3fb2e-98ba-48bd-96f3-70da5bfb0af9"
        },
        "item": {
          "id": "0eeb338f-c66d-422e-bb08-713acf7cc26a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1bbf2339-c990-4368-ab25-e02c32ffd9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "984c092b-43b7-4b7e-8bca-9f3fc8ded2c0",
        "cursor": {
          "ref": "046d1d32-9047-4d0e-a08e-9dcbe3873ae8",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cea33ef8-03ac-463d-9559-59c188b05f44"
        },
        "item": {
          "id": "984c092b-43b7-4b7e-8bca-9f3fc8ded2c0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6505df8e-d591-4bf1-aea9-466faae376db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "14c64f68-7a67-44bd-adec-841c3ff2a949",
        "cursor": {
          "ref": "026e21fe-fc05-4fa0-9438-44ad66b96e73",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "123b92d8-1047-4992-9467-afa0f0ba74de"
        },
        "item": {
          "id": "14c64f68-7a67-44bd-adec-841c3ff2a949",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b00dddb7-82d8-4170-a513-72940f261ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "62928497-082d-4cff-b3b6-c3beba0e0f57",
        "cursor": {
          "ref": "82a2aea0-df75-4011-b1a6-656481641f08",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "091f72ac-8101-4463-8b30-7eba4c632f8a"
        },
        "item": {
          "id": "62928497-082d-4cff-b3b6-c3beba0e0f57",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a4334730-b69f-4a7d-b2ff-a4df9fe2b8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "845b2916-a6b0-4e9b-a49b-0654ae7cfc01",
        "cursor": {
          "ref": "f783a165-0104-44ed-b091-8fc721ed54ec",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2a46f965-f5c1-409c-a70e-a000dbe88ff3"
        },
        "item": {
          "id": "845b2916-a6b0-4e9b-a49b-0654ae7cfc01",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e30a1326-1448-47a6-bfcf-35e39a9f02e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "948f1cae-1e09-47ae-8cc0-a5e1fb9d3fb2",
        "cursor": {
          "ref": "903ceccd-5493-4359-960e-87cdfa28b6b8",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "87bb2b11-de44-4d8f-b30a-ea6d9c99d270"
        },
        "item": {
          "id": "948f1cae-1e09-47ae-8cc0-a5e1fb9d3fb2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a4272cc6-9450-4fcb-bd02-d47bd05c3500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "2e377f22-72ec-4058-a00b-df8fb4520c99",
        "cursor": {
          "ref": "28959fdd-8416-4395-85d2-1df90162aee4",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c5899cb4-c62f-4f78-9659-1559d7b0e3b6"
        },
        "item": {
          "id": "2e377f22-72ec-4058-a00b-df8fb4520c99",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fdd6967f-337e-4656-b18d-0f86de251aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "20e4bd7d-cfd0-4e09-8fc8-404b987ea43f",
        "cursor": {
          "ref": "86b6df72-0efb-49ee-bb8b-d6140e93a4d4",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5b02cb72-063d-4394-909f-53d91c9f421f"
        },
        "item": {
          "id": "20e4bd7d-cfd0-4e09-8fc8-404b987ea43f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "691a4291-f52d-44c2-a980-d5503e6bb95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "543f8f88-5f8d-4b8d-b102-5eccdb21e88e",
        "cursor": {
          "ref": "c57ca01a-7ed8-4150-8c87-d768917bda17",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d8a4bd4b-cbfb-4d97-b749-5e8d19e61527"
        },
        "item": {
          "id": "543f8f88-5f8d-4b8d-b102-5eccdb21e88e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ee0950bf-af7a-449a-9e2f-d018fdfbc9af",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ef05bbd2-0ad9-46ce-8c82-1b80c7ee00cb",
        "cursor": {
          "ref": "c8bbe23d-c5dc-445d-a903-21aefa66376a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "82eb5ca9-a4bf-48d4-b477-8cc67102ff42"
        },
        "item": {
          "id": "ef05bbd2-0ad9-46ce-8c82-1b80c7ee00cb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "315c6729-2a8e-4fc1-a8f5-182ddfcbfae9",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0a864a94-311c-4b3d-890e-b5d23d721093",
        "cursor": {
          "ref": "b3012c83-3262-44cd-8ad5-983db6dd1bd4",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f4088b1a-880d-4f22-acd3-c986db0b531d"
        },
        "item": {
          "id": "0a864a94-311c-4b3d-890e-b5d23d721093",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fbeebe00-4c9f-4b4f-8050-f4fd14352702",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b95cfded-4db8-4cd6-8ec9-ef69c42f2039",
        "cursor": {
          "ref": "45f209df-cca2-483c-93b1-40033878a4ac",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dae70020-d3b2-40d0-871b-bf883a3f8696"
        },
        "item": {
          "id": "b95cfded-4db8-4cd6-8ec9-ef69c42f2039",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6d8cd4d9-8a5d-4fc0-b121-8782171170cb",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "6a4bb43b-0e7c-4cf2-9f96-036d40de2c49",
        "cursor": {
          "ref": "38742bdb-12aa-41a6-833a-729dade31091",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d702644c-f964-48c9-9cd5-be7c97401d1b"
        },
        "item": {
          "id": "6a4bb43b-0e7c-4cf2-9f96-036d40de2c49",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c0b3edaf-20b5-4be6-98c9-48ed637afc6c",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "80e9fa97-7af5-4799-86c7-f2ac7812d921",
        "cursor": {
          "ref": "9902cac4-f03b-4ec9-b891-b5f1427cadb8",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9469552f-277e-4cdf-96fa-fe6f97962027"
        },
        "item": {
          "id": "80e9fa97-7af5-4799-86c7-f2ac7812d921",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f554e234-9b42-4587-bcbc-c24027b8bc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "f4bb9342-c075-49fb-a81d-798cba6f3d7a",
        "cursor": {
          "ref": "f1f6af92-93d5-4115-a6fd-4db1e5dbf650",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ff30a147-e524-452d-8bb4-9acddb053f2a"
        },
        "item": {
          "id": "f4bb9342-c075-49fb-a81d-798cba6f3d7a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "856c2ee1-9774-4de3-b919-2249f58ca514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "35c7edbb-4887-412e-aa60-960e52d797e6",
        "cursor": {
          "ref": "a822605f-950a-4b12-9c7d-eb10a2ffa444",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ea3e218d-1165-4c87-a0cd-3a00ff28f024"
        },
        "item": {
          "id": "35c7edbb-4887-412e-aa60-960e52d797e6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9ce3a706-48ab-4ff1-baa4-2ba5de0cdb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "11533935-d22a-4638-8bd7-116f486315e7",
        "cursor": {
          "ref": "2b5454e9-0249-4115-b6d6-e01407606c7e",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d106e9e8-ff5c-495c-bd30-85626c1ec436"
        },
        "item": {
          "id": "11533935-d22a-4638-8bd7-116f486315e7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b899ee36-52ff-4749-955f-659020058b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "02640352-6c8b-43ef-b8b7-a8764042d28f",
        "cursor": {
          "ref": "d10047cb-602e-4dd7-8980-16c06c538771",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ca6ba7ec-01df-48e4-88f0-52ad3cbc712a"
        },
        "item": {
          "id": "02640352-6c8b-43ef-b8b7-a8764042d28f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "709b3ff9-4f36-4d55-b03b-ef6943649501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "bc441a9c-d7a6-4a8e-bcdf-e58b71f9b838",
        "cursor": {
          "ref": "2d8b2baf-6f04-4abc-ab2d-811470d7cce8",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "66cecfaa-232e-4343-a608-49bde7125e43"
        },
        "item": {
          "id": "bc441a9c-d7a6-4a8e-bcdf-e58b71f9b838",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4caf227e-5e4e-4ba5-8049-67f20cbd2baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "270f3d71-2ec8-4793-94fc-0de52e99a2f4",
        "cursor": {
          "ref": "50276f3e-bed3-439c-bcf3-ab6fb7de4b9e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "245cfe40-839d-458e-9456-d80feb3e155e"
        },
        "item": {
          "id": "270f3d71-2ec8-4793-94fc-0de52e99a2f4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8d1c6bf6-fd74-4ca9-9d2d-b7a3fe4a7970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "25961b56-5db1-4183-b13a-721cc318a960",
        "cursor": {
          "ref": "fcd15d80-438d-467e-b7bc-01851dd8dc48",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "aa56c8f1-0dee-4e5d-8ecd-63cb5c472596"
        },
        "item": {
          "id": "25961b56-5db1-4183-b13a-721cc318a960",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "41b07d2c-9a2b-4937-a791-5e5c32c059bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ef6e4537-bbc7-4600-b796-144fa97b6838",
        "cursor": {
          "ref": "5228aff0-2e09-4821-8d06-82ee25a5db1c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3366d574-029f-4024-bd4e-bca6f89e8f51"
        },
        "item": {
          "id": "ef6e4537-bbc7-4600-b796-144fa97b6838",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6d99e4dc-95bd-416e-ae82-5ada55c695df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "7af23372-75ef-4c4f-8ebc-7ddcbe7d3b93",
        "cursor": {
          "ref": "5e4cb5ae-0b4a-4de3-9d46-eeac25b0500b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "50b4f57d-6952-4482-b808-8c8ab07e1d96"
        },
        "item": {
          "id": "7af23372-75ef-4c4f-8ebc-7ddcbe7d3b93",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eb888e50-0416-43ff-9c8a-36d376600d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cee93477-99a0-46bd-91ac-12e3d0ab0544",
        "cursor": {
          "ref": "332916b8-b94c-4557-9a1d-abd114d511bb",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4c46d395-906a-4024-88aa-a213b425d7ea"
        },
        "item": {
          "id": "cee93477-99a0-46bd-91ac-12e3d0ab0544",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ac877464-42db-4aac-9dd9-dd900a2d308f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1ef9d55d-ff9d-4a63-bbe5-e3811f7da116",
        "cursor": {
          "ref": "7e738f07-ba76-44ec-8b57-9d878655ac96",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1a325dfc-fa04-4740-86d6-4c3fb8ac6f51"
        },
        "item": {
          "id": "1ef9d55d-ff9d-4a63-bbe5-e3811f7da116",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d66f0abd-db3f-4af3-950a-47b4cdb22edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "0d281b59-f544-4732-a784-64b6b2561817",
        "cursor": {
          "ref": "6a122956-1605-4c8d-9688-9809951a0039",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7078aebd-3a9d-41fb-b6e9-a8a972b9b289"
        },
        "item": {
          "id": "0d281b59-f544-4732-a784-64b6b2561817",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "99c3af37-1d2e-49c6-bb2a-c34006aa76cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c940f555-f9d7-4740-bc1b-37bc637eb4e0",
        "cursor": {
          "ref": "b430167c-da30-4118-abab-54bc996259d5",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "617784a2-f404-45df-b1f0-b08a8cab6e08"
        },
        "item": {
          "id": "c940f555-f9d7-4740-bc1b-37bc637eb4e0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "15150b48-1245-4758-99cc-40e226162c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "80fbff41-284a-40a8-b0a3-3a809d111e6d",
        "cursor": {
          "ref": "c5650520-24aa-4272-ad4a-b7aa8fc58a23",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d733f883-2a0e-4a71-86b0-b890286b0427"
        },
        "item": {
          "id": "80fbff41-284a-40a8-b0a3-3a809d111e6d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "068352d1-9d97-44bb-ba79-38d31b563e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ed234613-7e9f-4c08-bf11-fde456c2436f",
        "cursor": {
          "ref": "9c79c813-dc71-48aa-af7f-7c54990c8b6d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f33338cf-d3e5-4731-94e4-6fafe4fe4b8d"
        },
        "item": {
          "id": "ed234613-7e9f-4c08-bf11-fde456c2436f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4b4c92cd-2d62-435e-a4b2-8356a58ea377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "65c066c0-9879-450d-aa09-49df53efdc92",
        "cursor": {
          "ref": "22560c65-48c8-44dc-9980-a5930b367114",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "916e939e-25e7-4773-9494-5dd39e44ffae"
        },
        "item": {
          "id": "65c066c0-9879-450d-aa09-49df53efdc92",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5dfe6a04-4d91-4903-841c-a6b70968ef99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "c619a18b-02fd-4ba0-9afb-10c2a289f963",
        "cursor": {
          "ref": "30ebcd10-2259-4dc2-af76-3e0b8fc18467",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3e25bb58-167f-4c9e-811c-d7233d0296ae"
        },
        "item": {
          "id": "c619a18b-02fd-4ba0-9afb-10c2a289f963",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "159ed933-9e58-4dab-abe2-f61d230e931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "8159dc87-471b-47d9-b905-3e5ef97ee7ee",
        "cursor": {
          "ref": "92270a8a-3657-47fa-a8f6-7c6afb7a4a75",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "35cb7dc1-ad54-44e4-a879-a90d5ed9bcc7"
        },
        "item": {
          "id": "8159dc87-471b-47d9-b905-3e5ef97ee7ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ce2a84e0-4f56-44d1-adf1-96114755aff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "527950ad-5c2f-4cdf-85bf-377ede69eaa9",
        "cursor": {
          "ref": "5fcc63aa-570b-4741-9c7a-351af5305804",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0d561fd8-d1d5-4bdc-812b-fd7495fdeea4"
        },
        "item": {
          "id": "527950ad-5c2f-4cdf-85bf-377ede69eaa9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bda2be4a-3689-43d2-88ba-34d0fa0d9e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "9b66b289-432d-4abf-91b8-e3e290524179",
        "cursor": {
          "ref": "c87c3a04-a4c6-44fe-b5f3-284ff00c271d",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "78f65e3b-37bf-460c-b0d5-8d29b185d1ef"
        },
        "item": {
          "id": "9b66b289-432d-4abf-91b8-e3e290524179",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a12e8119-a5ba-4c2d-9a2e-b430a213ee3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "674f0601-6825-4ce8-8d73-c3047862a638",
        "cursor": {
          "ref": "0ed575c2-6b48-41e7-87db-80c1c49acc37",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eaa396b7-ebd4-4a25-8769-6127000d10b1"
        },
        "item": {
          "id": "674f0601-6825-4ce8-8d73-c3047862a638",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "153b9ed7-1348-40ab-80cc-3577b1581db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "40ef9ab4-b72a-4be1-87b3-2f1c8bde6a70",
        "cursor": {
          "ref": "ee0e19b3-9b0e-442c-b8e7-955b64620147",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5a755233-14ed-456e-abe8-6ed3c70d9242"
        },
        "item": {
          "id": "40ef9ab4-b72a-4be1-87b3-2f1c8bde6a70",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "177a82de-ce90-4f10-b3a3-ca2831449a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "677b3979-8553-42a4-98c1-bc586291bce6",
        "cursor": {
          "ref": "fa778646-bd4f-4633-97aa-a357ba3da5a9",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "20987c8f-3051-4846-a630-245969cc97cb"
        },
        "item": {
          "id": "677b3979-8553-42a4-98c1-bc586291bce6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cb2641ab-8902-47cb-a8ef-cea95fa31ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "66d67756-3c64-4047-a79d-790d94787d32",
        "cursor": {
          "ref": "1a7a3fed-d116-4b24-a3f4-83d03b2beafb",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "43652614-1483-41e3-b738-568c3a1798bf"
        },
        "item": {
          "id": "66d67756-3c64-4047-a79d-790d94787d32",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8d8ad044-4eef-4fab-b005-f168e2e4411b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "383bb525-abdf-4cb2-81dc-49d1fdc535cc",
        "cursor": {
          "ref": "ed5a1aa2-3c84-4c6d-852a-fc795f28e107",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "820ebb2e-de21-447d-81c0-ab8745894271"
        },
        "item": {
          "id": "383bb525-abdf-4cb2-81dc-49d1fdc535cc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5bfa65c3-9162-4b78-bc18-e5c5b6053b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "ffa7e7ce-c927-487b-8cbf-24027ad26680",
        "cursor": {
          "ref": "62912de2-493f-4b37-b48e-17abe99947bd",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "765be29f-3729-4dcb-b5bb-8d9da5b5b236"
        },
        "item": {
          "id": "ffa7e7ce-c927-487b-8cbf-24027ad26680",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "47aae61d-7107-420f-ba1e-6c95e620709d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "009c597f-95c0-418b-8180-44bc02e1a88f",
        "cursor": {
          "ref": "13b24811-0eca-4cc9-a2e9-a8f79ea405fd",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "98e0326d-e839-4ed7-a305-426236512bac"
        },
        "item": {
          "id": "009c597f-95c0-418b-8180-44bc02e1a88f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fbdf0018-ff91-4895-a772-bda88b42f9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "05f4425a-3a1c-471a-88a4-1fea5d74f5ac",
        "cursor": {
          "ref": "99dd968b-f278-45e7-8100-ae4d864006bf",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d9a38084-e03b-4d28-873d-fe31ea09d38a"
        },
        "item": {
          "id": "05f4425a-3a1c-471a-88a4-1fea5d74f5ac",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "620f31da-796a-4960-83ad-2d28485abb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a83df322-1108-4f75-9a4e-9d09bba0b1dc",
        "cursor": {
          "ref": "11ada1d7-4564-43a3-8b8b-e8dc2c40bffb",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "14417abe-309f-4b5f-907e-826778e56f5f"
        },
        "item": {
          "id": "a83df322-1108-4f75-9a4e-9d09bba0b1dc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fe434367-fd79-4b50-9679-40913f4ab92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8bdd95ec-2ffb-45fa-94d7-466752caab11",
        "cursor": {
          "ref": "a5c18df5-cecf-47a5-890a-7fcf01ce0ce0",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bff51970-614f-4370-ae77-a3cb7e66df9e"
        },
        "item": {
          "id": "8bdd95ec-2ffb-45fa-94d7-466752caab11",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "acbe0d2a-e42b-4e1a-8a20-94070f7fdd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "78dfd9a6-189d-4d8f-bcef-78cf9c8a03ae",
        "cursor": {
          "ref": "488ed1ca-9d44-436e-932a-4d3ebf1a5cab",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5a5ff619-09ed-415d-bdca-32cc8c071949"
        },
        "item": {
          "id": "78dfd9a6-189d-4d8f-bcef-78cf9c8a03ae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9f7f90d0-9ac5-49fd-97c3-9f4df7c1f76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a5e45b27-c9b6-4e85-ad69-370ba1867645",
        "cursor": {
          "ref": "de3631d5-a100-4d9a-8c86-25b35b9ddcb4",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b68677a0-f6b9-4a37-bb69-9d4cb04fe319"
        },
        "item": {
          "id": "a5e45b27-c9b6-4e85-ad69-370ba1867645",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "92639c0c-dc44-4ca3-8a90-5cf4a7bd1208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "072e3343-e75f-463e-882c-ecd9bc68ad3f",
        "cursor": {
          "ref": "d111cb02-1701-408d-b39b-8cb1db07f556",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8c32e303-be14-4485-9d56-a57c21b06e48"
        },
        "item": {
          "id": "072e3343-e75f-463e-882c-ecd9bc68ad3f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dca1db15-5fd7-4ad2-90eb-f823232bca60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "30c99852-5521-43c1-b324-200fff7fcf99",
        "cursor": {
          "ref": "66ca029d-84f8-43db-974b-10d45dac11a9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "956eca67-01b5-4783-90e8-8d79a80dde0b"
        },
        "item": {
          "id": "30c99852-5521-43c1-b324-200fff7fcf99",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "04c31336-77d9-4f50-9eba-c1fb8e6a1d27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2705a729-8590-4963-ae1c-afefad3c7aa3",
        "cursor": {
          "ref": "5b726509-7c4e-4c21-be50-54badadf78f0",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c785d48d-92ba-476f-9eb0-bc152aebc729"
        },
        "item": {
          "id": "2705a729-8590-4963-ae1c-afefad3c7aa3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "733627e9-7d09-4fe0-a294-9f2283915190",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "5d608d7c-0cb6-4172-ad5c-ebc7f79e25aa",
        "cursor": {
          "ref": "128a83c0-5d53-4c6e-8a6f-34c6d95ce9fd",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "594cc5a0-18fd-4c16-b907-37304f4c0b80"
        },
        "item": {
          "id": "5d608d7c-0cb6-4172-ad5c-ebc7f79e25aa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "874dc930-8378-419b-9640-c7d8006dbdba",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2933cc4-a98a-49a9-9606-6a9308dedc4c",
        "cursor": {
          "ref": "e4bc649a-3196-44f2-8e08-63232235b018",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "421ee71f-f76c-4814-ae4f-8b1693ef5107"
        },
        "item": {
          "id": "b2933cc4-a98a-49a9-9606-6a9308dedc4c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "80b0f7de-bf6b-4c01-a382-a8bcf57c198c",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c1d86-d29e-4d22-ad38-825fbaf610f5",
        "cursor": {
          "ref": "7a7b78b8-f4e4-4003-a34b-1c720b47b037",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ac27696c-4bba-4e35-9ec1-c8004609d41e"
        },
        "item": {
          "id": "ab0c1d86-d29e-4d22-ad38-825fbaf610f5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c95eb913-6b07-439e-902c-579ccd68b0ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c1d86-d29e-4d22-ad38-825fbaf610f5",
        "cursor": {
          "ref": "7a7b78b8-f4e4-4003-a34b-1c720b47b037",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ac27696c-4bba-4e35-9ec1-c8004609d41e"
        },
        "item": {
          "id": "ab0c1d86-d29e-4d22-ad38-825fbaf610f5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c95eb913-6b07-439e-902c-579ccd68b0ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1377f877-5c8b-4ae2-8815-be9162059d62",
        "cursor": {
          "ref": "6e295afc-9195-4cc6-888e-4b21504f901a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc782016-addf-4308-96bb-227bd1c70800"
        },
        "item": {
          "id": "1377f877-5c8b-4ae2-8815-be9162059d62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "caaae760-1ff1-4f74-b988-469fbd14801e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8125e9e-a22e-416a-8ca3-e308e7a5a9d2",
        "cursor": {
          "ref": "b6911df2-d299-469d-9198-275877bee46a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8e48fc19-3abf-4078-9f5a-ea5c113293ba"
        },
        "item": {
          "id": "e8125e9e-a22e-416a-8ca3-e308e7a5a9d2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4b1d8667-4189-4742-8df3-f7a42cc1e300",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}