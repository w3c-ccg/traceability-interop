{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9a298572-0e72-4653-baaa-0d7efabf9701",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3a017989-3e8a-4bf0-8812-9167f2093ef4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f70c559-bf5f-4def-8c34-f9926591b451",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1449c754-97ed-4f01-8ec1-932ea883189d"
                }
              }
            ]
          },
          {
            "id": "b8afe21f-4e40-4d4f-98fa-cade4ab45cde",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "050ba521-f77b-4efb-a5dd-a6bf837d2f06",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cfb533d6-9f31-4bd9-8b28-9bb6dc390342"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2aa88e86-0c37-40eb-bdfe-df0c55e078c7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "683d4cf5-5e61-4ae7-8367-41b1591b4611",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1524c61-3282-43bf-894d-8bfdbaf2e267",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0762a859-a4fa-4514-b8df-e4e9ca45e049",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db4ea27e-d5d7-4180-87e9-7e85e14d9819"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f045a821-3dad-455a-a7b9-699b8277f4d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b81cd48b-d50f-4f90-bd55-cace4395336d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a896862b-e5f6-48c1-bdbf-04feaec2917c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c620890-29a7-4a1b-a48b-be34b10e8da6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b3dbb93-44ec-4c5b-8da8-afafe4f69a75",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9baa2339-8cff-40ed-a3a6-1018e3593793"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9b81fd1-11c1-4b70-8102-63df4e1b1f98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed340642-2d60-4ec2-8dac-a928c1c9022c"
            }
          }
        ]
      },
      {
        "id": "ef46c4d0-db07-4653-b87f-8ee5f3bb3306",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f2902664-de3a-4aee-a980-77d554cfb841",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be4f3950-9c7e-41c0-aabe-e6778baf2bf3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "37e4cc94-4532-40ab-8b98-00f5f2268f6b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5ca55e-683a-4bb4-8a67-3389d04ff1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fab86201-cf0c-493e-aa63-c544d8b5c48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f26ea9b-2998-4337-8ce9-cc7f733e0907",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdc8c5e-f0a0-4b58-aa15-202ebd3cbb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b68f427-31e8-41b4-89a6-5eab594645d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee8bba1-51d3-499a-8f77-d44ff5e14732",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b5d7dd-90fe-4598-837e-10075092b5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c1feb30-3dfa-4a58-bbeb-3c68e4d214e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cbd8b1d5-33c5-4336-8172-67515daf8c4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ebecb2b-ad9c-422a-beb7-eeb4252d8df3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a592d8-3794-4b77-a5fd-00fafdea1e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9996dc6-9522-44bd-ae31-f4fb10b6a05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62edadec-b93d-405b-9ba4-24239444ca31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599612c9-c7a8-444b-864a-b2dede1c9f12"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7fee287e-e7b1-48aa-866e-c2a283aca740",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b257486-05b1-47bd-aed7-a093d6a1ff4b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7883577-2592-4007-b9f3-a9d1ee17e67e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c1115684-05e2-49fd-9eac-3ab66f4a2698"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0179c02-26b7-4fc5-84d0-b7979e92f33b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9c88d4f3-fb48-4d38-9004-e5a42b0fca52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00e0de18-c409-4fba-a672-cd89df67c0a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e1d9c10-f085-47bb-8681-3a6acad5a8f2"
            }
          }
        ]
      },
      {
        "id": "9248b275-791b-444d-a381-aea1c36548b6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "72a5edb1-2463-47e6-9546-1de407f90b21",
            "name": "Negative Testing",
            "item": [
              {
                "id": "049ba9b0-c4ba-41a1-8ca7-8fe1502a2197",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "59881ec9-e51f-43c6-a954-d844b652c197",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e728318-f481-408f-a9ed-4879c50e7bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44f27d5-bd73-48aa-9d84-97526eddddc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd51c08e-a1ab-47d9-9a17-8770b190efcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05c47aeb-82d3-4181-ba7c-2d2074ade461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871138bb-2dca-4fcd-be91-23ddef93a871",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8bed1a-e410-4776-a903-4aa3bd72ffb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138f7a9f-1b46-47e7-8aca-60ef5c4774b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0457a434-4043-444d-86bf-80d66533ed3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f777ad92-c905-4e22-ba3d-a27d783b836c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f40f085-5e83-4e9c-b265-df3c67c79d15",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fada3cfb-efba-4c13-9c5d-9c8567ddaab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16414771-3fcd-4d1c-bb2b-0e0b0d939d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99789d34-f565-469a-85c8-8d11634b01ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f644554-e42a-46bb-b4df-19a7a06191a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d0d0ff-2d7e-4e45-9ebf-29910928cdc9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea90de6-7925-4adf-b40c-87c0f37f5434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb49d75-c92a-46bb-8ae2-c8ba1ae847f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e6df2e-b45c-430e-b595-0678dc6342b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d6987d0-6aef-4670-a4e2-254101a50730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed134149-55b4-4bc3-8890-44aba3dbd800",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b0a0cb-d9b3-4515-9790-44ad19ed9ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f87360-b5c3-41f9-861a-cc535fd29cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c7fd35-c89d-4be4-8960-02cdfffe1974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6643123-dd6f-4eb8-8365-f40855c8ec09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc404cb8-2cca-4fdd-871b-911e7cf84d3c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dec87a-d526-4943-b086-135a8f7ca79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1880dbc-1b33-474f-bfd3-23eb3827efad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7434f57f-22e5-42ad-a9e6-9f919e52cfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59908128-e222-459b-9ae6-dba0c852078b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365b32bf-8c83-4e9c-8672-9672e1ee5c9b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62d282b-8c93-4a54-b945-4336c2c60472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d8cd8e-5e69-4b2a-abaf-0046a1f4aa92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a747042-45b9-4a07-a4fa-f378ba9ac123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bba53e7-345d-430f-95cf-37bc5f9d286c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec417ee8-eb4f-4862-b57a-d0f8a15bb200",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bd3848-4f72-4b09-b615-c578ce81341d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342aeab9-7023-4bc9-85ba-1e141c920552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d51ab78-f10f-4500-bb8e-41e77f8db364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32eca0a8-461c-4ab9-afbc-bdde34ce14e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc50557-6bc5-4c02-b4a8-5602de137ffa",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544d53ac-0ad2-481b-bf73-e97fef0d24c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44adc54c-b382-4108-8bda-086a43707a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df618145-099f-475a-92c8-3f1e55d92859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "886fd1e3-9cad-47ec-af74-94a25a2b9f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b94636e-c7eb-4faf-8269-e7c2338412ef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8116807d-534b-4344-bbcc-a3980c410b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d79c5d-b29a-4605-b3c2-8da9c4de58ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a54f7f4-5eb3-4fb5-9df7-58710d023caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbef6000-c9b6-4dcd-b700-f04e95893225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecdd54e-e8f4-46e3-92e9-001a6516d91a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053b8eac-0f31-49e7-a152-0d7890d43a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2a3640-1926-4bd1-ad9a-cc48d2f3a74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b02449-60de-41de-b344-767d48348a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "431600f0-4d22-4007-8c3e-6bb118c23a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d6c57b-e613-4d56-8805-e52641f4c549",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5899ae0f-a374-4b5b-8608-11b92fd23b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9acd0f9-6fc9-4d8d-984e-9f184b9cac52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfec32bc-f63d-411a-85f9-6eb87dacd94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0ccd546-5e18-4b93-91cf-229ac03efb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8089e63d-b1f3-450a-ae1d-9e7876a92bac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c7b24f-8423-4b39-b5ad-8ee29cfe92fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462fa231-70fe-491b-aa62-2b46bac4166f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56be2825-0a5f-4bf1-a4ce-6b2e9b136d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b53092b-f6fe-4a39-aca8-4d7c557cbf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df3cb09-1962-4377-965f-c2a0749d299f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7998282a-9fcc-4ec5-8810-fcd3d4277b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014f4eab-fecb-4557-af1e-9d146f9037c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ff8379-5776-4002-a2a7-4a6ebc8b5ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "721e7fc1-009f-4469-8f2a-103cc6838875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2705fee-8ef8-4b26-9bb6-98fa927b4ada",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad2bcdc-73ad-4add-a52c-fb71a064522f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3e862f-c563-4fa6-93ed-489a03fd1b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f78b14a-4cff-4e58-8698-d593dcce2ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e81b19f-dbf2-41db-99bf-233536023175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617d90de-647d-4490-b21d-f01052cfb742",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33369372-76d0-498c-b1e1-5b05c27060bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcf7036-25ec-4b9a-ae17-309fee3971d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a886a162-f5c4-4a4b-9c30-06415cace991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfe6b5a0-1993-4326-9f15-6ebd8e4a52e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c50d1e-ad6e-4743-ad8a-6b03783c89be",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9474c172-2025-47ac-a74b-e4c449edbea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286c322c-1b7b-416f-9928-e9c25596e493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0018f1bb-38e3-42ec-a27a-b2387643f3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20a18c21-a7d0-4915-8562-e71c48aa8a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e3457e-e6bc-4e5c-9e68-9be52f47188a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5119a4-c21b-4538-8f58-a9918e66d77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb81237-85ec-454c-ab74-f021b2f2b561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cd9996-9916-48ba-9ff1-9527dfc9791c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f062448-6c9e-4f94-aac8-63148a77795c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d5d957-a2c3-4b1a-b563-5aa5b4a9e851",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db129b30-3b91-4d46-8b57-0c502494bbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52602a12-a3ad-484b-82d0-25b8d124b570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e2ae16-b66e-43cf-9493-f6cdeec6cedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08babf4f-9223-472f-99b9-077f0f27825b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5354f1ea-226e-47ac-b89f-27596026e270",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d30fea-cd0e-4dcb-b916-5bfaa4f30207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bdc8a9f-ae9f-419e-b34d-3980e7db3a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f92b0a-fc74-4fbc-84c5-48ec54f34d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1830d4-283d-4357-bca8-f70365024943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f2e5ce-e20c-455a-ba5f-cc882488136c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0867bcc-e858-4c46-8568-f13c88e28be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b302bf3-f0b2-4d3d-b995-5666c751a9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c03ad62-71e3-477c-817e-81567ee744f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa4ede7-95da-40fb-92e4-d88548b29410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916e5eec-c03a-4b3e-b4c1-9df558bb1949",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ddcb8a-c406-4989-b531-8b39a9f1a26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5532cd2f-2c8f-4592-9c09-fac676abe89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cd94a4-0e1b-4462-84cf-c31ff74ff55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ff902f-2e9e-42bd-be4d-a5b408cf4239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fc8aae-3522-45ad-bc82-4b57733061cb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7290347b-4500-4a7f-856d-59a341370eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0a6c35-8697-4997-926b-62508fbcaeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54e60a0-99dc-4d28-8fcf-10ca13e2f9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64c82eec-2396-4ce0-8a00-2913f92229de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c67131-e5ca-4473-992b-1926a35ae6ac",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef06ca24-b8b9-4687-8ce1-453643bcd2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1660ef-9551-46a3-b44d-4cee6974538f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d171ac9-5278-4bb4-b195-945686f718da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f6f16f-58bb-48e1-a8f8-7ce921045338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255d0364-a805-4312-a833-2747c81317cb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b64c2b-7cc4-43a5-9974-baa8e402a9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bed199-7d6a-4a06-a055-67d21e77ced3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb86391-8ea7-462f-a740-1c89267bd7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b63ce0-7d96-4def-a886-7223cbc25fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63af5eb-5854-48a7-bec0-018a776f50f4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b3cde9-479e-42f1-afb3-bf6eb2b72d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3f766e-435e-4831-a7ed-72d86b0b97b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7a7e16-fe71-4be2-b7f5-70d27bed7d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "927836c3-29d4-43ad-a671-60b120ae8991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95c0ce8-442b-4521-8176-5cf688d35fd9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe42772-5bc0-4962-9e42-e7b20907c2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d912e625-6095-4b99-88d9-07c041ec7789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8839f61-d18c-4120-899e-e343f10f9e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28fa3b09-d662-4f61-9977-a0d4004160fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f799be4-2db2-4354-b6a8-7c39c73b7d65",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7745f223-f5d4-4033-8d91-fd3d88170970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252476ee-d979-4de5-b1fc-9eb59f51a25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecf5706-56c1-4ada-bc3b-7fa811b7c7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0de8c6-bd5b-4bdd-ac01-693c1573f942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b9ec7b-a7bd-41f0-b719-356ebef9e4dc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f836217-6238-4faf-9926-e9e95b879c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1797c9d-f9d2-428e-bb0a-816c78e821a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc750c42-ee07-4a86-b206-662bdee9373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fbbfc3-d211-4414-a7dd-0d1411c03f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40cf09a-a4ad-4e8e-8ca6-986700c3ccd6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c811fa-c52c-45ef-ba1d-4c8cef26d49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe09154f-468f-4827-bafc-51a04baa5ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b3f3cd-4af2-48a9-b7da-e0022d4fcd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb0f9b3-ed01-4d5e-80f1-00a2f151cbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8b89bc-01cc-40be-a42c-d75404980fc7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbefa477-ffef-4c1d-a42c-1efde9be231d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1101eb92-4940-47b9-94b6-31e98d8ce5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063e6a31-472a-48e3-a58c-8482b3cae9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d3481d-7987-4afa-b276-427dc8066888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4376f09b-fc52-44c4-9e37-27167ba03d8b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd682d6-83a4-4ac2-b807-f206aa551def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d575f89e-fb84-4d56-8be2-b848215096d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d2e7a2-53ca-4e38-afdc-86192fe9d3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "548fb9de-105a-46f9-a427-69330924b366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96eca2e1-cf8b-4077-bc8b-5f6b090c4a47",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c134a909-8350-4461-a0ad-fa656b1534bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c6751e-5c10-4976-8973-09b34650eedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204d4de3-5c72-4f9b-a16a-2ce7a7c210bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdd8216-c805-4c8e-804f-e555731d3828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787df5ba-396c-49fc-83ad-58b008cfa474",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709c8f0a-cbca-4eeb-b0b9-d87f5ca8e5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d08885-2f00-4240-b62d-2bd25c00f10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7c524f-3997-46d2-909e-1210c81f80f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c44959a-0f2a-48d1-9f31-92353e9731b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31eb441-81cf-479b-9e2c-b07a38a1bf36",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7378805b-76ab-49bc-9cc7-4f2e91cd41f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe2c50e-9d94-4143-8a78-5312ed1209dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308c4574-fa1e-4da2-abf9-3553dd5a2717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7012ef47-eb72-4b1a-8140-1aeba780b985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c0b146-4017-425c-8575-141c8b38e8fa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dadf88-ed14-4772-a9a6-6b9d8a93b3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74d78eb6-6d31-4825-84c0-e4ce84d7de3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e82257d-40fc-43a4-aa2a-6190160c2cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5e004b-ca0b-4309-a1e9-89184629637c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58087b38-a8e8-48ce-bb8a-365a0d27b190",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d94a25d-9cd4-460a-bd04-ca568ef81f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4e2f02-6f64-4060-bbe3-b68f8a59a3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724d17b7-4df2-4d0f-9c20-a54fe85149f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41f539a6-d069-47c3-b8ea-858ea9866afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ec7cdd-bc99-484b-837e-ea0078bac84d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf42ff2-b0fc-436a-950d-172d31e1ef71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5134a6-d48f-4fc5-9b84-1874f6671ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fca75e0-7016-48d1-9147-bd0dc3080477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c01b0cd-511f-43b7-a4a0-b5ba6c2d61b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbdaadf-47cf-49f1-8dbd-a6782d8cd99d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c81e78c-f4aa-4211-9895-cf1412531b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab3f390-57a8-4a55-8423-1f004cc20623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3f00bd-767e-4e29-9f25-72d747f48297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "142818c4-4750-4d21-9615-da54aae72edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd0279f-8f59-4cec-8343-67765731f722",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd6d6ca-d62e-42e2-89ee-c3b54898d92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008a6a79-f333-4571-aec7-f100731e920a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07b4c89-7888-4653-af1e-d0394916d7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1261eea-7918-4096-8f92-a101f77f1d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d7dbdb-93f5-42b6-b6bf-e412567b16b5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f51bbb2-abf9-400a-b205-4c71e6162ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e205fa-2e45-4d37-88c7-9e9c56cb6f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53371c2c-3113-4cd2-851e-c74201fec528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38ac8fd3-1092-43c7-a847-d1808c8e15c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55c0664-33ed-4ab1-bc80-8d062eda5123",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1531ce63-aa88-4da1-a422-76c10435d4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f260a6b3-5cc8-42a8-98b4-e67d81f8801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e3428c-17d5-4059-8f6f-9334472193bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b020158e-6abb-423c-aa49-23914b61d0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c5aeb9-a6fa-4f5c-9a94-744bd8f39ed5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa00cbe-0bd1-47e5-a536-be2ec840b4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707f084b-b69e-4fa9-b2ac-1e449462394d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de9b1a2-cffa-4014-8635-8092dee71b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "62c2b70a-6759-4d59-902e-5fc24ba16a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f9411e-950a-423b-9654-3295c7ced8d6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7cc3a7-bdbc-45f2-9789-da5814fd1a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fbce87-2c50-4ec1-9647-52e061d1e37d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfe80b6-34d3-44f8-b689-3ed5fd4d8834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2607f4f0-722f-4078-b62c-57de157d51cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ff9451-71dd-49fa-91cf-27f16f3194d3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4958ed-d492-4921-b55c-b7ed3c16db30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df458fc-40f6-460e-89f4-f93572f301d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76563e75-2393-4c02-af5b-e2c5df9099ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f915fa74-bf83-47e2-9aed-bf64dec2aa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d16749-0229-43e4-9820-47025667d3c8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6777b5f-8089-48c1-8636-5c0a607f823c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57f6a29-f0b3-4e2c-821a-1be2e7a588a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1603609e-671b-43bb-beb1-4c52e59175b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1918546-3db5-4164-a268-58ece437fdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d37ab9-cddc-46a7-b245-0fd6a882f9f6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80543284-b584-4416-8070-f8d859c154c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f0ddf0-a51f-4148-bc7f-74cf508f9e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdb5d20-4c21-44d5-b421-8b28f6347431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae808c9-afab-4174-a604-ee928cff7073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789001ef-a769-41cc-9fc1-7063f7e1808a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8798c0b0-d287-47f8-8ed6-7615847047d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3848d7ac-cea8-4b99-8e6e-86f0b3d258d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0e64d6-818e-43e1-bed4-2e00add1e62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e06088-99e9-4fa9-a52e-078685f02962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e60924-12b9-4b24-bc75-d66676c33463",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320a8cbd-7b0e-4ad5-931f-38257593249f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3522b33f-4571-432b-bfdf-523e7a42e7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7772615-f5e7-4ac4-9144-deab43890691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1824b9c-40cf-4de9-b061-468a75602815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829fb2f1-0d98-42f2-a491-a3854ba54242",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d9537f-13da-49b1-98ea-854a644a6e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c26ca6-98db-415f-ae81-4914e3f34176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df53d39-dd09-4f8c-8232-7b1886771dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4ae00d-7a35-4ff7-8c6c-dfe2d33039b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d939c176-0bc8-4062-a619-4d4f7d1bd04a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb09cae-905b-41d2-90a5-9a85cea1ba1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eae3009-9c76-4470-83b5-719295eb108a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9e55b1-a026-4135-ae58-dbb9562b3cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9d2502-6b90-491d-aab0-e0fd1998b0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118efcd0-595b-42cf-9991-1806ecca16a7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06a9295-09e9-4427-ac19-75e1c5ff4fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6334424d-52b0-4b8f-bb58-c0c73b261ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f56ad6-4f3d-4f41-a894-ad7d94edd1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4349a9-67e5-4403-a57f-eaa4058471aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e738eea-6706-47da-b775-a6753f45d054",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f776a1ad-2461-4875-990c-afeca110cce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dae0b91-0eac-40c3-a7d6-84733e9dc1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e15062c-4cd9-4151-a77d-34256d5695da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7898b978-5e48-4c9d-a8dd-2c191b298aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a79d31-de57-43e0-800e-712e8477f8b8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a577c2bd-c0ae-4439-bed6-87cdf2ce7e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb7a016-fd39-44d6-9931-f2842fd2ecbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c41887-fa94-45ac-8d5f-0b26d422b261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f1ad1c-9915-4204-9c1c-09dc406a98a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a35ca5-6632-4888-ad2b-f703a43fd43d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac3c9c5-ff72-4444-8063-fc0cd047ab6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75707333-95e8-4052-9a81-1292cf7f37b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a44ad55-8d1c-425f-bc57-802a2a7e03e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ade0e66-b6b1-4e28-82d4-3444145c3225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6d433c-b627-4be1-9491-739d8528f683",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3162d2-989c-437d-b14b-e8329fa4a4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff947db-541a-4b5e-9e86-e125474ae60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91df15cd-956a-4e3c-90ab-5341e4457f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4e28fca5-a9d9-4d25-ac8b-6d9bf5740134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdcaf38-5525-44a0-88ed-e6a24cfd3371",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dc30b8-db11-4601-989f-66a62fe24e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a290714-fe3a-405f-b589-c1af452ea854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66bc413-0bb3-4a53-a87f-1c461e91d93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee19752a-ade7-45b8-91eb-6d58338e704a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5e7a23-1660-461d-b722-171b50033d9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188397fb-5ad1-4188-9a5f-29d4443bd00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cb12c1-92fb-495e-87a8-c9a9e1ed811c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e384b1-26db-4da1-8b4d-895c036b4dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b323c0f3-58c0-493c-b8ba-14a0376e45bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da109a4d-b2ca-43e3-b413-4771b60e07e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f4fdc5-1e95-42a0-8be2-1f61e1953b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2e395a-a4e2-4e1b-b488-dcbfa6e108f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37875ff-f64c-48f1-a340-a96514716bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a0a6e6-a658-4865-aaac-1b9ff66ba284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77c564b-5318-44db-8b03-24c2050a0cd8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17fd8e1-d5cb-4bf4-8de7-869bb6272d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ed0b5c-3f6e-4829-90c8-612f5c210e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377f6d24-c5d8-464f-86e8-c79bb8ded64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a77dfa-ee74-4fdc-a9d3-525db458e009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ead4654-d26b-4186-ab46-88cb2dfc06e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eb7c7d-8bfd-4e52-abbe-3686d4de269e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22060f1-d604-4938-b402-5464961ff5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea345b43-eb94-4f16-afb3-082c0404cd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3daef2bf-b91c-42f2-a1a7-8c918b9169f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c76df3-e902-4373-92ea-086b0b329e17",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a6f797-eac0-4045-9168-ba196417f36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75c55fe-32cc-4ab9-bb7f-1dad97d6b0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a140760-1fde-4fe1-9d30-025f2aa10aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb237e3-d690-4e39-a2f3-0be42f6d13ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2c831c-a85f-4772-880a-f997a591af37",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e14b523-3013-40b8-8bcf-15efb705b26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa7af60-eea4-4a92-9bcb-03b236df9754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086623db-980a-460e-84cc-14d74d38ec50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "73a2058f-3554-4f1e-8a35-91bdea9ce358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b154841-4e54-415f-9426-e12850c25ebd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8305bb62-9640-4ad6-bae2-23aeb3bfe426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76056492-717b-4cdc-bcbc-f0ec2ad191f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47e6b1c-1d1a-49db-ad80-e743e16a3df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ddad61b-0802-49e9-bd8e-7343b76499ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550c8d84-83ea-4277-9b5e-7fe593f17b52",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc4444b-df7b-4d4f-8e67-317dff91bfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5fb1f9-c1b4-4fef-bf26-5155aa99d37d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd83f54-f76e-4086-be50-525f43ea4421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e811da71-c333-4df6-8637-1680f7a46d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3387292e-384b-417e-97d8-f61e748890fd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0990528a-fac2-491f-a179-93d918a8dedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97325f9f-267f-4eaf-a670-79a198b0d901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1685df5b-fde5-4f59-af0a-47f6cc813ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f942fadb-a67a-489b-88a1-31691aeb3824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed443c5a-f66f-492b-b9cd-1d8445efa762",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914a0fe0-1f7c-4fdc-86a5-0af5062d5678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4712de-bd51-4b3e-a232-d0fed46a24e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec2383f-ee27-47ec-8ac5-9eb98c304a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44447948-5fd6-4efc-814f-2c975129b709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664e7680-de5a-40e2-a61f-d9d5b3fb4a87",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a74f395-840f-458a-b879-5e9935fa18d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940fe03c-13c1-4309-8312-dd1af741c8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3217ae-c38d-423e-973e-372902e99acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "124dd64e-1b85-4e4a-bd4a-9e0c51945042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be8310b-7dfd-42ed-85a9-4103ab6c5243",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98859ce-8dd0-4bc3-993e-b7b71483f9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941cb980-ac7e-44fd-8090-2a66430007f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d5a236-70e7-4662-a2d1-20777bdbed62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab1f4e0-42f7-46f0-8099-573b3d3dc32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75980af8-cf31-4240-9d03-83b398067aa8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce7c064-0974-4f52-bfbb-173666c6d7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2aba8e-e012-4843-9141-a2e757f199b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb8fc8d-48aa-455c-b687-39e530ca405a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abfee678-14cc-4800-a9d8-2bf582d9e73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe931684-bd3d-477c-bc9b-588befe0ddc5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd158a5-28dd-4069-a4cb-a3139e182d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4e8f4c-6d0f-4a29-8b24-3af760f2a302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a3a4b0-ba9b-4b24-b2e2-d9959b29656b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08954f51-e7de-4575-b94d-ea6e30693304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1c94cb-2afa-4614-a724-d92c5917798c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf7ad62-06fb-44f3-b7d2-e6707ff9db0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57d181b-da4c-436f-aa3e-500b151560c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af33b8c8-faeb-415c-8e56-25cb06a7a9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "380d61c3-e7ac-4487-b664-74df4e2052aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c762b638-6cf8-4982-9f04-9f5263abebc5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d2625f-1187-4fcf-ba29-330c5a5906e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383fd161-b09a-4601-a279-6012e5c25c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a56699-0153-4781-9d55-b3fb6edddaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdcd93a-ea87-44ab-9854-825f069bef09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4f2ec3-679f-440e-afdb-c1960227b409",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c8e461-2e53-4e20-982a-13cd3bd00e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfe8917-11f0-4cb9-9098-1483f06540b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93075c36-c3c8-4638-bb69-022a3bb9f500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6e1625-06cb-447f-b37e-c95b77f9d1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb5df14-6049-471f-8817-b2c2bd3bc5d8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9c1637-e46e-4c03-9dfe-62b3e0247111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5665dc7-71df-4f1a-a336-ed01842353ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ab15a6-3ef0-48f6-a24b-244225401c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2d8949-db0a-49b2-b1b7-23e99acbd46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00be634c-d724-4fb2-b835-e08507f9978d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf34ec4-82de-4eec-b6b4-7a936ba9ebd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb4f8cc-f1bc-447e-958c-a51025f3dcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b17d812-e817-4be2-a65a-acb7bed71380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09dd0bcf-3404-4be3-88c0-b6b04268ff3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b88119-82c8-42c7-a485-071b4205886a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe5c5de-cbe1-48d4-af5e-21d3ec406982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72aa5fc-4847-4dc4-829b-a35f8b901cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48042029-e097-43fb-8d1a-86e59bdf8afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b5e97a-6fe9-40cf-9f0d-6117ccd7d324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a47b74-3a61-44db-b4f4-00025107a7d0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbe5296-dc16-4d9c-9a41-44ad60bccdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c122d677-1b8e-43da-ab54-9d43b6227f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8a9002-c137-4e45-9a88-6314d0a852ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7764336d-3140-435a-85d9-f461e6a3c905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0718f2a6-351e-4fe2-b589-dd4293cde873",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57f155e-156a-4b25-addb-34c671ef7a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1988f5e5-d94e-4aa2-af93-1191970b91c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d986e7-6d7c-4115-a27f-30554fd97ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c49b771-69b2-4e84-b6b1-cba9bb453e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a987c921-4b61-4d38-b1c8-692d9db0e1ba",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b662d5-e7a7-4531-906f-1233bbb700df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22475c1-b31f-4965-adbe-54c494e8826b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61967c22-61a6-44ee-9e11-ae569751e9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "497445b8-fefe-4e16-98cb-503d4b28713c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b328fc-e9dd-49f2-8223-0e86c95aa853",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d18b0a9-449d-4b22-ac84-41c1c44697d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b59286b-bc24-432a-9de2-34c5d63656c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fff16e-08c1-4c5d-9cfa-a18b8b39c985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6346103-d4fd-4609-b998-c523674e67eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad655f12-e17a-43f8-ad17-8057cfb73cec",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb99569e-84b5-47c8-b868-c09976c54fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d151ea-04f4-4b01-b55d-6374e1135f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1478cc-999c-41bc-8c7e-c5fda3da0eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd19ffd6-8214-4fda-9b1e-5d418a1eb2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0676f841-795f-4af9-83a6-ddb2d568b855",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e11dba-b607-4659-b9fe-e0a3e02ea24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2838e7ee-206c-4615-a393-705a1208da78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703e9eb3-2e25-4956-bb38-d0a47738cf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9d14cc-c6b7-4da9-9ec5-27d29ee2e5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c487e845-58d0-45a0-b79a-103fb347cd64",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c3178a-b47b-4548-bec6-d6598c90a54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b22814-0a17-4344-b0ef-e7b394981652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700c5db3-4ecf-42de-847e-2869ba3f3a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da0bd8d8-9cf0-4592-825a-feb702031093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72629bef-edd7-425a-8fba-388873d41a86",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b216b93f-a753-458f-a7b4-04f7efcffdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5395c2b-0a26-4bc3-b241-d6757b78b3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a8eefa-e715-4c0a-9f3a-8db5aa2a63b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4afa650-c288-43b4-ab4c-a08cc6ba470c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdf2f85-4918-40c8-b186-12aedfc1e262",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2b0ac2-4f84-46ba-b8d8-f5342800f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f80311-4240-4abb-8daf-d897cde57304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135e6b85-7120-4006-a20d-a0e01cc1a457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ada05853-3467-4399-81cb-95a6e04b852c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565dbdb7-91e3-4fbb-bf3f-0e8484244a2a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685e9b93-d9f8-4eca-92fa-e9bbaa9623d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110679ae-22f3-4273-a86b-9588a0f82136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e20b60d-efbf-4369-af4e-b9b7469adae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d42222-dc7f-4095-a583-040dc1db03f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d306b5-2201-42a8-af3a-0ea6019a10ff",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234bec4c-d2b1-4220-9125-e631f1a2db03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9fa8eb-a6f2-4622-87ab-0225a23921fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec61664-647b-44a2-89bc-d89298428d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa2f64e-d12b-4cc9-a4cb-f8645be5bc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515be09d-8e08-46de-b66e-184d8dfc22be",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbcd545-4e0f-450f-8e97-b651d2b5d473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f584fa-ef20-4d0b-8f1c-1997749aa6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8a0b32-ff75-4fc6-ac74-d1dd06f461c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bdb1fb9-b55e-4909-8131-3e66f0579a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a18022-b3d7-4d25-a333-25af744e9ab5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30030709-c44a-4200-b7d4-39d7591bb4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f6b00d-e8ce-448a-8320-ec9c8c98d31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75ca16c-6229-4b7a-a05b-af3def5c6203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "761b1951-f512-45dd-88da-8c1a505a572f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723badc3-a59a-4c48-a1d2-8046e2351cdd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fefb3c1-9fd9-4d76-9523-1a4a2bef90be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae9fa8e-2d6e-4b2d-a038-96c71092e21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8098abc-789f-43ed-8baa-10022f4a3790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6336b59b-e958-4e5e-84ea-52cda95b7c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99d3b33-7a33-4a06-b782-28fbaab4c867",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad83187-2680-477a-a7f3-1e125829523e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0cd34310-6c8d-49b2-8523-ab1debb8f904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31365a4d-9b56-40ed-a6c7-bb3d0f875de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "84d82529-a257-41a9-b63b-82cc0028f08a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9db71095-9287-4bbc-8ea1-f2bf39fac68a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3085e664-1e6a-4600-82f0-2f93c575ad33",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2341334d-01bb-4ace-b1d5-77c1c0abdc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50e5e654-a73d-4dbe-b864-a4a89f843f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c107035-b729-4b55-918f-8145526c1c47",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd207044-579c-4b99-8b42-cf4218f09a62"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c60940a6-4b66-4442-9886-70516b9d61dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcf5055d-a6fe-4090-951e-a7296f67b8e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33e07ef5-ea44-4a2f-9e5f-8d231c5550f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e76076da-f8db-42b4-8fac-e16ce8f51014"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce75cc7e-9238-4ec9-8dc5-0924e1be94af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3626eac-4e73-49a3-9bba-7a528e99d41a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48f13a2a-9b3a-43f5-9387-73f2d9c8ff5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53225628-158b-4a93-9db2-e6668326771d"
                }
              }
            ]
          },
          {
            "id": "3981238e-1e8d-4324-a955-7b5fc007cc94",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e438a83d-7641-4e94-8819-fc918509ada2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a308e44f-1073-4798-9027-49a30ef33c82",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d2ccfb-b117-4173-a44f-2aeb38e099c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e2083e27-6d1f-473f-b052-c3d6c54aff13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacc7bfc-c2c2-4939-ac4c-07ee1512e64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f207714-7af6-4643-96d0-858fd9f5050e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f98c3fb1-5a54-48d6-879f-58dc2d050778",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6849d849-c4d3-4d33-b25f-febf6fd5d2cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45dedb3c-ca7d-4a14-8bec-7d0b9bca2419"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "336a2fbf-3406-4f0f-accb-755028be0ea1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ed977a7d-2862-43c4-8443-98b79115e7cd"
                    }
                  }
                ]
              },
              {
                "id": "70d8ac2c-dbdb-41da-9d98-d1b51e3716ad",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5118d8e-fbbc-4876-bd77-9b410ba41ef9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f97e79ac-0cef-487f-8592-47987f7bc2cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49a65e61-1a36-4694-9c5c-2652072703dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fa56058-81f3-4706-a7e5-779aab90ff44"
                    }
                  }
                ]
              },
              {
                "id": "dbfb57f8-bb18-4425-afb7-12400056f98e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15256781-b0a6-488d-b96e-9080b9588db2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a901726-e4c9-4186-9e01-a86ac1b9bd60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9091a6f9-9428-4b0c-a5e9-6ee51064074f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c25f21ee-4b65-47bb-bbce-e442e627b37d"
                    }
                  }
                ]
              },
              {
                "id": "b3e90772-3ff5-43fa-a28d-978ce2a745a9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95174652-61f8-4d4c-9277-5f35a0bf6ddc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b85f062-e5bf-455a-9600-2052de678553"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d321c35c-7819-4d7f-9e8f-35a4411850f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fa702838-f338-4862-9bff-465c0c1978c5"
                    }
                  }
                ]
              },
              {
                "id": "3916cab1-0bde-47e9-b320-c8812effc1a6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ae58eb2-5e92-41fb-95ac-e4d9699b010b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ea50132-648b-4864-b690-d1102eee8557"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df06aa2a-0a89-4cb2-b7b9-a9a6065346fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dca036db-52b6-44a5-81b7-1415ff1cf01c"
                    }
                  }
                ]
              },
              {
                "id": "700998fe-ed08-458c-8a18-e6c8e8309787",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80325ba2-929d-45be-8fb8-0a1fdde0a5c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8254d3f6-4344-4591-a179-601594ab949f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0e33269-18d5-4027-88eb-0b77042efc03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb3ba6bc-f0a7-411f-aff8-cf7f3b8608d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0578b85a-37de-445f-8d9b-0f9c8ab501f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37a6a226-b94e-4faa-bf53-050d4787e1e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f42b7d08-aa31-4a2a-bfda-78fd8c1ee4d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30ea7b22-6d24-4682-b284-2786b229b44f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c92bfc03-c146-436e-80cc-802ce055bfd6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "04ff30ec-6468-41cb-833f-cc8f6c20aa96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03b5fcbf-9bb7-46fe-a070-ae6f12e2f422",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c780e1dd-60e3-42ac-ab80-e79f93751872"
            }
          }
        ]
      },
      {
        "id": "bec6ef29-3f56-4786-a6b5-624fe9d9ea68",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3757bd30-75af-4803-a5ab-618a5e30c777",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06847d60-564b-4e4b-9f91-9d8ac1e85e23",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2414464d-48f9-415c-8c66-7ca14d3c419b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27576e36-6ab2-4064-8b57-520cf281444f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f68b818-4cfc-44cf-a09b-167f0581477b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd55051d-7c03-4cf3-85ff-5520838c1dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada9d90c-e24f-49ef-a45c-1e86d8d49e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775ee20f-8e03-4d68-a250-b6b583caa823",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22bd039-a562-489c-b3da-4727b912bccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b29f418-196f-4f6e-88f1-0297b220b62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c349446-4d12-4312-986f-730c246e711e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "558406f3-a9fd-47a4-a8eb-476e781902c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89320197-a33a-4e6a-abb3-f74e945de5c9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f762610e-205c-4c76-872a-dbd762de1235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ebb739-4372-454a-a0c4-0f1afabff401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb89a08-0aff-47ca-bb88-6bc2e7f8b851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23acc13f-51ef-44b5-b0d3-5b03b2918504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4989a7c2-75c9-49f7-abe7-1bae610bf0b6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bf7c53-9851-48a7-ac0f-a9410157a6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fa8432-fc31-40d2-8051-70937fefdfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1260a2cd-174d-411a-b60a-0a99510cc493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9590ea-2f91-4a1e-8e68-08a65908eba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6019f6-67b5-4d00-96ee-9a9df9568a8c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ab031e-3a7f-4434-a029-9f3e9b784b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63096a30-6aa4-4d37-bed0-da94f769ba73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c657cb1-7e82-428c-aefe-3369e50f9bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6167f56a-291f-44aa-a64d-9563dc321f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289897b2-d161-4ae2-9b42-f01e469922f8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bb609d-fbc9-4312-a332-f4645eebb177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4363b2-e5ae-459d-9afd-15793bcc691d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a66de3d-5e98-4315-b9f7-c87734ff8b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09f5e4df-3d7c-4a1a-bd9e-40a40a0bd0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b945dec1-c3e0-4901-8047-3771f3d10825",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4d1360-81e4-439e-8e79-cf93df63d4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21b5cb6-12a8-4667-b17e-b15d13df4e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525f0d2d-a1bb-42c3-94be-6f2f30e83c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "acc8031e-9b2f-494d-8f4a-4121ab0b2acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4098c6f6-f79c-4033-a0d0-d17f0fae5fab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f782fc13-d410-4c02-85f6-0f3741f6d396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8211e3b8-b6a1-4036-afd4-eab743b36f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e029b77c-1582-4b44-a9c0-d29008a8700e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "405cf110-98d4-49af-bd81-585ed786fa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df037fa8-b321-4d9d-a48e-304e31a3989b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3578eb-e79d-4649-9ab8-de15503c4f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ac9bc2-ab9c-48b9-a916-23ef80b57c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71076c74-8d83-4839-a8b5-d1b59306d1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d423035e-a0e5-4ab0-9cfc-418d64254170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018fdd17-71ce-4805-bb55-cf0f0066eae1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9749a864-66a2-44d5-a183-0c9f2caa911d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ae23c0-f5da-4eff-ab98-ce393dcee673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18d014e-3790-4702-919a-bdc26f578857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24c83305-b45c-404a-99a0-84f10290d760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9252a64-92cb-407f-982c-de50d192e6a6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69aaeb5-8369-4f77-98ba-85abe8456818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a7e352-67ba-4ce7-8e4d-1a6ec473374d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4dfc70f-9def-4999-9592-7d6ece652e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c68ce0f4-d62b-4d03-95d2-d8de4b122a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5cb14b-c2cc-47cf-a5a8-762b1d270a3c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc733640-eda5-415b-83b1-7a08951acf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e08ca90-3abd-406e-853f-3a3ff68860ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f78aa50-d5a9-4eb9-ad5e-e2c2cb6cedd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c78c15-c04b-4fbc-8d66-9eb4dd5fbe1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0343fb5-f368-4d07-ad5d-d0ae1e523a75",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbd5a5b-963d-4c46-b9e6-5f9efad0a282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf79cfe0-0e85-4e91-bfbb-07786823c6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4018edf0-c909-48be-93d6-71c8e6b7314e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eae94f21-38b6-4fc4-8014-815c0d2591a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69c69f7-6f5c-4094-8ae9-881a49cdbe1c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3678569e-06db-4dac-98ee-551706c6797e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec446f9-d638-401f-9943-3849d61364fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178f244b-8fd8-46bc-a455-4e00db109580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "43ace8aa-f3df-493f-8ffc-f95adb2e7719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6633a056-df1f-4b16-a8f8-465033c7ab0f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60aba63-5aa8-47cb-901b-9ac8e70e5e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1c4cab-304b-4936-a006-3295ea8ac6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1004dce4-14c2-45ef-b8bd-7dbf1004842c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1bd863-dfff-42ed-8518-1ae7b57bba02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3933e63f-7c96-4b21-bd23-feab4011dd5f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82235c44-a1ff-4a30-9e87-9fa6cf2d2db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc4de1d-cec0-458a-a60f-2a01dabc3df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e91d8f0-b979-4daf-9a19-9fcf843a435d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "920e27d3-a43e-4dfb-8ba6-10a0d4e9e6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bb218d-ad59-421a-9c5f-8e593e23e055",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4239251-91a4-45fb-8784-84adae5b6751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc6049d-0d4a-4ba8-b59d-afc0f13e794e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f13f808-0575-44d3-a922-99e2529e37d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "236c6e59-7b76-4ec9-8a54-f72c42af4646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb69569-dc08-412a-9207-b3245be4973f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3717cde-e057-498f-8dbd-0d1be24682d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f450696-c2bf-45e9-9888-7abcfbaa11c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ae9267-b5ad-42ba-8c7b-4eb20d607009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4928429-3452-4526-a3fb-005e3643fb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d202d98f-27e7-4cf3-9fc1-bc3d727e019b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d18215-73c6-49b3-811f-0bb8fca26fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3e287e-f53b-4226-ad49-701a38ae95ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3299b985-f7b2-4a57-89bf-4e75fefe6cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bae91937-d118-4c76-b57b-e1206f467eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9a3437-d942-4335-b541-bb236710c256",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ba0291-c67e-4abe-bcc4-52e2d1e00208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7be878-d4c7-4790-b83f-0869e15b504c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653465b9-0e5b-49ad-b812-33088d4298f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7aeb6b-e226-456e-9977-98b9f123677f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd4436b-5424-46a1-8e88-eca9d9a57d5e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596fbc27-cf3e-4f72-b16d-b5eaafbebc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30159480-7010-4767-90ee-747871d0ea13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1753dd9-a922-42e7-b173-2ac62bb99b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6927f786-0781-42a4-8273-c2e2d36b822b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49a8f09-3ba0-478b-88c8-4fbf676e1ceb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde31d47-64e1-411e-9e74-5a3261f8f94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955d7832-7753-406e-98fe-1ba547c29e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aebee28-da07-41bc-a749-d6cf2e072e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5715851-071f-4a08-a164-926a99dfeef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322f8b7f-0a32-4f05-83d9-9dd64be49169",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089feae8-3deb-495f-a312-b0e051523ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7866da9a-b0fd-431d-ac27-28a948fcc22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fe8d41-da44-40bc-aca1-8b0b9e43d5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3373a9-3701-40b8-8bce-1c13b8c67266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beec098b-a952-417f-8be7-ff749f4c991a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b217e286-312a-4e9e-bcbe-8d0d6ff70d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec9759d-4044-4349-911b-dbba2f9d4671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1649fd04-2f36-4705-a157-7a5c88747054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27d87e10-7f26-4ab8-af25-fab27f99e18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1715373e-1b4d-4e1e-92d5-4cda72a80fc0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77804f47-58e6-4760-98ed-1bf352316be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b47aa76-a15e-4bc6-b30e-c0036a11195c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426b38d8-fa76-4573-931c-95076b48d13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "737a2e86-f1ca-49bf-8628-69beaa17f21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9565633-deed-4aad-b403-27607010a372",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884fb4a3-23dd-470c-8ce3-1e5d0ad48036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9672e612-e3cc-481f-8a94-8bf53337c5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdbedd3-9202-441c-807a-0b34f0482c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e8c908-9026-4963-a61e-bc0a4a4c3615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b07d1a-8fd8-421b-83ac-e41ccf565734",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453a48b1-63a2-4134-963e-73495932db38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a55e1e6-5b5a-4ae2-ac26-d9bda2ba6aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919aacdb-b6ca-408d-ad36-290c8fe939c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14d9972f-cf02-4157-9169-24d9991b2682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adfdd9c-9e7b-49a1-8398-ee5263083f93",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ed2888-a8bf-414d-9ff4-dcde4f482983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e27022-8118-482f-ac8c-a699428b5352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e45062-8d7f-4407-aef6-d64228e250bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d9503d-5dc4-46e1-a6cc-b321c597869e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034241c5-7c2e-4ac6-9641-ea106d754185",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8af250a-e571-4b8a-80ef-00698f120759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46a5b97-492f-4aa2-b328-52a898e7577b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaef3e6b-593b-46ba-92ef-820a74da3510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d6458a-de6c-43aa-a2c8-0f671c04e215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bd634d-9a22-474d-a0c0-4e0dbe999150",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f389d5-819f-46a5-a427-405cadd2d509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca04888b-5aa5-4185-9f5a-4cf1f92363c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145d9cc8-17d2-4784-892f-a4f80b00fba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51b9ee5b-f3d5-4f73-a63b-bae34f6a3ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1ada4b-4614-4c2a-8597-2ce7f441692f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a813ec6-e0b5-4acd-8b18-087eaa4934f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb803071-71be-4ce7-aa61-685e2593dd67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617e1a97-d403-4fbc-903f-24f36a6c920c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "301634f2-e466-444f-9ab0-a7f2fd141aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64deeb6c-34d0-4d2f-93bd-7f97d60a4d6c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a9b8e3-28ea-4f47-8860-57617354ff55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f357233-32e8-4987-a7a3-2a6b298657a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41379f2-5a6f-4b69-b56e-fb5f3f5e64a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9158e3-d737-461d-af58-88aa5ed9abc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc0c7c6-3f0c-4242-98ac-b2c5f4f134ce",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c519e4c-f53d-48a8-90b1-f1cd4945683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205f68b8-2119-4913-95bb-6ca3187330ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82e3385-d0a1-4cfe-9c6f-3b8163b06875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27edb4dd-94a4-4dc0-b205-c792c7328403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ba79c1-4cc4-4e08-9785-bd0dcb53ed5b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044b4fa5-297f-4c77-9d27-d31036137941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4b94d3-e817-4af0-a729-ddcee4b85c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11c4525-b4ad-44f1-86d3-100ea8a22261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a24dfde7-e4fc-4e0f-a9bb-d96297a94325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8e44b1-fd1d-4d89-9a67-c939e05a774c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee2ea22-1e3d-492f-abda-60958e8de6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8113a6-442d-4fde-9c7e-67c4758f91ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055c1b74-a5d2-4ca8-8d4d-5575623a409d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11b4b4c-10f1-42f9-992f-f356026377a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734fce97-0564-4bc1-a305-161155e83cb6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67058c3a-94f1-4c16-808a-15ec29e2ed81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cb1134-9ae6-4602-b274-7f90d85bb43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1819395-bb13-4c88-a53c-f17d5adcbf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c341b02-0616-40fd-8e48-1be0e5fbc8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406cab22-25d9-4754-8d43-d181a95e5c10",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19a565c-9e07-4e44-aee0-3e42ec686181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d59c3f2-0ee8-46d6-a50e-f382452719d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0451b344-698f-4cb6-8d83-49e54b268a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b376d009-8e81-4d84-b051-185f69ec5b88"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f53fbb6e-2b97-4370-8401-84b2f25eaf1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa76729d-1006-4bc9-8ff8-0b6bc7df15bf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61be3fa-c2bd-4f71-a82b-54581852309a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2b716a-c96b-4d17-ac13-b75dacbbe74b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8ebaac-d894-4c2a-b882-b43a120b7ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4307aaff-6f82-47be-8991-a4568e6bf878"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14ae10ce-407c-4a64-9549-30baabad0cfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80d0072d-394c-4d04-b7b5-465f9a87a8c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23abb19d-9f45-48e1-8d4b-90b02af795cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4112ccc4-5cf0-4019-8c5a-c6d1b0e12cfd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee813730-856a-4f5d-8cf0-8b4d357bb465",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "669d5ea2-6f5c-44af-a2ae-5b9e99531dd4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c42b6dc-70a9-40a2-97fc-ac201ba05cce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e21c379-53a1-4ea6-a20c-e1fc1b91e490"
            }
          }
        ]
      },
      {
        "id": "d575d442-e5ae-4eae-8d2e-0b779b2301f1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "417b2618-6b9a-49da-a518-6d27f50d6b58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32ca6438-4ae8-4b4d-b7cb-a40f5536872c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a63b34e7-4962-4d40-ad79-5d2ce1c77504",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d130cf6-58fa-4bdf-85f0-9279e30b4b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1974c27-ea70-4c22-99b2-ec8be798d89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de072de6-a219-46ab-b43c-1366d356e76e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98bc34f-76d3-42d6-9d04-3c3fb989da62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903e98a5-e672-4bd2-b301-fecb927faa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b16ec6-04d3-4657-ad2f-1266a0fec9e3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491214b2-7238-4887-86c2-05785305bacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5392f410-eeb2-4096-ada9-fc3272dd732f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9c72f5-dbae-47ab-bd87-f94fdcbbd91e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d377b71a-cf2c-4a88-af79-500221cf09b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b21c933-e2b1-400e-a00f-bf598a06916a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14d8d8f-c2e5-46ad-a29d-162acb4951d1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6614bc55-2dd6-4b34-aed8-b07f7fd3a304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefd4f2f-7be9-4b3c-a7a1-74c769b7da15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f76309-bf95-4993-ab3f-7dbd395952d7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b7f11b-f4c9-48c0-b01b-9183b43ae2a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01648145-5f2d-4af6-975b-9b5e1b916e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f670bb6-f7d7-4009-8c55-865b1c43739b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e737e441-5558-4914-b2cc-71e1e0c48ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622a6b80-ef68-4b0f-a8b7-830f22f01f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36e0291-c849-4aa5-83ae-0e505ec81d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36760cf-e8c9-4869-bac1-f6ad071f6012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66af85e5-e285-4c2b-b308-efd22ddb67c1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b305f70-8617-4a79-b8ae-086c0d31cfe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c97b6cfb-09e5-4996-8877-12cb09b508d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb814c98-80f2-4aa6-b7da-545c8deae12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c64137e-2536-4b00-8617-47d0ecfcbe52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d6ec7a-f337-4606-8347-ab7cf86c6e29",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c7f4af-cd0a-4c40-9b17-40941c9cc670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa69b70d-89ab-4b8a-ac34-87f778d602cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11b106e-0c56-4061-9413-c9eba11c6ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12a991c-1846-421a-8f6a-631002cd0021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c91c70-2dc5-4393-bf71-bad047a7d33b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a322f035-1b3f-4293-b561-13a1b7272f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d357a0-5765-4ea7-8098-09c71c853f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc65282-4642-43fa-8100-b7ae3ca435b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab03c9ba-42f2-4eb0-9338-bb209b738059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a47371-2449-4cfb-8e86-8cc60eac1cbd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67151787-4a2a-4b9f-81b0-a69bbeed3c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e588f07-ff72-4717-93dd-b1d0592f86e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22abeb7-b168-4329-a981-02d358cf4088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653d3de6-98a7-4529-ac45-11a3d0a743c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56841d96-ee14-4a61-bdf5-721cc491ab05",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768f1548-5629-4e2b-b035-a1cad2f9d729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0833d4ba-d2a6-443d-a31c-d837b8d3093e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34e474e-a7c7-4379-bd01-4a994ac3778b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0b608c-419f-4769-aa06-02584bd24b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aab0567-4614-43ef-b768-a975a21fd192",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73a3440-8bf6-4e91-911b-c3d6ab75c9de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4f65dc-7ec9-48c3-ae15-b23e0c1e5800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f62fa2-0dff-4308-9b52-c4d854ef2123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b371d9-f2ab-49d7-88a3-c49b5e92096a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf96500-a8b8-4d22-b22c-282349472307",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c754d764-fe3c-4a4f-9b26-f1547de2201e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c14bd3a-2be5-4567-a98b-90d3da7cb946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13b5c44-2aae-41e0-aabc-355e3ebc5867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8312f341-bfac-4a75-a363-15d800a19115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed7d33e-896c-43ee-9a95-c8558f84ce7f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1c48db-5c94-40b6-91b5-05f7895e9eb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140a4e00-7a85-4319-93e6-554ea1e421e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551d1c7c-2d17-47f6-9b0e-f08ca49abde7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee23490-1d09-4bef-9cbc-659586d445ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9370b08b-1270-405f-827d-08b6c64c3002",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d818d1be-1672-43b9-b74c-13eca0d70064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66442171-a4d3-4033-8c9f-37504679a502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb52f42-3adf-4926-8770-71a5640a06e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8758b7-df1e-42fb-bf8d-8c6c695a9ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d140deaa-9b83-43e5-9c48-5703753bd6a8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8ea815-a18e-41aa-b6f2-323f188840f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4401ff-7be8-4ede-b2e5-8fd977edee19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7621fff3-ece4-4dc4-a883-d66540730871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab77791-82a7-4780-b1a9-f0b14217b61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81db43c9-37a3-4ba0-b838-3d2dee92435a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2666107b-b5c0-496c-ab27-3d222d88ad4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edef8cc-f563-4d3e-81d8-1a37507fabb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256909c9-5f66-4db0-a340-f1134124008a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc0c6fa-694c-4b78-ae7f-b3c79663e838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13484dd-296b-4246-ad9a-8c07272e9b5b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea35546-e0a1-48db-9e68-e3571057c7c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f86c006-3634-48fe-b739-ef2efccc3908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "855603aa-22bf-48de-b648-fdda0390ac50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf21e166-a16a-40f0-88af-cfdcfda66b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634911bd-ad88-4fdb-853c-a5427acafb25",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d25fd5-a943-444a-bf23-399775c7c5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ab0bff-be1e-45ac-9408-e1710d6a035a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74154c4a-5ee1-400d-898a-7be2991e4462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54192bf4-366f-4f41-9bc1-8756034b6cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031ea60b-8461-4305-8c4e-015f3b5c454b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25273196-e5f8-45c7-ba8b-4a5efbc60a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca33fd1b-f2e4-429f-ba35-d02c9c2a7a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639b1db7-cf47-4db0-abe2-a4fe8bb240ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f6b648-2fbd-4ce9-a57a-09edb7489a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06523311-b0ec-4467-a9ce-4f309b40d740",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d29a2b-c3bd-4fc1-9d41-e4431193e199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e48c4d-6807-4009-b495-38f066171a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c28014-8c7a-474c-b2f4-5df4547bd985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2d6d7b-13a8-4a21-91b2-3fcef6ad7248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b217ba5a-1da2-40e7-87e1-bea167a45a82",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fd9e7e-7245-4699-8b6f-8eb78373cd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73128388-3ec6-4ca5-9a77-8ec4319d3118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfa7634-95d5-4666-bf75-d3f9f25d629a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34acf64b-8f39-4430-b8e2-f89dd4c4a60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28501f24-872b-4359-bd19-01587f01c5b3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42f0161-8c95-4910-ad74-c86ce6579e5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "050237dc-e92f-4f4f-8eb5-9f291dbea598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e174cd-0516-49a6-956e-6c64127dd8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e3903d-7f06-4908-aacf-46e7d34e7689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ff0f15-1d58-4ac2-aec4-bc4074b06449",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883f5118-99ff-4129-be77-b1c6ac52a650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3de953-8f4a-4993-b375-73bde45fadf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a8551a-0a0a-44d4-9d5f-1cb4deef618a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa5ff55-5161-4ef6-a099-67686da11e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff6ff8e-52b6-4613-8b3f-38cea78a7868",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2469cef-87d5-4a80-991a-cb65692078ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d65dcca-998f-4584-ab0d-a7c1ec6d4e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae75d60-5169-4342-aed3-270f8706e747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3003651-a223-4fe9-83bd-2d7ade0e508c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f2b2f2-b713-4aa4-9bb0-fa4ed2f7f2ab",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b334047-9214-4aa7-97e4-1db6005743d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ade3a90-a312-4c41-8844-9ee8fc6dee20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2d97e8-5831-4c5b-aaee-e47b1756d994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b717f7ea-c26d-4be9-9050-76bb3e5d8bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b33613-fa68-43b7-ae9f-91608596ce52",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72e690e-3269-4491-9fc3-8aa265e3e229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89b0cf0-b75d-4957-a26e-a400a438f063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af58494-3b47-4fa5-ae31-46c1d9c6ab61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8926a7f1-1eb9-480e-8799-eb9b001453b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcbf883-a9e6-4a7e-9948-41696467f20f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731d0431-1c82-40e5-848a-44316f5ff2c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9870629-0e6e-4abc-af43-a8e903376c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9128e93-170e-47da-85d2-9adcc84fba28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78d9968-bd9d-497d-9056-9339d7180df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce0f5c7-032a-4038-a5b7-a518e1458e15",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4ebc47-ec4f-4f7b-921b-f544a1ce8b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cdc480f-944c-4cd4-a0ee-77fc62a40e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db97d215-bda9-494f-9d9e-41dff97ecc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a6a6de-707e-4ad6-9062-53c4ddf75251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d3181a-6727-4bdc-a2cf-c53ebe4c9305",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4a5b2b-81f4-4ce7-a26a-662698363840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a1e99bf-ca2d-4afa-9cde-c362626d7fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff8958e-8148-4806-b967-fb6bedd0a6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e292fc97-324e-437d-941c-206f23d5d797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8bd904-0f06-4300-8e9f-5728d8505cbf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdec6b86-1a4f-4189-bd1d-a51771887b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d8ee5a6-8085-407f-a40c-349a3006f321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131f4376-f906-4f2d-af1d-eb6f3b0252b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9a86e7-e76f-4fd6-ac85-f9327d41605d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c364d30a-6cc9-423e-a321-6c05efa5966e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a503f3-c0f4-403b-ad8c-589c066ab5e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c275c82-6c1a-42f7-a5aa-221366a3e871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b840ac-725d-43a5-814f-186adff46766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9bdb3c-133e-4be1-8582-8c425b5466b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413d5c4d-4b1a-4ab3-a051-0994a1083f41",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8ca83b-7da6-477c-af41-26b348b04f28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "784a07d8-b17b-4afe-bbfc-f1e0ecd162da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52de823c-6ed0-4aa5-b644-b567bd92281c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea5b5e3-5e79-47ba-a67e-9a20703d1cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85f8db7-311f-43ad-a3cf-54e3f940ee0b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20c47e4-ed19-4a49-bf36-55592812307b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1337e9f3-8628-4077-ab9f-7790a56a08e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f28ac8-17e0-41a4-b8a0-546a41396aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958b7a49-f239-4381-9c60-39620616a273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de21fd7-59c2-4508-b355-357cc1862d24",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74c69c9-fa3f-459e-af7d-60f40c14a306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c933e914-22fd-4071-a3cf-efa8dcf4dad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c66fec-2141-4632-9964-73ebae70c0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e410d792-dab8-4437-9e10-5282a22f1cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c0b6b8-0167-4592-a2b4-16a0d9ba899b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079e832c-f3a4-4e9a-a594-2d0e2ab72e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db359ad-0ebf-49e2-8c7d-f46bbb11bcba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c3f97a-e9ea-4b15-a5db-a9ed181a096f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10896ef-dc2b-4a23-b261-79acb91bbb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6b2cd1-4b73-4cc7-ad6f-754e86f14a56",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf50e71-d601-464a-b5d9-3520ac3686fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c7fbb5-ce7e-497b-bc4a-3a5534182e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124e92d6-c3e0-484b-84fb-f44733af7412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45eb0ee-5d9e-4b34-bada-cc96be1c1c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b052807a-7be0-4089-ad43-bc91b0f5fb2a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e2e566-d75d-4634-b8da-67bde0ad1f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9793307d-7b40-414b-aa0f-781d4f3c3f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6daa0f-bf10-456d-ac07-b168b83d498e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50fcda3-141a-4c53-b258-83ba66613f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc827e8-8ee5-42cf-affe-bbed2ffb18d7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b5a761-fad2-44a1-8064-c53c5b0aa488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68fc157-64ba-4288-a5f8-83a7ea8fc994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d95f280-9d7b-49b0-8934-0c9edf61bf22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977bf325-9c9e-4459-b6a7-7ad49e376da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e910bd4a-7764-475b-afe0-7ec123a17054",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8952c34a-c463-4778-a6cc-16bad0d1c691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb827e2-896a-4839-acd8-71ae91e49558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e3c510-4902-4dca-9ad4-7bbce98463f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f689a54-1a7e-49a0-9f19-36504296576f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef6a254-c3e2-4946-90df-1a44df85ebcd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b60311b-5017-4c25-aa2c-73cd59316227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2070fd5d-e325-490e-8b75-3979117b57c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32f2d61-fd1d-4d07-821d-455e313612d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0835b706-e925-445e-b2c4-d6e4e948b880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fa3c37-6962-43b7-828b-841a84d198d5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028c6144-253a-4816-89a2-6cc601c1aabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2d1499-4fd7-407c-96a7-1dc4d1e0c7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85716bc-8a87-4e53-b7e3-ea1af98e875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be765550-5ffa-498b-b639-3051321db4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cb3e53-ddd2-4450-81bc-f7672f95a58c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e30a006-ac04-4469-bf79-518aadc2f346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949eb60f-551a-41d1-a0e5-bb2c607e13dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16652a76-0fdd-4b00-8a4f-785fe92a268e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4180b005-24ab-40ff-9d8b-8f2441d36255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a0cb13-53e0-4dd5-b7fc-72466738c709",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736650ce-277b-467f-bcb5-36b9304a4ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2800780f-9737-4404-a60b-23d7682a1258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5c9405-565a-4cdb-9fe4-301011144da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c2365f-f0f6-4e0d-bbc4-ceb6a50f1765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f054cbff-a583-43fd-a16e-e3097be3d561",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676d7da1-b1e8-4213-b6c0-05b244ce09c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54e5b59-6148-49ef-819f-0ee2e5d22ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691ac542-8727-4e00-9333-5ba328dc7e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511292ff-d5e3-48df-9ac3-1d044cc8182f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2a130c-7616-4b8a-a8e5-306679b812d5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e850cb86-89ea-4b81-82a3-c16cc9789c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0657193e-79ca-4f0d-9d7a-93793c1b11e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9263389d-c395-422b-b101-88f742e312f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d667c24-f48a-4641-bcbb-8d011924da66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362b9a72-d364-489e-a757-707a230e14e9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16e838f-a369-43d3-bca3-8a321039a4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80417f73-dfa5-42aa-8464-dbf75ebb0931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cee03f-d2fe-441f-a64e-1d1f110e6ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d324ac98-d76d-4689-a8f5-dc773538bfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5983614e-a34b-485c-8a14-8f28c8a2022c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd801ccc-c64b-45ee-ab89-2d2a5ba68170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e04fb4-4ca0-404b-b26c-61f39681b251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b427ad-1d4c-4a23-864f-894600b0a851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f8637e-80f1-4452-b8de-f3dd81eeb402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9e9601-1af5-4fba-a9a9-f33b0bf86947",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88a1d03-45f2-40f1-ad79-b20779c370bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e828a6-5c29-4492-b990-a7c914800ed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cf4fb0-d3a4-4d8c-8bec-702d3a60cbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3445864-1254-4a4e-93f8-3513c5a21b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe7d88d-9c3d-4b88-9a9a-13398de6b0a2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0ffce1-b965-4690-bea3-1628d7ad0b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db57002-dd7b-47fe-9e63-ae9414690701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8e251f-e07c-4e18-bb4d-29d1e73caf67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eab567f-7d92-4879-8c98-22536be1bbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7e4602-62ec-4025-947c-3612d239dd5f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea70de32-0f15-45bb-99ad-1de95824438c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28cbd03-7a9b-4430-a3f9-3643a823eda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a61fd13-e5b6-466b-8112-d555942d52bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d02f3cd-6141-4c13-badc-8895bc26b881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed772a2-d801-431c-8f4f-37f9268860a1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e0e5d3-b9db-4efe-ba13-282b501756fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c0a9fc-2c2c-4595-ad1f-eb7b1eac9db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26ed19f-00dd-4b50-b786-cc608ad88bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7984e443-c86d-4813-8f82-a7bea865b0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4994e9-1cb7-4130-92ba-7d7f06d79470",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377c681f-a3ba-4ad8-83cc-75f44bcf0b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796fb3ff-9d40-4987-bf9f-9230220de12b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f0c520-63c2-4408-8cc7-d6d2e61e8b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40164f1a-f77d-4165-9370-4809199801cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e907b989-0433-4019-8ebd-e39c225cd254",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd7f3fc-4c7e-4678-b91f-7bb725658f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ff3742-34e5-4639-9a62-282d9ceb2a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3444e45c-71b0-4c25-8d43-30e5bcef76a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acde3df8-148c-4d3e-ac3c-98db607349d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f7606c-5a16-42d5-acb9-62fa1d08e049",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1dc3b66-9d54-4069-8a3f-761b94d629ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b8cf5c-42f7-4042-b05c-192ebc7690ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "679a6354-cbe1-43b3-a620-50823065a208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8b8955-10d9-4959-a22d-654f60456e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5d0b9a-4745-47b5-86a6-9bcdbdcb422b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fce3b64-e835-4bc8-abfa-6db23c7f8c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225b0de4-8e4e-4c9e-8b0a-a1eb178f1055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6148090-503e-4cd0-a977-74b0edeeac7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89843c7-35dc-40e1-aae8-5b5bbe02ef6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6641cc-cbb6-4592-ab1e-e44bcde19f86",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7460cb7d-f368-4d7e-88e6-e151a34a34dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8984e63-5bb5-49b9-920f-b5b0f8a8063b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb13b371-0099-4152-b4a2-9b0a6994d1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d867bf85-4899-471e-bfa5-39caf5675d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfbab0d-dde9-4859-8e97-6e3132d721da",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da29875-7db1-4938-9c7b-e81bef117f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242c5f2e-682c-43c2-911f-a1db857c5608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cf4941-3ff5-425b-9ef9-0bd4b61bfdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d751c2-2244-422e-8643-76d2481c7e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6caa8a-0ac2-4de2-90a3-b34160519be6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed568df-9a92-4032-b254-caab437e1f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170edd2f-5dcc-4fb1-8941-0dcf44758f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8195c5a-d826-4744-ba0c-4c028d92e953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c57fc6e-46c7-421c-8b77-fcbcd6d2980f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79fba9b-b115-49e9-9e48-ceda9d7316c1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf7e977-a211-47d5-861c-8ffe200c0815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527685ff-7927-4a08-b065-17d672a9d500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18be55af-e190-4ffa-87d6-47001d1a4aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b418c107-6881-4d7c-a882-3908a64f8612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f1da7b-67e6-4690-b715-13240b8cd75d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e0183f-a71d-4c21-b6ac-f3436673b03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7489446-075a-4fad-b03c-b721f95b61aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb61049-ff2d-43dd-8754-9ec5633e9219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0490c0a-ee24-4e38-b7eb-e7a8b55b3c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0617d551-d360-4b56-9f56-6e8c546ec4f3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadd302c-c21d-4631-a824-e308e41fe1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba527e0d-d7ae-4563-bdb6-78f39bff7ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13693909-3281-463d-baed-825059f4c0ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee12b97-142a-4c13-8fc8-cf0f0398f1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af086571-ea15-41cc-8daa-f18c03af72b1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbbd021-8564-482c-81b7-635d8dcf6a61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8679e73e-91b8-4d78-b554-ad9daae0e4b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcae6286-bebb-49d9-9d28-94948ec967f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbf8e58-b981-4628-a476-2f93d294399d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed023cba-04be-4e83-b4fa-a8604f8c43d6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa4b29d-c951-4391-91aa-6652e4fa06db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0fed2e5-aedd-4344-b30b-4e3c5c3fb9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ee3a3c-74ee-46d7-83d7-7c8e4413c6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d401a8-fc88-40e8-9e9c-8a8f3d7fa62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8003ac8b-954f-43b5-9dd9-ac85bd35d04b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d3ea6d-eb2c-4d96-876a-00138b4ab4d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "917f04f7-145d-4300-b64a-908b89b4042a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298962f5-0d1b-4dd4-96a5-35e281656cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774b6d4a-b014-42df-a43c-f242b4dca255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396c6e50-2057-4611-819f-4465f9e70190",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92410b31-17a0-4d3d-a4a8-f905dea445d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a40e83-ea0f-423a-86a8-1319f1ef0d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3428260d-ab4c-48f1-adf1-80114415bb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8f5410-9a1b-48f1-8467-a8169a8c65d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f520d30d-e036-43dd-8966-216d421253df",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e30539-bb79-469a-b001-9941747e45b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a0b97e-0286-4b39-893f-84e4678498eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71cf0c8-51d4-4878-937d-23b0f59b56f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00de48be-2de3-4705-9a4a-2ab0d3e9bc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac959500-e755-4055-82bd-6a1a514a3d41",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3137ef-4f63-4a7e-a5fe-b07114ec828c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2e6fc08-a02f-4506-90ac-1574a8e77c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9faf22-189f-4497-93b9-737e86a9ece7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6364c193-4718-4368-9f48-3e0c739cfce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bde26c-00c6-4658-93aa-a47eb21ac7c9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5f9192-9813-4498-9b29-939ddbbf0d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74aee7a2-feb2-444e-873b-a6bf0c8f54ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83df8d0e-295e-4f10-ab11-53012a39caa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fcad6d-48ce-449f-9f89-6d6aaf69dac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d552a764-4c77-4d36-9fea-44221ca48a7b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87a62ef-7ad2-4aa8-8475-6316d1c7d321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "143afe41-7ec7-45cc-ba7b-554914d314da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19182ba9-a9ac-4819-a934-f03859bee6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2266a83b-d6e9-41ff-8492-fada46e1258f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fdde70-df30-4b4b-8775-7218e4135b3b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41355a9-74b7-4bed-ac62-a2948b2bb6a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e7931a-3658-4dcd-b15e-2d2b9547fd09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2be64f4-7141-4b4c-ae0d-6ec9ff09bb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5db53e-704c-4c52-aeba-a072869405f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cd8125-0cb0-4c09-a0ef-5f785e22d5ae",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96588ab-0ff6-4a45-b5b7-4be2a77d0e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "066ab272-0489-42be-8812-087da8fd2959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a7aece-f7e5-4557-a19a-d9c0f0783235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8c117a-4b54-43e8-8b11-316d28a792a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af7bb07-32e7-4494-9529-600ccbe01aad",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e90afe-b749-4f49-ae20-1bac5334852b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f536b1d9-d696-414e-bd5b-e7fbfa0045f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6c44b6-1cee-43d6-a579-28fdfffccdf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fb6634-aa79-4968-8a8b-5d745c3efc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccaaa04-ea6b-48ab-8a3c-b2ad05014f0a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a098ef-f465-442d-b567-69373e9ced8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd933415-0a85-411e-b2ab-0a7b9d95230f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c71aad-35e8-4828-8854-f759bb23c01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bfe8cc7-c101-47e1-8985-c7bf5b542199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bcd2a0-0277-47c5-8231-40ea649774ac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0c484e-a9ae-443f-91e7-4e51aff70bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be109961-2f86-4372-954f-ebea16a6a6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd526d57-160d-4b8a-b342-a1ad0b7fe67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f78182-dae8-4e5f-86bd-f4f259e5a546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceef6cec-1027-453b-941a-a06683cbd054",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8900f62e-a193-4dd3-b060-5b3e52e03dee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb03977e-237c-45d6-b580-c7b99f958417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c42aba4-6ded-4749-aa55-7ae6f64588ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a791406-641c-41a0-afba-c64b10b6eb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2215ddd-fed7-4856-acde-37be72f5beb2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71755cb-9444-42bb-a42b-24d0f019b95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c06257df-b482-45ec-b6a0-567e0b0aa60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1249453d-b62e-4486-bb3f-d1b024f0c469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59db3776-ccef-4700-a12a-b8430857ec43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2193fad4-8162-48e6-af20-f96aa0b91ef4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ae6b75-0cdd-4750-b424-59c575533bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d2af5ba-e53b-4401-a2ae-6ca54139cd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283057d0-51fb-49f8-adc6-a8de547c81b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd32cd9-eac0-4653-82b9-4ddf4f09aaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb4ff4a-8d8a-492c-9390-daba47f5718f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1774c9d3-4e80-4e66-aa8d-ca99c42c35c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c0dfab-841a-4364-a36a-55ef8477b317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce02b5d1-41b4-4372-b3a1-30c07861c553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65778269-5d7a-4e69-9881-b71729f1c928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3394f0-daec-4195-ae63-b17de995c66f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a732cd-f8a2-42c3-8e6f-c659e77cd65d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83fa58ce-8ed3-42a8-a5d7-2291048b8142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00237302-66ac-4682-b1f1-9023ad7d02a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d95607-097a-4e32-b57d-8e3de51e1b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd7d8e7-e6ec-47f5-b7ab-a11c7e322c5d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7889b5-c12c-4dd1-bf08-be5c19d70277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363cbaba-a827-4f57-8930-3d1ba9cc6482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b928383d-7288-44f0-9596-3b50ab528f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16afc047-25c2-4957-a730-1ed06ab929a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d5972e-71b4-41b2-b570-099635aa861c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad100bf-8852-4a4f-afb9-3abaad8aa790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00995f72-480c-42ee-bad1-e502473c0d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265761d5-ef10-4584-8eca-f8ffbe83f4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ef4261-c01c-4565-9652-d101570ca8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd65b313-4781-473d-bb5b-7a2e5ec1785b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6f2033-3d55-4194-8ff2-9a31c9b1868d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2455b7ac-87dd-49f2-9175-50e50a2afb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d4a836-0f9b-4cbc-8532-d04fcb3c5161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c770e2-05cf-4800-b96b-02bb83057fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8221a8-0b5f-4589-af7a-413aea874aa5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b78758-89a2-4f8e-86f3-358c1d02a275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ccf3bd1-54df-4666-97b7-4b195dc5850a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399dbf36-ec20-412d-815a-456b18a59be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d242cefc-b565-44c0-a0d1-5b39bd63f73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de1da2e-14d6-4523-80d7-64665a5ec1f7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faf2e87-f7bb-4e51-b40b-91345b39f9bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9502b7-d3fc-49dd-9de6-2fba5a3e1b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec7b8c4-5b67-4086-a2e3-069029c075c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4856e17e-6202-47c1-aa19-b9aaf519bab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91d1990-59c7-41d2-b14a-9bac32de4d9a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3765bc-87b5-4810-a5e8-474a5446a611",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc16eba-2963-4471-b2f8-ed945089dab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9887cef6-d504-4af9-82df-4a956ae4b466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f101bfbf-7af6-4836-95e2-abf1ffaec2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4801906d-a381-47b9-9cfb-30f44939ebbb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6286ba1-6d43-469a-99cc-664bc78c122b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a1c9b5-fd3d-41bf-8bcd-86b68971370c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a294eab7-f712-4860-aa22-5d4dbc56920e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b82173-6650-404a-9659-8580e0242484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8ac92c-f44d-474c-b1fb-5270d14095c8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23764769-c119-4ea3-9e93-42f9619e4758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b73358a-d55f-4f93-94e3-43323add562c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b474388e-4c18-495b-a917-86afc3d6c3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7a6975-063d-4b01-8123-2492aa0d0948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c359b7-8afe-4e12-aaf9-f17c8b89125a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945458b7-3f88-4d22-95dd-fb044f07cfa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad278726-b166-4ff9-ae7a-e1cc8717e3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282fbc81-fcb2-4d4a-8148-9e64b74efd6f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fd6c0b-3298-42e4-a9bb-96ec5b0f26aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59871c98-a454-4e7a-a043-a02562fa4049",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965d80d9-1e75-4671-b4ad-a430d3653038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e9815a-1af6-4cf6-ad21-73cf1fb4484b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee859daa-ea46-4389-8f62-65224870d717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d8fb7a-b7a7-45e2-b671-e0dc2699068f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7806930-feaf-478b-a25a-13aba7941d88",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452e552a-8077-4ba6-82f8-314da9c6d2fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36c18e09-687d-45d7-a409-683426ce69da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5927873-389f-4550-b6a3-cb41eb4a843a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97becabf-bbfa-442c-b58a-8538fb4c23ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3a687c-8ad1-4b7e-a1ef-d06bb4c0d8b4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a06eda-50b4-4c41-8c43-6dbb7d283c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8f2288-ea03-4b21-9651-c0aaa299a4a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a0f335-0bf1-4d6c-9984-b20db224e43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1189bc-7d49-4c4d-bb47-99e5ada9a194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82588c41-b087-43c3-83e4-6cbf35dda0c4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad45016f-28c0-4d96-ab81-6e33255aed70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d9569e-639e-4ae8-b57a-91782cbf4022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de286046-149d-47bd-accd-7303d656d5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729ffbf7-3922-4a37-8783-1cf16f8debab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c530740-4cdd-465a-be2a-80bc68a2b08b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5220259e-c906-4a2f-9d8c-45aff883d834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b195ebc-ef03-4a63-bf2a-53929ed99afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b082b8-9b8e-4b32-84e9-ed55ac5fc0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcbfe94-63f0-444f-928f-370678bcf422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d60094a-7578-40ff-bcb1-7ebcbaa77200",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e116ce9f-97a6-446a-814c-a161f627f497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "157b49df-0a97-427d-975c-5a4bc9fdddbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a24177-5b4b-4d44-9242-54d1896620c4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3de501-13ea-4db7-a512-a11bebd81d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6595e6ac-dd78-4843-a4af-2e7607c02a3f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecc41a4-05de-4b04-a74e-365ccc4394cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67aa9a55-1241-4d79-bc6f-055e8b1673ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f156ac-d2d8-4bd3-8bce-edf6fe036443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d74b603-a31e-4ccc-8a5a-10c203abc214"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6b5c4cc-0bd9-4b51-9677-66ea72a71bea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6850e486-037b-4479-8c71-4b9702ea19be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25937ca8-3d5e-4023-a49d-d0f3c1bf6389",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b08e855-c21e-4f51-9d43-2558c0e1d24e"
                    }
                  }
                ]
              },
              {
                "id": "603bf3f7-0c81-4561-a9a3-c322ffa04e1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f978c7a7-9e66-4ced-9db2-e6981533b68d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a74db0d-2fa9-4451-adf8-d714f6696c2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "274449bb-10db-4403-a840-d48d3d597ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fda1304-2661-4c92-97f5-65adda37b612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aab6a316-10c5-49bc-958f-d373b3782e5e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0dff4de-ec82-4e9b-bc5a-19a403912a0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4699279e-749e-474c-bc43-66e3d6297072"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "068c95dc-4fe3-48dc-9119-f6c8a6df273f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a60f16c5-44f8-4585-a435-a7e24c4d41ac"
                    }
                  }
                ]
              },
              {
                "id": "4fb434d6-4dfb-4c11-ae20-460646df8d52",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "45fc9ba6-bafc-40d5-a592-971bef989f28",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445f0085-197f-4d7b-8f56-4bdcee7b2517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "568e31fb-12c7-4f80-8bc3-50a3f89a4287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d8a0b7-4cfa-4487-9da1-11d47d30da9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf89b8df-6e92-46dc-98b4-c393ff44be46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a6e6d911-12da-4995-a5bf-286d96b81662",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e66b85c-9bb9-4d73-a517-7217a6f1e660",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acac3845-de71-4c69-93e8-e540723ed279",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "03338c0b-3f1f-4d7a-8f3f-1bcf9cbde983"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "566d792e-72fe-4fb3-b4ea-36b81bbf5fe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31274dd3-57c2-47a6-98ae-512690b6cc09"
                    }
                  }
                ]
              },
              {
                "id": "11542402-651d-41cf-b090-f685d02b0d3c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa3d5385-c4c5-4cb1-9076-6d08880b3404",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c60b48e5-3bc9-4c26-9cec-2738926a7a7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d866687-be31-4dd6-941f-3aee7b0bffb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a654f575-5fe3-4c56-8a3f-5605a2c64d2f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25e9a02a-41a5-4204-bca3-16883f1a60be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "84a6c20e-df30-4716-809b-a82f8e95b246"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46e91cda-bbd2-4e31-ab2e-61207b3bbbcb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e5f7961-d82a-42c8-a09c-3e7485bd231d"
            }
          }
        ]
      },
      {
        "id": "ce1ea93d-3ec8-4fec-b7f9-552d540c21a2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7859a285-5c12-45f6-9590-fb4de8c039da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a429fde8-4372-4b35-956c-20905a943158",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abb70a47-e57e-48c1-863f-79ce544553b5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d09800-d662-4e25-b4ca-4d489c23635b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "842a4d46-ac24-4626-9e1a-87295132970c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a66af1-6de7-4a63-8423-61800d60882c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4e3e43b-94e6-4ca8-8c1c-8e489eb30877"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6b9b9ae-002d-4f79-9355-1ca0007abb41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d193472-c6ad-4170-9f08-1223b255564f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c35cc4c9-0183-4d00-b989-8d620da4361c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "431064e1-cb23-4a0a-b9c7-abf635d057a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a63d49d1-27e0-4348-a926-bd9b4db667b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1139c9bd-02e6-460d-b94f-f5dd7f31e152"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cd59017-61df-43a9-b2a5-e4bb3eee9933",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c57b76c-0ce0-4b29-9218-7b3705210cad"
            }
          }
        ]
      },
      {
        "id": "785fb619-fa89-44f2-a6cb-44439bf387e1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "221828cd-321e-429b-abc5-2c4ccea49d03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "105aab6c-891c-4d87-b927-b665c9089148",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7c91961-2238-47b9-bc4c-b27c570a4d6c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9941f49-2ac6-4316-866c-7a4db0be4a19",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff00472b-ab63-429f-bd68-94d30b64f4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e3977d-aeb0-43d7-aff9-3fba24294879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a7f6757-825d-4a7b-acfc-77bcfb04d27a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24f87b63-7a79-4ea0-b38f-ba8081f04270",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36fc8296-5fc2-4fd1-83b6-be6388b298f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a29d0f3-18c6-4ff7-a7cf-f4fc7e0af03a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec7f49f6-89b4-449e-9278-d3a214e5f064"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce86b555-7937-4287-bf27-3ce0dad21d8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94c7fd28-c16a-4c0d-8598-d03cf5078f18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6810bf40-23a6-492e-b14c-39bb9ec299f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bcbd738d-03ee-409d-a489-5760f386b3a2"
            }
          }
        ]
      },
      {
        "id": "fb21e458-70c8-4b35-bc7a-2640591cf2d7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "66ab5794-0831-419c-a9ae-30b67b8045cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9816573a-ba7f-429a-b761-e6de73507638",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0a5f286-4e08-4699-9d6c-c75d38b98de9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bef2b4-d5cc-4a38-90ec-903378ad889c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a089df8-640b-43e9-a1f6-c8fe9e050e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376344b3-d475-46f3-a7ca-40e63da6d05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dca62a7c-c0b4-401a-9b08-6413ff7f0896"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc3fbaec-2bd4-4ac6-9a39-95b08c945d55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bbdd3cd-47a7-4553-ae7f-c0c6029f70a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70e84339-fef4-46c5-bd21-1a61397e2b0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0217714a-303e-4681-bbe7-9e3711b3d857"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e9a0399-d7dc-4c31-b393-d0dc8b63da6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d9607c76-5ac0-4527-8dd6-5c2d2cae9d10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "900df78d-ed2c-40c1-83b8-1d7782c346b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14a9fc72-10c9-4be8-a17d-d40f4b40ece2"
            }
          }
        ]
      },
      {
        "id": "8795ca76-4c11-4c8a-b6a0-1b6dd503a9cf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66263537-ae7b-4814-8832-606127e19f61",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "646202b6-6d0b-4286-a306-7d7d0b525366",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "563cc9c7-cbe9-4823-acc7-2d3b6dbc4a0c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1573b588-81bc-418c-8700-a7dc057a02e4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c97b5431-5c63-444f-bc44-7a6e7f3974a8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 80.70634920634919,
      "responseMin": 11,
      "responseMax": 913,
      "responseSd": 91.44454191148789,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719016657103,
      "completed": 1719016685992
    },
    "executions": [
      {
        "id": "3a017989-3e8a-4bf0-8812-9167f2093ef4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3e3fe426-a1d2-4021-bd85-77e347e0a222",
          "httpRequestId": "27654c3b-1d1a-40a0-8242-326142e9f003"
        },
        "item": {
          "id": "3a017989-3e8a-4bf0-8812-9167f2093ef4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1f2628d9-6da0-4b34-a213-0d548522c08c",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "b8afe21f-4e40-4d4f-98fa-cade4ab45cde",
        "cursor": {
          "ref": "0730ae3a-a00a-4c4d-baa1-a41239c6112a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6dcfc9f3-3066-4021-8fbc-0c89be739c42"
        },
        "item": {
          "id": "b8afe21f-4e40-4d4f-98fa-cade4ab45cde",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "98f88548-1259-4031-b70d-0f66d5eb1880",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "d1524c61-3282-43bf-894d-8bfdbaf2e267",
        "cursor": {
          "ref": "47f3f3d8-a982-4f83-bebf-1c1e4b7da0d8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "21609c02-1f52-4973-9740-a4c52584ca7f"
        },
        "item": {
          "id": "d1524c61-3282-43bf-894d-8bfdbaf2e267",
          "name": "did_json"
        },
        "response": {
          "id": "a82a7169-8cd8-4db3-91aa-7fe2415b2ed4",
          "status": "OK",
          "code": 200,
          "responseTime": 407,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e4cc94-4532-40ab-8b98-00f5f2268f6b",
        "cursor": {
          "ref": "f7dfc106-300f-400a-be3a-5f646ddeb90d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3dfb5e84-fde2-4576-a8ba-db734ef42110"
        },
        "item": {
          "id": "37e4cc94-4532-40ab-8b98-00f5f2268f6b",
          "name": "did:invalid"
        },
        "response": {
          "id": "72823673-ceff-417d-b677-f63b8fb64766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e4cc94-4532-40ab-8b98-00f5f2268f6b",
        "cursor": {
          "ref": "f7dfc106-300f-400a-be3a-5f646ddeb90d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3dfb5e84-fde2-4576-a8ba-db734ef42110"
        },
        "item": {
          "id": "37e4cc94-4532-40ab-8b98-00f5f2268f6b",
          "name": "did:invalid"
        },
        "response": {
          "id": "72823673-ceff-417d-b677-f63b8fb64766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f26ea9b-2998-4337-8ce9-cc7f733e0907",
        "cursor": {
          "ref": "ac0a33ce-837c-495b-b4c0-778e34cde500",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "75c02e1f-5457-4f73-badf-28312d3b4f7a"
        },
        "item": {
          "id": "8f26ea9b-2998-4337-8ce9-cc7f733e0907",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6aa009f0-5ae7-46d0-a280-510f8910bab9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 323,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee8bba1-51d3-499a-8f77-d44ff5e14732",
        "cursor": {
          "ref": "532d5e1f-bd69-48d5-98be-5ae668e6c9f7",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9e017a00-b97a-461e-a11a-1a0e44ec2992"
        },
        "item": {
          "id": "1ee8bba1-51d3-499a-8f77-d44ff5e14732",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "df828168-b671-4f6f-a84f-f6500a88e9ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebecb2b-ad9c-422a-beb7-eeb4252d8df3",
        "cursor": {
          "ref": "116ca6a3-4d60-4ac0-ae74-0d4417b9e88d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "566d8c08-7969-4712-974f-d9890db7df8e"
        },
        "item": {
          "id": "0ebecb2b-ad9c-422a-beb7-eeb4252d8df3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9e19203d-4ca3-478e-8011-e7568b69ed44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b257486-05b1-47bd-aed7-a093d6a1ff4b",
        "cursor": {
          "ref": "ed69343e-4ecc-485c-aad1-4ae41760cbcd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3cbdbc6-ee55-449c-b440-6cab991d07d0"
        },
        "item": {
          "id": "0b257486-05b1-47bd-aed7-a093d6a1ff4b",
          "name": "identifiers"
        },
        "response": {
          "id": "4f0f6474-1672-4b4a-808d-bbe3129894ed",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59881ec9-e51f-43c6-a954-d844b652c197",
        "cursor": {
          "ref": "ebbb6647-c61e-4c8c-835d-b89e688960f5",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9873e8c9-8a98-4f47-969f-100ba105e104"
        },
        "item": {
          "id": "59881ec9-e51f-43c6-a954-d844b652c197",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "62fe8eb4-8b09-4def-befa-043f1c83ccf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871138bb-2dca-4fcd-be91-23ddef93a871",
        "cursor": {
          "ref": "002e86bf-bd45-4f1e-a403-681790b8697e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "06635ad9-4e9b-4a93-b94f-7235e72a5747"
        },
        "item": {
          "id": "871138bb-2dca-4fcd-be91-23ddef93a871",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6004e591-cd6a-4149-b563-7edd9709328c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f40f085-5e83-4e9c-b265-df3c67c79d15",
        "cursor": {
          "ref": "dde84f59-3bcc-4a7f-aadc-32cf6c72ba0e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d7dbc584-c70f-4ad2-8cd1-4a21669c0cff"
        },
        "item": {
          "id": "8f40f085-5e83-4e9c-b265-df3c67c79d15",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "83f06428-0501-4a08-96eb-25ecad196965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d0d0ff-2d7e-4e45-9ebf-29910928cdc9",
        "cursor": {
          "ref": "659c9925-523f-4a28-9fc1-14f9d0c84c59",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "50bcbfae-c863-4988-a1ef-96b63e981f09"
        },
        "item": {
          "id": "14d0d0ff-2d7e-4e45-9ebf-29910928cdc9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "79263870-b790-4e44-8067-69c8d6770367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed134149-55b4-4bc3-8890-44aba3dbd800",
        "cursor": {
          "ref": "cac70218-74c4-4fa1-a6f3-64b3a636ad2e",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "50e9a4f9-cb8c-4499-afa5-da0af34eb6fa"
        },
        "item": {
          "id": "ed134149-55b4-4bc3-8890-44aba3dbd800",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ff45308e-26cb-4b63-963f-cbb53a185005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc404cb8-2cca-4fdd-871b-911e7cf84d3c",
        "cursor": {
          "ref": "cef8fa49-6539-41f5-96ae-e748cbd33108",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "46bb8410-c295-41ec-855f-ad813e521787"
        },
        "item": {
          "id": "fc404cb8-2cca-4fdd-871b-911e7cf84d3c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5efc3e8c-3409-4ccd-bec5-df7fbbdad784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365b32bf-8c83-4e9c-8672-9672e1ee5c9b",
        "cursor": {
          "ref": "704ac6c9-d2d5-439f-b149-720e5b6a36e3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b8eb5a5b-8f78-4879-9540-27c2093c6343"
        },
        "item": {
          "id": "365b32bf-8c83-4e9c-8672-9672e1ee5c9b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "26a5c686-2465-40a1-99eb-8a2493ccfecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec417ee8-eb4f-4862-b57a-d0f8a15bb200",
        "cursor": {
          "ref": "8ac2b4bb-d1bd-4a43-99b7-6440e0c54697",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7efb787a-fa5f-42e3-ba93-7fc2909dfa18"
        },
        "item": {
          "id": "ec417ee8-eb4f-4862-b57a-d0f8a15bb200",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9ca9399f-6f81-49c9-b66a-a6ab7c3ba293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc50557-6bc5-4c02-b4a8-5602de137ffa",
        "cursor": {
          "ref": "7a2f6e08-7dfe-4642-9103-8988ff05e0a4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3991a572-053e-4930-9bf1-5eee17f4c8f9"
        },
        "item": {
          "id": "9cc50557-6bc5-4c02-b4a8-5602de137ffa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ada41278-d1a0-4b0a-8dd3-6585aea3142f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b94636e-c7eb-4faf-8269-e7c2338412ef",
        "cursor": {
          "ref": "252bea09-ff55-4662-8236-6082e90862f0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0b8cc576-096c-459b-bdb4-eb91693380f2"
        },
        "item": {
          "id": "2b94636e-c7eb-4faf-8269-e7c2338412ef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1e005a03-8f7d-4545-9a3e-4881f66476a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecdd54e-e8f4-46e3-92e9-001a6516d91a",
        "cursor": {
          "ref": "1f58855c-84bd-4b20-8d53-1cace5dc955b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8bd8417d-3090-4c82-8c42-f10c499fd310"
        },
        "item": {
          "id": "fecdd54e-e8f4-46e3-92e9-001a6516d91a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "793c5245-3c25-4492-9ffa-be8104c0d093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d6c57b-e613-4d56-8805-e52641f4c549",
        "cursor": {
          "ref": "63b954fc-9469-4806-97f9-8c948a64f700",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "99f6eb49-1d10-4aff-a671-6e652628eaa9"
        },
        "item": {
          "id": "22d6c57b-e613-4d56-8805-e52641f4c549",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4b4fc75e-7407-49c8-aa35-e3b562bacc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8089e63d-b1f3-450a-ae1d-9e7876a92bac",
        "cursor": {
          "ref": "89939ebb-b948-4d18-a465-35aed9dc0261",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "04601e13-8787-459b-9ce7-a13a8c6e4fd2"
        },
        "item": {
          "id": "8089e63d-b1f3-450a-ae1d-9e7876a92bac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cc794bec-bbc9-4c23-a055-23736e152932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df3cb09-1962-4377-965f-c2a0749d299f",
        "cursor": {
          "ref": "76bd3131-0346-46c4-891b-dec5d54bae31",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "40ed4d94-3e4a-42f5-b6c3-055972be7e9b"
        },
        "item": {
          "id": "6df3cb09-1962-4377-965f-c2a0749d299f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d4df16e2-c82a-4d78-bb43-8121a8fbb56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2705fee-8ef8-4b26-9bb6-98fa927b4ada",
        "cursor": {
          "ref": "d3e0da15-9222-492d-91f0-23a2f25839fe",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2e49a1aa-e5f4-4bf6-bb26-013a08de649c"
        },
        "item": {
          "id": "e2705fee-8ef8-4b26-9bb6-98fa927b4ada",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dae15ce8-b19f-41c5-8c54-0183540b59cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617d90de-647d-4490-b21d-f01052cfb742",
        "cursor": {
          "ref": "bda349f3-1ec4-4339-af39-cdc23ab730a2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "32c8eaf5-2ab0-4c89-a8a8-d1b1828be878"
        },
        "item": {
          "id": "617d90de-647d-4490-b21d-f01052cfb742",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f255092f-b635-4f7a-913f-778c92b7aa21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c50d1e-ad6e-4743-ad8a-6b03783c89be",
        "cursor": {
          "ref": "8c146476-31aa-40c1-8227-0c866041a689",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8e9579fc-dd48-4fe3-b4e3-4e31ff197e4f"
        },
        "item": {
          "id": "07c50d1e-ad6e-4743-ad8a-6b03783c89be",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "11e635ca-fa7a-4595-9f8e-d996fac49150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e3457e-e6bc-4e5c-9e68-9be52f47188a",
        "cursor": {
          "ref": "c3154631-62f2-439c-88d0-30bbebed5fd4",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f23f6c80-63c5-4c23-8c63-b82b494dc48a"
        },
        "item": {
          "id": "45e3457e-e6bc-4e5c-9e68-9be52f47188a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3f834829-c530-4bc3-b7ca-cb397ec1c247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d5d957-a2c3-4b1a-b563-5aa5b4a9e851",
        "cursor": {
          "ref": "8d7b57b3-2aa7-4952-b6ec-5f49ca87c204",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "127efef4-2e30-4407-af0b-62ed92e86ec3"
        },
        "item": {
          "id": "c8d5d957-a2c3-4b1a-b563-5aa5b4a9e851",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c6e70bbb-f644-4b17-99d8-aeb458f24d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5354f1ea-226e-47ac-b89f-27596026e270",
        "cursor": {
          "ref": "7c6d152c-12c6-427c-9ba7-76e6387bcfda",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fe7b1943-53b3-4982-b433-95adfe2d015a"
        },
        "item": {
          "id": "5354f1ea-226e-47ac-b89f-27596026e270",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b313824a-254e-4336-8b50-a0a4ace96a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f2e5ce-e20c-455a-ba5f-cc882488136c",
        "cursor": {
          "ref": "1e875cb0-e481-43be-8702-670f342f471d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9ae64810-d44a-45f1-866e-be13259dafc2"
        },
        "item": {
          "id": "80f2e5ce-e20c-455a-ba5f-cc882488136c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8258f38b-7900-4000-91bd-98712af041eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916e5eec-c03a-4b3e-b4c1-9df558bb1949",
        "cursor": {
          "ref": "65493654-68ae-45ba-b01f-07d95f320f3e",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fcb6b741-1b7d-415c-98ec-f9db48a8eb60"
        },
        "item": {
          "id": "916e5eec-c03a-4b3e-b4c1-9df558bb1949",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ec4f65f6-de69-4cf9-a287-e058bd21c88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fc8aae-3522-45ad-bc82-4b57733061cb",
        "cursor": {
          "ref": "e29ce582-1a6a-45df-a125-afcbdb2aa507",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "61d64961-4990-45a5-aa02-09341a5dd44e"
        },
        "item": {
          "id": "a7fc8aae-3522-45ad-bc82-4b57733061cb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "883a9b77-c687-4693-a3d9-333550b55511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c67131-e5ca-4473-992b-1926a35ae6ac",
        "cursor": {
          "ref": "a44ca920-ace2-436c-b83f-85e4a857c3ea",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "13287b00-65e4-4db1-9a29-60657a02e721"
        },
        "item": {
          "id": "97c67131-e5ca-4473-992b-1926a35ae6ac",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5781b68d-994b-4371-bc7a-2fa0376dec5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255d0364-a805-4312-a833-2747c81317cb",
        "cursor": {
          "ref": "c6d1be4f-bd98-4062-ab17-e7a3eae235de",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d3d6cb7a-f19b-46e2-9bbc-70fc8da7efde"
        },
        "item": {
          "id": "255d0364-a805-4312-a833-2747c81317cb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b7e077ab-f696-4194-8072-b52e9ced262e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63af5eb-5854-48a7-bec0-018a776f50f4",
        "cursor": {
          "ref": "71ab176c-ef14-44c7-bfcf-ef1894d34d78",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bc56faa1-928b-49f7-ad0b-d2b729fdc599"
        },
        "item": {
          "id": "d63af5eb-5854-48a7-bec0-018a776f50f4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "885b0f0c-bc80-47d5-9cad-2a553441a788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95c0ce8-442b-4521-8176-5cf688d35fd9",
        "cursor": {
          "ref": "e60cbb75-e353-46cc-b1e5-148462298c2c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ab24b1d9-804d-4b86-aff5-f3ca818523d3"
        },
        "item": {
          "id": "c95c0ce8-442b-4521-8176-5cf688d35fd9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "039607b8-c35f-4847-bf89-f6a5062c569b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f799be4-2db2-4354-b6a8-7c39c73b7d65",
        "cursor": {
          "ref": "435dcd71-4e2a-470f-aee8-9c5d200d3589",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cec5669b-3957-4c13-88e5-169f069f52f2"
        },
        "item": {
          "id": "4f799be4-2db2-4354-b6a8-7c39c73b7d65",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "13331578-1eb5-484a-80fb-b3e6a43571ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b9ec7b-a7bd-41f0-b719-356ebef9e4dc",
        "cursor": {
          "ref": "16d2f26d-2e5f-4ec2-972c-ced2da3baedd",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b82defcb-6ebc-4795-b1fe-6972b44162ff"
        },
        "item": {
          "id": "23b9ec7b-a7bd-41f0-b719-356ebef9e4dc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1e3607e3-8714-4b3a-b6f7-b28b1427c277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40cf09a-a4ad-4e8e-8ca6-986700c3ccd6",
        "cursor": {
          "ref": "7ac95740-b7c4-4da6-a6f9-1e8c82175bef",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5019c3d5-7870-4ab7-83c5-96203da4596c"
        },
        "item": {
          "id": "a40cf09a-a4ad-4e8e-8ca6-986700c3ccd6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "57f5ead8-c541-4e1c-b7df-6e1b76e1d171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8b89bc-01cc-40be-a42c-d75404980fc7",
        "cursor": {
          "ref": "41113a67-dfbe-4943-80a4-0f1f693dce63",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "30db7d1f-5f66-4328-9a58-7f07bd3aa494"
        },
        "item": {
          "id": "fc8b89bc-01cc-40be-a42c-d75404980fc7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bedd3dab-a90a-4742-97d2-a1d99992e5d4",
          "status": "Created",
          "code": 201,
          "responseTime": 913,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4376f09b-fc52-44c4-9e37-27167ba03d8b",
        "cursor": {
          "ref": "ea1117f9-3689-4c93-bae3-61ed224b6730",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "34289423-d0c1-4cb8-9536-81a7b845f95a"
        },
        "item": {
          "id": "4376f09b-fc52-44c4-9e37-27167ba03d8b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6d345bc4-7ba7-4ac2-a448-44605bee6a74",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "96eca2e1-cf8b-4077-bc8b-5f6b090c4a47",
        "cursor": {
          "ref": "b9500c72-675b-4e2a-8a95-9b063ef8adc7",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "576b6f6b-edf4-4471-88b6-05c85b161907"
        },
        "item": {
          "id": "96eca2e1-cf8b-4077-bc8b-5f6b090c4a47",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "971f9def-78d9-42d6-b8ea-cc771d8ba42f",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "787df5ba-396c-49fc-83ad-58b008cfa474",
        "cursor": {
          "ref": "b9d94c79-1369-4a81-86fe-e0ea82aa6fe8",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "132fd414-3bf2-49d1-b2f7-c5ca542431cb"
        },
        "item": {
          "id": "787df5ba-396c-49fc-83ad-58b008cfa474",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3c95776a-9f65-40e0-8dd3-44a0640717ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31eb441-81cf-479b-9e2c-b07a38a1bf36",
        "cursor": {
          "ref": "a1883756-51c3-44b7-8392-9180943d99f2",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "db6a7370-354c-4c02-9bcf-bf82d7808a46"
        },
        "item": {
          "id": "b31eb441-81cf-479b-9e2c-b07a38a1bf36",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "68c8ef21-eebc-49b7-b4b3-4b70f1d2bcfe",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b5c0b146-4017-425c-8575-141c8b38e8fa",
        "cursor": {
          "ref": "e67c89c3-2992-4705-8d5d-dbc399041389",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "14405a49-f187-4fed-80e2-fecb128f9207"
        },
        "item": {
          "id": "b5c0b146-4017-425c-8575-141c8b38e8fa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a4f9310a-fad7-48a9-9d3d-b78486aed89e",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "58087b38-a8e8-48ce-bb8a-365a0d27b190",
        "cursor": {
          "ref": "18436161-6934-4b59-9626-b999a6476b5d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1f05670f-15bd-4964-9f77-2994409210d6"
        },
        "item": {
          "id": "58087b38-a8e8-48ce-bb8a-365a0d27b190",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "29dfccbe-0f2e-40b1-9061-6623f974ee85",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "64ec7cdd-bc99-484b-837e-ea0078bac84d",
        "cursor": {
          "ref": "4c359269-765e-48da-bd83-0a4a48e2e188",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "372ac140-958e-4276-a36b-33e3004b0673"
        },
        "item": {
          "id": "64ec7cdd-bc99-484b-837e-ea0078bac84d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "85067e4c-aa59-4556-aa40-1659cd24780a",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cdbdaadf-47cf-49f1-8dbd-a6782d8cd99d",
        "cursor": {
          "ref": "cbc457d7-48bb-4cff-8c2a-9a4798437d24",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3a9ea343-1156-462f-be97-5d0a86ba9c27"
        },
        "item": {
          "id": "cdbdaadf-47cf-49f1-8dbd-a6782d8cd99d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0ea80a35-be16-4c71-aad1-01e2cce300cc",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0cd0279f-8f59-4cec-8343-67765731f722",
        "cursor": {
          "ref": "141d765c-37c4-481e-bd22-ef71451a48c4",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c16de863-776c-43a3-bf8d-9bd555228d88"
        },
        "item": {
          "id": "0cd0279f-8f59-4cec-8343-67765731f722",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "71185593-74d0-4c28-a949-e98483d254bb",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "39d7dbdb-93f5-42b6-b6bf-e412567b16b5",
        "cursor": {
          "ref": "ac1d3903-2758-4570-a9c1-70e4eeb4a64c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "92e0f5d8-3cb1-440c-a1b9-105cc04c2381"
        },
        "item": {
          "id": "39d7dbdb-93f5-42b6-b6bf-e412567b16b5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f5307283-e987-4c45-8f76-eabbee95e33f",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d55c0664-33ed-4ab1-bc80-8d062eda5123",
        "cursor": {
          "ref": "41a0d973-3639-40ba-936d-1feb0059bb25",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "16d1cb14-0e3d-4d05-bef6-761fd7e73f4b"
        },
        "item": {
          "id": "d55c0664-33ed-4ab1-bc80-8d062eda5123",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f18218b5-5475-4b33-a872-5679c8c6e91a",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "05c5aeb9-a6fa-4f5c-9a94-744bd8f39ed5",
        "cursor": {
          "ref": "08b1b77c-7485-4ebc-858e-c70f451cfb48",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "842043db-f3cf-44ba-804d-2b86a59be87c"
        },
        "item": {
          "id": "05c5aeb9-a6fa-4f5c-9a94-744bd8f39ed5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "871483cb-fa11-4ed2-a5c5-decd13a79b98",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "22f9411e-950a-423b-9654-3295c7ced8d6",
        "cursor": {
          "ref": "23d3eccd-329f-4971-81ea-f47c1d5d0a4a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "76dd827f-06bb-4b14-ab96-2c8b3310f73b"
        },
        "item": {
          "id": "22f9411e-950a-423b-9654-3295c7ced8d6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "804e7c03-4a0a-40fe-9e92-298ed2b9f338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ff9451-71dd-49fa-91cf-27f16f3194d3",
        "cursor": {
          "ref": "71a8dc90-d11f-49d1-a18e-793ef9210755",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9e36a4c4-7be3-48f4-ada0-7148e371df94"
        },
        "item": {
          "id": "58ff9451-71dd-49fa-91cf-27f16f3194d3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0ef6a63b-5ae9-4273-9850-524646fed3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d16749-0229-43e4-9820-47025667d3c8",
        "cursor": {
          "ref": "365a1e2b-909f-4cde-b626-266313b821c0",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d02ee214-08a6-4d8b-b172-4e16b3af2488"
        },
        "item": {
          "id": "f4d16749-0229-43e4-9820-47025667d3c8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0d3d7728-ca35-4658-8008-165896a15fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d37ab9-cddc-46a7-b245-0fd6a882f9f6",
        "cursor": {
          "ref": "d50b39c0-e250-42c1-b315-7b405fba12b1",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a72e128e-cde8-4198-a7a9-7553a19e2ce6"
        },
        "item": {
          "id": "98d37ab9-cddc-46a7-b245-0fd6a882f9f6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a90df4d7-765a-48d1-b079-b498a1d351bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789001ef-a769-41cc-9fc1-7063f7e1808a",
        "cursor": {
          "ref": "cfe6dca4-acaa-4862-aada-b133a237a0c6",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "60ad1085-a945-414c-a69a-a0a6543de036"
        },
        "item": {
          "id": "789001ef-a769-41cc-9fc1-7063f7e1808a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7ae74316-e684-4b68-be6d-9fbedeb42bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e60924-12b9-4b24-bc75-d66676c33463",
        "cursor": {
          "ref": "21016432-764c-4827-9944-074d57b9ab4f",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "44e1c006-261c-4840-bf47-3d4b0c8a95c2"
        },
        "item": {
          "id": "98e60924-12b9-4b24-bc75-d66676c33463",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0ba4c13b-1faa-4837-b4b8-6c13a6744099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829fb2f1-0d98-42f2-a491-a3854ba54242",
        "cursor": {
          "ref": "37e044f6-295e-4eaf-b7e7-b527b8395b76",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "067a60a9-9e00-4aed-b673-47758c03fe87"
        },
        "item": {
          "id": "829fb2f1-0d98-42f2-a491-a3854ba54242",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0098bafc-dee6-4c86-98b5-652d7fed73dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d939c176-0bc8-4062-a619-4d4f7d1bd04a",
        "cursor": {
          "ref": "c6af2eaf-c652-464a-8043-ff7abd6e90b9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2bcd791d-1be6-4b02-b2f6-dfb9d4a50fcd"
        },
        "item": {
          "id": "d939c176-0bc8-4062-a619-4d4f7d1bd04a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "02e51834-3bd6-483a-a655-820663da7b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118efcd0-595b-42cf-9991-1806ecca16a7",
        "cursor": {
          "ref": "2a81e917-c1c0-4af3-bbdc-2349496bb471",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "af0ba12d-326b-450d-9ae7-f292049dbc00"
        },
        "item": {
          "id": "118efcd0-595b-42cf-9991-1806ecca16a7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "67c94737-e4c4-4b76-b457-936c4334a079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e738eea-6706-47da-b775-a6753f45d054",
        "cursor": {
          "ref": "925295be-ddb3-421c-8f34-025da4ae0d24",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3aa84701-9571-472b-9bc7-134d27c9b509"
        },
        "item": {
          "id": "1e738eea-6706-47da-b775-a6753f45d054",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6420b9c5-c952-45cf-b6b9-90b146039295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a79d31-de57-43e0-800e-712e8477f8b8",
        "cursor": {
          "ref": "360b989e-f736-4aa8-aef9-b1a8bf7646ce",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8347c236-4095-4715-8887-4f2df06d1b32"
        },
        "item": {
          "id": "38a79d31-de57-43e0-800e-712e8477f8b8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f360c5c0-5cba-4ef6-adac-8fb87dab022c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a35ca5-6632-4888-ad2b-f703a43fd43d",
        "cursor": {
          "ref": "b4e59c1e-6c04-45ed-bb00-c8ce37c9f0ac",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "105c6762-4bcd-4174-a1f5-b5fb248e592f"
        },
        "item": {
          "id": "89a35ca5-6632-4888-ad2b-f703a43fd43d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "904310e8-67ed-4d02-a0e3-6a9da6a63d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6d433c-b627-4be1-9491-739d8528f683",
        "cursor": {
          "ref": "1af14a94-b215-460e-aad8-dc0d6995dc6a",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9204b760-494f-40d5-961f-9229a9351167"
        },
        "item": {
          "id": "cb6d433c-b627-4be1-9491-739d8528f683",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d55d775f-4982-4919-804a-24ff60145b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdcaf38-5525-44a0-88ed-e6a24cfd3371",
        "cursor": {
          "ref": "8ccafbf4-43cf-414e-bf3c-9b7e9c5c3b22",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0206c5d6-5088-4798-b242-d4dbb893e274"
        },
        "item": {
          "id": "cfdcaf38-5525-44a0-88ed-e6a24cfd3371",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9a327beb-8aec-481d-9e45-86892d7082b5",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "df5e7a23-1660-461d-b722-171b50033d9a",
        "cursor": {
          "ref": "40e55092-b2cf-4d84-9950-3100a551225a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d9919101-4764-494a-a68c-b2712d1497c0"
        },
        "item": {
          "id": "df5e7a23-1660-461d-b722-171b50033d9a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "831f3f1d-564d-41ff-a2e5-b4e82e7a75df",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "da109a4d-b2ca-43e3-b413-4771b60e07e2",
        "cursor": {
          "ref": "05b0e1f8-5a8b-4791-82df-561c2df6f72b",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "730fa218-e3cb-4a9f-bc62-eff1a6f86e20"
        },
        "item": {
          "id": "da109a4d-b2ca-43e3-b413-4771b60e07e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e7e084d2-5c63-49fe-afac-fe44e99620e7",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c77c564b-5318-44db-8b03-24c2050a0cd8",
        "cursor": {
          "ref": "1e111e5b-ac82-4d60-8ca6-890fe0bec9b8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e19c6a79-e5ed-4ce0-ae35-0d63666aa3c3"
        },
        "item": {
          "id": "c77c564b-5318-44db-8b03-24c2050a0cd8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6eea2659-b2f9-42df-a4de-abd62d36aabb",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4ead4654-d26b-4186-ab46-88cb2dfc06e2",
        "cursor": {
          "ref": "e372a7da-0987-4d2e-aa22-853fdab79bb0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "52e02941-77ca-41e2-a48c-cb97890d51b3"
        },
        "item": {
          "id": "4ead4654-d26b-4186-ab46-88cb2dfc06e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a49ca41e-400a-460a-bf3b-340df64cdfcb",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e3c76df3-e902-4373-92ea-086b0b329e17",
        "cursor": {
          "ref": "a78035da-486a-4bfe-aca8-2a67afc513ba",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2d82479c-e2fe-4ebb-af43-2ecfc1190e43"
        },
        "item": {
          "id": "e3c76df3-e902-4373-92ea-086b0b329e17",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f9f5fd32-cacc-4e7c-9558-0c6109fa9fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2c831c-a85f-4772-880a-f997a591af37",
        "cursor": {
          "ref": "ff99573c-91dc-4812-bf7d-ef0f53acc89f",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e51a8f39-5eb3-4973-b8a6-f8343e782b11"
        },
        "item": {
          "id": "5a2c831c-a85f-4772-880a-f997a591af37",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "86ff2b72-0a4a-48b7-b81f-ac15bbd21f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b154841-4e54-415f-9426-e12850c25ebd",
        "cursor": {
          "ref": "7917255d-5d6e-4eb8-a502-c48d232acc09",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ccc1ce68-a5d8-4053-9e7e-5666dbcba66b"
        },
        "item": {
          "id": "7b154841-4e54-415f-9426-e12850c25ebd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a1907186-36c1-44e3-8016-19a6000341f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550c8d84-83ea-4277-9b5e-7fe593f17b52",
        "cursor": {
          "ref": "3ae6d44f-ed9d-434a-a89b-de3b20efe6ee",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "72d261c2-9d61-4e12-96b1-bc913a3d89c7"
        },
        "item": {
          "id": "550c8d84-83ea-4277-9b5e-7fe593f17b52",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "06c342c6-2e16-422a-adc7-8c60a6a7b983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3387292e-384b-417e-97d8-f61e748890fd",
        "cursor": {
          "ref": "daf9ebfa-d5b4-4c1f-adac-d30645d14e0f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "191bb5e2-7700-4ade-8668-84bc6194c491"
        },
        "item": {
          "id": "3387292e-384b-417e-97d8-f61e748890fd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e9dad9ac-831e-4eb3-9bfa-70c342602e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed443c5a-f66f-492b-b9cd-1d8445efa762",
        "cursor": {
          "ref": "c639ea9f-df1e-48ca-a30e-636fb7454c32",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fddb298f-a0d0-4eab-95fd-82f7fa8fb509"
        },
        "item": {
          "id": "ed443c5a-f66f-492b-b9cd-1d8445efa762",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a74210a7-34db-45be-badd-3ae1a1ea4677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664e7680-de5a-40e2-a61f-d9d5b3fb4a87",
        "cursor": {
          "ref": "74b5b705-6adc-4660-b1ab-d6bc91e259d5",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "54c51e59-5abc-4c24-bb8f-397e46ec7beb"
        },
        "item": {
          "id": "664e7680-de5a-40e2-a61f-d9d5b3fb4a87",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "badf6601-c48f-4241-a5b7-3385cd77d91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be8310b-7dfd-42ed-85a9-4103ab6c5243",
        "cursor": {
          "ref": "8014024a-cb8e-4eca-a22d-da05527b97db",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a472b5cf-d7c0-4232-b5e7-440abad30937"
        },
        "item": {
          "id": "5be8310b-7dfd-42ed-85a9-4103ab6c5243",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5cd1debf-2364-43ad-b2ed-b387b6813bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75980af8-cf31-4240-9d03-83b398067aa8",
        "cursor": {
          "ref": "17a82ed5-f012-4896-a2ea-4e86ac7cfa7b",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "efa89d3f-e65d-4154-92b3-01369c06a1ea"
        },
        "item": {
          "id": "75980af8-cf31-4240-9d03-83b398067aa8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d5166ff8-bf6f-4a28-bc91-5eee85f69259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe931684-bd3d-477c-bc9b-588befe0ddc5",
        "cursor": {
          "ref": "dfaee8dc-4e14-409f-8af8-46d07c48e135",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8f94ca44-130b-4f19-9ed8-a4f1c9345963"
        },
        "item": {
          "id": "fe931684-bd3d-477c-bc9b-588befe0ddc5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7697293a-017d-4354-adc7-3e3df19f3c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1c94cb-2afa-4614-a724-d92c5917798c",
        "cursor": {
          "ref": "51242120-a895-48b4-b311-fe145f283b84",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "17cb6265-ab18-42af-98de-01022b9a93ed"
        },
        "item": {
          "id": "bf1c94cb-2afa-4614-a724-d92c5917798c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e3f0deff-da77-46bf-a277-810ab461a6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c762b638-6cf8-4982-9f04-9f5263abebc5",
        "cursor": {
          "ref": "4038ca38-4a8c-40f5-995b-d1a312458133",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f5ce8ca4-5111-4fd3-a6b3-cbecaa20d15f"
        },
        "item": {
          "id": "c762b638-6cf8-4982-9f04-9f5263abebc5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bd166016-c6e1-4385-a11c-42a0b8fb9a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4f2ec3-679f-440e-afdb-c1960227b409",
        "cursor": {
          "ref": "02c566e8-cacc-4f9d-a948-baeaaa804683",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3d101bd8-24cb-457e-98eb-8baa1e0503bb"
        },
        "item": {
          "id": "dc4f2ec3-679f-440e-afdb-c1960227b409",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "acb8c367-77de-4362-9346-2d6b4ca5016b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb5df14-6049-471f-8817-b2c2bd3bc5d8",
        "cursor": {
          "ref": "38159978-6d61-422f-b147-c442446cf823",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c7b0c824-3f1e-4f21-9693-ee3257e37bc2"
        },
        "item": {
          "id": "5bb5df14-6049-471f-8817-b2c2bd3bc5d8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e2d80dae-4a16-4fe8-9ec3-2b3d83b9addc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00be634c-d724-4fb2-b835-e08507f9978d",
        "cursor": {
          "ref": "6d31ed34-c012-40ea-ba12-859275a859e4",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1e1336df-16bd-4b51-a7d0-efc684ba57f8"
        },
        "item": {
          "id": "00be634c-d724-4fb2-b835-e08507f9978d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c4e30657-4c0e-474b-9b3f-dff0ad44e6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b88119-82c8-42c7-a485-071b4205886a",
        "cursor": {
          "ref": "06be0a25-f92b-4be6-a21b-d2d7421ec82d",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4508bc1d-14ac-47a3-b265-459ad6d405bf"
        },
        "item": {
          "id": "50b88119-82c8-42c7-a485-071b4205886a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "52e6867c-b7f1-403f-8bdf-e25547026554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a47b74-3a61-44db-b4f4-00025107a7d0",
        "cursor": {
          "ref": "1f0d795f-a154-4222-97ff-731a6040c608",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2f271c1f-af8c-46c2-90ba-0c27417e6d56"
        },
        "item": {
          "id": "c1a47b74-3a61-44db-b4f4-00025107a7d0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "99c22c84-6b5d-4b05-861e-fdad4b32c853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0718f2a6-351e-4fe2-b589-dd4293cde873",
        "cursor": {
          "ref": "e7161ba3-84f9-4288-b587-d230ca979679",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4aed1e95-aa7f-4400-85b4-3e7e634c013e"
        },
        "item": {
          "id": "0718f2a6-351e-4fe2-b589-dd4293cde873",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fdea254e-f09b-4c69-9903-5af71106e006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a987c921-4b61-4d38-b1c8-692d9db0e1ba",
        "cursor": {
          "ref": "d9ef560e-d0f9-42d8-a472-bba1d68142ba",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "81798aeb-57ad-445f-b7cc-02ae1d503f89"
        },
        "item": {
          "id": "a987c921-4b61-4d38-b1c8-692d9db0e1ba",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "96d0a7d2-e401-4f89-b2b2-179f3d9e6e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b328fc-e9dd-49f2-8223-0e86c95aa853",
        "cursor": {
          "ref": "6a059a82-1029-49c0-bae9-90478fec1c48",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ac9ebac4-facd-4648-aa52-4187b66ea773"
        },
        "item": {
          "id": "c7b328fc-e9dd-49f2-8223-0e86c95aa853",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "282268ca-0c56-43ab-8367-94718ee0afa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad655f12-e17a-43f8-ad17-8057cfb73cec",
        "cursor": {
          "ref": "b47bd104-6aa2-4466-bf5e-21c7b82efa58",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0bc52886-7d4e-4ce0-8395-54e76c3fefa6"
        },
        "item": {
          "id": "ad655f12-e17a-43f8-ad17-8057cfb73cec",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d8555ef0-1ec8-403a-a310-bdd31d8d4bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0676f841-795f-4af9-83a6-ddb2d568b855",
        "cursor": {
          "ref": "8026e4df-f8b9-44bc-a278-3968f34fa787",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e289a998-cadb-4ad6-b418-28f90f233c48"
        },
        "item": {
          "id": "0676f841-795f-4af9-83a6-ddb2d568b855",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "72718831-ef2e-4754-b6ff-8d05b76a773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c487e845-58d0-45a0-b79a-103fb347cd64",
        "cursor": {
          "ref": "3d258479-85db-400d-aa0c-adc9b9fb2263",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9c866b72-7d78-4539-b54b-794992571298"
        },
        "item": {
          "id": "c487e845-58d0-45a0-b79a-103fb347cd64",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d9c276b3-185d-453c-aa8b-7aee5f4cea0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72629bef-edd7-425a-8fba-388873d41a86",
        "cursor": {
          "ref": "414395ad-1c45-47da-ae0a-7aacad8e28d4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3024cd42-1d86-4bef-ad7b-27861b59b243"
        },
        "item": {
          "id": "72629bef-edd7-425a-8fba-388873d41a86",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "62c4df6e-a576-495c-a814-441255df70b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdf2f85-4918-40c8-b186-12aedfc1e262",
        "cursor": {
          "ref": "d249cb18-ffff-4fac-95e7-ee065612f215",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e8f31e1b-8daf-44d1-be05-e232d2a34c8b"
        },
        "item": {
          "id": "3cdf2f85-4918-40c8-b186-12aedfc1e262",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "23149b2f-f991-42d1-b17b-9e9a36d116fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565dbdb7-91e3-4fbb-bf3f-0e8484244a2a",
        "cursor": {
          "ref": "68198e36-45f7-4de9-ab60-7148e73247c1",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "41c97ee8-69e5-44e1-ba59-a41948787daa"
        },
        "item": {
          "id": "565dbdb7-91e3-4fbb-bf3f-0e8484244a2a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3cf79925-f00c-4213-9ebe-e46f91ce8614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d306b5-2201-42a8-af3a-0ea6019a10ff",
        "cursor": {
          "ref": "5cc1ca0e-5550-4c38-b4e1-299e8667d747",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "63101dd1-1e26-4294-b641-46b5fae7aad4"
        },
        "item": {
          "id": "d4d306b5-2201-42a8-af3a-0ea6019a10ff",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "608007bd-1f65-48d3-93a8-d465f44d4fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515be09d-8e08-46de-b66e-184d8dfc22be",
        "cursor": {
          "ref": "393a34de-c825-469e-afd9-3026a12c369d",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "aa7efcc3-76c8-410d-8587-02de9e86cf70"
        },
        "item": {
          "id": "515be09d-8e08-46de-b66e-184d8dfc22be",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a21160f0-e927-4f25-be7c-eab54a0860c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a18022-b3d7-4d25-a333-25af744e9ab5",
        "cursor": {
          "ref": "1e1b181b-ba9f-4f7e-8536-67528ae81555",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "61245442-30af-437e-8756-fa92c60b7bf7"
        },
        "item": {
          "id": "54a18022-b3d7-4d25-a333-25af744e9ab5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2c90a7e4-dc87-42b4-95e9-0c596dabcad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723badc3-a59a-4c48-a1d2-8046e2351cdd",
        "cursor": {
          "ref": "7cadbf64-2d4a-4b7a-bf9b-cd62aed519f3",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c2323b53-7ce3-4da2-8935-8576e73068f4"
        },
        "item": {
          "id": "723badc3-a59a-4c48-a1d2-8046e2351cdd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1171d811-ed3b-4204-bcb1-8fdbf49eafcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99d3b33-7a33-4a06-b782-28fbaab4c867",
        "cursor": {
          "ref": "dc8efd4c-a634-47c4-aeee-328f4fac4388",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "83e1d0ed-8712-4d60-b322-bad7df9a4a4b"
        },
        "item": {
          "id": "b99d3b33-7a33-4a06-b782-28fbaab4c867",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "69d6704c-5645-4edd-a9ba-3e802dfc7531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3085e664-1e6a-4600-82f0-2f93c575ad33",
        "cursor": {
          "ref": "d1619807-a2b8-4226-a4d6-7a0cd80ec22f",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "be7a1e64-923c-432d-80ca-28e25236c1d9"
        },
        "item": {
          "id": "3085e664-1e6a-4600-82f0-2f93c575ad33",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b157209a-2095-48cb-9615-776005d1fb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a308e44f-1073-4798-9027-49a30ef33c82",
        "cursor": {
          "ref": "c8bb75d3-6fd0-4db0-b56e-9cf9a1ede713",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "10459830-feae-4a81-89a5-01d7cfc845b9"
        },
        "item": {
          "id": "a308e44f-1073-4798-9027-49a30ef33c82",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "447d450a-3c9c-46cc-8859-37479263afee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f98c3fb1-5a54-48d6-879f-58dc2d050778",
        "cursor": {
          "ref": "cfbecf38-6551-4598-b0d5-01ba525cdfbe",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e53895c1-bc38-48d0-8408-2718edbf8102"
        },
        "item": {
          "id": "f98c3fb1-5a54-48d6-879f-58dc2d050778",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c11b444a-af72-47c9-8547-07f145ca880d",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d8ac2c-dbdb-41da-9d98-d1b51e3716ad",
        "cursor": {
          "ref": "fae67405-a4c8-4c7b-93da-283b65b916eb",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "577cb5fa-996f-4db0-b28d-16a4a7937f84"
        },
        "item": {
          "id": "70d8ac2c-dbdb-41da-9d98-d1b51e3716ad",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6d450fb4-23ab-42ab-9d8b-525a0ec540d4",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfb57f8-bb18-4425-afb7-12400056f98e",
        "cursor": {
          "ref": "7adeebee-084e-4c05-9ef7-88c6417bc8d2",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f500b38e-ef76-4d01-9e08-a4a7052f5f97"
        },
        "item": {
          "id": "dbfb57f8-bb18-4425-afb7-12400056f98e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e22bf15d-b0a0-4587-bfd0-674143bc87e3",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e90772-3ff5-43fa-a28d-978ce2a745a9",
        "cursor": {
          "ref": "93d82c1d-b0a5-4e49-9db1-37d6f7daa4c8",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "daa00f8f-53ad-4d9d-9ac6-e34927d8f6a6"
        },
        "item": {
          "id": "b3e90772-3ff5-43fa-a28d-978ce2a745a9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cecb3c6e-5270-49fd-b91e-880c38e90c73",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3916cab1-0bde-47e9-b320-c8812effc1a6",
        "cursor": {
          "ref": "4089cef4-7c24-49b8-9eeb-729ca22e0301",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "79db29b6-867c-4215-b991-0caff7fa47d8"
        },
        "item": {
          "id": "3916cab1-0bde-47e9-b320-c8812effc1a6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "38b807bc-e28f-4ecf-985f-777518dfb980",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-22T00:37:52.946Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-22T00:37:52.946Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "700998fe-ed08-458c-8a18-e6c8e8309787",
        "cursor": {
          "ref": "fe071dc5-fa21-46a3-ae8c-137de1ed0e83",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fb6ec80f-dbe1-43cc-be64-ef42ee8a0a5e"
        },
        "item": {
          "id": "700998fe-ed08-458c-8a18-e6c8e8309787",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f826cc77-2c49-448f-aceb-e0aa519adb46",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2414464d-48f9-415c-8c66-7ca14d3c419b",
        "cursor": {
          "ref": "128dcc0c-b8cc-48fe-868a-029e1b5e8610",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7ba186d0-08b2-4cf0-9ce5-623534d07dff"
        },
        "item": {
          "id": "2414464d-48f9-415c-8c66-7ca14d3c419b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5bfdc13f-8c1a-4762-92e7-8ed5ec4c7aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775ee20f-8e03-4d68-a250-b6b583caa823",
        "cursor": {
          "ref": "d7fb7201-e81d-4d9c-8c4d-bf498dc45fde",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ebf8850c-1ca3-48dc-b226-b76670b8e96e"
        },
        "item": {
          "id": "775ee20f-8e03-4d68-a250-b6b583caa823",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c6ac7e22-bc9d-4e0f-b5cd-9bbc8b18afcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89320197-a33a-4e6a-abb3-f74e945de5c9",
        "cursor": {
          "ref": "e0e209c9-f246-494b-aa85-1583cf6f4895",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2698c39b-0cfc-403d-aa86-2e0f77e3cfb2"
        },
        "item": {
          "id": "89320197-a33a-4e6a-abb3-f74e945de5c9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c8053629-22b5-4c3f-bf9b-f075974bc2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4989a7c2-75c9-49f7-abe7-1bae610bf0b6",
        "cursor": {
          "ref": "42dda038-2cc3-4f27-8661-fb6ebe77a038",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4b39f283-1ba0-4bb6-a5b9-4cf9fb03efc5"
        },
        "item": {
          "id": "4989a7c2-75c9-49f7-abe7-1bae610bf0b6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8afe3e47-6c2f-4b34-ae57-abd43048591e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6019f6-67b5-4d00-96ee-9a9df9568a8c",
        "cursor": {
          "ref": "1291048e-3edd-47a6-a4ce-3eafdb78929e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ac3cf71a-0141-406b-af11-15fbb93aa8d8"
        },
        "item": {
          "id": "ca6019f6-67b5-4d00-96ee-9a9df9568a8c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aae4b64a-581f-4ff3-bb3c-9df2b4fb5a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289897b2-d161-4ae2-9b42-f01e469922f8",
        "cursor": {
          "ref": "0e83f4b5-72e9-4ca6-9464-82cf88dd1e25",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c71cf926-8242-401a-a5ce-25dad00a4d8e"
        },
        "item": {
          "id": "289897b2-d161-4ae2-9b42-f01e469922f8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a5b63a8b-6254-4c0e-a9bb-6e13bf7ed7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b945dec1-c3e0-4901-8047-3771f3d10825",
        "cursor": {
          "ref": "b57ce7f8-a800-4bf0-9982-177fbecd0cd8",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "84e1deac-e02c-457f-bac5-f606135e20a3"
        },
        "item": {
          "id": "b945dec1-c3e0-4901-8047-3771f3d10825",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "20caed6a-9272-409d-abc8-88e0bce9fcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4098c6f6-f79c-4033-a0d0-d17f0fae5fab",
        "cursor": {
          "ref": "848bd72b-6e4c-4bfc-bb9d-bda7cf99c491",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "34e30460-f9b7-43ca-a4e8-ccf8ee88d0ed"
        },
        "item": {
          "id": "4098c6f6-f79c-4033-a0d0-d17f0fae5fab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a5bca6b1-6884-40fc-9b4f-3c6c56e0d7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df037fa8-b321-4d9d-a48e-304e31a3989b",
        "cursor": {
          "ref": "b12859fb-f27d-4929-a283-73c8575b436a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b82ca2dd-5213-4824-9de9-61d8ef0afe62"
        },
        "item": {
          "id": "df037fa8-b321-4d9d-a48e-304e31a3989b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3933e56a-c82a-4a01-83de-ef7e8caec8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018fdd17-71ce-4805-bb55-cf0f0066eae1",
        "cursor": {
          "ref": "35b21ba1-dd95-4dc0-8808-f54da44626e0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "21c3b6d5-8d3b-47d7-b2b4-6b64ae0ba4d2"
        },
        "item": {
          "id": "018fdd17-71ce-4805-bb55-cf0f0066eae1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7664ba82-28e9-40ff-9caa-d811c324ad8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9252a64-92cb-407f-982c-de50d192e6a6",
        "cursor": {
          "ref": "c460e6de-db06-4b05-9064-50e50b010802",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a6ab2a43-db36-449a-8502-10c0b7c5e041"
        },
        "item": {
          "id": "d9252a64-92cb-407f-982c-de50d192e6a6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d2240647-c6ba-46c8-9fc6-88db6aa5f9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5cb14b-c2cc-47cf-a5a8-762b1d270a3c",
        "cursor": {
          "ref": "4305c876-7119-4f07-8185-2a051e22432a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "89011635-5994-4da2-8c94-6d3e83c173fa"
        },
        "item": {
          "id": "cb5cb14b-c2cc-47cf-a5a8-762b1d270a3c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "18fd7212-8d89-4042-a158-b3b6e9e789a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0343fb5-f368-4d07-ad5d-d0ae1e523a75",
        "cursor": {
          "ref": "999c7596-152c-4dd7-8b3a-8c687af704fd",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fea05ff8-1526-4c66-a25d-1ca675c91557"
        },
        "item": {
          "id": "e0343fb5-f368-4d07-ad5d-d0ae1e523a75",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bef61fac-1870-477b-935d-1446b78f1971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69c69f7-6f5c-4094-8ae9-881a49cdbe1c",
        "cursor": {
          "ref": "ad2ad155-0f18-477c-a651-fca8911beb1a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "60c748c3-ce83-464c-acc0-5253f4346a11"
        },
        "item": {
          "id": "a69c69f7-6f5c-4094-8ae9-881a49cdbe1c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a444a04d-d2fd-4f47-a04d-f518a06628f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6633a056-df1f-4b16-a8f8-465033c7ab0f",
        "cursor": {
          "ref": "a92cda3f-32ef-4ece-b5b7-966eca2eb130",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "85cad2da-2729-4836-9283-d2a9d6d848d8"
        },
        "item": {
          "id": "6633a056-df1f-4b16-a8f8-465033c7ab0f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fce875b7-62aa-4bf6-a091-7a2749d595cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3933e63f-7c96-4b21-bd23-feab4011dd5f",
        "cursor": {
          "ref": "21e360d5-39c4-4b9e-85bd-1f8d6c1bc423",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2a99a2fa-dd7a-4d36-9b30-83599185523b"
        },
        "item": {
          "id": "3933e63f-7c96-4b21-bd23-feab4011dd5f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eebf3eb8-011e-4d51-9a90-d298afdbb98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bb218d-ad59-421a-9c5f-8e593e23e055",
        "cursor": {
          "ref": "a5021a7a-c0a6-4c33-bfde-8019447f1fed",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ccbdbf74-2c37-49ba-afe3-6ed351284ba0"
        },
        "item": {
          "id": "62bb218d-ad59-421a-9c5f-8e593e23e055",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5aa5ea21-43d4-44a1-a4ad-c943c41c0736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb69569-dc08-412a-9207-b3245be4973f",
        "cursor": {
          "ref": "7d5afd24-afad-4bdc-9435-9bc680a22526",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2ecd4ecb-60e1-4589-b7c6-f4ea6bd2be75"
        },
        "item": {
          "id": "8fb69569-dc08-412a-9207-b3245be4973f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d8c34d68-2376-4ad0-a9f5-0293397cd1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d202d98f-27e7-4cf3-9fc1-bc3d727e019b",
        "cursor": {
          "ref": "85e6a70d-4d40-4355-a49c-f8699263bf8c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5d7d2930-3a6a-4cfc-adb5-ea23b218d6f9"
        },
        "item": {
          "id": "d202d98f-27e7-4cf3-9fc1-bc3d727e019b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "940a4414-ee53-4153-a751-272352ff7885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9a3437-d942-4335-b541-bb236710c256",
        "cursor": {
          "ref": "a010939f-1d67-4d6e-b98e-34d5abe15462",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d2830dd7-0b6f-4f86-a456-8e0a892bc939"
        },
        "item": {
          "id": "fa9a3437-d942-4335-b541-bb236710c256",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "60651c4d-1b59-4be2-9c28-99f50c44a8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd4436b-5424-46a1-8e88-eca9d9a57d5e",
        "cursor": {
          "ref": "58557a5b-c58a-4f94-9cd7-8ca8805937bc",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f0cdc8e5-2077-463c-8638-d467589d9b3a"
        },
        "item": {
          "id": "0bd4436b-5424-46a1-8e88-eca9d9a57d5e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d37dafdb-26ec-49e9-9341-9d4c3f401e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49a8f09-3ba0-478b-88c8-4fbf676e1ceb",
        "cursor": {
          "ref": "a85a9b41-018a-4883-b3b9-e522138090af",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a808e1ca-79b1-4e3e-a47c-660d2a7ad59e"
        },
        "item": {
          "id": "a49a8f09-3ba0-478b-88c8-4fbf676e1ceb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1068f348-c127-4d78-ad70-737ad55f45af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322f8b7f-0a32-4f05-83d9-9dd64be49169",
        "cursor": {
          "ref": "c78d99f3-b8a2-4279-a121-cab448d8a964",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "50169f24-f90d-4b8f-92d2-d6a1c6e2f759"
        },
        "item": {
          "id": "322f8b7f-0a32-4f05-83d9-9dd64be49169",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a33aaa39-40ce-4407-a529-71e03662ae30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beec098b-a952-417f-8be7-ff749f4c991a",
        "cursor": {
          "ref": "4b0a3283-cc6b-48c3-afc1-72c026b87dc2",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2232b9a1-2613-4916-899b-a0350f17c670"
        },
        "item": {
          "id": "beec098b-a952-417f-8be7-ff749f4c991a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fcaf74e7-600d-4d03-a1a2-bee766bd9420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1715373e-1b4d-4e1e-92d5-4cda72a80fc0",
        "cursor": {
          "ref": "dafc4bb3-d561-40e3-8145-1ca0adb2a7a1",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1706ff45-9980-4b58-85a3-29dfcfdf52a3"
        },
        "item": {
          "id": "1715373e-1b4d-4e1e-92d5-4cda72a80fc0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1971547d-e55d-4588-ba43-4c49bbc45ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9565633-deed-4aad-b403-27607010a372",
        "cursor": {
          "ref": "ec94b102-b40a-4803-8a78-d6ef65fc471c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4a118bdc-017a-4ff8-8ea1-53def3464d90"
        },
        "item": {
          "id": "c9565633-deed-4aad-b403-27607010a372",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8ef6c48f-a612-4491-a155-e8bfc569c33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b07d1a-8fd8-421b-83ac-e41ccf565734",
        "cursor": {
          "ref": "f0e2880a-5365-41a2-ba6b-5f7301bdfcda",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e3c75bff-bce1-40c3-b437-c478543a7178"
        },
        "item": {
          "id": "20b07d1a-8fd8-421b-83ac-e41ccf565734",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1046ef30-c9e3-46b1-b776-307ffcf7de81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adfdd9c-9e7b-49a1-8398-ee5263083f93",
        "cursor": {
          "ref": "37eb500c-73b2-404e-9e64-483eaa417dff",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7ed3f0c6-942b-4e33-a0ca-9224dfc8f756"
        },
        "item": {
          "id": "7adfdd9c-9e7b-49a1-8398-ee5263083f93",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "99c502a3-d595-4d0a-85a2-76bb57d8efff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034241c5-7c2e-4ac6-9641-ea106d754185",
        "cursor": {
          "ref": "3f9cbfef-dcef-4330-ba60-51a446e6eab9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2a26efd2-e7e9-4928-b841-c065e85aebf8"
        },
        "item": {
          "id": "034241c5-7c2e-4ac6-9641-ea106d754185",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b22a764e-0228-4200-9695-da90180f032d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bd634d-9a22-474d-a0c0-4e0dbe999150",
        "cursor": {
          "ref": "a0d9dfbe-94c1-41c8-ab32-c14920d2ef70",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9b63556c-4b14-43f0-942f-26f235f29317"
        },
        "item": {
          "id": "69bd634d-9a22-474d-a0c0-4e0dbe999150",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f9baf763-02fe-494d-96af-d39868bbcc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1ada4b-4614-4c2a-8597-2ce7f441692f",
        "cursor": {
          "ref": "12dd8522-897c-4eb4-85ad-f98868f0f41b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "40548280-0ec6-4e21-ab21-1d7b13b1b6ed"
        },
        "item": {
          "id": "5d1ada4b-4614-4c2a-8597-2ce7f441692f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5f383cce-4612-440b-b051-bbad5fc2f320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64deeb6c-34d0-4d2f-93bd-7f97d60a4d6c",
        "cursor": {
          "ref": "9a26d859-d8e1-4d3f-bf76-02194c30353e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "876e629d-e509-4034-b63a-04123ae1a745"
        },
        "item": {
          "id": "64deeb6c-34d0-4d2f-93bd-7f97d60a4d6c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9d8337d7-d777-46bb-b07b-f4529dce71e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc0c7c6-3f0c-4242-98ac-b2c5f4f134ce",
        "cursor": {
          "ref": "7871a5c2-b20e-44cb-865e-4a6a13dd2749",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "87f2d3f1-0c1c-44f0-b57d-6743d7804169"
        },
        "item": {
          "id": "1dc0c7c6-3f0c-4242-98ac-b2c5f4f134ce",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bb66f299-3e99-45a1-8d41-881cd75d54aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ba79c1-4cc4-4e08-9785-bd0dcb53ed5b",
        "cursor": {
          "ref": "a606e74f-2675-446f-aebc-61724a6053a7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c50807db-4799-479a-96fa-6e59e2513460"
        },
        "item": {
          "id": "f8ba79c1-4cc4-4e08-9785-bd0dcb53ed5b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c1e80e7c-12be-47d9-89e4-eb3ed3e1363f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8e44b1-fd1d-4d89-9a67-c939e05a774c",
        "cursor": {
          "ref": "2b5ecd35-d495-4bc2-b3f9-54be97493113",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b6eac964-3e76-4b55-9d39-df58eb2a64a6"
        },
        "item": {
          "id": "cd8e44b1-fd1d-4d89-9a67-c939e05a774c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "57224289-f867-43d3-a85f-41f73f066f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734fce97-0564-4bc1-a305-161155e83cb6",
        "cursor": {
          "ref": "c7134800-cf6f-459a-9553-84933b4ab410",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1c27eec6-2791-4e52-ade5-81e522318b31"
        },
        "item": {
          "id": "734fce97-0564-4bc1-a305-161155e83cb6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3cf140f4-b383-45b3-be64-5dbc1f9a2e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406cab22-25d9-4754-8d43-d181a95e5c10",
        "cursor": {
          "ref": "dc0ff0ef-2353-4f60-9466-60c2d34c3e60",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "146ee7d8-0d91-4392-ad77-2e357096952a"
        },
        "item": {
          "id": "406cab22-25d9-4754-8d43-d181a95e5c10",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "369084b1-4d02-4e6d-872e-9ec7b94bef37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa76729d-1006-4bc9-8ff8-0b6bc7df15bf",
        "cursor": {
          "ref": "38855d9e-0c46-4c60-aca7-8678c5ca1ba4",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0810983a-0a5b-4493-bc28-71416f7d3c5c"
        },
        "item": {
          "id": "aa76729d-1006-4bc9-8ff8-0b6bc7df15bf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f572e2e5-c3fe-4748-b1c9-58388c9d8fdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63b34e7-4962-4d40-ad79-5d2ce1c77504",
        "cursor": {
          "ref": "276b175a-8e82-46e1-abaa-5b9295d08169",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d9a3d504-acbf-4cef-ae46-235757b46c55"
        },
        "item": {
          "id": "a63b34e7-4962-4d40-ad79-5d2ce1c77504",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8734b821-485d-4dfd-8a42-47d6bf636a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de072de6-a219-46ab-b43c-1366d356e76e",
        "cursor": {
          "ref": "9aee7998-daf9-4223-aa8b-477167f0908e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cac85358-835f-4991-9e88-0390d41935d6"
        },
        "item": {
          "id": "de072de6-a219-46ab-b43c-1366d356e76e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2c9a7414-6007-4156-88a6-19bf438fc569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b16ec6-04d3-4657-ad2f-1266a0fec9e3",
        "cursor": {
          "ref": "30020a5e-e82b-4799-bc28-27329131a3cb",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b955cb15-e0c3-4e5d-8439-32403eb8e118"
        },
        "item": {
          "id": "d7b16ec6-04d3-4657-ad2f-1266a0fec9e3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "262163d8-a2e2-4e56-a575-bff129699503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9c72f5-dbae-47ab-bd87-f94fdcbbd91e",
        "cursor": {
          "ref": "9a6915c9-e313-47be-92bc-9587dfd9e739",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c1af2884-5d69-49f3-ad1e-b2c40b93476a"
        },
        "item": {
          "id": "3c9c72f5-dbae-47ab-bd87-f94fdcbbd91e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "730d2d2a-4a56-4e00-94b0-e715c444aae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14d8d8f-c2e5-46ad-a29d-162acb4951d1",
        "cursor": {
          "ref": "460f5d8b-e5a8-4c06-bec1-2722bd00788a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "985f2ee3-49bd-4be4-aa95-bcf2ef2c8b94"
        },
        "item": {
          "id": "f14d8d8f-c2e5-46ad-a29d-162acb4951d1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "487a3624-d436-435b-ba70-098e28d15bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f76309-bf95-4993-ab3f-7dbd395952d7",
        "cursor": {
          "ref": "dff05f0a-0c61-4557-a637-a18fb8fb2a6a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ed151461-740a-468a-8517-1c64e9447aaa"
        },
        "item": {
          "id": "b2f76309-bf95-4993-ab3f-7dbd395952d7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "48bbd229-204e-4dd5-819b-06b532b432a6",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "4f670bb6-f7d7-4009-8c55-865b1c43739b",
        "cursor": {
          "ref": "8844660e-9b93-40a3-aa7b-b77aae28a642",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "83653f38-9658-4890-b4ff-10a82913463e"
        },
        "item": {
          "id": "4f670bb6-f7d7-4009-8c55-865b1c43739b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d92fa9f7-16eb-4af3-893d-02d583164b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66af85e5-e285-4c2b-b308-efd22ddb67c1",
        "cursor": {
          "ref": "ebc8aad4-5a9d-4c36-b865-72a4fe04258c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "97de0d48-92c3-4882-b6db-351f54addfa9"
        },
        "item": {
          "id": "66af85e5-e285-4c2b-b308-efd22ddb67c1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "676fad0b-2794-4136-86db-8551c4ab2de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d6ec7a-f337-4606-8347-ab7cf86c6e29",
        "cursor": {
          "ref": "f61ef7ee-588a-46e8-a120-c41e3972532f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c7a55465-d452-4997-b84b-5b1784756f3a"
        },
        "item": {
          "id": "02d6ec7a-f337-4606-8347-ab7cf86c6e29",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aa4ff71c-3687-455d-8d8f-bbeaf4418810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c91c70-2dc5-4393-bf71-bad047a7d33b",
        "cursor": {
          "ref": "5a98798b-b388-4693-bd7c-31a9c4110109",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0f40555e-1473-4c6e-b53d-26faed4eff2f"
        },
        "item": {
          "id": "e8c91c70-2dc5-4393-bf71-bad047a7d33b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d46ca035-8ed1-4f4c-8209-9c9d176181cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a47371-2449-4cfb-8e86-8cc60eac1cbd",
        "cursor": {
          "ref": "ea43c36f-8fe0-43f1-b23e-8be8bbefcd30",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1056dfe0-a977-49e7-aae4-36741d4d2e46"
        },
        "item": {
          "id": "d7a47371-2449-4cfb-8e86-8cc60eac1cbd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "085bd0d5-cafd-4adb-af92-d5ec6a83ef44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56841d96-ee14-4a61-bdf5-721cc491ab05",
        "cursor": {
          "ref": "8ab3b23f-f141-4420-af3b-8f4ea3f33591",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ab3eca3b-c0c9-4327-a065-70a9f0682095"
        },
        "item": {
          "id": "56841d96-ee14-4a61-bdf5-721cc491ab05",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8085106c-e7e2-4a05-8549-be5d7f198439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aab0567-4614-43ef-b768-a975a21fd192",
        "cursor": {
          "ref": "1080dde7-b6bd-4602-bf8c-9ada0af31aa7",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bc1728e8-06fb-4979-b553-863a11ed6e03"
        },
        "item": {
          "id": "2aab0567-4614-43ef-b768-a975a21fd192",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7f446854-0778-4d3e-aabb-2aa703b59f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf96500-a8b8-4d22-b22c-282349472307",
        "cursor": {
          "ref": "7c104c0b-6ca7-42cd-ad4e-23fd41b18440",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "69c868de-a37b-490b-ada0-2234dc7a4b69"
        },
        "item": {
          "id": "7cf96500-a8b8-4d22-b22c-282349472307",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "629788d5-f328-43c8-ac5a-4d6cceb95645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed7d33e-896c-43ee-9a95-c8558f84ce7f",
        "cursor": {
          "ref": "b8b93fb8-a0ae-40a6-a294-5c04483526fb",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a49c7fc7-c7c4-424e-8c1b-7890b0675318"
        },
        "item": {
          "id": "8ed7d33e-896c-43ee-9a95-c8558f84ce7f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5bc57ec6-3fa8-4d87-a07e-472ee476828a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9370b08b-1270-405f-827d-08b6c64c3002",
        "cursor": {
          "ref": "1cc3f57d-a024-4979-bfe4-b672f4b8d14e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "646c6424-d706-4978-bc7b-582475b03403"
        },
        "item": {
          "id": "9370b08b-1270-405f-827d-08b6c64c3002",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9bed438e-2af6-4804-91c9-d18a8b50848b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d140deaa-9b83-43e5-9c48-5703753bd6a8",
        "cursor": {
          "ref": "009fe046-d015-458f-a8da-46b08fa0e7c6",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bb64e1f3-b4ec-4ed8-943a-81c5af7e8d82"
        },
        "item": {
          "id": "d140deaa-9b83-43e5-9c48-5703753bd6a8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b6eaf177-cd2f-4c00-aada-15d2a2b0b202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81db43c9-37a3-4ba0-b838-3d2dee92435a",
        "cursor": {
          "ref": "a2a455e6-bfbb-46ed-9d52-62ef94037bcd",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "85719c45-6c6f-47ea-853c-0c40ab57adbd"
        },
        "item": {
          "id": "81db43c9-37a3-4ba0-b838-3d2dee92435a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ff2dac45-e896-4ea9-ab9c-cf9569827995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13484dd-296b-4246-ad9a-8c07272e9b5b",
        "cursor": {
          "ref": "e0a7241b-644b-413e-a6c5-ee74572e506e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "036df4fd-005d-4beb-a97c-7f83f4663f0d"
        },
        "item": {
          "id": "d13484dd-296b-4246-ad9a-8c07272e9b5b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "978203aa-f0d5-457f-8222-332a48039fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634911bd-ad88-4fdb-853c-a5427acafb25",
        "cursor": {
          "ref": "1665f853-6b19-4713-98e5-49775d076b6c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b21ae2cc-1409-4eda-8eb2-6546649c237b"
        },
        "item": {
          "id": "634911bd-ad88-4fdb-853c-a5427acafb25",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b69ecfa3-e577-40a3-97ec-c96d176dad2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031ea60b-8461-4305-8c4e-015f3b5c454b",
        "cursor": {
          "ref": "9ad006ed-a766-47e3-be80-bd00abc820eb",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7ec82e7d-1747-4462-8e9b-3c4c74541fac"
        },
        "item": {
          "id": "031ea60b-8461-4305-8c4e-015f3b5c454b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a6184c5b-4d82-47e0-8ffd-7a825d18719a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06523311-b0ec-4467-a9ce-4f309b40d740",
        "cursor": {
          "ref": "8a242342-254e-41b6-8e0c-70122a235f98",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f74417d8-9241-426d-ba85-c0a7e5b5045d"
        },
        "item": {
          "id": "06523311-b0ec-4467-a9ce-4f309b40d740",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bd0ffe01-3ef0-47c8-9eee-bcba155001d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b217ba5a-1da2-40e7-87e1-bea167a45a82",
        "cursor": {
          "ref": "599b0bc3-59fb-4349-8f1d-864f063583e5",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fe1622ee-1b79-4a17-a96f-81e8c3ccccb1"
        },
        "item": {
          "id": "b217ba5a-1da2-40e7-87e1-bea167a45a82",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b5f1084a-8e7a-40e8-8b4f-18df87a6b141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28501f24-872b-4359-bd19-01587f01c5b3",
        "cursor": {
          "ref": "756141f2-3b0c-449c-a562-36754b99955d",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b423ddb3-438b-4145-9e0a-ddab3769d2d0"
        },
        "item": {
          "id": "28501f24-872b-4359-bd19-01587f01c5b3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0472c88c-6b82-4459-af0d-ce04fe265c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ff0f15-1d58-4ac2-aec4-bc4074b06449",
        "cursor": {
          "ref": "f740af70-d6ab-4ac3-a610-a29e6fd3035e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "721bd77e-15e5-4bd3-863a-1d841acbe66b"
        },
        "item": {
          "id": "48ff0f15-1d58-4ac2-aec4-bc4074b06449",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "09d0d16b-a303-4cdb-b7fb-0689b4780801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff6ff8e-52b6-4613-8b3f-38cea78a7868",
        "cursor": {
          "ref": "8e36b1a5-f5a4-4ac5-9816-be0b27a1ec6f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "62b9b682-de11-40ba-803f-f6d838808d43"
        },
        "item": {
          "id": "9ff6ff8e-52b6-4613-8b3f-38cea78a7868",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8ac672d3-b56d-42cc-8870-47164758bce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f2b2f2-b713-4aa4-9bb0-fa4ed2f7f2ab",
        "cursor": {
          "ref": "dba716f3-43ee-401f-b556-c36019dd5d0d",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a78de2fa-5ff7-4ede-b4ca-11cb864cbf3a"
        },
        "item": {
          "id": "86f2b2f2-b713-4aa4-9bb0-fa4ed2f7f2ab",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8082df92-0059-4721-9bf9-9de02c0ed7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b33613-fa68-43b7-ae9f-91608596ce52",
        "cursor": {
          "ref": "3632ebc8-6d43-4a10-a7e5-67b5889706ad",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6b7b04a4-04fd-4825-8297-f6d3628d8197"
        },
        "item": {
          "id": "a3b33613-fa68-43b7-ae9f-91608596ce52",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7e23c027-d4f0-4524-86a2-37fe807ba250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcbf883-a9e6-4a7e-9948-41696467f20f",
        "cursor": {
          "ref": "be7dc255-8294-4ff3-8b65-51bf434192b3",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b3e51832-3aa1-46ba-9934-bb377ee2282d"
        },
        "item": {
          "id": "bfcbf883-a9e6-4a7e-9948-41696467f20f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4d88021d-62e3-4264-aa02-5bc4f4acb3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce0f5c7-032a-4038-a5b7-a518e1458e15",
        "cursor": {
          "ref": "0418de5d-825a-4714-98ee-c6d7ad743c4c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c9120b18-f615-43ca-9e75-5e52bb5b7677"
        },
        "item": {
          "id": "bce0f5c7-032a-4038-a5b7-a518e1458e15",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7c086b5e-37f5-4432-a4df-623dfd890b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d3181a-6727-4bdc-a2cf-c53ebe4c9305",
        "cursor": {
          "ref": "cd1cc775-0eb6-42f6-9621-cbe1a55114d7",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fc08fb71-70c4-4975-84b5-3e82a58e6a7f"
        },
        "item": {
          "id": "41d3181a-6727-4bdc-a2cf-c53ebe4c9305",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b9c969d6-859f-40f7-8dc1-068065a83b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8bd904-0f06-4300-8e9f-5728d8505cbf",
        "cursor": {
          "ref": "98a4f49d-6412-4f6f-b0db-001d9cdc868f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bb546ce3-ef6e-4c57-9d07-102bafbd8d89"
        },
        "item": {
          "id": "7d8bd904-0f06-4300-8e9f-5728d8505cbf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6f5dc3a2-603d-4762-b011-f72675c4e3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c364d30a-6cc9-423e-a321-6c05efa5966e",
        "cursor": {
          "ref": "0f01cfff-a975-4384-9f66-043935b13931",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97a6f35d-307d-48b1-8e9d-6702d77d614d"
        },
        "item": {
          "id": "c364d30a-6cc9-423e-a321-6c05efa5966e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0264e304-e763-401f-a35b-110d5b775680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413d5c4d-4b1a-4ab3-a051-0994a1083f41",
        "cursor": {
          "ref": "77476d1c-8d01-4bca-8d16-bc8493a038fb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "978bb203-1d47-4c07-9d2a-8d16a2c1d706"
        },
        "item": {
          "id": "413d5c4d-4b1a-4ab3-a051-0994a1083f41",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a5b664a0-1f34-4f4c-8abb-0aa384a8682c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85f8db7-311f-43ad-a3cf-54e3f940ee0b",
        "cursor": {
          "ref": "1de4bde1-504e-44fd-8652-f514878d89e0",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "114c252d-6c29-4c1b-802c-b6a5328cb7a1"
        },
        "item": {
          "id": "a85f8db7-311f-43ad-a3cf-54e3f940ee0b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0dfe7bce-ecb5-482a-9059-7a4878d02ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de21fd7-59c2-4508-b355-357cc1862d24",
        "cursor": {
          "ref": "2d93e403-94ed-4f19-b4af-5ae8be4f19f1",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "17565f1d-c874-4655-bb89-127e051a0f36"
        },
        "item": {
          "id": "8de21fd7-59c2-4508-b355-357cc1862d24",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "462748fc-d7c7-466f-bc4c-3830a77dd20e",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f4c0b6b8-0167-4592-a2b4-16a0d9ba899b",
        "cursor": {
          "ref": "70b9e09a-3da9-4ecb-8764-defa2a3ee713",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "14e03413-3972-44f4-b3db-1dd8e98cf79b"
        },
        "item": {
          "id": "f4c0b6b8-0167-4592-a2b4-16a0d9ba899b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5c65ec65-c195-428d-a143-d2ae063f18b5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9a6b2cd1-4b73-4cc7-ad6f-754e86f14a56",
        "cursor": {
          "ref": "2aeb259d-3acf-4b04-b9ea-6cbdb2f166a4",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "53829f58-2cc0-4303-a957-a7adc1179c85"
        },
        "item": {
          "id": "9a6b2cd1-4b73-4cc7-ad6f-754e86f14a56",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f99d5545-98fe-4798-843a-ef3617efd4cd",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b052807a-7be0-4089-ad43-bc91b0f5fb2a",
        "cursor": {
          "ref": "0174fc17-18e2-4754-bfbe-e68e483a4136",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "30d485ed-8a13-4579-828a-a4ec283f99ab"
        },
        "item": {
          "id": "b052807a-7be0-4089-ad43-bc91b0f5fb2a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "40bc4d4f-8899-4f3c-9a7e-44455798d007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc827e8-8ee5-42cf-affe-bbed2ffb18d7",
        "cursor": {
          "ref": "df8034c7-ca2b-4674-b7b4-fa5bf1e2a027",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ae258945-96b1-472b-afce-518c9237241c"
        },
        "item": {
          "id": "8dc827e8-8ee5-42cf-affe-bbed2ffb18d7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fab8b91d-f9dd-4570-9f78-7383eea30daf",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e910bd4a-7764-475b-afe0-7ec123a17054",
        "cursor": {
          "ref": "850c9883-0ecd-4a4a-a484-7569d3144cdc",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "207746af-9557-4fb4-8477-f9ca98c24074"
        },
        "item": {
          "id": "e910bd4a-7764-475b-afe0-7ec123a17054",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "13d05da6-1f3c-48b9-844e-342f6bfbdd46",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bef6a254-c3e2-4946-90df-1a44df85ebcd",
        "cursor": {
          "ref": "9d1aed73-018a-428d-a93f-c28acdeab6a7",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ecf905a1-6a79-47f0-b5e8-b5baca709602"
        },
        "item": {
          "id": "bef6a254-c3e2-4946-90df-1a44df85ebcd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fa78ceb0-0b73-46f1-bfcd-00819e76ea94",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b1fa3c37-6962-43b7-828b-841a84d198d5",
        "cursor": {
          "ref": "59af23ec-35d3-4ccb-8ed4-e40984f3033e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "008947ab-0a9e-4000-bfec-2e471056739d"
        },
        "item": {
          "id": "b1fa3c37-6962-43b7-828b-841a84d198d5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8bff9b05-5f93-4848-928c-577004b4f5d8",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "c8cb3e53-ddd2-4450-81bc-f7672f95a58c",
        "cursor": {
          "ref": "98a4c6eb-1d92-4bad-839f-b378ee3122c1",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cba959f7-83cf-4ab2-88a6-253f3ef25976"
        },
        "item": {
          "id": "c8cb3e53-ddd2-4450-81bc-f7672f95a58c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8cbf9db7-000d-459f-886c-334720c37d88",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "50a0cb13-53e0-4dd5-b7fc-72466738c709",
        "cursor": {
          "ref": "c9a03b9c-d57e-4d63-a0ef-3ee6bd6271c2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dfcbc338-a0de-4961-ae28-b05a28a4409a"
        },
        "item": {
          "id": "50a0cb13-53e0-4dd5-b7fc-72466738c709",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e29ae459-188a-4365-b251-ee3aea9c39db",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "f054cbff-a583-43fd-a16e-e3097be3d561",
        "cursor": {
          "ref": "a28fe543-fd02-4a54-b7c8-f4bc1fdbebbc",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f9e7c181-e854-4f10-87ae-49710aa547bd"
        },
        "item": {
          "id": "f054cbff-a583-43fd-a16e-e3097be3d561",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cb9d0943-38c0-441c-bfeb-9d296caa9ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2a130c-7616-4b8a-a8e5-306679b812d5",
        "cursor": {
          "ref": "60f47627-b028-4bad-bbb5-f0eb365d03c4",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "102403d6-529b-4b63-a6d5-58610bec6e24"
        },
        "item": {
          "id": "2f2a130c-7616-4b8a-a8e5-306679b812d5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6c42112e-cc1d-400d-a65f-c289287bb369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362b9a72-d364-489e-a757-707a230e14e9",
        "cursor": {
          "ref": "510b7ea3-f6e4-4f55-8561-b29751fc71a8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "359cc590-a89d-4fe5-bf3e-8df0a90faf81"
        },
        "item": {
          "id": "362b9a72-d364-489e-a757-707a230e14e9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d8292df5-a76d-4fb9-9dd4-339f87cc85c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5983614e-a34b-485c-8a14-8f28c8a2022c",
        "cursor": {
          "ref": "16e94af6-00e5-4e98-aa85-c90afa4cb89a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8d6acbc7-464b-4e4c-bf76-bf24e7b124c9"
        },
        "item": {
          "id": "5983614e-a34b-485c-8a14-8f28c8a2022c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3cb7531c-3cb3-4a30-a18b-6ae4e4df0a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9e9601-1af5-4fba-a9a9-f33b0bf86947",
        "cursor": {
          "ref": "e72c27cf-4372-42db-b30d-a7f45161c0d4",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "67abaf1b-c3a3-4312-963d-512c75ec6a0d"
        },
        "item": {
          "id": "ef9e9601-1af5-4fba-a9a9-f33b0bf86947",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "339b0629-3603-4f46-adc0-5b95d644919e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe7d88d-9c3d-4b88-9a9a-13398de6b0a2",
        "cursor": {
          "ref": "295aa355-5a45-42ae-adb4-44d34bcb7b35",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b9d6afe1-a961-4261-83ca-68d28055ec81"
        },
        "item": {
          "id": "3fe7d88d-9c3d-4b88-9a9a-13398de6b0a2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "07137ecc-a28d-4d91-865a-99e453923a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7e4602-62ec-4025-947c-3612d239dd5f",
        "cursor": {
          "ref": "1664b422-d2bb-4129-ab74-14b2acc2ff39",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "da44f302-c236-4016-bdc3-a208f4341b7e"
        },
        "item": {
          "id": "5f7e4602-62ec-4025-947c-3612d239dd5f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c49284ee-18d0-4495-843a-3d8ea2dcdd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed772a2-d801-431c-8f4f-37f9268860a1",
        "cursor": {
          "ref": "a34fe097-12ce-4d81-81f1-3d5aa0fbd558",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d2fa7a8c-ca26-4eaf-907a-8ee580999c1f"
        },
        "item": {
          "id": "5ed772a2-d801-431c-8f4f-37f9268860a1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0432a2da-aaec-493d-9c0f-4bb47ef3f317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4994e9-1cb7-4130-92ba-7d7f06d79470",
        "cursor": {
          "ref": "7f469899-6d1d-49d1-9083-a352398dd6d7",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fe802552-e29f-4c77-803e-ffd3e36e045f"
        },
        "item": {
          "id": "cf4994e9-1cb7-4130-92ba-7d7f06d79470",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "96dea910-0703-49b5-bab0-24de13cbfeb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e907b989-0433-4019-8ebd-e39c225cd254",
        "cursor": {
          "ref": "b326602e-d2cb-4cc7-80bd-e59d72a39a71",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a76e8c45-39d5-43d6-af9c-65fe4d23ad66"
        },
        "item": {
          "id": "e907b989-0433-4019-8ebd-e39c225cd254",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bdb4cea1-ee30-487e-9667-731cbf2790b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f7606c-5a16-42d5-acb9-62fa1d08e049",
        "cursor": {
          "ref": "f345acd3-8dad-4baf-8e65-85daf6925d5e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ca20ee5b-40ae-4b35-978b-43af0c4490b0"
        },
        "item": {
          "id": "a7f7606c-5a16-42d5-acb9-62fa1d08e049",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cd879b6e-fc32-435d-917e-3a55981bd35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5d0b9a-4745-47b5-86a6-9bcdbdcb422b",
        "cursor": {
          "ref": "dcaf59ba-f413-4488-84bf-2d3511794d5e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1e4cb577-747c-4475-91e3-8123c94280cc"
        },
        "item": {
          "id": "cd5d0b9a-4745-47b5-86a6-9bcdbdcb422b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f8cf1a9d-3bbc-4ae6-b041-393a8867d41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6641cc-cbb6-4592-ab1e-e44bcde19f86",
        "cursor": {
          "ref": "7a667ca1-b3a7-4992-b857-3425ca8a9c14",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed6491fa-0cdd-4d08-b1cb-48a57e28bbe7"
        },
        "item": {
          "id": "4a6641cc-cbb6-4592-ab1e-e44bcde19f86",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "20c733da-10b6-4181-b5b9-12f5a23b25d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfbab0d-dde9-4859-8e97-6e3132d721da",
        "cursor": {
          "ref": "9333546c-5ef9-411a-9f7c-f7e808576ee3",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2acdad94-aa76-4d0d-9a55-2ee6678032e6"
        },
        "item": {
          "id": "0cfbab0d-dde9-4859-8e97-6e3132d721da",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f6d6a1b3-1ed5-4652-bbd3-59f0368ab2b0",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2f6caa8a-0ac2-4de2-90a3-b34160519be6",
        "cursor": {
          "ref": "788ca9f1-1923-4acb-bd99-a446f054a203",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eeda2fd9-21cf-40f2-a04c-0672aaefeb05"
        },
        "item": {
          "id": "2f6caa8a-0ac2-4de2-90a3-b34160519be6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8949bc1c-14c7-41fe-8d77-b58f9f92267c",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c79fba9b-b115-49e9-9e48-ceda9d7316c1",
        "cursor": {
          "ref": "36293153-6949-45bd-9ce0-53fc9f703254",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "73845b5c-2605-46d4-9800-849844882ad3"
        },
        "item": {
          "id": "c79fba9b-b115-49e9-9e48-ceda9d7316c1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fbd3b8e4-c674-404d-96dd-4e2ddf88c38d",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "67f1da7b-67e6-4690-b715-13240b8cd75d",
        "cursor": {
          "ref": "84b1a434-e47a-4ed6-9881-6f27ba04de4e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e1449ce6-171c-409a-bcb1-6f0743123dc9"
        },
        "item": {
          "id": "67f1da7b-67e6-4690-b715-13240b8cd75d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "239a0507-5d1b-4f01-b50d-ce14aedd76a3",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0617d551-d360-4b56-9f56-6e8c546ec4f3",
        "cursor": {
          "ref": "36539c4d-d5f5-4e77-aefe-73146ad596b9",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3cded84a-fac0-4abf-9158-89650da8957e"
        },
        "item": {
          "id": "0617d551-d360-4b56-9f56-6e8c546ec4f3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "37cf23a8-e678-4883-8b6e-eca1f5b6e3cc",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "af086571-ea15-41cc-8daa-f18c03af72b1",
        "cursor": {
          "ref": "a95471b1-306e-40e3-9a6d-796d1d68d015",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7dccd755-82b1-4526-aeae-a9c7f97d27f1"
        },
        "item": {
          "id": "af086571-ea15-41cc-8daa-f18c03af72b1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "60451ae9-942e-45ca-ba38-d2c0e8fcacad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed023cba-04be-4e83-b4fa-a8604f8c43d6",
        "cursor": {
          "ref": "2c330526-8ab0-479b-9fbd-9ca87eeac265",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3140ec3b-af1a-4809-a26b-e61d55b720c6"
        },
        "item": {
          "id": "ed023cba-04be-4e83-b4fa-a8604f8c43d6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c7cedd71-f8cb-4390-ba98-e98262af1573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8003ac8b-954f-43b5-9dd9-ac85bd35d04b",
        "cursor": {
          "ref": "496c7152-38b2-4da7-94e6-60bc722ef5b0",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e0099dd1-40de-4b22-8498-b753164b3cf0"
        },
        "item": {
          "id": "8003ac8b-954f-43b5-9dd9-ac85bd35d04b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "94e19ef8-1919-40d9-a7bd-989eeed1ef72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396c6e50-2057-4611-819f-4465f9e70190",
        "cursor": {
          "ref": "2da9fc3a-6621-4a8b-8137-dc7b04be7ceb",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0d67c3e0-42d1-476d-8135-9de6ee9d88fe"
        },
        "item": {
          "id": "396c6e50-2057-4611-819f-4465f9e70190",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "944f57fe-20f0-45e0-baaf-e0cec1fc9e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f520d30d-e036-43dd-8966-216d421253df",
        "cursor": {
          "ref": "c5ba7062-1598-4afb-b846-450e82cf4942",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fc711e49-8872-435b-800f-9d21c9fefcbf"
        },
        "item": {
          "id": "f520d30d-e036-43dd-8966-216d421253df",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d748d6e8-2e5f-422c-afee-127c63d97186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac959500-e755-4055-82bd-6a1a514a3d41",
        "cursor": {
          "ref": "396ea2c5-bd45-4791-bd12-9d9c4c5eca2b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "736e263e-34c7-4062-971d-f0fc1d62a8b5"
        },
        "item": {
          "id": "ac959500-e755-4055-82bd-6a1a514a3d41",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c1270270-0b2c-46ef-bef1-3a77fab4b65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bde26c-00c6-4658-93aa-a47eb21ac7c9",
        "cursor": {
          "ref": "9422b8c6-567b-4a79-a6ea-783dd41949fe",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b32ff46d-4477-436e-9655-8de2fd8c35d4"
        },
        "item": {
          "id": "f7bde26c-00c6-4658-93aa-a47eb21ac7c9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d0adddb9-cbaa-42ff-a3e0-1fc4f00fb4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d552a764-4c77-4d36-9fea-44221ca48a7b",
        "cursor": {
          "ref": "41c597f8-dfa5-4943-b618-c64b120503b4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb85ee23-f603-481c-b778-8554d6666768"
        },
        "item": {
          "id": "d552a764-4c77-4d36-9fea-44221ca48a7b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "85bcf5e7-6904-42b3-bf45-b3ad42722bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fdde70-df30-4b4b-8775-7218e4135b3b",
        "cursor": {
          "ref": "f6d0e516-d0a9-4fba-86e3-c67a8e856289",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8d1c433e-dc93-4333-9646-ef466591ec88"
        },
        "item": {
          "id": "85fdde70-df30-4b4b-8775-7218e4135b3b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f869a953-5f21-4f2c-939d-b757d25a12b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cd8125-0cb0-4c09-a0ef-5f785e22d5ae",
        "cursor": {
          "ref": "ec65c91a-27e6-431e-8a26-701642eb4e86",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1e275883-5549-455e-be58-205dd23094f1"
        },
        "item": {
          "id": "92cd8125-0cb0-4c09-a0ef-5f785e22d5ae",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fb291856-8dcc-4a89-85e2-525ec3834a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af7bb07-32e7-4494-9529-600ccbe01aad",
        "cursor": {
          "ref": "b65bb5ff-4a79-464c-ad73-59f9a0e4eb19",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a91c3353-711a-42e1-96c8-62404478f372"
        },
        "item": {
          "id": "4af7bb07-32e7-4494-9529-600ccbe01aad",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7e86b757-da9f-40cd-a57a-37429bf2dcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccaaa04-ea6b-48ab-8a3c-b2ad05014f0a",
        "cursor": {
          "ref": "8bc81437-9bf6-421a-8803-da0a96898788",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5d875ca2-ddde-4dd7-a91d-594f290a7af7"
        },
        "item": {
          "id": "eccaaa04-ea6b-48ab-8a3c-b2ad05014f0a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "58e233bf-1c4a-419a-a5bb-84165e860cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bcd2a0-0277-47c5-8231-40ea649774ac",
        "cursor": {
          "ref": "b2de9d62-469d-4fbb-9e9e-f0592f2f007c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a7cb87d8-5cc4-48f7-aa7d-b8cdc012661c"
        },
        "item": {
          "id": "40bcd2a0-0277-47c5-8231-40ea649774ac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b433a6c6-02c8-45d4-b057-243407d443d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceef6cec-1027-453b-941a-a06683cbd054",
        "cursor": {
          "ref": "1d05c04c-b450-4684-9675-3b70baf6ce7d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "82c6bd05-1a0a-4010-ba4b-20838983ea49"
        },
        "item": {
          "id": "ceef6cec-1027-453b-941a-a06683cbd054",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5516e112-358d-46c4-9fed-62b2548a992c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2215ddd-fed7-4856-acde-37be72f5beb2",
        "cursor": {
          "ref": "73ce78b5-c107-4d94-8541-f879af439a1c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5984fab7-bc87-4916-b152-4c3a6f1fe326"
        },
        "item": {
          "id": "b2215ddd-fed7-4856-acde-37be72f5beb2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "821d5f89-b14e-40c7-9327-2af1b469946e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2193fad4-8162-48e6-af20-f96aa0b91ef4",
        "cursor": {
          "ref": "1f0f8a81-10ba-440f-a9bd-2a5cd4b7e2e0",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3047c2d6-063b-4669-ae16-ac215606de7c"
        },
        "item": {
          "id": "2193fad4-8162-48e6-af20-f96aa0b91ef4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "659a0fa5-77e1-4ad4-812d-f311c9565fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb4ff4a-8d8a-492c-9390-daba47f5718f",
        "cursor": {
          "ref": "56a6f54e-199e-4a15-a2c7-6ed11939be94",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "47c81495-9792-4fa7-8a20-9d7af88a64a9"
        },
        "item": {
          "id": "beb4ff4a-8d8a-492c-9390-daba47f5718f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "89d1ebe8-7b12-45f8-996b-e0e8e9411e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3394f0-daec-4195-ae63-b17de995c66f",
        "cursor": {
          "ref": "7828b84b-65b7-4d7f-8422-bb467e773dfb",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1db8e363-8b21-4a6f-90c2-dbe87ebb31ee"
        },
        "item": {
          "id": "fd3394f0-daec-4195-ae63-b17de995c66f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e3258efa-4131-4bd8-b68f-6b95364ae8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd7d8e7-e6ec-47f5-b7ab-a11c7e322c5d",
        "cursor": {
          "ref": "c8d370eb-fb1e-4eef-84e7-4a67b32b4a4d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "059490c4-2e9e-44a3-8e48-5333e8816b45"
        },
        "item": {
          "id": "9cd7d8e7-e6ec-47f5-b7ab-a11c7e322c5d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "715b1200-5bdc-46eb-9361-0f5a7479e5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d5972e-71b4-41b2-b570-099635aa861c",
        "cursor": {
          "ref": "d6a061bd-c8f8-4a7e-84f4-0bb026d99abc",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9811f749-9a0c-4674-b78e-c00a3993514a"
        },
        "item": {
          "id": "a6d5972e-71b4-41b2-b570-099635aa861c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f89ca54f-8859-43c0-9e0a-616b27362a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd65b313-4781-473d-bb5b-7a2e5ec1785b",
        "cursor": {
          "ref": "e6448017-99a7-4602-b992-0b7ab00a263a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1a44794a-14f1-4a35-8100-cdc735db05d0"
        },
        "item": {
          "id": "fd65b313-4781-473d-bb5b-7a2e5ec1785b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "faad7ac3-01f5-43a8-8c28-6286e0401185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8221a8-0b5f-4589-af7a-413aea874aa5",
        "cursor": {
          "ref": "14ad5e28-7c2a-470d-85b9-5add33fe56cd",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "55ba909d-ed22-423f-997c-b4977abde9d5"
        },
        "item": {
          "id": "2f8221a8-0b5f-4589-af7a-413aea874aa5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "17eab9cb-1bb8-4679-a41b-815f4e147a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de1da2e-14d6-4523-80d7-64665a5ec1f7",
        "cursor": {
          "ref": "0ea48cab-4d93-4034-ada1-6e9fb97ca1fa",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "aa07dfe6-419f-49c2-a1f9-0f53326a1184"
        },
        "item": {
          "id": "8de1da2e-14d6-4523-80d7-64665a5ec1f7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2a1cccea-4ad7-483c-958d-5c6238d852bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91d1990-59c7-41d2-b14a-9bac32de4d9a",
        "cursor": {
          "ref": "27221d20-edca-4967-8596-48b2c373fa24",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c6438a01-9986-4825-86da-5a4ec23258cc"
        },
        "item": {
          "id": "c91d1990-59c7-41d2-b14a-9bac32de4d9a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "28faa1fa-3e54-4b02-b7ab-779e0f63c88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4801906d-a381-47b9-9cfb-30f44939ebbb",
        "cursor": {
          "ref": "0e1db994-f46f-41f3-9e9d-1840470472ba",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5c9f3e9e-5e34-4ead-9dc4-dfb5f6d54345"
        },
        "item": {
          "id": "4801906d-a381-47b9-9cfb-30f44939ebbb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "56c1bb8f-e7bb-4c8c-9bbf-38fccc7479ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8ac92c-f44d-474c-b1fb-5270d14095c8",
        "cursor": {
          "ref": "6fc5b0a6-3709-4ed6-a48a-80a2f33bf2c9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cbb2d174-f3f4-439e-9738-6715b4752e8b"
        },
        "item": {
          "id": "8f8ac92c-f44d-474c-b1fb-5270d14095c8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "90e4690d-5ff4-4890-90f5-34e4921e555e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c359b7-8afe-4e12-aaf9-f17c8b89125a",
        "cursor": {
          "ref": "5efe09c4-d0fd-4a73-9195-3423f0214267",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6e95acd1-c513-4c16-b6ff-ef49dc03247c"
        },
        "item": {
          "id": "b3c359b7-8afe-4e12-aaf9-f17c8b89125a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7b23d7d4-f5f6-4923-86d1-e958ad52ab9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59871c98-a454-4e7a-a043-a02562fa4049",
        "cursor": {
          "ref": "58c869f9-6436-40de-a1eb-005bdf24ca06",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b4b11328-83f9-457d-95d2-0bf31259cafd"
        },
        "item": {
          "id": "59871c98-a454-4e7a-a043-a02562fa4049",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7cc046d5-a6d5-424b-8531-1466dc3ce3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7806930-feaf-478b-a25a-13aba7941d88",
        "cursor": {
          "ref": "9f80701b-e7ef-456b-90d9-352602021ad1",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fe3c67af-5624-41fb-891b-204c2dea57b4"
        },
        "item": {
          "id": "d7806930-feaf-478b-a25a-13aba7941d88",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "23c15af5-563b-4a54-a3b2-94155ff1040c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3a687c-8ad1-4b7e-a1ef-d06bb4c0d8b4",
        "cursor": {
          "ref": "402c9011-ffd6-4ada-910b-23088425d422",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4a1f9d81-4e3b-484e-9e8f-faa22f3097a5"
        },
        "item": {
          "id": "5a3a687c-8ad1-4b7e-a1ef-d06bb4c0d8b4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c67e9b73-fe93-4585-8218-5cd19e5cf693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82588c41-b087-43c3-83e4-6cbf35dda0c4",
        "cursor": {
          "ref": "01b0faf7-3f71-4691-afb8-066bda2b53d3",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "09033417-9e73-4856-9ae7-43b7e2a50483"
        },
        "item": {
          "id": "82588c41-b087-43c3-83e4-6cbf35dda0c4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "46a20980-1bc4-4345-a00a-c440e9aa9cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c530740-4cdd-465a-be2a-80bc68a2b08b",
        "cursor": {
          "ref": "0495bcb7-9d2d-463c-9ed4-d8d2c18aa18b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "07785774-db9d-497b-81ea-6419e534fcff"
        },
        "item": {
          "id": "6c530740-4cdd-465a-be2a-80bc68a2b08b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5334fe3a-5463-4b8d-b9ad-76358bcef610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d60094a-7578-40ff-bcb1-7ebcbaa77200",
        "cursor": {
          "ref": "32525dca-28b3-4141-b803-3993c067997b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "868153c9-e77f-4898-9852-a34e0e3e897c"
        },
        "item": {
          "id": "3d60094a-7578-40ff-bcb1-7ebcbaa77200",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7c8edcc6-698e-4838-9c51-ffa4c196dfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6595e6ac-dd78-4843-a4af-2e7607c02a3f",
        "cursor": {
          "ref": "41fade24-d27a-4d7a-aa42-f20d1e90d893",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d3343337-f681-46e3-a92f-07249c6805b9"
        },
        "item": {
          "id": "6595e6ac-dd78-4843-a4af-2e7607c02a3f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e618e2d-1ff1-4842-b26b-014bbd074ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f978c7a7-9e66-4ced-9db2-e6981533b68d",
        "cursor": {
          "ref": "88e18e5d-b662-4671-9c0b-8904612e969a",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f59a3ffd-af7e-409e-aad6-1d5c980aa0d1"
        },
        "item": {
          "id": "f978c7a7-9e66-4ced-9db2-e6981533b68d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f587c789-3cd2-4c6f-b815-9b5eb6aaa0aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fc9ba6-bafc-40d5-a592-971bef989f28",
        "cursor": {
          "ref": "01870377-609b-4786-bd36-21723f10c511",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e7b19909-a36f-40a7-b5d4-b22e0934d475"
        },
        "item": {
          "id": "45fc9ba6-bafc-40d5-a592-971bef989f28",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "31fab4ff-b74d-45a7-b70b-86bac54450cd",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7e66b85c-9bb9-4d73-a517-7217a6f1e660",
        "cursor": {
          "ref": "d661bd05-3994-4452-a509-ec9140c5cc7b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ab59bb04-074e-4ca3-bac7-4437811d4f4e"
        },
        "item": {
          "id": "7e66b85c-9bb9-4d73-a517-7217a6f1e660",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6287ffd1-dcd6-4441-b502-6172bee6ec65",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "11542402-651d-41cf-b090-f685d02b0d3c",
        "cursor": {
          "ref": "0eac2931-e1ab-4bd5-ae7d-b1d383b2c305",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a6bf9b5a-aa04-4637-a864-51cc7ff497c6"
        },
        "item": {
          "id": "11542402-651d-41cf-b090-f685d02b0d3c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e02b883d-1be5-4840-b67f-ad2430fd9b7a",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb70a47-e57e-48c1-863f-79ce544553b5",
        "cursor": {
          "ref": "2f5047c9-0b74-4dc0-91c0-7de4571fda43",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d23dc349-6971-41c6-aae4-97aeb39a0276"
        },
        "item": {
          "id": "abb70a47-e57e-48c1-863f-79ce544553b5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "79c54a7d-a2c9-410b-8564-ffec2cfbca99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb70a47-e57e-48c1-863f-79ce544553b5",
        "cursor": {
          "ref": "2f5047c9-0b74-4dc0-91c0-7de4571fda43",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d23dc349-6971-41c6-aae4-97aeb39a0276"
        },
        "item": {
          "id": "abb70a47-e57e-48c1-863f-79ce544553b5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "79c54a7d-a2c9-410b-8564-ffec2cfbca99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c91961-2238-47b9-bc4c-b27c570a4d6c",
        "cursor": {
          "ref": "08fd15b1-c9d9-4277-aea3-0dcd05e07268",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "00bf009d-9eab-4dff-ad57-4f1a1fc2afec"
        },
        "item": {
          "id": "b7c91961-2238-47b9-bc4c-b27c570a4d6c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ec538f7-3099-4a84-9e61-13742c1856c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a5f286-4e08-4699-9d6c-c75d38b98de9",
        "cursor": {
          "ref": "02e778c9-8bd8-4ec8-b33e-bce735add87f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9c184889-22e6-43c0-89fa-622033fc1c0b"
        },
        "item": {
          "id": "a0a5f286-4e08-4699-9d6c-c75d38b98de9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "529d685f-fb47-484c-8e05-ce53c3f14a71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}