{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d0427aba-e4bd-4cf3-bca9-8e3c9fd59500",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d5409053-9e89-45e4-b666-5023dc921bcf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b48e1fd9-b094-4575-9b17-1ffddedfd90a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a9feb026-11fe-4205-9ccd-76d8e4ecd923"
                }
              }
            ]
          },
          {
            "id": "32f14377-c292-445a-9d5c-39eca6ea47bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23966543-a998-4d64-9fa2-9a03530b96e7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8ae52868-0c36-457a-aab9-16dce2c3a89e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "edec2fe2-f887-4bc6-9365-74abcabc3e17",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fe5c83df-e709-43f2-b8c5-0d8c9e42a8be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "641fa3df-28b1-49bc-bedb-999110a0c0d1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96ff2121-0354-4d3a-98e1-3ebe71f2fa95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6274329-95b0-43e0-a660-ad9a6270bd6c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "550de55d-cbd3-4992-97b6-ef1e74523d8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c0ab0f9-cc5f-41e9-af96-c69baa0eab02"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f5f2db8c-1026-4046-8444-426e80d9adfd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16d86f55-1260-480a-9f62-d21e14e125b7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f289370d-745c-4122-882f-d300d20c4689",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b6c4b73b-6891-4b6e-b31b-76b508644379"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b4a39b5-769c-47a8-ac61-4c7cfba21ff4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8930a722-9884-4236-b4de-687080dec0a1"
            }
          }
        ]
      },
      {
        "id": "f5714073-b00c-4132-a69c-0052e7710122",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c1ae0348-a772-4871-b0c1-2023d46a43e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cf3e6bb-66e9-42bc-bdaa-9263de233725",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b605cda6-e2c5-4adb-8242-3c074ad9ceca",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc2a4d5-2bb1-4b56-b447-d3ea9ed28c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24660ddf-0287-468b-93d1-050ac6d748c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f17c21e-5643-4a4e-a6f2-b35d10124026",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e95ba-0d3a-4347-9a20-5f9df2e89e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ef6a82c-c6bf-414f-b558-1b9a94fc5300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddb2321-3cfc-440e-8896-00e40516f6fc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38292374-77dd-4d20-b5f7-b3e61c4da476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99507b01-0b0d-4b6f-bd3f-6758a427051c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d53e0497-4236-46f9-aec0-c4d8942e49b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "250fc1a5-690e-4212-8757-def1aafaf1c7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baee4acd-065f-4867-835d-29b9bf87b0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40db346b-6016-473a-b89b-6c9949353ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48319e1a-3466-4e4a-933d-76938495807a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ea4a7d-f699-46af-9c36-881ab5a3c4ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3a3ba4f7-c195-465f-ab86-732ab3f97b0e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "283f2e5f-5820-4c8c-842c-174cf9d79052",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8db6002-b50a-42d8-a34e-b7e91cdc1f06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5bf587ef-f199-4a5e-9aed-56ad778eaa0d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c66ea37-c0fb-4f45-8313-74e1d14f2053",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "366c3ab5-951b-4947-bd74-cc60f06bec18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d50cdbfa-7bcb-46cc-879c-847baaec63a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "919afc45-6a78-4701-b5de-a93b097ac7f0"
            }
          }
        ]
      },
      {
        "id": "802dade0-d78e-4352-88c9-9a24d6abc356",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "95d1c0b7-ee75-4b88-b094-f83088eb032b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c7ae4cc-b76c-4702-8e4a-a0f93ae0ff4c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a09203e2-4e6a-4e75-871b-67e99348f2c1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cadd19-8915-4325-9a7a-4230f8c05197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97503146-1496-45e1-b163-5b29d892faf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91afe53c-6aaf-47b3-a241-a0876027ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88fc9567-145e-49b8-b4fe-8c6f361423fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7a61bf-232c-4d1f-88f4-10102ffa8651",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfadbdec-25ef-41c8-8984-d009a18dec8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ad4452-9ec8-4a1f-965b-052f62691a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd663a8-27c5-4353-b4ec-5d398c3bd693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e8f6810-de7b-4d8e-8263-b55faad873ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64eace8d-01ab-4ffb-bc4b-d64d7a75ec21",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622dabcd-c8ee-4a3f-bcc4-486031e6ce5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c71ce1b-4efb-4c62-a18c-79550152f6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3290a84-6963-478c-a93d-936ae7347ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afdb9517-0150-4051-82d0-8de526cbfd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c6fb5f-026b-4742-80a3-b2209e86a0d9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d551f77-b441-420d-8667-da23e8a179bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3877a6-86e8-43fe-870b-d75f05ef5ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df21cd2-e898-4602-984a-cdfcf2cdc6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff9fff3d-f4a1-49c6-a697-9e147432eaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c2bdf5-1266-404d-8069-68348e7359f6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cd4442-7b95-49bb-9f9d-119108d55e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77271c6a-d179-4e68-a1da-de98e2426642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef147ca-3656-4f01-a978-849fcdbfa5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1afe9236-5a0f-482f-92a3-d17b90b4693a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd34569-7412-474c-80ad-fd865a9258da",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fa7749-349d-4f21-9a20-20259201c074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd80c2e-b89f-4619-9859-71a11d5ca0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73781705-2e2e-4516-8f17-2a6590aab834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d28b794-da23-400f-899e-7bf87c665ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c247c8e6-4516-4945-980e-b57cb5aa42d9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56274954-0ce6-44f9-b816-73b8b05bbd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ac1c25-9b0b-47d0-b7f9-08e7cacabfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1f4c08-188f-4096-b312-9061883ed996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16addc83-a2e4-4348-bdf7-6df1bce7a853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7506be9-0231-4a0a-84d4-b3df2cc45385",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7687f492-04fd-444d-a6b7-e6d559d82670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f52462-ae9c-4e27-8ebe-0138f5e41b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d872897-92bc-48d9-840c-ffb46c32f3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce853a8b-bd7e-4003-b784-ddf55b9abcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e213364-7f8b-4047-bd56-335b3c954018",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cae251-94cb-46b4-b0a7-c08928f87f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7514ef23-0733-48a7-a199-da5aef7bd2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131474f0-1b01-4917-99ff-a3c49f86e624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0641734c-aeee-402d-a479-184755fd2dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b096f4b4-a341-45e8-8ca6-03ac255ab53b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c254cec-9a34-40e3-8162-a0715f85e4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d657d749-2d7f-401e-a9bd-056cdfd3261e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff307ca1-cae5-4639-87d4-c33eec675752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bfbe91e-3c28-405c-a7c3-0ea020581a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75ee249-f3a2-4e1a-acd8-c35c044491b1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9e789a-6dfb-4033-9658-9ecda29816d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a0d827-ff44-4cf8-8706-b5047f0fa979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99efda64-7d47-445a-bfb2-b0a42dd3cdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f52fd0-146a-4c0d-b4f8-c10c53a5e545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb75577-b89a-4f1c-93bb-824b4af486f5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0197cabe-b620-4ed9-899a-17ec9473ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c41e326-d081-4ad9-a1ff-7ef7b858c9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca73e107-f0cd-45df-9514-46ed96fbab28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93475ab7-9758-40e0-a68d-374901f7a2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f2f6ce-6906-4c0d-b77c-9701de9512d8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728ca892-352e-438c-941d-dbab14e38183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884e21b5-490c-4a01-879f-9767520b9682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2960622-6e4b-4519-89a2-e70d89a699c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b42edfb2-5a4d-44b1-bd30-1f441f6a5e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae65cc3-a1c1-4656-ad69-9c272eca26e4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c0a5d1-39d4-4d30-9ad8-34e6f02fe433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a5d636-17c6-4a26-ab44-43c66b7fe802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb65d802-4bc2-4aef-946f-8905aeb5c8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70ebf201-6f3a-4422-868b-b41d68e40f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ba3fa2-f690-49a3-8610-53f6e162fecf",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5dfb20-564a-418a-b8d9-b17361eea3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a42abf5-4c58-4592-9a51-0528f8b37165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb4f196-a8a5-4bb9-a138-b6cbc254d9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69b8c726-1aff-4b8d-ba6b-c2487d89ea76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d77f462-f450-4fe3-891b-09fea38615fc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03320d2c-115d-40d2-8d3a-055300c7bd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1903e9-1f4d-4fa5-a00d-e8d0d7451405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441cf856-3412-48d0-a5d3-6cc745cc0dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d98a7f12-acad-4d46-b689-dffd66077cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d151ff35-f407-4b36-9463-305554ab5ef7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331b563b-4d95-4815-951e-8a07c84e036a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746837df-8381-44c4-af17-89a70bcc4fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e94988a-92fb-4de7-bfae-6a715cb65ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd5c8d38-d33b-4173-9783-9f81d6ba74ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4650b542-a572-458c-b8be-108368b653cf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a8b736-da77-40e9-9fc9-ff7c2332b147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6200d7d3-adbe-40e1-9db0-3f3ab59e4b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8ba3a0-3708-47cd-8d8a-162610404fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c20598a-f68c-4275-9a94-51856986221d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f2306d-1cb7-4d78-a42d-0087280211ed",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c42a2ee-acde-4ae5-bd5b-8b027e5f0d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d7bfd7-2409-48e3-b7a4-f2c407028fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6006646-5d61-45d9-8d02-0f92a2c1fbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe91909-2b43-457b-88e9-78a99e2e6cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6330bf-5f19-4ac4-9dc6-35bb9e7d74d1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a8bd5c-07da-445c-af54-fc2ea4e4e60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001065ba-966a-4176-bd28-5b79839ed6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d968112-f7c7-4ba5-9a64-ce8bd8284a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d713e56f-bf70-4571-97dd-67abfc61644e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f85cb65-5cce-47e4-b3d2-e2f57da48360",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7d016b-4dce-4e48-903a-dccc3bc09dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92648ae5-93ff-453d-9db0-f034a85549f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb2459c-3f36-4347-88b6-7295ab1604d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbce545e-e52e-4ed9-afd5-416b7f084b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d702df2-90d6-4453-af08-d743184a72af",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463dc24d-5563-4b0d-a2e4-93aac2787dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eca103d-23b9-414a-b9a0-d41a5fb4d645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b93f6d-4477-4f89-a564-e9233844dae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa496481-8e95-4f47-a65a-e378bf7f82d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030c8f97-9f7a-4394-a0e0-1ddb11ac8e62",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5a65ee-0199-4fd0-8e90-8e9d4de48265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409a7b8d-9df7-40af-8319-8f065adda7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d42f2bc-5c40-4c11-a2ea-7e15c9d9847a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0cdd17-00d0-44e2-94a9-538b8fdb99f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d02f137-d250-4f48-b5ad-cef375881d46",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69f02ba-c4a9-4902-94f0-e530e1c8f93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c793186d-f18e-4d43-b67c-75af1aef49fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc35191-71f9-4fe0-a2db-9d9bfff823a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad244b09-17f2-42e4-87f0-91793042c894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85041057-eec8-4607-b99d-e6545cc501f3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee12270-f79f-4609-892b-08e649369f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae406a8-9745-435d-b8f5-a5c6fa245f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745c6917-b352-4eae-8f4f-6ea7904be62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7bad13-84de-4bb5-b3ed-f389163e2680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f627f96a-b045-4abb-8da6-7be372b1c181",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf7b0cd-cc14-4cb8-856b-3b055f9610f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f408b8-9d83-4a76-8d9d-6afaf2e17547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6c6ed3-b299-42a7-9bcf-be4e8a9b176b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc4db9e-7aae-431b-b541-f8f6da2bf586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb3d68f-fec6-4573-8b95-c8d0b7f3d458",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cc3b5c-0ed3-48dc-bab0-b0f6cfb23492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffab3afd-8d8a-4aca-9e51-03bd2fb05aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0abb69-3573-4733-802a-740db707c1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c772dfc9-f033-4f4a-b425-11b4928860cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c1e665-55b0-4ac0-ac07-eeb1f3991de9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c99016b-98eb-40da-b610-6cfccd25883b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b312e7e-5c58-4008-aed5-f9be0197056a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913905d5-7cb2-49b3-8016-e662eb2d182e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd46b3e-14b2-458d-a501-bb32313fdb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bfe2ea-3d2e-434d-a5af-8f551e8b46a2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0384342d-d6a3-4629-b20f-94449a492c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7428d08d-1da3-4571-baff-a4c765ecdbd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16fa123-024c-4075-b4ac-d8d9a472360b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "851f9145-159a-4d84-8a02-6967e9d3ee17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2373a0ee-41f0-4caa-a349-01fdf216dcd9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4028712-6483-4227-b693-dc38aa7622d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a281a6a-4ea2-4cdb-8d78-ef61d06186e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddd3745-92aa-41fb-aa52-8f83ab93e52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "603b9820-bf40-4b1f-9db0-67a989b0a383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bd5b4b-e8d7-4741-a428-317ed7dcc754",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec546a3-8be5-4e5b-b23e-22ae6655353e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205e06f9-f5ab-4ecf-9b4a-1900ba2fbf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b16eca-a37f-4218-8c8c-1f3c7f1f7202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a988fed3-adfb-4f17-bf4b-5cd17d263386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ff28ae-5e38-4b68-a42c-8a0f6ae73e8b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915f1a49-8502-4ca9-b18f-c7e13bfbd652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fa5e2b-7f55-4362-8187-f00f0bb5e392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fb9fb4-ccfa-4fdc-b611-87658e355c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6bbc36-6a9a-4732-a33f-b4bbe45d356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e7a36d-5905-4607-a6db-d34959204c99",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58ad832-bdb4-4e5e-9f7b-73ab9acda5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46c58ec-fc34-49ac-8728-7340d6cf133a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2b0cee-0d69-49b4-b7a7-f070fd9a6dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08eca210-9fa5-43e5-aed5-be55a42b057b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebf7def-831c-4ddf-8426-da401d8135c1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073c7f06-06cd-48c0-baf2-148897d09f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc58d6f-573f-4d86-b4fb-314cf91461f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93190850-3a00-4abd-b8ef-2a2b23c5eb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3644017d-f859-40c2-bad1-9d9806810d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7527f1e-d01f-4de6-9e6f-a9ab3219074c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d68bea9-bcba-4126-b3cf-f8af440ee2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab014857-d2a2-4fc0-a5d5-48b4871dd142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa95597-f177-453c-8a14-78549237cf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "66a2e0ea-e282-48d9-8b6f-b8ce04a697e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895a4006-6bc8-4925-a169-b75f3e218de5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f087524f-726b-4339-89d9-49842ef4b636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60cadd61-9ca7-45cd-b8ec-78d0bb5b1e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a449f18-69a4-4962-9978-bc8277490b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86b7ecc5-44c1-44a0-a973-2df4108f0b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b56cc6-8f16-4d57-b087-9e11de798526",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71bcee3-34e2-4764-90c0-56d3bcb42285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0495ba-1974-468a-becf-29619397061b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed5c4d3-f1f2-42ce-b059-0ac41b82967a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b361fb4-ca66-4b04-8f71-df8d5e9253ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bf20f0-fc50-486f-b374-eb96373222da",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb86ad4a-c9cb-4e5b-becb-75e192275820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42392c25-b254-4584-b0cd-5bb4d155f8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05a3a25-0843-49dd-99b5-0a7b67545762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f91aad3-ba50-4f15-a81d-1711f5a3c152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4fac4d-06af-4f81-8e7a-93caf59de419",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04dc190-5ade-4aa2-b129-c58eb56cdc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c148cd-67d4-4cab-9b30-ed2bc2640a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18d6db0-cb4f-4249-b13b-c156a135eb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52d8f516-70ce-4b7c-a814-af04258a0780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a015c0-d132-46a8-97d5-41702a9a95f1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402ba24f-5c59-4119-8981-9e6857e7b5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0036921f-e37c-4d9f-8b39-b33e7e3b66cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae02585-6eb7-49d8-be34-eabc6aba0eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e135ab-25a0-4b67-80fb-1a9612c7b164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf07b4aa-273e-4bf6-ba64-76abc88dfddf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b69f816-59d7-40f8-8448-afd3e79f1f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9edbbe-c9f4-4151-a09e-0ab4b61cd883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93fd586-fb35-43c6-895f-7e82a34bc44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e586fb4-9581-49e6-8708-3c40f34952c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c577e37-61b2-4e9a-ba06-3b71bbef8662",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fe2cb3-fd12-4386-8ce9-a6fb8c51e7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43842834-51af-497c-9ebd-2d8cf0304d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1285be3-803b-4662-ae39-6cc6e2d97a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "331a9ea8-a39b-4cc1-abcd-f28fe2e6d288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fbe56d-7284-462d-857e-4760373af885",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd203c1-d88e-430e-8c92-b24b34552e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9464343d-005c-4505-bf70-6959e5f1ea40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8de6e2-1993-4705-8fff-393db0227667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f586af-e07b-4997-8fbe-de06b9760a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9b7c3f-ae8c-4887-96e1-b0c0aa2d6074",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3999691-81bb-4fe5-87c8-82b5265fe505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcf6c40-9f44-4809-a15b-c7f20192730c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9983ee-630d-438c-8189-5cc4e65d4059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6fff42-95fb-42f5-bc8d-3e193fcaa802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3696d4b9-48a9-4dfd-b0b9-5a5cdff778a2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d1b6a5-62fc-46a2-b63d-c192232bcb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209c85fc-869e-4a7b-b4f4-0e87cbb1e109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75797f92-481c-4217-aabc-6c23e0afc386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "971ad434-7a0f-4802-ab34-0d6e39d6654b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3957a61-0b20-4858-b3bf-a54b6c52268e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536066e1-1394-42b8-80ef-ae414bc7f2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15189c94-36ae-4e1b-8975-0cd03b7d5aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cbceab-b086-478c-907a-b0a65322887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a11e37-dee7-4219-8a77-b33e272ac4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d324b302-831b-4fd4-a2b9-1780dc883ff5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26750524-8189-4a67-ae5d-a70545dfc7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646cd486-4204-4207-8285-aa84afa7bcae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38746475-8870-48d1-ba1c-e4dfb73ac46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc846929-601f-4436-8ae6-4ec9865ca774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d255ee-3c19-4d4c-b04e-76b435f3932d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6146783-be2b-47bf-83d0-477f408b953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc55873-ca21-4445-9d9e-1386dc72395f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7fa95e-4396-4a59-9801-81a3787be0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5733b70b-7559-4c88-b7c1-59278eb93b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ee7fd4-4ed8-41eb-b8b5-2c796432c6a8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e44a99e-bf45-45b8-b160-f26c7e9e56d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bddea9ba-5f9a-4f0b-b319-5447b7d00f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed626890-f98d-4b59-80f8-19ba3eb883aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb91cd04-6f89-4aad-80fe-fc761d37dd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefee6d6-eb55-412d-b029-5a639bdc89c0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d01d112-6b30-4814-aec6-604c9e5d3385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444f6a38-1384-4ac7-ba7f-999aea557522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97451222-8589-49ec-b6e7-aacd85da84a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfccaf5f-42c8-4b50-a3f7-3561930ea266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228d419e-f63f-437b-ae60-d631ea57cd44",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f6c260-364c-4c23-9bff-f5d6b93d2022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bede33ef-c313-42d0-940b-7b4f4a76b8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c1e9a2-50bc-482c-ac0b-6e4cfce5ca75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "651aa39b-f844-4744-91cb-216526961b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a06341-16f4-4eeb-a9d5-ac2df534b16c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f741800-3f03-4397-8367-6c1d62345bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa10af24-cc07-4793-8cde-89a1b0015738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dab6608-6800-43f4-810e-403472a51ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "276b13c0-e509-4ec4-8f78-b9cd196e4f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cc0285-5d65-4f1a-84d6-0f28a441d1a5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b44ef22-7d84-41dd-bd04-042939fc322d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e54dcd-84f5-4009-97b6-32fc4272c76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd73bbb8-d317-48eb-8803-84c189fa69eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b012ea2-5746-4c91-b1a5-7a81d6795f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd215a51-5f74-408f-a524-d51dfeebf7d1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7d1f8e-6a7b-421f-93c3-98b1825a37f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12797352-bda4-43b6-8677-59d78de0e643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86d2964-d99b-4457-a078-b9ffd983b732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6854aca-7456-42fc-a6a1-98e0ba9e99f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e37e40-1e95-4b03-be52-9713dc64b8ed",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9a876b-99db-43cd-affd-f967f4f7439c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c855df38-0302-400e-9c70-0def1e19fd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ec6d79-9203-40ce-95f2-685571ead8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c4b597-f2ca-4667-9406-a28c7d12f363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25fe90f-5fa1-43ac-9fb7-ced8d184601c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e674450d-c72b-4db2-9af1-62390a379fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9191cca-1446-450e-9fbd-52adffefd9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61715f2-32b7-4d18-9c68-12150f9bb0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9ab20d-c7b0-4701-8968-c993896e0853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56910579-269c-40b0-9fbb-e89b6c51577d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfa3e85-cc15-4033-9887-d346d3c24320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744eae93-e4d7-468a-8457-31222ab3d27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e095f6dd-a42d-4014-9163-190bc2e1fbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "621f6701-c8df-4faa-92a1-52380edfe282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4c5bd7-76d1-4bee-8053-d342305483e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2211ae53-55c2-417b-97bd-cfe4c5111152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92768c6-683a-4183-8a15-5c33de42e594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842d3409-4f1d-4677-af30-526578622f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0815e1ac-f435-4d3e-beb2-9e7dafe8f3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd96732-b239-4a7b-81d4-ff89fc801b82",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb09a27e-e739-466d-b866-545c50c42048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b276122-cde2-4efc-af6c-aa176647f15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7706b7e3-7808-4050-b406-730cfa097853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "698b582f-adea-44a3-b785-c1892ff3d81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87de1a91-007c-4361-858c-fcb1469c750f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dae9c1-a194-4b4d-8540-f5e41d5cd4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98a7e5e-b8bb-4fd3-9cfe-f75e876ee458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddd8b5c-a6d3-42c7-b5ef-5654baf38c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca78a232-6547-4961-ad6f-f85169db284e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fd7a2c-ab3a-41c0-8204-3fba530b785e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f074a49-8229-4eb8-a2c1-a1cc8822c561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0041cdb-619d-40b1-a662-2b33e029fbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c695ad9-b9b0-4cc5-bc9b-8c0a896a9218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02c908f7-feeb-43a3-b5da-147bb3667406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2643d8f0-8339-41d5-81eb-bb741396f22b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe775d65-42a8-4815-929b-98a5c8278788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a58ee44-453c-4df1-b79e-26bb0048a96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a60726-72b1-43fc-8ccb-804f8744283e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7357e3-4c6a-4b2c-828e-1dd4cac764b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a2bad5-513d-4fb4-83ef-ca67539259e2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea0fda1-50aa-4423-85b6-e22880ad1046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fbcc845-ca14-4519-a760-e425c100b824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e770cb1-742d-4cfd-8323-9b3213530c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea6081f-6cd9-4123-9c08-abffbffd5bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef23d84c-1cb9-4930-b821-a7b1f94f102a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c901f6-ced7-493d-9b64-fcc0054f0ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dcdb76-b46e-4959-bb43-fc7c5d834d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7bdec6-c3a5-4a3e-9399-f8e196780a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5b2a56-7d27-45f1-a893-7565ca7f5700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2617fa-f934-459e-87fa-b726bc1ab4fc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc24029-3974-4374-9f65-97ac7a869424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2dfe50e-8279-4149-9212-99f94c0c2e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a7a15b-c3d4-4823-b3dd-116146e304dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd06840d-c83a-4cf2-bc96-0dac477baa5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f8e6cd-aabf-45e1-88d5-ad93471897f2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0a7cf4-aa2c-4964-a132-37c565bb25a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ea513f-2fa3-4ef0-9103-74ab9de5dd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c920c1b-eb9b-40fd-90bb-b53402176ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae4d134-08e5-4ac8-95e5-d8d95db5debc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783bb671-6534-405d-bd20-6a2e5c77afde",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2c59f2-a615-49a3-beae-f6c73549252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71c8cdf-ca08-4008-bf59-93bf9d4d2cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5853271b-eaa3-4c87-91a7-e4c8bb1acc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b26ba47-75c9-43ac-b205-c82ff145ae4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99209118-ec3e-4cb2-81c1-fb11e198115b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34452cc0-e798-4cc4-ab1c-3b44efe26846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ef2bc4-ef9a-411e-a1ca-fceccd946dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696e658a-118c-4a32-8fea-1e7e06d882d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8edcbae-e1b3-45cd-bf5f-bdbcccda0490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e867a5f-5993-46d9-a36a-c20d9c0f9814",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc3a983-a2ac-4ab7-9511-fd1d39a2e886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb6ea75-f172-45e9-a9b1-d7854b7a8854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82da5eab-d0f6-4196-9be5-5f18d2836e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3715c7-7b39-4cea-98a7-f81d7a5c80ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f44cf0-51df-4cfb-9e9d-ba38d7b8f52f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6191928-7ce2-4b73-99b0-99eaafc2033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1a691b-42dd-42c8-9cf9-03e1fa347bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec216be-bb25-44cd-bfd9-812f89c246c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88f5dd0f-77b0-4e12-a7b5-9d77ed9dfc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0c9700-bdf5-4108-90a6-f4b3420b9446",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19025685-4851-431c-aa89-576b671f3b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e3e93b-9f67-4e3d-aa55-50caf2ccb02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbe1138-11c3-4155-88a2-e6681e5e1440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de64ed8c-4629-450b-9970-8e76ef8c4341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35969575-31d5-4c69-86a0-f7343df1cb52",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4481085-bed6-4cf6-bcb1-936688b938cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e66223-19c9-4b5c-8c2c-da7b5b92908a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8301e806-a264-4dc8-8bd4-01a3183ec5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc7f404-a0a9-4dd1-96ff-61e6a24b7041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640e0d86-a22b-42e9-bb97-857b1d622f7f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e8831d-d9a7-49a6-be06-04a8e84e87a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90afc914-7d26-4bb0-be4d-ef5a67e60de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b697c9bb-2027-4b87-9d7e-81f7063db5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc446e03-0d5b-49dc-a6b6-9c6744dc99ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff87335e-48e6-4be5-8261-154ac15cdb37",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5da9170-d675-4e46-a88b-84ea033cd2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2672609-0862-46ca-83f6-c2d81fb1f023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a8738e-44c4-4708-a1f8-8013edd253e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5354cdc-c980-4393-ac76-9fb79e75175c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708d1b54-25f7-47b5-bfc6-7617b35d776d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcd6220-b10f-4f6a-8e7f-cdff623de6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb90a223-f71f-42a3-a97b-63ab33e3ff2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb66302-a80b-4d74-b568-8854afc779aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8af1f9-3545-486e-8bb5-131c908e59c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637156ca-f47c-42b1-acdd-3744c771f56a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c1c87f-2529-4590-82ed-a2c3874e393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3735fdf6-d50c-4125-9ca2-e3a58e71eb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5396f07f-4730-4d16-989a-8aeee9f0c5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90c794b3-cfc2-4792-a0cb-bc59a982119c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99241199-76d7-4933-a36c-aeee54b30118",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b095ef3-c81e-4539-9477-9162043ad25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912dd0b3-5338-4ef0-a7f4-a43b05f77d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fc99f4-2156-4472-ab61-cbbf6babec76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5becdbac-793c-4ebf-ab43-9bd87be6f1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c9a18f-57c7-4231-9227-2565efcf25a9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775de938-c2fe-41df-a68a-01e303721103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d444b69-8abd-4d0a-af0f-cab4727ac8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76df138e-5326-48d8-8507-1e50e41b6161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9318d6c0-c660-4b16-a22b-051e791ed06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de647736-b103-47d5-bff4-dad7d43a9593",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f952ed6-7ea8-448f-a898-6ee873bc1b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3143bcfb-2a3a-41c5-97eb-592aaff521b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1585c9-ad24-4487-a402-d6d8a6389655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dae392e8-37d1-41aa-97e9-8eb98f0d5edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b803d1-0fef-4d8a-8f17-529a53fbba6a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e119aaaa-01c7-4bc1-bbe0-0ce662ddabfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b8ecf6-a19c-4098-816c-37c12001c036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db8eb59-d843-4ad0-a95e-7db4fbcf0c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd022bb-bd2e-41fc-bd08-696f88846388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb2a4a6-c541-407a-b79a-c62fa5d38ed3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43c22b7-5f8c-4187-b4fd-354109c84a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f12b02-6de1-4f8d-94fb-e850e0990d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671b1a57-d83d-4ad6-92d9-3ab34ecfe173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6656bf-5f61-4508-9b5c-a029b0d73721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7d29c0-a2f2-4f50-a029-23c9b3f25289",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e456c3-b9c6-4938-8287-478fe63bba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c458495-224a-40d8-bebf-88d9042d1a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645c94a2-666b-47ee-b6c8-a3feda8d0a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddcc7f8-e73a-46b3-82d4-7ea5ba0c3aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed13aee9-36ce-4184-a8b3-94786df6ac4d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9cbc4d-d196-4c08-b206-0313ad29c387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6936833-14c2-4b4b-8e55-8a64c7ec5341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd1c60-b5e9-4581-b63d-071be7e2cea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2318c1-e42b-48a2-ab85-cc469e16be5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d6166b-5f3f-4781-91f4-77dd3b70ae09",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4d368d-ad6a-4355-819a-88d3c9f1ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d2cb2e-3e5b-4cd5-9aa2-ea4dbe96a585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2c44f-930a-4907-adf0-64f9b7f13003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbacf37-118f-41ee-a973-c935ae7a6033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26428731-cda2-4c1b-bc4a-05ed78af31a1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eff16fd-2fe1-49f3-9461-6ca3c8b81a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8bc65e-3af7-4c17-8565-d05598bdbc3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c5064b-8bfd-4965-8e4a-f4f707ae2a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0564f6d5-df1f-47df-9954-b8602d26caf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368be759-d34e-4152-85c7-04e80de6111e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262972fa-789b-492c-95d2-0ede7823be2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbf38d2-81a5-446e-877f-43f4fa65c06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361673fa-ce74-4097-abfb-9efb2d272352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08151b43-7a52-4f5e-9e6b-d7843df5a947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d34728-b6c6-497c-b121-b3c74a8b6f00",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd15060-5c48-4393-b99e-596f916d6237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec5e4c1-147d-4807-9c0a-87584318d94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663bfdb3-307c-49cb-916d-63199426fb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9822c09b-8e0f-4ac9-addd-c4fb4662154c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a1cd48-ce8a-4e12-8813-af60c7ad38b1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d0db84-619d-4722-9d2b-f09e922c8aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f5fdb6-516f-438d-8722-551764f9734d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39eb427-72aa-4054-9672-6973d008c93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5dedb94-3622-4f8f-8ba1-02d535cfbe7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fc4d79-d6c0-4278-849f-1d6e9c055ee2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57daa540-e43e-4112-a0f1-c52d07468552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378f0947-0f2e-4cb8-8e39-79bc8a5fd5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd90a8ad-5382-4163-936e-aa7b167cbeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "88e71c6b-c3c7-4fd1-a6cc-3a2848f5a0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be81e9a9-7413-4fdd-9e74-90307d71ed56",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1350b686-5d13-4679-a05f-71712a24fdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4e94b9-51f4-4b2e-85e8-7bd47a1b4831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cad6b6d-3df6-453c-ae9b-02870ae0b1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "980d4458-759d-4419-9b50-f7494c60209d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f76b6b-9fce-4747-91d0-1d9edcf857f4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180ed5ce-5302-44aa-b5fc-2a2b21c4f8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7406ed5-7fa0-4f1f-afd7-27fc70f34256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1683be-835e-4b4a-a50d-5f470c6a65bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa49f752-2daf-4780-9c87-e317f109fcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bcc365-0622-4506-bd49-efd7a235e844",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648fa7da-cef0-4946-8750-6166b6c93ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f2e8345c-a993-42e4-baf0-36b09baf4ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b1c813-0d6c-48ad-a618-be6a3c0be0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "541a3f98-f1d9-44c0-9923-7521801c6fcd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e4b01a1-4e58-4763-ae17-df18145c29f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e86db6f7-3e54-4997-94cf-ae9ef91697cf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede8e7de-0101-4133-a0c1-114add7540e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65b424c8-c92b-4d07-9b11-8abdec69d9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff76276-ad84-42b7-a2c3-93ceadb4aee8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "059bb98a-cdb6-40d4-914a-f6f042fb86ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d49b7747-04b7-489c-be2e-34f7ef1f3cae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef89c0ac-289c-46db-beef-e091704e406a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6cf30f7-bd33-461d-a725-e8c88af6caa5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d36a90f1-a9e4-4a90-9af9-4a23d5362dc0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07f49eef-4bf1-4f67-8052-b7f3f19314f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6bff078-fecf-4d5f-83e2-4e07de2dbceb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23a5b7c7-f898-4abe-9311-10e26f5b4e2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4e8f8c6-8677-400c-982f-3e850b157ec1"
                }
              }
            ]
          },
          {
            "id": "c54d5d69-cf31-4454-ba20-0712aa35fce9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "64e458cd-91e3-4d48-8088-43d28d77f8a3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01043bfd-4732-4180-8919-6f33bc16645f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e95e86d-d733-449c-8c0f-07a6dbea2e03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0de0a3fd-1f69-4909-9b1a-64616ba8ff67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd82a10a-6191-4be5-83b0-449a04a38c3a"
                    }
                  }
                ]
              },
              {
                "id": "667e7929-ed9a-46da-9000-32f64699d3f2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d02711b7-4911-43e2-9ce6-53df79dad0e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b76cfd3-ea08-4a48-be09-66de268d05c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e89de3a8-eb4e-43d1-a187-1952d172104b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd2a1e0b-31c7-41f8-b2f7-65bc94bc739a"
                    }
                  }
                ]
              },
              {
                "id": "fe0f2703-e0d5-44a2-ad14-473431aaeeed",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfe3d192-3897-49e9-82b2-10e2a0c54930",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93d74095-0091-4ea1-804b-55164ccc3b10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caab43b4-fd2c-41e7-af28-f046d83443da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6548fe08-a1b1-49f2-8a37-8347e7c6beef"
                    }
                  }
                ]
              },
              {
                "id": "a849d7da-34cf-4398-b8e6-44dc5bfdf0d0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4267b227-07f6-44bb-97bb-8b8996fde25a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1d80ef1-3233-4f83-a713-bd681a75a105"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a3a5355-95b7-43f8-aedd-228ff756163a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "43596295-a1d9-49da-afbc-2712d5983f64"
                    }
                  }
                ]
              },
              {
                "id": "cf5fbb14-fbba-47fe-a034-17dc92670d13",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48e2c89a-1f9d-406f-bfd2-4da54ea0ca98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76f61070-1779-4811-9210-0cf2d636a0aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87b7a195-e911-4f1d-a135-accd34ce950a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a9180ae8-3a4f-4066-8ad8-24ee71fef273"
                    }
                  }
                ]
              },
              {
                "id": "22092aeb-b02e-41f4-8e20-4bce5598c30c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3b1a357-a7ef-45aa-ba21-cb298f80bf21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e144d13-5237-4209-80d1-0adc15c57c8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa8474c8-867d-4cf3-9ce0-fadf1550438f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "08667efc-955f-4ee2-8174-4739f43e34c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b4a1527-b4eb-43e9-9658-39a4248f7898",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ace8217a-6dd6-4fd8-a784-912795850b34"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54940c9c-e1cb-4731-a777-96e31c7ed1de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1aa06794-439b-4489-900e-24dfa4cc0a80"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48660b7f-9d04-4433-88c8-e670f15d8d51",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8c1262da-5708-41b2-861a-ca8bfad3ef37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4257c1b0-6f2b-40a7-b0ad-b309ed831fd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e92b2b6-b282-4691-80c6-c470439202cd"
            }
          }
        ]
      },
      {
        "id": "aa58289c-6718-49d1-90df-38db21e95fb1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "937b921f-df68-4b8e-a650-3e57bdee4885",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8416af4d-0396-4d87-935d-3c3be9410fdd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb5ca642-275e-488f-b25b-d3a476a9d495",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66bd30e-b855-4fb3-859b-52f3741e5880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5db5515-4437-4694-9f99-4e17d485ac8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59a1d38-7151-49ca-b3a8-d0c2ace6a8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde9a842-2df7-4c7d-9cf3-18ebffaeb0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0c0895-dfa3-484b-b5be-c735f0b6ddae",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdafe2f-1c37-4767-b7db-b6fbd8e4815e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e75255-ac43-4597-9efa-a59880474a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6932f141-432c-469a-bb15-286f4b77f2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1da0079e-f46b-4a0e-9689-00be71c0f082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3450342b-cefa-4fab-b48b-ef75045a2820",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312e0784-f527-46ac-9681-fe23a862ea5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfc1ce7-f178-4800-bc7d-258ea708e2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e616015-f221-47b6-bf29-92c1390f5fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc9d9897-3b35-4a32-960d-996b9367b65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786a829b-4e22-436d-b2a1-29e85f685cf1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1092b146-5747-4878-8074-ff38108a7499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd316a5-7e0b-4a52-beef-820dab654475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1dcbcf-abf0-49c3-b0d3-81c75e8d1a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbbe88d2-14d0-4ba3-949e-613f6dcb6794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3819ab69-e770-4c5f-9274-139fbfc06e53",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20ae056-5ba8-4796-b476-ec7bbf37e248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f047aeb0-c221-4882-ab33-9f39c8f1c7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354eb5af-5d1f-4f97-adcf-6f68d236caf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7318d10c-81af-4021-aae0-0ce3c523409a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b067d974-e253-4fc6-b998-49e979c518fb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867215cd-da47-47fc-ac0c-630d0f90d2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4841d817-cf0a-4b13-a03a-b8515c8dce21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667ee12b-8d82-499e-b887-c119ad09a721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d70ea46-7807-42d9-ac21-89a5daa44c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1349bb03-a223-4b93-b2f7-8bb32bf15870",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9561bf0e-9124-45ed-a737-f73620b574e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebf2d2c-563f-41dc-b8b1-2d3cf1ea3299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9c68e6-f985-4868-a59c-6f499a286108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4ae25b-2bfe-44f8-87d3-15d10a96103b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91ac80d-0a48-45d7-a810-4c782d765fb4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe70d81f-99ce-4a3e-9cc7-7afb61e6d499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bdcaee-d7a2-4aa4-8cfd-9e14aee9da40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23305ea0-5efa-41cc-965d-514e71549313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f740a507-63f1-47b2-9787-e7d6d7b3a141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a27b37-1fda-4a2b-815f-8edbb3e4262c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3797bcde-3839-4178-94b1-90b3391aab19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4535e358-99f6-4701-8f07-2ebb7b7a30d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9881be1c-633d-4e17-827f-20cc26079528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9927f967-2856-43d9-8354-ca4188b38bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603a5148-5bb6-44d5-ad6d-762eb7a14a72",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7418f437-85dc-4557-9ab4-c2ae0baf7856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18555640-fbaa-4686-a748-4f6be704195e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76976ae2-3a87-4c11-8147-100bbb28d688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77d663c1-0ab6-4787-aaca-3a9844ad11f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a61804b-d8a9-4192-90c0-52a81afe04ff",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e505f6-d52f-4112-9297-791861019d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33e0ce3-6716-49e9-adc9-f7a5e4efdb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27b794e-e21c-4ccd-a979-66d104420c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8193d2ca-e5b8-4966-822f-226115bc502c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d8a9ee-d006-479c-9293-832a56c33a8b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cf412d-a1f1-4847-84f2-6cab9f8364fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639baa7e-af8e-46b3-9675-65fd301b5ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962c66c6-bf52-4f0d-8577-0b81be72a98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0951d8-ece7-463c-a398-aeef413ad514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7bfee0-7cd4-4152-a4ff-e6d9703de3ea",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61226d6d-5ac0-46c2-a983-b4de905990e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7323d6e3-1144-48c2-a126-06492562378d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3017a952-4351-42bc-9846-229526fa9409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9b56ea-e3fd-4e12-ae16-56d289846c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b013ee-52d7-4d36-8ac8-3bc0242fd9d6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9ba586-ce82-4156-b5fb-79519de84c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b31db0-9ea4-4ef6-8d9a-2b00e3190124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba9124e-988c-4fec-bb4e-73714d56f2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad6385e-80fd-40d3-9c58-6c479e5ab0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d9b4fb-5501-4586-aa6c-138f95c78c69",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cceaaa-83b0-4b52-9c25-8b2e06ba04b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec558329-f203-414e-9991-0161e0360268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f5e26-14b6-4668-80d9-0d27b3f4a50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c9666c-df30-4a3a-8b8c-9af5f6d577fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980984eb-4a7b-4e86-9146-d1fca79e142f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9505a5fd-ea8d-4049-9689-3a46d6a9628c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73a5696-0ac2-4fb2-9507-4b7c720d27ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1b2796-5929-4dc6-a687-d80611233d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "afec35a1-3474-44f4-ac1b-5d7dcd97ea9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b57ae53-ebad-40a8-84ea-83671cb9575f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3cf80a-deba-477b-b66c-2132bbe233d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac0a70d-ac9a-4074-8ff7-a218c0765983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e6aa4d-d6d4-4558-9bd9-610dafcdc160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f6dbbe-ebce-418d-87f0-b9f88b7ceb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3b2a5a-a64f-45e2-b666-af4d336fed68",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dda3f0-4fe6-4ff3-8791-4b784278a62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616e05d0-58ee-4db8-9de7-380d87877af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d873ae71-09f9-4552-8657-d71c45870fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c85508-f537-4c49-b94f-4f50cf4c0197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9c9c0d-11fd-486b-9a63-47359b8d4e80",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ed448a-5bd2-4961-8fd1-8782952c39fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a863058e-61fb-47d9-94f6-0b93cc976dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87f66e0-c35a-4961-af0f-d2c95ea9f5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be4378f7-2348-491e-a8a9-0b6215ef5e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c92297-e850-4ced-9371-6b0eb9811ea1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56d19a3-cd8c-4dfd-bc5f-fef134d32daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80bb5867-e878-4588-89d4-600cd7f1d7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e126bbf4-73a6-4007-8be3-bc6d0fd12060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37bf949f-3262-479c-b0c3-342166ca07a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af983b16-eb18-4871-8781-c5b554456a47",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6562ae85-5098-4274-8c7c-df7ae7b4b595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58dcf3b-bbae-4df8-81b0-8b34ff599666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a58dd7f-75e7-4daf-bc81-7afbd3e3b97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07addede-7fdb-4564-9ebd-06d1a2cca573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba46064-354b-4443-85d4-442e60b31f9a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71e8520-fdec-4876-afb3-834d1b81b1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c829d4f-788f-4b55-b99d-c862ac499e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8cdb9a-235f-4574-b871-511b3bca8b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66d6642c-d53a-499e-b1e7-573cb0373a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3e887b-283b-41e9-8f4c-20ff46a4ff11",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eb19ca-4d0f-406a-9d61-1a1bc2e2f6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c17564-5539-4ff3-806a-5adf1442a286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549e43c7-6abe-415c-8cca-6b9f2ac5aa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4ee65c-2d1c-4424-a6c1-b922e9c06cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c529544-dca3-49e2-9583-8dbee7cfea6a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0394d90-d371-46be-9142-9b35271a48ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29bc8e3-8518-4466-8c91-20ad13bc9649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757c9376-270b-451a-9a25-c2384efa4f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5ff113-8aca-481b-bf5a-1735b6114f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6f812a-83f3-469a-aa12-2adf11074d6b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf80c93-7b47-4fd1-8f2f-1ffbce8b877c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb07849-2c7f-4ea6-9bc9-f31e03ef6e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd5fece-9471-4572-a84c-0864f3f89093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a914f89c-4be2-44f8-aa94-4097e61cce59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2a2310-8153-4ebb-81fc-632ca7140742",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4242adcd-b837-42ff-90e5-1c12ec94a6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7473bc4-db3a-4dde-99b6-116459db6cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f23999-b3ba-498c-8bfc-0a05c553eab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87880f64-b7a6-41a0-8bf8-1734e436a02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f4ebcf-a809-43ff-b426-6c1647ab42c7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94000097-50c0-4752-a930-94bd3f888f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28659f7-b61d-40d9-971c-40babc07aa7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88684d25-f854-455a-bf9c-0765daf02f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90656b0a-90de-426a-9912-16f1308c519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dcba53-9875-461a-b584-969a50852147",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b69d87-4644-48c7-91c6-aed986b335a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22298299-c832-4f56-838b-af088eff4f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba0987d-7fb5-41ba-8adc-c9ce57bc1a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0af8de6-5912-4d02-a530-dd0a4b0205a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09f56de-8329-407a-8ecb-de8f8cfde0ad",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e3cabb-fe7a-4170-832b-8f1d4cb1277b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5261e4-c76f-4f69-a96b-a6cf359055c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3bb045-b91b-4468-ae6e-a8a7afbacddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3012b3ad-5d46-4869-9adb-88eef668faa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200a41b3-28ff-4210-9d0f-f56d749633d9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecdbbe7-a77c-4794-99c5-10c31047c383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123350c2-e778-4cb5-b5ce-76518ee724c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35c158b-985b-467f-b52f-014e83b6caab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20fe78c7-e250-4c0e-9980-8474b35764d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e88b6ca-a9df-4063-bf99-d3fe1e82cf27",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3968d5-887a-4dbf-b054-953444648b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d38a5f-7488-4fcb-9aeb-301fc7c4cd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64fb5c6-bd42-4f8d-9514-5f74ca6653c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "321fe1ae-af26-443c-9703-0b790d9400f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082c10bd-c8f6-4653-82e5-8538822cf1b7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f6d045-0209-4e12-a589-dde25e434c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d071b280-e8a0-43c9-8eb9-2a13c574fbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78dd3ac-bc2b-4fde-a1c2-68c841831c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed3cb2e-5e64-40ee-9ca1-4f6b563208cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2339aac5-fb52-483e-b419-1c3cf6098695",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "391ac05e-3168-4f36-968a-c06254df532a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae413661-9a6d-4d8e-9644-2b362a67b7e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6fe2cf-9810-4e68-8d5c-96238e38a138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14867e3d-195b-4191-b21d-b823bf2a4aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69920ddd-af22-4e8e-b72c-94e63a93e4c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69fd643c-3d9d-45b4-b14e-ed51ebf0ba16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e5e7747-39e6-4aea-8c85-484606d95f6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32e2d397-2f8a-445c-beef-50b812afffcc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c28f17a-fea0-438c-8bed-ffcd53602540"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f79a648-7722-4783-bfef-86566425feba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6661a5ca-fbb1-4f09-9339-235f4701c08e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd13229c-1f3a-4df4-ba0f-ace68caedefc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4ab9c21-3adb-4d6b-822a-d4f7473593f9"
            }
          }
        ]
      },
      {
        "id": "6a6cfd4b-d513-411a-b221-5b4b3790d4b3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b0b57be8-16aa-4442-a3f5-d73b26ac4b59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1d06691-9e1e-48b9-9200-8365c3666f7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a55949f0-24a1-41c1-aeea-ae03c250c5d7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292cb3bf-7cf8-4d47-9a2f-b093ab73f4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a82ff3f-aad3-4f38-ac58-ff88ec515295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29170ae4-0b11-4a77-b0e9-10b4ca786d31",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e62b47-22a3-4b45-92a8-d1bde0d30527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d6832a-d17a-4f97-be9a-8aff57419ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2104a4c-f09a-4bbd-9eaf-bff57d1fb517",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc36abe0-090b-4a61-a99d-acdefba9896e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2214f219-1a9e-4cf5-b294-17a5bdec30b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57eeaeb-fe45-4e95-9de7-e3c6d771ea70",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e991c9-54fe-44b4-b43b-94d61bb59ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bac7003-d5e5-4f53-99e7-6a03fdebc811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243074ec-ff11-43d9-b81e-db2da5d62e23",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e91695-f637-4d21-9da2-e5c217d96b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cc647e-6a88-4b39-86ed-99c3869e7880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393098e5-265b-4458-8601-b111b70fa3b3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decafad7-e226-49cd-8cdd-c99224cd5755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9828ef-3d56-4a90-8211-05f8c69b785d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9327b30-9704-43a9-97e8-9104b2144d41",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5928f6fd-8dc5-43d1-8970-7261c01017cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640c579c-9cde-4841-90db-72b66c3cb451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1815e47b-4bec-44e1-a297-169e38385b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc84882-88ec-4831-a991-6a3f2eb7d9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0784d38c-90a4-466e-8a72-47eb90ca6482",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b5f813-9790-4385-b744-eb70f06d2ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4001dc-75e7-4edc-a0a5-dd017c44db63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c88350d-8e5a-4eb8-bb13-e504ab7f2083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95b150a-b9e2-4d03-906d-ab3152f128df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a802d3f-ec30-4d8a-81f9-06d1d9efe5b8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e1bfa0-da70-4694-81b2-cf64c8790f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09594d62-1f97-4c33-bb7e-f8efc9ef1123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c59895-ab78-4f01-893b-389e1ed77551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f263704-24be-4b57-a32d-13213c6c2bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d615c1-e714-4138-a72d-b8e4db88e1c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd6cdc6-08d9-4f8e-8e2d-d222a76eb2b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a076264a-43fe-4a04-b6b7-3b778a1ac123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac001134-ef40-4ac4-b77c-354373cd46da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d4e4c2-d717-4a36-9c2a-9276e1cb0635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55637305-7b8b-47d5-a27e-fed80ccfc75a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7363b5b-a185-4406-985f-8c2497cda8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e684281b-3fab-4eb0-9297-93345af0810b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fa7614-82b2-41c0-b2ed-95c7891918c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22fd3dc7-9dff-45de-90de-2a093b5e042b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff80be62-ffe5-4913-822a-a77c921058d2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e162fbe-b1d5-47a5-9722-8b6736a3a7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65ea1e2-4116-4854-ac44-e1eef53ea5e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0be2a0d-e28a-4303-91e3-5105c15bd921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1356101b-53d0-4005-817e-6c4267113a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b143832-effe-4c43-ad0b-8d8f840d289a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f7594d-1027-4534-9c0a-30d448b6a8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d2f34ea-27af-4154-bf29-2978da9d6bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0396e2-4c14-4dc0-aa70-e918f3897e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7d1d12-bfa3-4399-8f07-6d1a3f6d4bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a659ed-8abb-42c7-8446-f26d1359e902",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cc5524-a89a-45f6-85d9-80e6e7cda8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e21acd2-69f1-433c-a04e-a02fa316b57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85527c63-3f6c-4c83-bd33-e9f354755742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817a5099-526b-4157-88cd-3a9f56dfc306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df428e09-adb0-4d46-8856-051faef77754",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8810c3-9868-4b4a-88cb-40ad40e09a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8e48ac4-86a4-4e78-a96f-492a914e3ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c528e6-8e40-4299-ad0f-8e419b424c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121b7634-51ba-4816-a207-f5bd4d572fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08132a9-ebac-4385-b311-1625fc31dbf6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b82cc6-a644-4752-bac9-58aefcb97ee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01604e6f-67be-4b6a-88ac-4a3886fc7985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95db0f1-99dc-4f7b-b32e-a3b6b0142392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6b9b79-98d1-40e2-b9e0-b1d9e2cfba89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6024a929-3d82-4a14-b992-46c70e21da3b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fca397c-3fcb-4681-be3f-b92794561d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833498df-d51f-437a-b433-5409fcbb2b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f642828c-4a2c-47e8-b3fb-e4b2a50b15c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45887f4c-4fba-4141-b8de-bc907653f7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81fb851-c2c7-40aa-9e34-95cc4e57d479",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c52f71f-cc6f-4d5c-9bb1-8707a2572ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19475621-255b-4121-b0ff-40c4a72db211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5f482f-083c-459e-bcae-056f1fad653e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afe8745-1ab7-4708-a23e-64a349b31761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86395f61-529d-4fe8-9146-23aed1e651e5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a578aa1-fe08-47c8-a55c-6d40df324bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46915b62-017c-4740-b169-8842da56b85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7464c73-7dc4-42f9-aa3e-7f505f8fa0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a3f915-4df2-4324-ba36-b1df59002dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d46d29-0422-4b6f-a715-4224a4c7c97b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57e8b06-0811-4b33-bb3d-281d4e16f39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f95d60-b9ce-4dfe-9dbb-e7ce7b072ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecec2026-910a-415d-913a-c03208dd8603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c135363-2f17-4da7-8868-14ddc02dadc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd043a9b-963b-4406-b53c-3c99e6b4454d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca13a3d-61b7-4baa-91a6-ffe06459a0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502d03ec-164c-4154-a280-5caf1cfff287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc28d4f-5ea9-4cca-82fa-e86b6de4729c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42f4cf5-c318-4c47-8723-c9f69b211537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b72ec8c-32d3-492f-abcf-31c576e3078e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcef661-cdaf-4cb9-95cb-07edef3f1afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974b7159-0173-4faf-9122-927fa30ff957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd2363a-87a7-430e-8f72-6dfea724ce42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f71c608-5250-48f7-88e5-4512e4445eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3b7c24-17ab-45ab-83bd-b37073b4ca84",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158d10b5-add8-45b6-9abe-ff7aaa0d43f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4077f2-4772-4862-b6c3-3cd47934fd3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc1716a-1fee-4f67-967c-558bc220b436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b08e8e-ffed-4f65-8de6-6902842a0a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bbdfc0-84cb-4903-96d4-9b7e1de7fb0f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682275e0-ad88-466d-8578-5863906d99f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1466608f-2d9e-4c40-9fcd-8bb8f373d475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9321de93-9ddf-4c56-80ae-651f81cf50d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c345926b-56b0-41e4-b1d2-a9302ab946d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c4e29c-d338-43f2-af9c-9e9ad2ebd379",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb68cbc-5612-4660-82fe-95dc1324ddb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d898aa6b-617d-42c3-94a8-709fec42fb06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d88af14-1230-4a28-8f8a-fce78e4778c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926a0c84-91a0-4a99-b949-6c4928f937e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedace83-4b2c-41d4-957d-c782de30b906",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b235d2d-9c87-46bb-8980-d7a6915cf424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91c2d0ba-a790-464c-b85c-afd524159d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6e5928-4243-45a6-90f3-3e2e51d7d1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9c75d5-3f72-4f20-b9af-375a7188d95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb288b2f-ae39-4fa4-a78b-3bdd7a8c6013",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff80cf9c-e848-4371-8a44-01b4759dc8df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f710c7ef-be2c-45b2-b9f1-4bcba9fd4c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02de589c-2b5c-409b-b49f-5cd1e3dd5ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa6e07d-1f76-4f47-b298-44058d620b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004fda6d-bc73-4b1f-a5dc-013451d61d0d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64bfda7-da52-472b-b076-4e21e136a406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7987620-4243-4ee6-89da-3f5ee9b007a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bf11a7-f9d2-4ee0-8e82-3aa12fa61bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a11cb7-43b8-465d-8183-a9a184e9b6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8866b2c9-2fdc-4c4a-9e26-c3431f06a638",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486a3e6b-69a4-420b-bb29-4cf3bcb01d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca5df75-0552-47f7-a2af-2265eb361479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f13a22-daf6-4059-8824-ddef9ee4860c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0042fc83-9c31-459b-860a-735bcf64fe70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2beda033-45f8-4c1a-a445-421766fa1b0c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b4b75a-efa3-496d-9901-6afcca3bb66e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99273d8-78da-4233-a6f7-59f2c7a0ee48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d58bed-2216-4ff2-bde3-a93abd1bffb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab89b97-68c7-4140-86a6-2a4640084bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbeca35-b730-44df-ad8c-25b0a455aa14",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8e1d6b-ae0a-46aa-bca4-c1d0ac5e8f7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3b9977-d2fc-4b87-b081-127bf232b792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99c5df8-e91f-4eba-a7e2-bc68aced2b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14347db5-1012-4585-9237-29c0630335bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f306aec4-1e8b-4077-964b-74f42e23f93c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33b13ec-adff-49c2-b2e3-00d668380f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4f8e5f-8408-4c8b-a80a-27819e6ac50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c1e200-0d0c-45f4-9d48-384ae007e458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47797afe-622c-4da3-92f2-1de80857af94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4994f3-9cf2-4473-a9ce-5a6db06b686d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ad830e-566d-4823-8ad0-39a6f681b0c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a56982f-e907-4957-88ba-9966a5b6f7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7902845-bbc0-4d7b-b8d6-36369759b274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27252eda-b076-4b60-9b38-e085e0e84702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52350b59-5577-48ab-aa4a-354113580218",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639f3e7f-5162-4dae-8a47-ce99449b8b75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c95f95-2c30-419b-a9f0-2b55011df139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5b16e3-72f7-4f00-8564-8c60fdc75fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed03f582-6473-425b-b405-ec612ba1da74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005150db-0cdf-42b2-a33b-3d6fae35a85d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f84f42-4ab7-45e8-982e-3ec77adbd884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2576381-43c6-42f8-8b5f-5ec823717259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c53df6f-3b39-4818-a1bb-1ef185a10236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bfd763b-edf2-474a-8dcb-aceb7121d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f1d876-5e76-400a-9e8c-b98b13fb1892",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbd6531-9724-4af2-bb22-d4f242aba991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8c9c67-899d-4792-9d58-7d3f3766ab19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaece53-7b49-46aa-be22-9622c2b668a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4a446a-24c3-46e0-b27f-39871e92d904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdcbccb-0fa9-4130-b1b5-b56f4add8ef0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e635468e-9ce4-428a-8844-fca16c1fa125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eaedb8a-bf28-4ebd-8bcc-9db9d99deab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7b5991-617b-4496-abb0-e708b2325e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6bfdfe-6c39-4e9f-8858-ee4c5d6755db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba214a3c-e5a7-418b-8b8e-e1e63ef282d5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4737f82-feb1-45e9-9c42-a312397725f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68bf7114-1060-4c24-bb63-9a4172f64e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaa400b-e5df-4783-ba15-91fe89c6a2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68cb525-050a-42e6-985f-d3c451e3c618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb97e2ca-b697-417e-94cb-357770e4a395",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5b4a55-c844-45c7-aebe-e0f48febddd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0d647d-c920-4961-a726-9d95b903b1cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d7850e-3ed7-446f-ad02-58cae866bf39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44564554-3a2d-4232-b766-f0dbec5740c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f6d882-a9eb-4db3-9e7f-be12760a4a16",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f95693-a79a-4a9e-a435-a3e7cb2d6ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9538878d-f43f-4c95-8b6d-b6c95b0931ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8ac378-0511-42a7-b09e-aaff816010b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de27aa1-bd15-4177-943c-a40e0158c0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f52509-cb34-437a-abdc-9d7925a63b1d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdae4826-3b99-472c-9a13-fa7519363695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dd24da-8b77-4367-8b19-865447a1958b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6565898b-3622-4314-a21e-5beecdd03d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812c74bd-c15a-4c2d-a174-671925dc11aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0958d16-5ee3-46f7-a835-f6b9e0358efe",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08a5797-274c-48d6-86b0-264b1586035c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c621292-e5fe-4832-a262-85b78bf0096b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a627c4c1-973e-4694-b301-85603ee24eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98569cf0-3a0f-4af4-80cc-cb91d856646a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b998b7b-554d-41cd-b236-71440e9b0286",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a366003-f505-43dc-89a1-0c58a960594f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14537c54-a698-47cb-8b82-27b3ac9412cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dbe0d9-df6b-43cb-8b90-01542137372c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6984e891-9cf5-4126-b22e-6d911babd4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dda4c0-10ab-4df2-ad28-c177cfe831f3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f60334b-1152-4b85-b483-effb99c4b9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d35810a-424c-4da1-b9e2-882128b34282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2641e9-b4e9-4168-bf10-b22e2b288dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b202130-0945-4144-af06-6b6eaa7179e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6770b6ac-2ac0-467f-a2c8-8dcb16f3a17c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55ad5d0-4441-4204-9d2e-557ff49ae27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508d33bb-9215-4fe2-a1ea-c8b47ea309ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b7e605-dd6c-4a77-9a1b-0131add750a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bacfb01a-c2ea-4c5e-ae67-12f34862d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ffbb01-2dfa-4a71-9988-02af90beecd7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002cf5a9-8f3c-4364-b1f8-40b6f40b212e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc7300f-5063-4790-9559-cc5dbaeaeed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffebd650-a56f-49d0-b2a9-9206a41940cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f93c921-5dcc-4b96-abb6-c72b3478823c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070a5643-1178-481c-aa85-a6c9c9dbef13",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e6a52b-ebca-4983-9399-59833624796f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da42449-abe0-441e-93b3-bf116b992f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aa6779-b365-4b96-86fd-852cd6ebaa3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8019e290-e7d2-419b-a2f9-59e7db176d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3c0357-967b-42d5-be3a-4ebc1768cea8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515e2333-89ce-4622-9c6b-8330471b2d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff0a5cc-b70c-4cc4-8463-49ff8c235b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19af39f-590a-4f95-a762-41639efa9e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749d222f-42a9-46bb-b41c-72478d86c81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7d3213-293f-4c90-9834-f8b7d8ccb150",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39edcc08-0208-49b3-af98-7b674fae8c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de1977e-d611-4d8a-98cf-3e2fde6a3252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aca50e9-2bbd-488d-a91c-878d3ca1cb29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77558669-f3cc-48a6-bc91-15a46f6c6166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98fd7aa-0d5d-4469-9099-9b3ef1585875",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a563791-3f1b-4e19-834b-7d6407b58d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90050da3-f309-47db-a0e2-c91b26de3516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "031e35bb-c376-48b7-9ea0-eb96486a62de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7648f03d-0930-4dfc-a445-6e5fc87e10c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e7c163-d02f-488d-97a7-ee9c3cad5929",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834db80b-2cda-4058-833f-15557040450c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ebf4af-4b7b-4375-b266-2f2ed8895284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0277d58-052a-4b7d-8c48-8b859deba172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a306a40d-d1c9-43ef-9e04-4d3978620b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b8aa99-39d1-418c-af17-90316895c242",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e000b41a-42da-4820-ab3e-5bd72091dcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5d9439-7b5e-4d3b-bcaa-c2d3e3dc4d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779ef9a8-627c-4bee-8203-1a2867067a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729789c3-2d6b-4d44-aba9-3193726ecf27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc9daaa-2939-413c-bfde-6540071dc225",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fece0c8-7f80-45b1-aa48-e45d1e8ca64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fff775-8fe3-4ff3-b6d0-c8e2c74490b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4620161f-4815-4f0e-8d7d-652f6969ec41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb06af7-458b-41b1-a889-b8b1de351801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a248f3a9-b2b8-42c9-88d1-c592044675cc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7682b6-d0c1-42e4-86ae-8254adad620d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae654f1a-833e-45d3-b722-b246ab5114d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4dbffb-90fe-4211-bb6d-dff22b190339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2702845a-4b9e-47f2-934f-5936984d1f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e54cb9-e4bb-422a-9cdf-de664be18eb7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a149584-ae55-484e-8bea-681d7ed8617a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707f9b72-d0e0-41cd-8c90-e2987c287512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1640ff4-6051-4eb5-acd8-0af8951c8d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd67242-414e-4246-bf65-1ee0339ebdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7cc0e9-7bab-4b55-8b0d-cb67bf506034",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e80809-c536-4cf6-b07e-347f2ae942f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bcc73b-7ca1-44d4-8802-99406d79f81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d03e57c-f743-4412-9d54-dd7aa7dafef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2620dd-fc99-4048-97f3-ef3afb255480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ede203-92b8-44cb-9ccc-ca128f2cf84d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e002e2-bc37-4b35-9732-3ec40e48e604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547af86c-a7a9-44b1-98bf-4321a9bda56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3bae37-d200-47a6-9c2d-3af0ed6bbd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ed8a8d-0fac-4efa-81dd-f2e294620494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ba50c-aca7-4e96-a2b1-d74dacd392ff",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82a70cb-7ae5-4030-b7e6-292266a71515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623b30ea-3e8c-48a9-986e-03efc9e535c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52cd9fe-8a67-4cb4-acd3-276e0a09e2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bb7378-5f5d-452f-aa87-af6a2e650764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbe5107-894c-4dfb-bc33-bb69913695f1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a24bea-ea1c-4fd2-a95e-16197da1f359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7139321b-5e31-4cbb-9b42-463bc35c3839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983a7005-47b8-439b-ad91-1a005e90ff4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7891bc6-ad0a-4707-8036-15315a5b1f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b9bf69-862e-41d2-86be-e0c07279bb61",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d73095-c2d3-4669-851c-1ce72619501c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c224f85-8853-4c7b-b3e2-47da32b65a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9533fa0c-2bf2-4126-8fec-86a8462cf38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d493efa4-1637-4da2-9ef6-960ffd3327c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9cf217-a39a-4f87-84b9-44de31de503b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b51eae-e1f2-4669-940b-82994c072705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6396421-6e73-477c-a0c6-8997462a5041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e79d02-f651-4e51-8019-cb274688f36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b6c645-edfe-49ca-b5ef-06c24a74e00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde35e39-2d3d-45d5-89bc-cb45bb43d17f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e2db05-26d5-49bb-8444-71d0e0ebce0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91817b1-4b8a-4cc0-9308-1f6dfb74a0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eb1c36-61b6-48c4-8dae-f662e816ceca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afebea66-ade5-4628-bad2-7554433c10f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c4fa14-9a58-4993-b39f-d3ebef955a5b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0b4535-6cd6-4d51-93de-7dfcd0c20b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fc7ef5-6eb0-4f64-bbf4-c21da2183a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3cdb5f-9dbf-4872-b98e-2681ae4e676f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e720190-207b-4592-b818-b5203239a139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ec7dea-af00-4c12-8293-1f81db582f67",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e988e58-aef6-4733-b97c-8b77ffd58bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6907ba4d-1b5c-45c3-b8e7-f8745d14b35a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb58d28-3eb1-4c78-af23-f459b2d79ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9f1d93-4223-499f-988a-aa72c1830354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81acb113-2f22-4c58-9f91-5bb7c8a76bdc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fd5fa6-b176-4a6e-86cc-7b85b2b0b338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3534c179-c0a9-480c-b9ac-bdd900692127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0180f87-d7cf-41ab-bbcf-b65f37b2c9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80cf483-3355-4607-bc63-7b5bd4376e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799b0153-1139-4797-95d8-116b70965c16",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a840e1fa-656c-44d9-82d7-7acb548facad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee9d25d-b18b-4e10-bf91-20f8befc281e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0c7830-0b55-4210-80ed-1f062dd7ca04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8915abcf-ffe9-4c8f-9486-fc6c68b39c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7370814-3d39-4617-a3c3-0aca1f78e497",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8047160b-a4c0-403e-851d-0c738c9f7ad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a35922a5-d26b-416e-ac2e-0c22390efd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb37ee5-8432-41be-966f-65a4bebdd4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f2325d-a8f2-4487-86a2-778d09b5a22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a289fa0-0256-4081-91b3-059cfe78068d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5554dd-c501-46d4-b993-1af8bb69ad8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55401a5d-a178-4be1-a390-df9087accdff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763487ee-182d-4358-9b2f-18e042e319e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab6b253-c377-42a9-ab65-1236ccc1cb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76ed935-613f-4e3b-b91a-afce4ed4232f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad842d58-acab-4126-8ec8-17abe7269b97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b1da26-4c3f-4a2b-bd05-1b31fd40adf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8d5889-07d6-4350-96e7-1b6fffe2bd3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc10961-83c5-47e2-968a-be056b179552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab9f009-5ec9-4133-a373-c2a888d61b93",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c1c949-45e9-4172-ae6b-d17b7b81def8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b26c0c0e-89e0-4fe9-a39c-3f3470005d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f6bb06-bbcc-435b-b5e2-a6df320eb42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25dd9953-5fb7-47ea-b1a9-3df9195a0515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c80a1b-0ded-4e81-beb4-68dc7a6f5a48",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378e9f55-d302-4dee-9c4d-ab01789cb794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "729cd2c4-3a1b-4080-9eb8-b70e71f4762d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe544580-7426-4222-af46-f4d528eb5f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fbe078-59c3-455f-8dae-ecdb07f0f642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee07e28c-a7b8-4580-8485-debebfb39fad",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e498c1-f3de-445e-b371-f4aa6c877463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35e61a0c-deba-4c28-9064-9adbf915b54e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8476dc-0358-4f12-93dc-5485cc170a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e2aa01-c30f-441a-8d53-09e9c84f5146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24c5283-8a89-4101-898f-7d2e30a54cff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d577e31-5885-4c82-9332-571234c88165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870e792a-ef6e-406c-bf05-baf677bd23d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0faff052-8b3a-47f3-b00b-71c4f59f300e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51186334-18fb-4102-b261-2428a569fb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c40930-ce3e-40dd-bd29-d5d4a071ac47",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da09a4c-5b19-42e1-b15c-f078a218f1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9c4fa3f-2ab4-4537-be15-e27478b8a3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028ca2fe-f954-4848-89c4-b31cda1ca488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5ed6c8-3f0e-4a6c-9d63-f02b02b1c4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98962479-a01c-4b43-91b0-21645d44cc17",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa172257-0648-4acd-8fce-75d54ad53f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a58ceb2-a461-4c65-980e-8a0159cf66ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a86c6d-ae3e-41d4-84b1-fab1887ffe22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469aa1b0-e284-40a2-9c1c-f2f833838c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f168279-201a-47d3-9d59-25575b97e964",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38bcd1e-8507-4283-9b75-460425b45a4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96238a02-baa7-449d-b2b5-242137d86157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481df5d5-9881-489b-9e6f-b2e9c094cd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debe7112-4a35-428d-9385-dda9c578ec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e030027-acf5-4ac6-b600-0e49cb713596",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e181edc9-3b29-4021-98ab-0b071aeedddd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da9d906-d04a-4afd-a7e8-a06d09c0ae67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef7f126-0e66-42bf-8e50-a7f9d702336c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea32b49d-4e5d-4c60-8a3a-5e56042eff63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c635597-5a54-4085-8935-c638369f091f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b838fc3-75f0-460c-91e6-15590f6887c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "017cf860-efa4-4f8c-9e79-164f1e0505f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f67346d-016f-47c1-981c-acf5ff573e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad3036b-87b7-4587-b802-29422029007f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2941b023-42c7-42b5-a930-6b7a335bdc8b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35890b1-79a3-4db2-a4ca-7f0b7511cf60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73198989-45ba-4340-a704-3b0b0c46bd70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f352c083-8734-4309-b4a6-b75a7acb6cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b55621-1573-471c-be51-89ae30d883fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d124596-47a6-4d9b-befa-d44f38bb3319",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35971b1-4271-405f-bdc0-dcbd73ffeeb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1dad77b-455a-48bf-bf7e-7c440444a2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2d7b82-8e6c-4ca8-aeec-8a27ad111966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cf14bf-3eeb-492b-9508-f0db81f63c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336ca1f7-468e-4846-a64c-a9dcc434188e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f89035-4847-4e49-9e1f-3eb1577af00d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1343467-d7b1-4a2a-8f5e-892703cf73e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b958914a-807e-45f1-9b22-4a167620ce4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35787cb9-46e7-4d76-92c3-be82add5b682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34b1eb6-f5f1-42af-90ca-69d7441894aa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889cf78b-636e-4bb8-b9f9-dd9bc2e940b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "227ad317-d746-48fd-89a4-9bdfd00ebd96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da2a51d-768c-4372-a3d9-2aebd8b41bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5833947e-e955-43e1-b94a-ebfeccca226c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f606c4-aed3-412b-a8b6-4177f2eb6c01",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f15e35-b653-4f74-bb7a-ff2bf88e6bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "797e5b75-34d1-4544-8394-9aae01362dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f6258a-fc5f-4830-a19b-554f9b6f5544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2b244e-a2f2-4499-ad5c-ded0ae63b104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5dc4a1d-46e0-4930-a08d-b809e3810705",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c5320a-295e-4492-b156-5308a1cbed06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1297d4fb-d5c2-4fb3-96c3-bd456a0c741e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe50761f-9cae-42e9-8b7e-9c9fdeb9ce3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2833cb9-fe3b-45d7-ab83-45c951f83197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a1a278-a316-4218-94da-c4b8a7655e7c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b41519-2fa5-43d1-87d1-1f06becac2ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "687659c4-26a2-4a84-b363-fc029f68fe70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47af6f65-5109-4e2b-92eb-b91455c106da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f036d2-955f-4d5e-8e77-dd173d2e7655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d5df20-fafd-4647-96a1-8cc7b0b416c3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e134cfd-af85-45be-a8b3-f21289d6386f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e8162a-ac98-420f-97f9-4320711382ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da8162d-fe4c-4954-b003-d209cfa5ab09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a73d23-2ab3-4f5d-9f5c-6c273b3231d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9982a8-d039-4b5b-a076-849d41cdfe62",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa5dd7a-f329-4c2f-ad01-27e93da59abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26aa1d70-1c56-46dd-97fc-7bdad8d2efbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9201e5d-d306-41cf-80b7-105d37c21f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5869e264-2481-4464-9093-a001f51472e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db629ee4-2a72-45c5-a075-81cd586511a4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bd7593-22ae-429d-bfe2-42497b61b289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a8b8ca-3aa2-4edb-9b2e-fa78d5728b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26af9cb1-8007-4dda-9152-b6ceb5e93360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a489db-e1fe-4d5b-a5c9-26ac8f6d6f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff0bea1-444c-4158-a4a2-9a1655731288",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4abafa3-b494-4106-b52c-62d33b38681a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7873995a-a36f-49b4-89b3-1adf5fefb40e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18cbb0f-e191-44f1-a79e-ccc4ba36597d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22479fe-a475-4e1e-9b04-233be7c3a264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e762add-83e8-45b6-9e7f-52b2ddaeea47",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48fadb5-a35f-428d-bc3d-96f7dd91f132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ad6a23-839d-4589-ae47-3853d73add96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9b5746-3234-469a-915e-e25150fd6f7f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6ff5c9-1d2c-492b-8c76-eae31d7cc766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5aee2c-f505-4a11-a7a7-5d12ecf1f663",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d7259b-d9d1-46fa-8eec-76695c9bfb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16d97052-d801-405c-8c56-4c92a5d3e3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2096da0-4224-48cd-ba65-9c3a2413bcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87926ed1-0403-46ab-acd0-8771e0a5e223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5acb30c-c01c-447a-866f-218df9f7cea8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc5e772-e15a-45ff-a90d-7fc1b85aa4cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a58e9fc7-4b5e-47e2-9102-1a3a1c8ddc80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41d4b3d-7673-4cb8-b54e-9e2902df0a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f4d773-9a09-49c8-99d0-2c95edbda2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367fb28c-ec9c-4593-a4ca-8e8e3abfe876",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcbe0a9-60c6-4628-9355-0c6160829801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f3cc84-99d1-4761-a8c0-0d0887e57504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ff5cf8-6562-4a41-ad86-efb80ddbcf4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fc6efa-79e0-4813-a3f7-943b515bd5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57aba48-2cf0-4fc5-8236-69afea4534a2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3c0332-0a61-4bee-879c-40050d1c54ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff38b62-b920-4a48-be57-41a90be874ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4735236-2948-4211-9715-525d276f5aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1d95d6-28de-47f9-830d-d71e3e3917ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9395f0a-cbfd-41c4-a456-d933959d7164",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78802057-9010-45dc-9113-b549773a9440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30e4ab5d-7239-4269-8833-c70b9c3c3789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fac879e-4936-492a-95b1-38378660d336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9f9efc-0079-479a-b52b-e35a76bb93eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430968ba-58cf-42d3-aab6-758fe4c5fc10",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d32af9a-7a88-4c01-a9ed-1cd6cd35dac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2120e950-18ee-49f3-a988-273e13dc548c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc794fcc-362a-495a-b767-6e03441a64cb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ed0d6b-0007-4560-b0ed-4660783e1d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96865417-c9cd-462c-9291-1994aeba93df",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d365e43-8087-4799-8081-8bb3e2135a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3747560-a8f1-4f4d-a6bc-5663b2391e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6f03b1-d548-4557-bb66-c87d9c8e287b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a097e99-f26b-43f3-9e7f-f66db3da32dc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c279cda-83b4-4672-8429-47e848b68f28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd34275d-efea-42e8-b07a-c2c895c737b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd427e3c-782d-45a2-ad36-5d13374704bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0f0db78-e43f-491f-8f86-b7d8ecfaff9a"
                    }
                  }
                ]
              },
              {
                "id": "2813ce35-31e3-44d5-b023-198e320f183a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c676f79-abfc-40d4-93ad-88b0d9b47faa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113454de-6dd3-43cf-8917-1a761f7b2125",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2d922127-570e-4944-8eff-3735aef29059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a015bc2-535e-40a7-9ee1-e3ae00d7ca0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dbc9976-5e38-4227-85ea-7dadc80754d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36a8c797-0872-4ddb-9e06-d88bf16437f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb2b9be4-bc08-497f-abab-dd0a0d52d6b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca97410d-9eaa-4d57-9496-334b0eb03f53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "063fa79f-9f2d-4e12-bc3e-63401512a179"
                    }
                  }
                ]
              },
              {
                "id": "d2432eab-9c65-452d-8191-09accfc6ab05",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "161722ac-6f4e-46be-8d93-7698279e36bf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfde898-db5a-46ea-9056-59a107b2d350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4e87775c-20e3-4566-8c95-0c6dd8239f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd71931-6dc5-49a5-bd3f-abaa8b5ee94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c921aee9-39e0-4f6e-abd4-653ee553c3bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "97ae4ba2-9a0e-4ae4-a33e-0a99a3e099a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "71f51b55-ad0c-46c6-a1fa-49683f94d7b0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4af9fb3d-1aba-4515-9191-61eb5851c7cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3484eec4-11d8-4376-b7a6-1b5b78900186"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df8a1a41-71b6-4391-9d45-c7d676b1a07b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6c262d4-15bd-4af1-85d2-68558418db76"
                    }
                  }
                ]
              },
              {
                "id": "4d546520-5a08-45e2-adeb-fdaaa30ddd7e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ee543e7-63f1-4f68-81cc-1e48136fd33a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5058cecc-c3bb-4a72-9199-3403f8023899"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64019209-d84e-421c-8969-9e04ccdf662f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d5ab78b-9d4c-4779-8abd-730cd9f6eb73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df7c4645-26c7-4445-a2ba-d585f98c4fd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8c18f5e3-4e96-4713-8951-7d5a3af84045"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b9837f5-d3fa-45d8-8a16-71537d8e6aa7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21ac8964-4c40-49ba-bc89-60fd625670da"
            }
          }
        ]
      },
      {
        "id": "3b98c8ed-6428-453c-8661-41d9e9a33926",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0271f69e-0225-4755-8073-3db7421825bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6175c24-9565-4256-b4d9-5948658ba580",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02c16e1d-b572-435b-84ff-dcd1eca54bff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5989d1f9-4250-4e76-a6e8-668991426351",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6bb04fd6-8871-4c5f-a260-91f21fa1027b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f61159-5aad-454c-ba57-39b49e477aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "042b7812-66bc-4b9b-b2ec-3f1a5ebad010"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9b07e25-6c5b-465c-ac12-9448036f994d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a0e34c5-d057-49f8-a002-6a07b4fefd4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d098460-a05a-49dc-990e-dea94f13a6d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c83704e-d49f-482e-a8ec-7e5ec312be51"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9004d6d9-2646-4829-8aa6-5d6aa37f02e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "36c144ea-3377-4d13-9937-b7daf854b9ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49c46e02-1c6c-4dab-82b7-8b920dc7b936",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1774d7f0-d471-41d7-be2e-1cf25e0461dc"
            }
          }
        ]
      },
      {
        "id": "02d02704-dd74-46db-a1c0-d837b6a41ca5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "227de2b7-080f-4706-8edb-ce0cc41f0db2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "874120db-6c05-48ac-873f-c748d2dd1c98",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a367622-84b8-4485-8ce6-b7a5acdb282f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b810ad6-c02b-43ef-a743-e114b478b964",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29a6afaa-355a-4d6d-a0c7-0ee77f1e1b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0be98df-5dd9-40ec-b7b5-a219b4db3889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7276fa3a-f5b9-4d51-b643-fe308292c046"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cb1c54d-1b89-433a-b391-7d9afb77b979",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4d04394-dc3c-4d8f-ab50-ea2ad858a103"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d2e06b1-b88d-4d1a-91f3-3cb2c07c6b0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f149d7d-9229-4fc1-b275-4930b87a22dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7a74b0a-8588-4558-aaa3-ffa3ed42176e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "301ad1a9-3d0d-4351-b864-26dbc022c6f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca88564d-5086-4b49-8211-92794955859b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "822a065e-c430-418a-a5af-56c7ed688401"
            }
          }
        ]
      },
      {
        "id": "7f1b0bcc-0cc2-4334-8694-4d6ca8b19a6a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6968a0c8-7803-4694-a392-8bce2f784cc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7565f737-e9e2-4d02-a957-d179f3f08420",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46b21f2f-b5a6-4ebf-870f-af9b9db1f207",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35378a73-7bbc-4c94-b2c7-3ac94d1762e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6757f790-091c-4bec-a7d1-813ed583c6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd932df-1ed0-4cf5-b5ba-ce6d6f3a2797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eadaecb0-1a77-4f17-b43b-1af1e5a53622"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8c4e979-4871-4d9e-aa4e-c6de23d04f5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79436463-e44c-4c5f-abcf-6cc767e25ff0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a41c866e-dadd-4ff3-9751-105188714ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fd62733-2c5f-42d2-88bf-64bd0bc3c845"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a494288c-d83d-476f-adb3-bcee0f9fb1b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5e0cf88c-0a71-4ef2-98ad-1402e3a58787"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f804959-13f1-457e-818a-f4e43a78bd65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a43cbf3b-b1b5-4a54-8c0b-8cea59b62d05"
            }
          }
        ]
      },
      {
        "id": "69421f25-1de5-4c64-a7d5-313c2eb9af0c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27b52841-a80e-4f53-8074-f5b5d04e2221",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "567a4c3f-7a94-4374-986f-f8dedbb34fc6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6890ba2c-7bab-4790-9eb2-05b8c2ffbf48",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bad3eb93-2703-469c-8ed7-3ab5e0d39b63",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01f1ea0f-4860-49d3-b193-3f94809f5507",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 292.67886178861767,
      "responseMin": 10,
      "responseMax": 6476,
      "responseSd": 866.5475691231136,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686444396789,
      "completed": 1686444479652
    },
    "executions": [
      {
        "id": "d5409053-9e89-45e4-b666-5023dc921bcf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e7fa8f4-2c4e-4860-868b-0eb72583c7d0",
          "httpRequestId": "2b89b1a2-37e3-41b5-9860-8fed069dfcfb"
        },
        "item": {
          "id": "d5409053-9e89-45e4-b666-5023dc921bcf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d7e934fd-3b09-4035-9e4b-b4e5530c5c30",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "32f14377-c292-445a-9d5c-39eca6ea47bb",
        "cursor": {
          "ref": "54e2eb64-5fdf-49ba-aad5-8c1c1c8afeba",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e55131b7-8e68-4420-83c8-2c39c505da78"
        },
        "item": {
          "id": "32f14377-c292-445a-9d5c-39eca6ea47bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "373f78ce-83b9-42e3-9dc0-e8cc5bfd5e78",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "641fa3df-28b1-49bc-bedb-999110a0c0d1",
        "cursor": {
          "ref": "6be6c60d-93e7-4b5c-b065-2fbfa4a230c2",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "08c016c7-6def-43cd-bf0d-7cf1f92c2c6a"
        },
        "item": {
          "id": "641fa3df-28b1-49bc-bedb-999110a0c0d1",
          "name": "did_json"
        },
        "response": {
          "id": "a40cbe98-fb3a-456f-a8fc-f9317b38184d",
          "status": "OK",
          "code": 200,
          "responseTime": 488,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b605cda6-e2c5-4adb-8242-3c074ad9ceca",
        "cursor": {
          "ref": "3b652eaa-8f84-4c9a-af83-ef48abd3915b",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5f2fda39-6214-4b52-a6bc-63db368160a4"
        },
        "item": {
          "id": "b605cda6-e2c5-4adb-8242-3c074ad9ceca",
          "name": "did:invalid"
        },
        "response": {
          "id": "0fb522c2-c517-49b2-ad2f-e89d67394023",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1278,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b605cda6-e2c5-4adb-8242-3c074ad9ceca",
        "cursor": {
          "ref": "3b652eaa-8f84-4c9a-af83-ef48abd3915b",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5f2fda39-6214-4b52-a6bc-63db368160a4"
        },
        "item": {
          "id": "b605cda6-e2c5-4adb-8242-3c074ad9ceca",
          "name": "did:invalid"
        },
        "response": {
          "id": "0fb522c2-c517-49b2-ad2f-e89d67394023",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1278,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1f17c21e-5643-4a4e-a6f2-b35d10124026",
        "cursor": {
          "ref": "dbf0fe9f-99a2-4d63-841d-109ea725642c",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "72285546-9ca6-47af-8e96-ca05405a1450"
        },
        "item": {
          "id": "1f17c21e-5643-4a4e-a6f2-b35d10124026",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9eea72be-fc14-4eea-b770-3e52895411f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddb2321-3cfc-440e-8896-00e40516f6fc",
        "cursor": {
          "ref": "442c767e-beb5-41c8-96f2-af782486341b",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f044c83a-2475-4f91-bed9-58bd9b690cd2"
        },
        "item": {
          "id": "3ddb2321-3cfc-440e-8896-00e40516f6fc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "11403ced-e95e-4f82-9cbf-b1a72cc5573a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250fc1a5-690e-4212-8757-def1aafaf1c7",
        "cursor": {
          "ref": "2e45dce7-e7ce-463a-a2da-8ac42a808b18",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dbacc6bd-268f-4b02-8102-7a463ff639af"
        },
        "item": {
          "id": "250fc1a5-690e-4212-8757-def1aafaf1c7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dccef95c-c4ca-45cc-8166-5a4bdac8e802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "283f2e5f-5820-4c8c-842c-174cf9d79052",
        "cursor": {
          "ref": "898e2f0f-eac8-4564-b345-bbd86f9489c9",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e4df8cd5-2aff-4c45-a2e9-c93de33aabcd"
        },
        "item": {
          "id": "283f2e5f-5820-4c8c-842c-174cf9d79052",
          "name": "identifiers"
        },
        "response": {
          "id": "e3856db1-6a4d-4490-b8f3-b99284d6d544",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09203e2-4e6a-4e75-871b-67e99348f2c1",
        "cursor": {
          "ref": "588da16e-8c10-4818-a32c-1b3ca6856e77",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6bc0dfcb-8e81-4a47-9843-2e49ceea8eb2"
        },
        "item": {
          "id": "a09203e2-4e6a-4e75-871b-67e99348f2c1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9c2bca7f-989a-45f4-ab98-51659cf23d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7a61bf-232c-4d1f-88f4-10102ffa8651",
        "cursor": {
          "ref": "dcf7d4fb-ac74-438a-b15b-91f6cec9cc2c",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2eaedb6d-9b9e-4460-a7e2-2e32cabb502e"
        },
        "item": {
          "id": "ed7a61bf-232c-4d1f-88f4-10102ffa8651",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "eb9be35e-c543-438f-bbcb-e2122418da63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64eace8d-01ab-4ffb-bc4b-d64d7a75ec21",
        "cursor": {
          "ref": "3c22725d-07c0-44e5-9641-0babf3ecc1d0",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4aa4b550-5ac7-477c-b051-dd780dab5b78"
        },
        "item": {
          "id": "64eace8d-01ab-4ffb-bc4b-d64d7a75ec21",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b207b5a8-1e55-4c38-bc45-cd49030b9448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c6fb5f-026b-4742-80a3-b2209e86a0d9",
        "cursor": {
          "ref": "2a7f0f41-4d2d-4e77-967c-302fbf520eb5",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "aac816b5-9635-4807-aef4-8a8950b560ca"
        },
        "item": {
          "id": "a5c6fb5f-026b-4742-80a3-b2209e86a0d9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9800b3d9-51c2-4744-9169-89d09a53d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c2bdf5-1266-404d-8069-68348e7359f6",
        "cursor": {
          "ref": "c9e8f3e6-4947-4322-a1f9-3231d6367553",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8d691497-b335-4ecc-a154-3dca357e213d"
        },
        "item": {
          "id": "03c2bdf5-1266-404d-8069-68348e7359f6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "28282454-73f1-4b12-b0ad-dea75b3344c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd34569-7412-474c-80ad-fd865a9258da",
        "cursor": {
          "ref": "9f191636-bb5b-456a-9efe-c150e63055c5",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6fdb8154-a46e-4201-bc07-e5af6401e66c"
        },
        "item": {
          "id": "5bd34569-7412-474c-80ad-fd865a9258da",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9729885c-7db3-4ba8-afc3-e2ca229c7a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c247c8e6-4516-4945-980e-b57cb5aa42d9",
        "cursor": {
          "ref": "aae4d6a4-ff22-4bc2-be29-f302e5936d32",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "70945c6b-f8c8-465f-818c-c99931f0a107"
        },
        "item": {
          "id": "c247c8e6-4516-4945-980e-b57cb5aa42d9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cf47f8bb-0925-4306-abb6-5578ed2c8356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7506be9-0231-4a0a-84d4-b3df2cc45385",
        "cursor": {
          "ref": "7b2ca8fb-5da6-4832-a07f-fa7e555348ce",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3a6eef7c-4b85-414a-81af-f62230ec2aba"
        },
        "item": {
          "id": "c7506be9-0231-4a0a-84d4-b3df2cc45385",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b69547d9-d68a-4dd0-bd34-de5f62d26e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e213364-7f8b-4047-bd56-335b3c954018",
        "cursor": {
          "ref": "14bcd2fe-874c-4fac-9582-2293d1c327c2",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a5f02134-a006-4d82-8a7f-b16cc06dba3d"
        },
        "item": {
          "id": "0e213364-7f8b-4047-bd56-335b3c954018",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "44dfd195-e63b-4e2d-9d62-9226772c7193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b096f4b4-a341-45e8-8ca6-03ac255ab53b",
        "cursor": {
          "ref": "524bd85b-acda-48ce-b1ea-aa6a0baf78c2",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c9eb0afa-b695-4d33-809c-42c80e88e3c5"
        },
        "item": {
          "id": "b096f4b4-a341-45e8-8ca6-03ac255ab53b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9723f673-7f0f-4234-843c-ef2a7441fc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75ee249-f3a2-4e1a-acd8-c35c044491b1",
        "cursor": {
          "ref": "d3a9d5b9-0ae6-4693-bce9-b8ea4ace36c6",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a87c656-595f-4119-946a-63fb4760a487"
        },
        "item": {
          "id": "b75ee249-f3a2-4e1a-acd8-c35c044491b1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9f7f088b-0fa9-44c4-9ffa-db0feb145a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb75577-b89a-4f1c-93bb-824b4af486f5",
        "cursor": {
          "ref": "fd724679-199b-459c-875f-f8e5562e3c81",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f84e03fb-674f-4fea-8f2e-075e6c76c286"
        },
        "item": {
          "id": "bcb75577-b89a-4f1c-93bb-824b4af486f5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8faad034-4a95-4740-a5a9-427e666a4517",
          "status": "Created",
          "code": 201,
          "responseTime": 1606,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e0f2f6ce-6906-4c0d-b77c-9701de9512d8",
        "cursor": {
          "ref": "8aa6da91-7968-4c63-8c65-389df24a6c37",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "af188375-5bb9-4f2a-9201-fe0b5adf6fea"
        },
        "item": {
          "id": "e0f2f6ce-6906-4c0d-b77c-9701de9512d8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0cf71412-0ddf-4b4d-b4bf-d0309b3d6365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae65cc3-a1c1-4656-ad69-9c272eca26e4",
        "cursor": {
          "ref": "08a4188d-53ac-46ca-aedb-9b235806d46c",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4daffdcc-57c0-4a9f-ba76-d57619b1d1c8"
        },
        "item": {
          "id": "dae65cc3-a1c1-4656-ad69-9c272eca26e4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7e1b2542-0e60-4e90-9dda-65724d39c575",
          "status": "Created",
          "code": 201,
          "responseTime": 5691,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "16ba3fa2-f690-49a3-8610-53f6e162fecf",
        "cursor": {
          "ref": "80a8106a-8e59-4393-8619-3af818fdbc75",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8faf221c-b627-487f-82f9-7929dbb70b1b"
        },
        "item": {
          "id": "16ba3fa2-f690-49a3-8610-53f6e162fecf",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "94e50e5d-2389-4e18-af06-a1fae16c54bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d77f462-f450-4fe3-891b-09fea38615fc",
        "cursor": {
          "ref": "92ea8036-cb46-4d7b-be0c-0e996e094b67",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f47dc73f-f791-4fb0-bd03-72a476ee084b"
        },
        "item": {
          "id": "0d77f462-f450-4fe3-891b-09fea38615fc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0a15fc45-c9c9-4184-812c-20551a3f51b8",
          "status": "Created",
          "code": 201,
          "responseTime": 3577,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d151ff35-f407-4b36-9463-305554ab5ef7",
        "cursor": {
          "ref": "f0eaf0cd-c0e7-4c49-969b-f1760e375748",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3823988b-1093-438d-b9af-b962a341c585"
        },
        "item": {
          "id": "d151ff35-f407-4b36-9463-305554ab5ef7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "df42ff79-f3c5-4c1e-a400-57e85172535e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4650b542-a572-458c-b8be-108368b653cf",
        "cursor": {
          "ref": "32eb580e-aca4-495b-adbd-6d43934d3c03",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "854dc07c-50c8-4e8d-a997-816c362372ce"
        },
        "item": {
          "id": "4650b542-a572-458c-b8be-108368b653cf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "92b9cf46-a859-40dd-8583-7b2421ed697b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f2306d-1cb7-4d78-a42d-0087280211ed",
        "cursor": {
          "ref": "befd6cf3-5423-408d-ab24-6fd0c6d35ce0",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b3cea63b-28d5-48cb-8780-f7336fa1a218"
        },
        "item": {
          "id": "40f2306d-1cb7-4d78-a42d-0087280211ed",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dbdb7dc9-9a9a-488d-a07d-f38f444d7134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6330bf-5f19-4ac4-9dc6-35bb9e7d74d1",
        "cursor": {
          "ref": "5baca864-8af5-4c02-88dd-8d170da143ca",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "107ee1f0-7549-4b10-9e3c-f065e3d837cf"
        },
        "item": {
          "id": "cc6330bf-5f19-4ac4-9dc6-35bb9e7d74d1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aa067b7e-530e-426f-98de-d5c3146693bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f85cb65-5cce-47e4-b3d2-e2f57da48360",
        "cursor": {
          "ref": "16fef8c8-60fd-4455-b1cc-e25fec733a3a",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8c6cdbe7-5d6b-4243-a3c7-ea4b08c53829"
        },
        "item": {
          "id": "3f85cb65-5cce-47e4-b3d2-e2f57da48360",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "299f0ccd-864f-4325-8e86-4769f0e273a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d702df2-90d6-4453-af08-d743184a72af",
        "cursor": {
          "ref": "1716fe6a-e7b6-4f9d-8b03-71b17320eed5",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f8e4027b-c3e7-46a6-a7a2-144f6401102a"
        },
        "item": {
          "id": "3d702df2-90d6-4453-af08-d743184a72af",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bf75c26d-d947-4f5f-b66d-330126a3ee50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030c8f97-9f7a-4394-a0e0-1ddb11ac8e62",
        "cursor": {
          "ref": "6d42b702-9a34-4b26-8080-df3c9dfb7dfd",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4d66bf5b-2bf9-455b-95ea-7cbea8ec18d6"
        },
        "item": {
          "id": "030c8f97-9f7a-4394-a0e0-1ddb11ac8e62",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "786a6178-bacc-4d3d-a003-0191c4961ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d02f137-d250-4f48-b5ad-cef375881d46",
        "cursor": {
          "ref": "19a1d019-24d3-4ae5-9307-95ff29891d15",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "90eee577-bf8f-4797-8d7e-2aaf5259367a"
        },
        "item": {
          "id": "5d02f137-d250-4f48-b5ad-cef375881d46",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7bec1d65-6dac-43a5-9e57-7578a9b91f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85041057-eec8-4607-b99d-e6545cc501f3",
        "cursor": {
          "ref": "ce0cc152-cf2b-4a3b-95e8-6b702c010899",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "88c2b7a4-9d19-48ec-ac23-480a1f2803c4"
        },
        "item": {
          "id": "85041057-eec8-4607-b99d-e6545cc501f3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "164b7937-7bbb-4eff-aba1-cca2ee31e0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f627f96a-b045-4abb-8da6-7be372b1c181",
        "cursor": {
          "ref": "43d8c306-6c6d-4bde-9e92-7a29a0a769e0",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2d1c9d1d-5799-413f-a1dd-bd4acc7d277a"
        },
        "item": {
          "id": "f627f96a-b045-4abb-8da6-7be372b1c181",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ed43d9da-d028-4994-8873-9c0e54c5fd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb3d68f-fec6-4573-8b95-c8d0b7f3d458",
        "cursor": {
          "ref": "bd23b6a5-6dc4-443a-a179-973c70ba84f8",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7a141513-dd93-4242-93bf-7877ffd0b302"
        },
        "item": {
          "id": "1fb3d68f-fec6-4573-8b95-c8d0b7f3d458",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b32ad217-f117-44a1-b358-070ba1ea51e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c1e665-55b0-4ac0-ac07-eeb1f3991de9",
        "cursor": {
          "ref": "5d7730b8-5974-4fc9-9e48-f5a7ddaff6d5",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d3f8ed5a-8351-4605-9003-288fef6dcc01"
        },
        "item": {
          "id": "43c1e665-55b0-4ac0-ac07-eeb1f3991de9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2cc0d9a2-1d36-4e40-b6f2-6b80992b2e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bfe2ea-3d2e-434d-a5af-8f551e8b46a2",
        "cursor": {
          "ref": "fcfa915b-9d5e-4b0a-b641-002537cfb87e",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7be0ce1e-3e6d-46da-80ce-3b2b23ec74c3"
        },
        "item": {
          "id": "a8bfe2ea-3d2e-434d-a5af-8f551e8b46a2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6dc74743-ebe6-4109-8400-1adceeefe5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2373a0ee-41f0-4caa-a349-01fdf216dcd9",
        "cursor": {
          "ref": "cf9be72b-0493-46cc-9e22-88edbaad27a5",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6e68b433-b277-4f6f-b74c-cc319a7fabc5"
        },
        "item": {
          "id": "2373a0ee-41f0-4caa-a349-01fdf216dcd9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c40794d6-1661-4bcb-af04-2860147a7176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bd5b4b-e8d7-4741-a428-317ed7dcc754",
        "cursor": {
          "ref": "8dfbb383-96db-4974-b501-94c5641159cd",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7d64ccfb-0ef2-4cd6-870c-6782f52d8c6b"
        },
        "item": {
          "id": "27bd5b4b-e8d7-4741-a428-317ed7dcc754",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f188f691-7bb5-40bf-bba4-91ba41b18a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ff28ae-5e38-4b68-a42c-8a0f6ae73e8b",
        "cursor": {
          "ref": "45f364bc-1bcf-4707-a9c5-ba266786937e",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e63753e1-92ab-4733-8436-ba76a4a39830"
        },
        "item": {
          "id": "a0ff28ae-5e38-4b68-a42c-8a0f6ae73e8b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "11eecaeb-1aad-4d7e-af97-fdf982f7231d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e7a36d-5905-4607-a6db-d34959204c99",
        "cursor": {
          "ref": "0f9ee774-f25e-43f8-924f-c7a9d889cc29",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3dc21078-ca4b-4ebd-92ac-4d74133fbd4c"
        },
        "item": {
          "id": "b5e7a36d-5905-4607-a6db-d34959204c99",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a43eae5b-bb65-4e8d-ab04-71e7e93416ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebf7def-831c-4ddf-8426-da401d8135c1",
        "cursor": {
          "ref": "db2d68c3-6767-40c4-b357-2bb2ef4bf1c9",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c52cc1aa-36fe-41fa-91bd-ea1671342b4e"
        },
        "item": {
          "id": "eebf7def-831c-4ddf-8426-da401d8135c1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0204947f-1c1d-4db6-8acb-e977bdd6bc76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7527f1e-d01f-4de6-9e6f-a9ab3219074c",
        "cursor": {
          "ref": "47367f0d-1a16-4a23-9778-42b0f9c8f157",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b5219ce0-d504-4f24-a23c-f37de9701893"
        },
        "item": {
          "id": "f7527f1e-d01f-4de6-9e6f-a9ab3219074c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c9647402-d2f7-4c5d-a236-3e6cfafe560a",
          "status": "Created",
          "code": 201,
          "responseTime": 2841,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "895a4006-6bc8-4925-a169-b75f3e218de5",
        "cursor": {
          "ref": "e79fcf83-a09a-454c-b6df-230d1b333375",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "50bf1e84-31b6-4998-ba5a-c5211ab6b0d5"
        },
        "item": {
          "id": "895a4006-6bc8-4925-a169-b75f3e218de5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5f5708cd-34e4-4fdd-aae1-1d123337bcbd",
          "status": "Created",
          "code": 201,
          "responseTime": 2587,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c4b56cc6-8f16-4d57-b087-9e11de798526",
        "cursor": {
          "ref": "3fe2374b-f899-475d-8677-e376246cb885",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "41030bb6-76fd-4638-bc32-fa4bb41cc0ff"
        },
        "item": {
          "id": "c4b56cc6-8f16-4d57-b087-9e11de798526",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2f76e1b7-0f3f-4ca1-ae28-f79df4e0c685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bf20f0-fc50-486f-b374-eb96373222da",
        "cursor": {
          "ref": "0cd63b4f-e7fa-478e-9d8d-53b3940d1051",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "93664378-64b0-4ab1-88d4-ad8b629e901b"
        },
        "item": {
          "id": "c4bf20f0-fc50-486f-b374-eb96373222da",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5c8f5b0b-8486-4513-8a09-ed308ad51e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4fac4d-06af-4f81-8e7a-93caf59de419",
        "cursor": {
          "ref": "dcec6674-1800-447b-a1c0-15ab3f9be720",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7f95e390-d816-4bf8-863e-146da297cb81"
        },
        "item": {
          "id": "bd4fac4d-06af-4f81-8e7a-93caf59de419",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "32708867-30df-4ab9-8227-985143a306fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a015c0-d132-46a8-97d5-41702a9a95f1",
        "cursor": {
          "ref": "5c682334-fad5-46c7-a1be-f197d7f9493f",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "eb156c41-9795-4803-89b6-4f99637e540e"
        },
        "item": {
          "id": "c1a015c0-d132-46a8-97d5-41702a9a95f1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "aaf53466-b64e-4fa9-aa51-fa7d74ac97f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf07b4aa-273e-4bf6-ba64-76abc88dfddf",
        "cursor": {
          "ref": "b7e9f62a-ad96-426f-ac0d-4a51df62c772",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "245e2573-0241-44b4-8c67-6f2002d68b81"
        },
        "item": {
          "id": "cf07b4aa-273e-4bf6-ba64-76abc88dfddf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0d01ea34-b2f9-4548-80cc-475c260d3ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c577e37-61b2-4e9a-ba06-3b71bbef8662",
        "cursor": {
          "ref": "3fdf3816-d4f6-4c20-a8e3-4f2b66e99dbf",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f1ad2ecc-7a3b-4bb1-9281-e4e0fec3fd43"
        },
        "item": {
          "id": "6c577e37-61b2-4e9a-ba06-3b71bbef8662",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "39cc1bd7-ec6c-47f4-be31-010fdabe8589",
          "status": "Created",
          "code": 201,
          "responseTime": 3138,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "01fbe56d-7284-462d-857e-4760373af885",
        "cursor": {
          "ref": "5303ed8c-301e-459b-9be9-dd8644274133",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2c563f04-2d09-4b4c-aab3-919ca6452572"
        },
        "item": {
          "id": "01fbe56d-7284-462d-857e-4760373af885",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4f9bf6c9-60ee-473e-8f16-8ca4364c7dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 3219,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cc9b7c3f-ae8c-4887-96e1-b0c0aa2d6074",
        "cursor": {
          "ref": "d8a4e892-50ac-44a0-ad9e-10c76f7b42af",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ed205d6d-2eb2-41a6-8b2e-376fe8cd20c7"
        },
        "item": {
          "id": "cc9b7c3f-ae8c-4887-96e1-b0c0aa2d6074",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4c3b0181-6bef-48ef-bf62-527a2d6c25d5",
          "status": "Created",
          "code": 201,
          "responseTime": 3014,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3696d4b9-48a9-4dfd-b0b9-5a5cdff778a2",
        "cursor": {
          "ref": "8c36460b-3c79-4174-bc61-02c9658ba7fc",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "afed8330-ece3-4f53-84eb-89f25b9331b9"
        },
        "item": {
          "id": "3696d4b9-48a9-4dfd-b0b9-5a5cdff778a2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dbf25f83-b2d4-46f9-a90a-03bff158ebdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3957a61-0b20-4858-b3bf-a54b6c52268e",
        "cursor": {
          "ref": "f7d85a92-2d8a-4360-931c-ca37604027bd",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e5f60d6c-8207-43bd-b73f-48d5f17d5e8c"
        },
        "item": {
          "id": "c3957a61-0b20-4858-b3bf-a54b6c52268e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3c99725c-33bd-4ad9-b7aa-b9c1343aacea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d324b302-831b-4fd4-a2b9-1780dc883ff5",
        "cursor": {
          "ref": "2cd13f27-4196-4ad2-b830-9fb7c833f497",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "71764b98-5fe6-4d8c-9034-e03791e9e6a8"
        },
        "item": {
          "id": "d324b302-831b-4fd4-a2b9-1780dc883ff5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "11fab9b5-917b-475f-8a7e-7ae2ce23ce0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d255ee-3c19-4d4c-b04e-76b435f3932d",
        "cursor": {
          "ref": "a97356ee-8b76-43b0-a9cd-42539d6bd454",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "37508cc6-ff70-4e13-8564-4fecae415454"
        },
        "item": {
          "id": "a0d255ee-3c19-4d4c-b04e-76b435f3932d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "63f65eb0-5363-42d7-b34c-52e89d7f7ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ee7fd4-4ed8-41eb-b8b5-2c796432c6a8",
        "cursor": {
          "ref": "e3ecc47b-85bf-41f3-b639-21e37b86c33f",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "85ca0ecc-b878-4d56-b130-b22dd1a8c20e"
        },
        "item": {
          "id": "e6ee7fd4-4ed8-41eb-b8b5-2c796432c6a8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f65e516e-4e95-404f-b702-f991da901c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefee6d6-eb55-412d-b029-5a639bdc89c0",
        "cursor": {
          "ref": "3814882a-437d-4d10-bcf2-001c3451f028",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "351097cf-f29a-438f-b499-22cfd9ccc952"
        },
        "item": {
          "id": "fefee6d6-eb55-412d-b029-5a639bdc89c0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9a0758e8-042f-46e0-9b56-0433b8bcd6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228d419e-f63f-437b-ae60-d631ea57cd44",
        "cursor": {
          "ref": "30ad02da-f363-41f4-8cef-1dca0cf1833b",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d586473f-9c8e-40fa-a98e-275b55440392"
        },
        "item": {
          "id": "228d419e-f63f-437b-ae60-d631ea57cd44",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8e3f0229-8c27-4fdd-bf92-67ae4d826c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 814,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a06341-16f4-4eeb-a9d5-ac2df534b16c",
        "cursor": {
          "ref": "dd58c733-e2d5-4633-97b0-59dc9e8ed604",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a6f7346b-84fa-4ee5-aa6f-2df31049e736"
        },
        "item": {
          "id": "a0a06341-16f4-4eeb-a9d5-ac2df534b16c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "78a8f920-8ae4-4dcb-9eb7-e4dfe334bf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cc0285-5d65-4f1a-84d6-0f28a441d1a5",
        "cursor": {
          "ref": "c81ab220-24ea-436c-8ec0-c486fa80d215",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fd575cad-64d8-4fac-9f68-c0bf1c0306e8"
        },
        "item": {
          "id": "87cc0285-5d65-4f1a-84d6-0f28a441d1a5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fba3b8c4-c23b-4d2d-8888-d5f7ddf7c197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd215a51-5f74-408f-a524-d51dfeebf7d1",
        "cursor": {
          "ref": "5d2b1408-c70c-4e2c-9e77-26b77e12441b",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "61f82540-0b0d-4ecb-ad74-6191c47c4884"
        },
        "item": {
          "id": "dd215a51-5f74-408f-a524-d51dfeebf7d1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1bd4a054-c26f-489f-8d04-96ed16466f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e37e40-1e95-4b03-be52-9713dc64b8ed",
        "cursor": {
          "ref": "416e7dec-aa74-454d-86cd-a529408e37a1",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "af67d11b-2d4b-40f6-8dd5-ac14a98367bb"
        },
        "item": {
          "id": "a7e37e40-1e95-4b03-be52-9713dc64b8ed",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2f2685c9-f1e6-46ac-b8ff-24e75ded0bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25fe90f-5fa1-43ac-9fb7-ced8d184601c",
        "cursor": {
          "ref": "0d6bdcd1-4ae8-451f-948c-c0f37c48f363",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "56ccf868-98e4-48be-8ae4-3837150f366b"
        },
        "item": {
          "id": "f25fe90f-5fa1-43ac-9fb7-ced8d184601c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ada28ec0-e870-433d-baf5-0124d84477ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56910579-269c-40b0-9fbb-e89b6c51577d",
        "cursor": {
          "ref": "3f976f9b-a05c-41f0-8816-f75f17a850bf",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a20b33f2-20ff-4857-b074-aa7804e64968"
        },
        "item": {
          "id": "56910579-269c-40b0-9fbb-e89b6c51577d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cee5c854-3b0f-44a7-9de2-f42c398bba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4c5bd7-76d1-4bee-8053-d342305483e1",
        "cursor": {
          "ref": "1537b8a8-9d23-430f-8158-0b8d965f4ffc",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "050afc29-0b5f-42a4-b7ec-667727a1f32d"
        },
        "item": {
          "id": "aa4c5bd7-76d1-4bee-8053-d342305483e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c2b270d6-1c9e-41a0-b710-abcd88085b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd96732-b239-4a7b-81d4-ff89fc801b82",
        "cursor": {
          "ref": "9aefc786-2ed1-4f81-b246-34050b55cf7b",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2750bbe1-2ea5-4d1c-b5ee-99d4d4489c18"
        },
        "item": {
          "id": "cbd96732-b239-4a7b-81d4-ff89fc801b82",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8fb68094-8e8f-4b23-aac4-0021f24a51de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87de1a91-007c-4361-858c-fcb1469c750f",
        "cursor": {
          "ref": "0473dc83-0f5e-4ed4-b470-b3687d294015",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e50f1949-ef02-45d1-a697-c372e1ed9c33"
        },
        "item": {
          "id": "87de1a91-007c-4361-858c-fcb1469c750f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c7159114-d116-4369-93c4-0da1d208362f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fd7a2c-ab3a-41c0-8204-3fba530b785e",
        "cursor": {
          "ref": "ff628562-c5ec-4684-b4d6-05d734dbf886",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d0b795b1-0ee2-433b-bda1-760b52263e4d"
        },
        "item": {
          "id": "16fd7a2c-ab3a-41c0-8204-3fba530b785e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dc9f02f6-8394-4092-9013-e7785eb0b7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2643d8f0-8339-41d5-81eb-bb741396f22b",
        "cursor": {
          "ref": "ce4d6cb3-3f31-4ce1-8ade-042f4d64c219",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d7cab1a3-2d14-430a-bab0-c53ba962f24f"
        },
        "item": {
          "id": "2643d8f0-8339-41d5-81eb-bb741396f22b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f4719b14-88b7-4704-aa81-9dac52a5b51f",
          "status": "Created",
          "code": 201,
          "responseTime": 6476,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "19a2bad5-513d-4fb4-83ef-ca67539259e2",
        "cursor": {
          "ref": "ece8da1d-31d7-4658-8c11-dc04497793f2",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4632792f-b316-4472-b687-2859c0c9de53"
        },
        "item": {
          "id": "19a2bad5-513d-4fb4-83ef-ca67539259e2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7e6db9ba-e58e-4244-adb8-96d6571290ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 531,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef23d84c-1cb9-4930-b821-a7b1f94f102a",
        "cursor": {
          "ref": "0708d16e-6ef6-4525-99e2-836b7fd059a5",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "547964fe-11aa-4cf4-a817-7b9a7e0e3540"
        },
        "item": {
          "id": "ef23d84c-1cb9-4930-b821-a7b1f94f102a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "dcffc357-8fe3-4544-abcd-7cb8fa45deff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2617fa-f934-459e-87fa-b726bc1ab4fc",
        "cursor": {
          "ref": "6043b1e6-f8a2-4d1f-afef-a147497f2ec2",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "15e04627-0483-47f6-a0ae-db70ae419f09"
        },
        "item": {
          "id": "bc2617fa-f934-459e-87fa-b726bc1ab4fc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d8d2c72b-d747-469d-a0c5-856682cc0cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f8e6cd-aabf-45e1-88d5-ad93471897f2",
        "cursor": {
          "ref": "b457cdde-7d9a-4cce-86f1-cfc597acd3ec",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cb6a17a2-ebc9-449f-85aa-29c9e812ca17"
        },
        "item": {
          "id": "51f8e6cd-aabf-45e1-88d5-ad93471897f2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "94f6a14f-d712-4ce3-96cb-e4f0be2ecf1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783bb671-6534-405d-bd20-6a2e5c77afde",
        "cursor": {
          "ref": "31f394b2-6366-4a22-b6ea-e1140fe4584d",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3b6c0ef5-2164-42d9-8c41-b4f4d5b9f5c0"
        },
        "item": {
          "id": "783bb671-6534-405d-bd20-6a2e5c77afde",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e085de76-2d4e-47ce-be05-365964eef682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99209118-ec3e-4cb2-81c1-fb11e198115b",
        "cursor": {
          "ref": "3b944915-553f-443a-8ad8-475396d32593",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8d471491-1bcb-46f0-bbb3-d199a9f987fa"
        },
        "item": {
          "id": "99209118-ec3e-4cb2-81c1-fb11e198115b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "70234e51-eb13-4586-a2a8-2aa4cd8de09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e867a5f-5993-46d9-a36a-c20d9c0f9814",
        "cursor": {
          "ref": "3b3443ed-ecd7-402e-9e57-65d6606c2e99",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c10ffe22-e5b8-4292-9dbc-d5db340524dd"
        },
        "item": {
          "id": "7e867a5f-5993-46d9-a36a-c20d9c0f9814",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "568d7c11-00a4-466e-ab84-bd2d1d1c766a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f44cf0-51df-4cfb-9e9d-ba38d7b8f52f",
        "cursor": {
          "ref": "7776e584-29a4-4b2a-8fca-c098e286a21a",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8f40eafb-f738-484f-b82a-334a8688744a"
        },
        "item": {
          "id": "06f44cf0-51df-4cfb-9e9d-ba38d7b8f52f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d3ef93d4-8beb-4170-bee2-374d35445087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0c9700-bdf5-4108-90a6-f4b3420b9446",
        "cursor": {
          "ref": "d0372ca3-0a76-4949-850d-214f38872881",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "410dbda5-c5d9-49b0-9be2-f09cd879b405"
        },
        "item": {
          "id": "2d0c9700-bdf5-4108-90a6-f4b3420b9446",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e552fe64-4cc8-45d5-8586-1edcc0c59653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35969575-31d5-4c69-86a0-f7343df1cb52",
        "cursor": {
          "ref": "a73181a8-e9bc-4c20-a301-1106f38d520f",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7ff6bc41-258f-4687-9a8d-b85fe6f42bda"
        },
        "item": {
          "id": "35969575-31d5-4c69-86a0-f7343df1cb52",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5e8a37aa-7074-43a3-9fb8-2fd59be2b2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640e0d86-a22b-42e9-bb97-857b1d622f7f",
        "cursor": {
          "ref": "b7cb4ae5-113a-458f-83aa-8912a6c36c7e",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bc59e3d3-1235-4bc8-a2b7-afe3b1e79b9a"
        },
        "item": {
          "id": "640e0d86-a22b-42e9-bb97-857b1d622f7f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1f786177-bef9-479d-9d2b-ef947071e82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff87335e-48e6-4be5-8261-154ac15cdb37",
        "cursor": {
          "ref": "21ea16b0-0221-4e6a-b676-5af223b7eeca",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "006ec1ad-4b1d-46a3-8984-fc1a5bccca8d"
        },
        "item": {
          "id": "ff87335e-48e6-4be5-8261-154ac15cdb37",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "03b6c8e8-80c3-472c-9024-20590623c752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708d1b54-25f7-47b5-bfc6-7617b35d776d",
        "cursor": {
          "ref": "1121363b-5881-4e54-b969-be61ac0a833d",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9e70a2a1-e682-4fce-bdc4-53e09b50261c"
        },
        "item": {
          "id": "708d1b54-25f7-47b5-bfc6-7617b35d776d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "40f56e48-ee4a-4987-bcab-70141dd651b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637156ca-f47c-42b1-acdd-3744c771f56a",
        "cursor": {
          "ref": "e350586f-f099-4d2f-997b-8d7e409a1009",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fc3a006c-8259-46ef-8eeb-98a177106498"
        },
        "item": {
          "id": "637156ca-f47c-42b1-acdd-3744c771f56a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "128e0de1-7b33-4427-a429-4fce561fa183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99241199-76d7-4933-a36c-aeee54b30118",
        "cursor": {
          "ref": "4fe46218-8975-48b1-a02f-0e5d8d42d534",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "67ed8a7a-79b7-4177-99d5-3704fa63f97e"
        },
        "item": {
          "id": "99241199-76d7-4933-a36c-aeee54b30118",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0ef945ea-2724-4d4f-b9a2-366562b9bb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c9a18f-57c7-4231-9227-2565efcf25a9",
        "cursor": {
          "ref": "4831a260-addf-48c7-a9c3-46b04c4f8d08",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fa989296-cd6d-4c90-87ba-3d2d9d646b9b"
        },
        "item": {
          "id": "d3c9a18f-57c7-4231-9227-2565efcf25a9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc0bf9fc-8f61-4e27-b787-d59869102253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de647736-b103-47d5-bff4-dad7d43a9593",
        "cursor": {
          "ref": "41dee40e-c938-4b2e-b4e3-d18d088fb781",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "54b97692-29ea-496d-b01a-e8547846f8d3"
        },
        "item": {
          "id": "de647736-b103-47d5-bff4-dad7d43a9593",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "36664720-cfa3-4990-8134-dd35475c2a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b803d1-0fef-4d8a-8f17-529a53fbba6a",
        "cursor": {
          "ref": "bee08b25-1300-46c1-8b74-25d7c93225c0",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3ee9d853-684d-48c7-a31a-c3cdc042236b"
        },
        "item": {
          "id": "46b803d1-0fef-4d8a-8f17-529a53fbba6a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "977b4e09-7f08-41fc-a9b0-5411a65f2993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb2a4a6-c541-407a-b79a-c62fa5d38ed3",
        "cursor": {
          "ref": "78118e1d-f02e-4fdb-b627-d163a34528f4",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "96738716-5a52-4c5b-a91d-e0dafa477245"
        },
        "item": {
          "id": "1cb2a4a6-c541-407a-b79a-c62fa5d38ed3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ce8303bb-cd37-4158-8dd5-2eb520b97ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7d29c0-a2f2-4f50-a029-23c9b3f25289",
        "cursor": {
          "ref": "b55c604c-27bd-4e65-81b5-f375cad0c136",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "77564657-4510-4030-9da4-44d82cdd31c9"
        },
        "item": {
          "id": "ac7d29c0-a2f2-4f50-a029-23c9b3f25289",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d94f38ea-a1c4-45cd-9ed9-c9ff283c6124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed13aee9-36ce-4184-a8b3-94786df6ac4d",
        "cursor": {
          "ref": "2397b785-c360-4a57-8c35-61d9d523f2d3",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1caad9ae-8054-4d8d-a34a-d3e824806dfd"
        },
        "item": {
          "id": "ed13aee9-36ce-4184-a8b3-94786df6ac4d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e9ec24fd-dd6a-4eae-baf9-832d80b9d07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d6166b-5f3f-4781-91f4-77dd3b70ae09",
        "cursor": {
          "ref": "35e266e7-9720-4e53-a735-76787a4f9df9",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ac225cc4-5c62-4958-8fba-bc1171c45976"
        },
        "item": {
          "id": "b3d6166b-5f3f-4781-91f4-77dd3b70ae09",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f4ff4393-0af3-46a6-8dd3-f1540d54b123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26428731-cda2-4c1b-bc4a-05ed78af31a1",
        "cursor": {
          "ref": "a24e1b47-dc73-45a0-a9df-85bf9b894526",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dbc16fd2-bfdc-43d5-8ff7-ad3a11bd0e2f"
        },
        "item": {
          "id": "26428731-cda2-4c1b-bc4a-05ed78af31a1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6315338f-4375-4163-9c13-028dfe33d6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368be759-d34e-4152-85c7-04e80de6111e",
        "cursor": {
          "ref": "4b93905e-a9a4-44dd-9374-f18811b48431",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ef27e2d7-3a00-470b-95e0-4f93f2fe60ce"
        },
        "item": {
          "id": "368be759-d34e-4152-85c7-04e80de6111e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a97ef834-edd9-487f-b7fe-2c6b0b62537a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d34728-b6c6-497c-b121-b3c74a8b6f00",
        "cursor": {
          "ref": "bc69fb87-0144-4938-bf48-9dcc40329956",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a219bf97-dfcb-4c22-90d7-dd6d67966be8"
        },
        "item": {
          "id": "f0d34728-b6c6-497c-b121-b3c74a8b6f00",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2e53153d-793a-4387-94ff-202b3fcd0ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a1cd48-ce8a-4e12-8813-af60c7ad38b1",
        "cursor": {
          "ref": "e8369a36-d9b2-44fc-b991-8460e5192700",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7d0c4397-eb57-492e-9f11-eb8a4f44d2e3"
        },
        "item": {
          "id": "39a1cd48-ce8a-4e12-8813-af60c7ad38b1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2092a73d-fd09-40c1-9869-578cb656ab20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fc4d79-d6c0-4278-849f-1d6e9c055ee2",
        "cursor": {
          "ref": "2fde783d-a3e1-458e-964b-d0b3021f95a2",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e5cddf06-52b8-43e0-a912-21de2e846dc0"
        },
        "item": {
          "id": "36fc4d79-d6c0-4278-849f-1d6e9c055ee2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8a7f1fe6-ed83-49dc-a997-356c7719d7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be81e9a9-7413-4fdd-9e74-90307d71ed56",
        "cursor": {
          "ref": "75f302c9-eb4b-45a6-b874-9daf8b4a240e",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ce419829-1894-4526-87a7-7f7e5b1b76db"
        },
        "item": {
          "id": "be81e9a9-7413-4fdd-9e74-90307d71ed56",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e97e787f-cb72-441f-a50c-5c92ae70e82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f76b6b-9fce-4747-91d0-1d9edcf857f4",
        "cursor": {
          "ref": "8e0deef5-c196-4fda-b46f-38b28456ddaa",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b72b3518-146a-46eb-a93f-26aaefd2cee3"
        },
        "item": {
          "id": "64f76b6b-9fce-4747-91d0-1d9edcf857f4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "651907e8-c5ef-4220-94e2-46bc5b80a553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bcc365-0622-4506-bd49-efd7a235e844",
        "cursor": {
          "ref": "dcd31455-cd18-44f0-b570-a5ee92eabe8e",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "da267cef-eaf4-4ae6-a682-694a12076740"
        },
        "item": {
          "id": "c9bcc365-0622-4506-bd49-efd7a235e844",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "409c6c34-f44d-44d3-97c8-25a28da257e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86db6f7-3e54-4997-94cf-ae9ef91697cf",
        "cursor": {
          "ref": "1864d7fb-f0df-4d8f-8b62-704c07a4ac8e",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "936b2f4b-5737-4862-9eeb-b73df4f5d81c"
        },
        "item": {
          "id": "e86db6f7-3e54-4997-94cf-ae9ef91697cf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "76bbf71a-ed06-49c4-af98-ac3031e5259b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "64e458cd-91e3-4d48-8088-43d28d77f8a3",
        "cursor": {
          "ref": "27b5fd10-1af5-432c-a5e6-17e9f9cb7fce",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2624bd75-e471-49a6-8222-4df97c01b029"
        },
        "item": {
          "id": "64e458cd-91e3-4d48-8088-43d28d77f8a3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8b71cce5-a167-4a97-8295-bad8afc6cfe8",
          "status": "Created",
          "code": 201,
          "responseTime": 4828,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "667e7929-ed9a-46da-9000-32f64699d3f2",
        "cursor": {
          "ref": "69839af2-89b7-4936-8736-33ed4179a201",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "75d98324-24f6-4b81-aa5c-aa4b3fb83486"
        },
        "item": {
          "id": "667e7929-ed9a-46da-9000-32f64699d3f2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6b2704e8-185f-4602-86e7-3a33f6e27746",
          "status": "Created",
          "code": 201,
          "responseTime": 2403,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0f2703-e0d5-44a2-ad14-473431aaeeed",
        "cursor": {
          "ref": "31a9587a-b2c7-498d-9c80-331812dfd59c",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "961a061b-ab36-48c5-baee-65596526cf27"
        },
        "item": {
          "id": "fe0f2703-e0d5-44a2-ad14-473431aaeeed",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6d9bccf1-09e5-4483-8223-cb5b3689ee8f",
          "status": "Created",
          "code": 201,
          "responseTime": 2587,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a849d7da-34cf-4398-b8e6-44dc5bfdf0d0",
        "cursor": {
          "ref": "3e66d819-1ce6-4988-84b2-50b749dd493d",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "88d3bdba-203d-4e03-b4d5-a89edd462930"
        },
        "item": {
          "id": "a849d7da-34cf-4398-b8e6-44dc5bfdf0d0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6f030ff4-a9c9-48a1-b04d-b65f66027537",
          "status": "Created",
          "code": 201,
          "responseTime": 2408,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5fbb14-fbba-47fe-a034-17dc92670d13",
        "cursor": {
          "ref": "f27d7d94-6c2c-46aa-a78b-18b2f129cf65",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0d0c66ed-05c8-46d2-b242-b9bdba36644b"
        },
        "item": {
          "id": "cf5fbb14-fbba-47fe-a034-17dc92670d13",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "977e8ae6-2df9-4f82-959e-697e5c2dcc4e",
          "status": "Created",
          "code": 201,
          "responseTime": 2513,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-11T00:47:38Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-11T00:47:38Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "22092aeb-b02e-41f4-8e20-4bce5598c30c",
        "cursor": {
          "ref": "9a78df1c-166d-48af-b860-7163c81ccd37",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "49918c9a-be6d-4264-a113-3b5b025ea11e"
        },
        "item": {
          "id": "22092aeb-b02e-41f4-8e20-4bce5598c30c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f7c6bdc2-c1c9-42f7-b261-7675df6163b3",
          "status": "Created",
          "code": 201,
          "responseTime": 2374,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5ca642-275e-488f-b25b-d3a476a9d495",
        "cursor": {
          "ref": "c58453e8-5c26-49fc-8d87-cfef6a4dd71e",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "015f962d-56fc-4130-9469-781a5e646a82"
        },
        "item": {
          "id": "cb5ca642-275e-488f-b25b-d3a476a9d495",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "24c26cfc-9928-4a49-b62a-df536d5ad886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0c0895-dfa3-484b-b5be-c735f0b6ddae",
        "cursor": {
          "ref": "926b1d69-b90e-4ecb-97ec-ec31903184ba",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d7596d6a-31fc-4c4b-adbb-4b4f0c2d010f"
        },
        "item": {
          "id": "4c0c0895-dfa3-484b-b5be-c735f0b6ddae",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b9e621e4-617d-4c7b-aa5b-7125d48e51d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3450342b-cefa-4fab-b48b-ef75045a2820",
        "cursor": {
          "ref": "56007277-b0b8-4940-8985-650e532f7d1e",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "22dd1c97-a5c8-4b9d-a064-836b87d6d38b"
        },
        "item": {
          "id": "3450342b-cefa-4fab-b48b-ef75045a2820",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "88f145cc-fdbe-4ffe-a60d-1051f9b0094f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786a829b-4e22-436d-b2a1-29e85f685cf1",
        "cursor": {
          "ref": "cdcb2859-9759-4ca3-a173-5e7dfb4136a7",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b68ed997-c3d9-4712-9b82-3b4b1d5b2d4c"
        },
        "item": {
          "id": "786a829b-4e22-436d-b2a1-29e85f685cf1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "83bc6257-fa2e-4148-9fab-8c858cb8f53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3819ab69-e770-4c5f-9274-139fbfc06e53",
        "cursor": {
          "ref": "195d1888-6cd4-4049-b9fe-6065b877f0da",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3d26792a-f4df-4081-98e1-3aec15b633b4"
        },
        "item": {
          "id": "3819ab69-e770-4c5f-9274-139fbfc06e53",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e4decace-94ef-47ba-81cb-50883ebc31c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b067d974-e253-4fc6-b998-49e979c518fb",
        "cursor": {
          "ref": "1d13a378-02f3-4597-beb1-11e6747ea67e",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "13b565db-3a23-44a1-b022-1e6b0146a313"
        },
        "item": {
          "id": "b067d974-e253-4fc6-b998-49e979c518fb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ba502fa2-1deb-4d1a-9556-7eac3caff820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1349bb03-a223-4b93-b2f7-8bb32bf15870",
        "cursor": {
          "ref": "a2b99d06-b45b-473a-80ec-67bab4946821",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7c1d2344-0eea-4bbd-8beb-c33c72151b64"
        },
        "item": {
          "id": "1349bb03-a223-4b93-b2f7-8bb32bf15870",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "93defb36-6078-434d-bf09-05baa6bda43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91ac80d-0a48-45d7-a810-4c782d765fb4",
        "cursor": {
          "ref": "b3b0c2a8-feff-497d-9445-9c07cad745b1",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e52de17a-976b-4f8e-9b78-bc93e38810ac"
        },
        "item": {
          "id": "c91ac80d-0a48-45d7-a810-4c782d765fb4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d7a76ce0-4f42-45b3-a94a-66e06aed4e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a27b37-1fda-4a2b-815f-8edbb3e4262c",
        "cursor": {
          "ref": "33c14d00-087c-4ed0-a6d9-fb5ce7386a20",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d6e4e6fd-b983-4711-bf30-5cffa2b053bf"
        },
        "item": {
          "id": "53a27b37-1fda-4a2b-815f-8edbb3e4262c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e119fbfa-ffd9-4592-9637-cfcfbad7faf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603a5148-5bb6-44d5-ad6d-762eb7a14a72",
        "cursor": {
          "ref": "a4cb8914-5dd9-4c0e-a389-507d80ab2386",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6bdb82e8-9900-4409-9531-78dd298b9052"
        },
        "item": {
          "id": "603a5148-5bb6-44d5-ad6d-762eb7a14a72",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3e998391-a78d-4d0d-be70-8281fa255a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a61804b-d8a9-4192-90c0-52a81afe04ff",
        "cursor": {
          "ref": "34f6beec-d2a3-4e3d-8457-7c91d826ee9f",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8efbbcad-971e-4b6f-a6ca-795bb6b3a015"
        },
        "item": {
          "id": "0a61804b-d8a9-4192-90c0-52a81afe04ff",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b9dfc4d3-e37a-4cc9-9225-33af8448f14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d8a9ee-d006-479c-9293-832a56c33a8b",
        "cursor": {
          "ref": "c59b4066-8dd5-418b-b706-d4fcc29edb75",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e5efc4c3-1291-4d1f-99b8-a49cded249ea"
        },
        "item": {
          "id": "b6d8a9ee-d006-479c-9293-832a56c33a8b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c815f782-daa4-4805-a5b4-220a76573790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7bfee0-7cd4-4152-a4ff-e6d9703de3ea",
        "cursor": {
          "ref": "65624af6-cfea-4fc4-b72d-ca3cab011730",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a51771d4-1822-4d4d-89f1-8bac0a152714"
        },
        "item": {
          "id": "9f7bfee0-7cd4-4152-a4ff-e6d9703de3ea",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fdb6a050-9187-4574-845e-31bc5267fdae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b013ee-52d7-4d36-8ac8-3bc0242fd9d6",
        "cursor": {
          "ref": "1a7c9745-5012-4d8a-9a2a-89f94c67fe1a",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ff78519d-a56a-451c-a3a1-d7e1ee8045f3"
        },
        "item": {
          "id": "76b013ee-52d7-4d36-8ac8-3bc0242fd9d6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8217e6a-3f3a-4b6a-8fd5-cf027192f9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d9b4fb-5501-4586-aa6c-138f95c78c69",
        "cursor": {
          "ref": "fbff25b7-a4d7-490d-9a0c-7670b85fd629",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "48b0d7bd-0a3f-4060-b2b8-27da1550b407"
        },
        "item": {
          "id": "e7d9b4fb-5501-4586-aa6c-138f95c78c69",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "98f39e53-e904-42f3-b287-e46159fe59df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980984eb-4a7b-4e86-9146-d1fca79e142f",
        "cursor": {
          "ref": "78162e40-241b-488a-9e71-1f410790f7ca",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cb8c85a3-22dc-4555-a5b5-f1f18e960b21"
        },
        "item": {
          "id": "980984eb-4a7b-4e86-9146-d1fca79e142f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8e375da5-241e-4675-a09b-88a019c64d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b57ae53-ebad-40a8-84ea-83671cb9575f",
        "cursor": {
          "ref": "85b92c36-2f63-40e2-a174-19ff22f01a62",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "bc32833c-3e29-4b4c-b57f-a8d5a6894e64"
        },
        "item": {
          "id": "1b57ae53-ebad-40a8-84ea-83671cb9575f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "999ee39f-9700-4ec2-9351-189acff8814b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3b2a5a-a64f-45e2-b666-af4d336fed68",
        "cursor": {
          "ref": "23ccbc01-4f32-4658-a197-e9292aa5739b",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a15d0c67-eb7e-44d0-91da-2bd4fdd98d91"
        },
        "item": {
          "id": "1d3b2a5a-a64f-45e2-b666-af4d336fed68",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "473083ae-7525-4d20-bd7c-95d6d713d596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9c9c0d-11fd-486b-9a63-47359b8d4e80",
        "cursor": {
          "ref": "acb5ee0d-a6b2-41c2-bf83-00e083bb2f4c",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "053694fa-2b95-4f2f-9f0c-f68446976968"
        },
        "item": {
          "id": "fb9c9c0d-11fd-486b-9a63-47359b8d4e80",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e3871fd-9eff-41c3-a38f-802dcbf1e678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c92297-e850-4ced-9371-6b0eb9811ea1",
        "cursor": {
          "ref": "2a9b6e91-d9ec-4017-89fc-07d07442030b",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "81fbe4e4-fd82-4419-badd-2002c90e50d0"
        },
        "item": {
          "id": "b8c92297-e850-4ced-9371-6b0eb9811ea1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5acaad6f-0233-4a39-9497-5018b5a2b92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af983b16-eb18-4871-8781-c5b554456a47",
        "cursor": {
          "ref": "906764fc-c9f0-43ab-9fbc-9c015c2dd9b5",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "376242c4-9e61-429b-9c64-acf586a53a54"
        },
        "item": {
          "id": "af983b16-eb18-4871-8781-c5b554456a47",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fac7c24d-8622-4781-9bcb-f29ea9ee944a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba46064-354b-4443-85d4-442e60b31f9a",
        "cursor": {
          "ref": "5c388430-edab-4808-bc61-c12a307a42e2",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8f7cf1cb-cde7-4957-ac50-6b29d779dd88"
        },
        "item": {
          "id": "6ba46064-354b-4443-85d4-442e60b31f9a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "840ab94a-ab2f-454a-b4f3-80142b10761c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3e887b-283b-41e9-8f4c-20ff46a4ff11",
        "cursor": {
          "ref": "27d4491b-8888-42f0-a868-1e10ada95134",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "921e4b64-f151-481b-bae8-f002240b17a4"
        },
        "item": {
          "id": "bb3e887b-283b-41e9-8f4c-20ff46a4ff11",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8b935dc2-6b53-47bd-91ea-15ae82e4b8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c529544-dca3-49e2-9583-8dbee7cfea6a",
        "cursor": {
          "ref": "33118f3f-446f-4305-8145-6a736ca9ce2f",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5a21893f-576a-40e9-b06b-a02a73e92278"
        },
        "item": {
          "id": "1c529544-dca3-49e2-9583-8dbee7cfea6a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "16b70de7-7574-48ca-bd63-96d6615fc675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6f812a-83f3-469a-aa12-2adf11074d6b",
        "cursor": {
          "ref": "34d33eaf-b328-4628-ac95-cb5c0e54a743",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "63182028-377d-4a06-bfcb-b755bacf23a7"
        },
        "item": {
          "id": "fd6f812a-83f3-469a-aa12-2adf11074d6b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "005324d4-f94b-4e58-b6bd-0e45614a01a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2a2310-8153-4ebb-81fc-632ca7140742",
        "cursor": {
          "ref": "474f334e-cebc-45c0-b0f0-d640844d6bc2",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "11c8e00d-c36c-4688-834a-ace1cb315e3a"
        },
        "item": {
          "id": "2a2a2310-8153-4ebb-81fc-632ca7140742",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "92354bdf-98c8-4fa8-ba68-df9c467d5f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f4ebcf-a809-43ff-b426-6c1647ab42c7",
        "cursor": {
          "ref": "a049e75c-29ed-4313-9541-5da308b4e619",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1e0bbaae-97ce-4a00-bc41-fc344eb80559"
        },
        "item": {
          "id": "93f4ebcf-a809-43ff-b426-6c1647ab42c7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "34efe636-4204-41d2-81da-3943a1fadfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dcba53-9875-461a-b584-969a50852147",
        "cursor": {
          "ref": "91108b04-5dc3-42ca-a28b-200d325a108c",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "aa1d4457-c9c2-42f7-a4b6-dc91b5d567cf"
        },
        "item": {
          "id": "b8dcba53-9875-461a-b584-969a50852147",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "17f29be7-c9d9-46ff-b95f-2eeb589c19dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09f56de-8329-407a-8ecb-de8f8cfde0ad",
        "cursor": {
          "ref": "af1b8f83-b13d-493b-a42c-d6053fe8fe8c",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8897d0b2-83d5-4bcd-95dc-dd20a7f3c572"
        },
        "item": {
          "id": "b09f56de-8329-407a-8ecb-de8f8cfde0ad",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b110c1e8-4fd8-483f-9d60-dc10093ac55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200a41b3-28ff-4210-9d0f-f56d749633d9",
        "cursor": {
          "ref": "4801d2bb-cf92-4e43-971e-c4b737936965",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ef28747c-addd-4f48-ac62-4d185d34d1ef"
        },
        "item": {
          "id": "200a41b3-28ff-4210-9d0f-f56d749633d9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b9790a9e-6334-4803-857c-5b1a9dd02ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e88b6ca-a9df-4063-bf99-d3fe1e82cf27",
        "cursor": {
          "ref": "19317c56-a5c2-48c3-aba1-c6351909e259",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cd23d7d8-3704-4674-8496-a985abff1539"
        },
        "item": {
          "id": "9e88b6ca-a9df-4063-bf99-d3fe1e82cf27",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61df1055-63ee-4056-ae17-5f614eff5c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082c10bd-c8f6-4653-82e5-8538822cf1b7",
        "cursor": {
          "ref": "188c5a0a-c6db-464e-87d7-b1b716b21ade",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8784c47e-dabc-4052-84b6-d2e329e5ee02"
        },
        "item": {
          "id": "082c10bd-c8f6-4653-82e5-8538822cf1b7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "77b4ebd9-e3c8-4963-99cb-b0c71e0c2fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391ac05e-3168-4f36-968a-c06254df532a",
        "cursor": {
          "ref": "2d292265-8d89-4b08-a71a-28bb9259f789",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a28b421e-37ab-4eaf-9521-8d8882eaae81"
        },
        "item": {
          "id": "391ac05e-3168-4f36-968a-c06254df532a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0ec62919-bd3a-4cdf-955f-64befdd44538",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a55949f0-24a1-41c1-aeea-ae03c250c5d7",
        "cursor": {
          "ref": "d2549ee2-37cf-4c9e-b51c-51bc12fbcede",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aad2e1e0-37a2-407c-8cf1-19ef4a3ee05e"
        },
        "item": {
          "id": "a55949f0-24a1-41c1-aeea-ae03c250c5d7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "375d3649-4e04-4023-bbf5-3dcf28603da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29170ae4-0b11-4a77-b0e9-10b4ca786d31",
        "cursor": {
          "ref": "40d3b6c8-c726-43bf-8103-cfa9d22e5960",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e7cff026-02b0-40e0-bdf6-1218b679130d"
        },
        "item": {
          "id": "29170ae4-0b11-4a77-b0e9-10b4ca786d31",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "962b5d79-37f8-42e2-9dd5-c8f2b758f195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2104a4c-f09a-4bbd-9eaf-bff57d1fb517",
        "cursor": {
          "ref": "87211ae4-eda6-43e4-b0c6-1f2c7d6f6d1d",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "76cf27b8-3988-4534-b588-2d4d58711ba7"
        },
        "item": {
          "id": "e2104a4c-f09a-4bbd-9eaf-bff57d1fb517",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b2a5fbdb-3bfd-473d-aff9-48f063dc5ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57eeaeb-fe45-4e95-9de7-e3c6d771ea70",
        "cursor": {
          "ref": "37efb4d7-702b-4224-8b82-148b3df096c8",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e837450e-7618-4995-8969-3209d0de8dee"
        },
        "item": {
          "id": "d57eeaeb-fe45-4e95-9de7-e3c6d771ea70",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3d4e4987-2ebc-49d0-ac0c-f687b1fa0dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243074ec-ff11-43d9-b81e-db2da5d62e23",
        "cursor": {
          "ref": "2e275607-4646-4e30-bd6a-e3d2c84fd24f",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b20f97e4-e818-4bed-9006-1092877cefd5"
        },
        "item": {
          "id": "243074ec-ff11-43d9-b81e-db2da5d62e23",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f319033a-1ff2-4266-b4cd-62b5cbe5ef87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393098e5-265b-4458-8601-b111b70fa3b3",
        "cursor": {
          "ref": "54612b9c-6b6b-4915-bfe9-786980f0c9d9",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3dd79bec-8d39-452f-9837-6a06a1294fe8"
        },
        "item": {
          "id": "393098e5-265b-4458-8601-b111b70fa3b3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "aef4b602-3257-45bf-8877-cf89d1ba68d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9327b30-9704-43a9-97e8-9104b2144d41",
        "cursor": {
          "ref": "1a4e14c5-53f4-4459-ab3e-5ca20357a164",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0f290432-05cf-4bef-8830-1bf9b5428139"
        },
        "item": {
          "id": "f9327b30-9704-43a9-97e8-9104b2144d41",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "10dd1235-f791-4151-a791-aa2605bbd407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0784d38c-90a4-466e-8a72-47eb90ca6482",
        "cursor": {
          "ref": "9b90a212-d495-4957-8431-d172176971cb",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b59894ab-71d0-499d-ba0c-57cb9a6087da"
        },
        "item": {
          "id": "0784d38c-90a4-466e-8a72-47eb90ca6482",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e2cb9764-b80e-46f9-ac64-2549fb178c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a802d3f-ec30-4d8a-81f9-06d1d9efe5b8",
        "cursor": {
          "ref": "e4ad0b73-0f6b-425f-8320-94d3af68e7f5",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "04f4413d-20b3-4376-ac6d-d229b8ed8e78"
        },
        "item": {
          "id": "4a802d3f-ec30-4d8a-81f9-06d1d9efe5b8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c93f41c8-79a3-4102-ac94-dee12c9d4018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d615c1-e714-4138-a72d-b8e4db88e1c5",
        "cursor": {
          "ref": "660a333e-fd1b-4c38-963e-d4f625c7bbe2",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9a4def3c-77d1-44a3-967d-06c50bf628f2"
        },
        "item": {
          "id": "f0d615c1-e714-4138-a72d-b8e4db88e1c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1bbc126c-56d4-412d-88c6-6d11a4ee2468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55637305-7b8b-47d5-a27e-fed80ccfc75a",
        "cursor": {
          "ref": "6e43a924-9e15-45ce-800a-c3849e6583b7",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "adff6cdd-e384-46bd-a183-7db86ed7c572"
        },
        "item": {
          "id": "55637305-7b8b-47d5-a27e-fed80ccfc75a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6094ad18-08d0-4e11-a577-7cdd070f27d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff80be62-ffe5-4913-822a-a77c921058d2",
        "cursor": {
          "ref": "2094257e-bdc0-4e18-9a42-143d15f75a3a",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f3d5a500-adb2-4fec-bf87-9a7069590637"
        },
        "item": {
          "id": "ff80be62-ffe5-4913-822a-a77c921058d2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8902debd-e8d9-415b-96e1-44ff8bdb1157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b143832-effe-4c43-ad0b-8d8f840d289a",
        "cursor": {
          "ref": "2ae26431-5176-46c8-9f94-c71189737951",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "74a0b9b3-a017-4b26-a567-b7bc4de0de41"
        },
        "item": {
          "id": "1b143832-effe-4c43-ad0b-8d8f840d289a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ff7ddabe-1648-420a-a48c-7aeb70323a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a659ed-8abb-42c7-8446-f26d1359e902",
        "cursor": {
          "ref": "ada17b2f-29e6-4188-a3a7-da5310e809a3",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "71240052-3a9a-446b-ad97-ba84fdfc7114"
        },
        "item": {
          "id": "24a659ed-8abb-42c7-8446-f26d1359e902",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e186b184-33ef-4e58-a3f9-414f3996c0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df428e09-adb0-4d46-8856-051faef77754",
        "cursor": {
          "ref": "aad57312-7505-4c97-b3f8-c6710aa4ff11",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "68233f57-11cb-463c-8840-d9851178b44f"
        },
        "item": {
          "id": "df428e09-adb0-4d46-8856-051faef77754",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0adb9b6a-2bc6-4c15-b798-87805a0b13d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08132a9-ebac-4385-b311-1625fc31dbf6",
        "cursor": {
          "ref": "30766d42-f300-485b-ab38-b8b5b41f3a6f",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2f7417eb-68b4-4be8-a3c4-32f1d23d2ab5"
        },
        "item": {
          "id": "a08132a9-ebac-4385-b311-1625fc31dbf6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7a68b216-11f4-4c5f-910b-327c3f48f47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6024a929-3d82-4a14-b992-46c70e21da3b",
        "cursor": {
          "ref": "0037d276-c198-4c7e-9cbf-916c74341476",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1bb2bc40-6106-4a5b-8a75-e0a44fdc1b0d"
        },
        "item": {
          "id": "6024a929-3d82-4a14-b992-46c70e21da3b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b5a3604c-65d4-41c8-9437-223e27fb8cbe",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a81fb851-c2c7-40aa-9e34-95cc4e57d479",
        "cursor": {
          "ref": "838502bc-896a-4e5c-bf75-5330a576517f",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7352b1f6-a72d-4439-a10a-bbfbd4b9a246"
        },
        "item": {
          "id": "a81fb851-c2c7-40aa-9e34-95cc4e57d479",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8ff6e853-ec0a-4cf7-950b-791ae44ac5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86395f61-529d-4fe8-9146-23aed1e651e5",
        "cursor": {
          "ref": "9e3dac72-6ead-4a54-a153-2092a8aadc9d",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "49484e15-c98c-431c-84b7-8c2db029afd2"
        },
        "item": {
          "id": "86395f61-529d-4fe8-9146-23aed1e651e5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae1c3d51-9cd5-4d33-9e6d-14b667f65fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d46d29-0422-4b6f-a715-4224a4c7c97b",
        "cursor": {
          "ref": "54714e77-2092-44a8-b6cc-e3e942ed794e",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9462e67d-e42a-4637-bd64-92970d8293c4"
        },
        "item": {
          "id": "29d46d29-0422-4b6f-a715-4224a4c7c97b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "61e55b85-7478-4302-a361-19f2deb95fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 863,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd043a9b-963b-4406-b53c-3c99e6b4454d",
        "cursor": {
          "ref": "6303aaf0-9b55-439f-b022-6eef37b21657",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "eef563c0-93cf-4d0c-9944-b1d02ab672f1"
        },
        "item": {
          "id": "fd043a9b-963b-4406-b53c-3c99e6b4454d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ed8582f4-75d5-4d91-b806-2eaef4a6c7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b72ec8c-32d3-492f-abcf-31c576e3078e",
        "cursor": {
          "ref": "b5b1520a-59fb-4b45-9925-4d01b70dc69a",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b7186194-99b3-4525-baf7-abdd36c2af61"
        },
        "item": {
          "id": "1b72ec8c-32d3-492f-abcf-31c576e3078e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "eecbd8b2-4b03-4c8f-ae8a-43f519692485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3b7c24-17ab-45ab-83bd-b37073b4ca84",
        "cursor": {
          "ref": "6ff92dc8-8fff-4460-9726-7ddb3a4d6ea8",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8f9eea4d-faad-45b6-9b5a-5d32753b09d7"
        },
        "item": {
          "id": "cc3b7c24-17ab-45ab-83bd-b37073b4ca84",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "593a0db6-e78b-4068-be0f-5267346e12d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7bbdfc0-84cb-4903-96d4-9b7e1de7fb0f",
        "cursor": {
          "ref": "de048755-bce3-4eac-9b53-f50eda620a99",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4f948ef8-1b23-4168-933d-80d7a7d370f8"
        },
        "item": {
          "id": "c7bbdfc0-84cb-4903-96d4-9b7e1de7fb0f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a912603-91a5-4ba4-a17a-aa8fb45ab6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c4e29c-d338-43f2-af9c-9e9ad2ebd379",
        "cursor": {
          "ref": "01215e7b-8513-4ffc-9da5-f0395e7f9e0e",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3ba370c2-a96b-4e74-9a9d-87605b5daef9"
        },
        "item": {
          "id": "23c4e29c-d338-43f2-af9c-9e9ad2ebd379",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "374de366-4100-4531-b0d5-088927d58256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedace83-4b2c-41d4-957d-c782de30b906",
        "cursor": {
          "ref": "7f00fb04-a1a4-4d0f-9a5f-212a65e03ecd",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3771ea98-fcc7-4731-9dba-11f6f191263e"
        },
        "item": {
          "id": "dedace83-4b2c-41d4-957d-c782de30b906",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6630ec8b-50c8-419f-9dfd-80d6156517ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb288b2f-ae39-4fa4-a78b-3bdd7a8c6013",
        "cursor": {
          "ref": "32d1328e-df38-4042-b0e2-8dd0772b7fd5",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "17dfb99b-f844-4b0d-88f0-fa6a4a467174"
        },
        "item": {
          "id": "cb288b2f-ae39-4fa4-a78b-3bdd7a8c6013",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dad0ef88-d103-4b42-9277-d1bfaed01649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004fda6d-bc73-4b1f-a5dc-013451d61d0d",
        "cursor": {
          "ref": "50f55d3c-ed7f-4377-a3e5-26005965efb1",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "43342576-8dfc-43b6-9e5d-3ed38a676f8b"
        },
        "item": {
          "id": "004fda6d-bc73-4b1f-a5dc-013451d61d0d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "abb0f184-7cb9-43af-88ab-518998e17ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8866b2c9-2fdc-4c4a-9e26-c3431f06a638",
        "cursor": {
          "ref": "50f29ebf-de9d-442f-a0cb-11c0d2ca1660",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "642034f6-49a8-419d-b3bf-b37139ca22bc"
        },
        "item": {
          "id": "8866b2c9-2fdc-4c4a-9e26-c3431f06a638",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cbc43ddb-7030-42cc-96cd-2a8fa76dc3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2beda033-45f8-4c1a-a445-421766fa1b0c",
        "cursor": {
          "ref": "20dd180e-29f6-4ee5-9d89-85a6d2b90296",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5fccae2d-18ee-419c-b9c9-9b42c8d13aeb"
        },
        "item": {
          "id": "2beda033-45f8-4c1a-a445-421766fa1b0c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5ead9028-20b0-45d5-b56c-c80fba4f9961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbeca35-b730-44df-ad8c-25b0a455aa14",
        "cursor": {
          "ref": "8682d11a-14cc-40d9-8744-687ba3bbb805",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ecc48352-118e-4c13-808e-7050e45b93c3"
        },
        "item": {
          "id": "4dbeca35-b730-44df-ad8c-25b0a455aa14",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "81eeef04-d5c2-49a5-aac8-17d0dc5268fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f306aec4-1e8b-4077-964b-74f42e23f93c",
        "cursor": {
          "ref": "fd1bf6b1-e383-4029-af73-36277d567c11",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e47353cd-1cf3-475c-8738-4084a7c2c209"
        },
        "item": {
          "id": "f306aec4-1e8b-4077-964b-74f42e23f93c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "74cfdc7d-f0fc-437e-8a33-1d78db578ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4994f3-9cf2-4473-a9ce-5a6db06b686d",
        "cursor": {
          "ref": "58da28ac-fe7a-40bf-b6b5-953dc9b62854",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2414079e-5b94-4301-9ff0-5889dda1c813"
        },
        "item": {
          "id": "3c4994f3-9cf2-4473-a9ce-5a6db06b686d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b11f1b22-d14b-421c-96f4-7d1d130642b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52350b59-5577-48ab-aa4a-354113580218",
        "cursor": {
          "ref": "6d14dc12-3652-492b-99c5-1ecd5e5e3770",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6b02652d-a728-4819-a48b-c11aaa011de1"
        },
        "item": {
          "id": "52350b59-5577-48ab-aa4a-354113580218",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5fecf4fe-407d-4d81-be2a-1ac67f3ca0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005150db-0cdf-42b2-a33b-3d6fae35a85d",
        "cursor": {
          "ref": "d5aaeffb-03dc-4c29-a055-cf8dba9254f2",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "de930438-b94a-424d-bf48-d2823faf6327"
        },
        "item": {
          "id": "005150db-0cdf-42b2-a33b-3d6fae35a85d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e558af69-4a45-4ff4-b6a3-6b15ec7676ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f1d876-5e76-400a-9e8c-b98b13fb1892",
        "cursor": {
          "ref": "982f0f5a-423f-484d-9abb-b55cfea139a0",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9856091a-0e2e-48e1-b11b-02bb9e247d08"
        },
        "item": {
          "id": "e7f1d876-5e76-400a-9e8c-b98b13fb1892",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4b657c93-f35e-46c0-9ca6-7f3e838b7808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdcbccb-0fa9-4130-b1b5-b56f4add8ef0",
        "cursor": {
          "ref": "ef0650ed-0396-4d52-9ffd-78d5fde1ed48",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "83cff2e0-8411-490a-88f5-f99fa4cd50c8"
        },
        "item": {
          "id": "ecdcbccb-0fa9-4130-b1b5-b56f4add8ef0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e5073b62-693c-4a7e-ae1f-35ec800d73da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba214a3c-e5a7-418b-8b8e-e1e63ef282d5",
        "cursor": {
          "ref": "728fc12e-68c2-4f77-8c01-a14b574c9d91",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "53114aba-cfc6-4d76-a658-ff0e4bf88098"
        },
        "item": {
          "id": "ba214a3c-e5a7-418b-8b8e-e1e63ef282d5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d10b9904-12bf-45a0-a25d-6561b4e548ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb97e2ca-b697-417e-94cb-357770e4a395",
        "cursor": {
          "ref": "6415bd30-2722-4729-970e-6d6e714fefa2",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "75e5a6da-614c-4b11-a133-2bcb304c2ae1"
        },
        "item": {
          "id": "fb97e2ca-b697-417e-94cb-357770e4a395",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "048e7c3e-6675-4cd9-aed5-bd5b7151685b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f6d882-a9eb-4db3-9e7f-be12760a4a16",
        "cursor": {
          "ref": "71340639-3352-4b7d-b18c-190eb1b6a71f",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3d3b371a-749f-499d-9959-5a38ec9eb7e1"
        },
        "item": {
          "id": "c7f6d882-a9eb-4db3-9e7f-be12760a4a16",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d910a213-6e7a-427b-943d-7c8cb0d94506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f52509-cb34-437a-abdc-9d7925a63b1d",
        "cursor": {
          "ref": "fa5edfee-9e1a-4ec3-8cd7-a2ef2ec56f9a",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4550826c-df0b-4cc2-bfb7-5b81f187cbf4"
        },
        "item": {
          "id": "e0f52509-cb34-437a-abdc-9d7925a63b1d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "39532a0e-d033-4cca-a058-c24cb9c74493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0958d16-5ee3-46f7-a835-f6b9e0358efe",
        "cursor": {
          "ref": "6c160ebe-209c-4fa5-8779-695b1733873e",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "837274c6-7798-4722-a8b4-86d8b916c4ff"
        },
        "item": {
          "id": "a0958d16-5ee3-46f7-a835-f6b9e0358efe",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4b2e7b81-2413-4c6a-85d8-cdf7386cceba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b998b7b-554d-41cd-b236-71440e9b0286",
        "cursor": {
          "ref": "c4d9a098-cd37-442b-b703-d346a17eacc2",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f00e40e8-898f-4d36-b529-c32b038f1a7b"
        },
        "item": {
          "id": "0b998b7b-554d-41cd-b236-71440e9b0286",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f2fa7188-71f9-4ebe-87ce-5c507ebee8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6dda4c0-10ab-4df2-ad28-c177cfe831f3",
        "cursor": {
          "ref": "4cae7746-6a1d-4cbe-a5ed-a4a3e0c5a0c9",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f410e1a8-9c26-47ac-b72c-9a4653cd2974"
        },
        "item": {
          "id": "f6dda4c0-10ab-4df2-ad28-c177cfe831f3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fd60bd30-e8cc-49cc-9a93-d8fd9e02b439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6770b6ac-2ac0-467f-a2c8-8dcb16f3a17c",
        "cursor": {
          "ref": "f2ef6fb1-1675-4465-a40c-6011a1924720",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "55680b69-9fda-45b3-a818-644c4de9bb68"
        },
        "item": {
          "id": "6770b6ac-2ac0-467f-a2c8-8dcb16f3a17c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fe268bd3-47a1-4cc0-aabe-dd1d9b5b7537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ffbb01-2dfa-4a71-9988-02af90beecd7",
        "cursor": {
          "ref": "cba7ead8-9a24-4984-a994-262e8607b53b",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6dd219c5-40e4-4519-ba43-113a2b96fc1e"
        },
        "item": {
          "id": "e1ffbb01-2dfa-4a71-9988-02af90beecd7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3b64e767-539e-45ae-b426-41c3ae820d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070a5643-1178-481c-aa85-a6c9c9dbef13",
        "cursor": {
          "ref": "1d146fbe-fb1b-4802-96c4-24d8d7f9e50a",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b8fbf4e9-32ba-4fb7-bdb0-937cd4214f22"
        },
        "item": {
          "id": "070a5643-1178-481c-aa85-a6c9c9dbef13",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e06ad80a-74d0-41b4-9ed7-9ebec1d881a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3c0357-967b-42d5-be3a-4ebc1768cea8",
        "cursor": {
          "ref": "e5bc565e-5379-4078-b52b-abe08aeb1020",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4f4e0a2e-4fba-4696-9a71-86428564beb8"
        },
        "item": {
          "id": "1c3c0357-967b-42d5-be3a-4ebc1768cea8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b7d4a78d-a05b-4e59-8cec-6fa7ab3cf7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7d3213-293f-4c90-9834-f8b7d8ccb150",
        "cursor": {
          "ref": "5016f520-0fd5-4434-b733-57636bbd41db",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b45630a6-a0c7-4c8e-872e-7f3a8ccb1af3"
        },
        "item": {
          "id": "5c7d3213-293f-4c90-9834-f8b7d8ccb150",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "19c8ce35-5b9f-41b5-92a9-96712a3f318e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98fd7aa-0d5d-4469-9099-9b3ef1585875",
        "cursor": {
          "ref": "620df804-24bd-4d98-b674-6962ad029855",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "08de9a08-1262-43a1-831c-c5694cc1026b"
        },
        "item": {
          "id": "d98fd7aa-0d5d-4469-9099-9b3ef1585875",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a1237d21-ec13-4d27-a381-44b43ec5a091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e7c163-d02f-488d-97a7-ee9c3cad5929",
        "cursor": {
          "ref": "2447ba3a-e109-4cf0-b3e4-24fed7678d13",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d75f9e22-0a9a-4f69-8d87-f1f24f58fda2"
        },
        "item": {
          "id": "75e7c163-d02f-488d-97a7-ee9c3cad5929",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3fe4c785-0a9e-4420-a750-1f02836884d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b8aa99-39d1-418c-af17-90316895c242",
        "cursor": {
          "ref": "c3ad2bd4-9bcc-4e51-a39c-f9c2d2c04bc7",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2fb22142-ddec-4fc1-a5ad-1d8606e8d975"
        },
        "item": {
          "id": "e2b8aa99-39d1-418c-af17-90316895c242",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ac662e1a-375b-4a8c-890d-5b5a1cfa37d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc9daaa-2939-413c-bfde-6540071dc225",
        "cursor": {
          "ref": "6e5d2ec3-0d90-4154-829a-c0cfd92b0285",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bc7a960e-b181-4490-877c-e7cf0fed5008"
        },
        "item": {
          "id": "dbc9daaa-2939-413c-bfde-6540071dc225",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c0f6ea2-a869-45cc-8d63-11bd5caa991e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a248f3a9-b2b8-42c9-88d1-c592044675cc",
        "cursor": {
          "ref": "886b436d-c17d-4cef-87ea-6055a5908294",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5aaf36e5-00f9-4f7a-ab13-80aa738bac48"
        },
        "item": {
          "id": "a248f3a9-b2b8-42c9-88d1-c592044675cc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "047e7aeb-20dc-40d8-b2e8-bd46a6525c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e54cb9-e4bb-422a-9cdf-de664be18eb7",
        "cursor": {
          "ref": "070301b5-d653-47c2-9e97-00db6cc92206",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "36c2d8a8-6314-4370-acc1-c303e910d866"
        },
        "item": {
          "id": "14e54cb9-e4bb-422a-9cdf-de664be18eb7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f04749d2-28d2-47dc-bb0c-1ecb71cd4b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7cc0e9-7bab-4b55-8b0d-cb67bf506034",
        "cursor": {
          "ref": "ea902b0f-df69-442b-92bc-38d0b4482f4d",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "53d0eb43-1239-40a7-9b06-1fdb3b45f753"
        },
        "item": {
          "id": "bf7cc0e9-7bab-4b55-8b0d-cb67bf506034",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "65bec779-2677-4df8-878c-b325b756dba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ede203-92b8-44cb-9ccc-ca128f2cf84d",
        "cursor": {
          "ref": "15b8a460-71bd-4491-a70e-2c92e7534dff",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "59bf8f81-ca1c-4191-8ac9-297b798e8535"
        },
        "item": {
          "id": "94ede203-92b8-44cb-9ccc-ca128f2cf84d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "521a92a5-7e4f-441d-aa76-31cc02ce15db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ba50c-aca7-4e96-a2b1-d74dacd392ff",
        "cursor": {
          "ref": "b17916d6-306a-4e50-8c33-39daeaf82160",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8be08aaf-4bf2-4b04-970e-60ae0e4e9dc1"
        },
        "item": {
          "id": "c36ba50c-aca7-4e96-a2b1-d74dacd392ff",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "06ce59d1-b0ca-4922-b553-1318f18d59ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbe5107-894c-4dfb-bc33-bb69913695f1",
        "cursor": {
          "ref": "5517e8cb-a4e2-48fc-a1aa-ef174c874710",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6ff9efef-a75d-4bbd-ba14-a12db893fdd7"
        },
        "item": {
          "id": "1fbe5107-894c-4dfb-bc33-bb69913695f1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f9e1fd9e-7bec-49a9-815d-2560d096265f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b9bf69-862e-41d2-86be-e0c07279bb61",
        "cursor": {
          "ref": "bd5c72f6-b315-45be-9d88-d62061b13b95",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "46617ff7-aaa7-4615-90c5-86cdc650e4d8"
        },
        "item": {
          "id": "b0b9bf69-862e-41d2-86be-e0c07279bb61",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8fefc883-dbd0-4fee-a004-e012d9d4c7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9cf217-a39a-4f87-84b9-44de31de503b",
        "cursor": {
          "ref": "0e9a3d38-2fd4-45eb-ae92-9376d9c32c43",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9b94b8ed-7280-4732-b093-b59507d2563f"
        },
        "item": {
          "id": "1e9cf217-a39a-4f87-84b9-44de31de503b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4b5268be-7c68-4d40-979f-1a072b027237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde35e39-2d3d-45d5-89bc-cb45bb43d17f",
        "cursor": {
          "ref": "5dadb393-cc8c-4023-842d-6574ea78a7bd",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b5cde2c9-7927-4f5c-8008-b98ce4156403"
        },
        "item": {
          "id": "dde35e39-2d3d-45d5-89bc-cb45bb43d17f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b7bbc6a0-8009-46db-af77-4f6586770994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c4fa14-9a58-4993-b39f-d3ebef955a5b",
        "cursor": {
          "ref": "2e2d73ee-6424-426d-898a-8f2fa868b9ae",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7472736d-9f57-4ce2-9091-b81a184249ea"
        },
        "item": {
          "id": "99c4fa14-9a58-4993-b39f-d3ebef955a5b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0da17468-032d-425e-af4f-45b10f5375cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ec7dea-af00-4c12-8293-1f81db582f67",
        "cursor": {
          "ref": "e7d14758-cd78-4e7f-9f44-2478ab40656c",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b12086f9-7846-4a38-968e-b74da6dd87ec"
        },
        "item": {
          "id": "d4ec7dea-af00-4c12-8293-1f81db582f67",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "83b12530-eab0-4a37-8e75-8f859238058a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81acb113-2f22-4c58-9f91-5bb7c8a76bdc",
        "cursor": {
          "ref": "9fe20a99-3dc7-44e7-b20d-9edb8625ec3d",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ed7e4de8-311e-48ef-8d24-a538486313cd"
        },
        "item": {
          "id": "81acb113-2f22-4c58-9f91-5bb7c8a76bdc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e325afc0-165b-4d7e-8446-9a27478f8aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799b0153-1139-4797-95d8-116b70965c16",
        "cursor": {
          "ref": "648f3611-0bd7-4e49-b305-af5e229741de",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e9ff731f-3e24-494c-8de5-e6b1d372b25c"
        },
        "item": {
          "id": "799b0153-1139-4797-95d8-116b70965c16",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d0b14795-c186-4408-bede-3a16bcd5cf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7370814-3d39-4617-a3c3-0aca1f78e497",
        "cursor": {
          "ref": "a9b4ea56-4b78-4878-a0e5-7c5e12899afa",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "78b0c96f-a1a7-4ec9-a2bc-a9ae283c9aaf"
        },
        "item": {
          "id": "d7370814-3d39-4617-a3c3-0aca1f78e497",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f0be7a86-57a8-4b77-95bd-3dba642f4d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a289fa0-0256-4081-91b3-059cfe78068d",
        "cursor": {
          "ref": "c743ed85-c73a-48dc-a7b4-8375f985e8fd",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1288bb58-760f-47b7-adcb-ffcd70badfaf"
        },
        "item": {
          "id": "7a289fa0-0256-4081-91b3-059cfe78068d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fefb8d30-3048-47fe-8c26-453178a5af4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76ed935-613f-4e3b-b91a-afce4ed4232f",
        "cursor": {
          "ref": "210e440d-e281-46ac-8c8b-1acc05f97e1e",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "67fdb0bf-1948-4b6e-9241-847ba69541cd"
        },
        "item": {
          "id": "a76ed935-613f-4e3b-b91a-afce4ed4232f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b56c93a0-6cb8-4165-a3da-e67e716f85f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab9f009-5ec9-4133-a373-c2a888d61b93",
        "cursor": {
          "ref": "e6ab77f2-9e85-43bb-a73c-9dc5f6471840",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f3577394-1721-4825-b84a-c9abff3011d3"
        },
        "item": {
          "id": "7ab9f009-5ec9-4133-a373-c2a888d61b93",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "46d03182-8d70-4402-b08a-31a37d39f8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c80a1b-0ded-4e81-beb4-68dc7a6f5a48",
        "cursor": {
          "ref": "5b9d9a3a-e9d9-4836-a021-6ca0a7b0e53f",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "025713d8-9441-4ffc-8875-7570198c0f83"
        },
        "item": {
          "id": "f1c80a1b-0ded-4e81-beb4-68dc7a6f5a48",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e019c790-3ba7-44c7-81a4-263ee2d86b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee07e28c-a7b8-4580-8485-debebfb39fad",
        "cursor": {
          "ref": "8750beac-4300-424b-8ef9-d31137fdf942",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fae2d3a7-454d-40da-841f-193d979bb258"
        },
        "item": {
          "id": "ee07e28c-a7b8-4580-8485-debebfb39fad",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8f0dcb20-8d3d-4ec5-ae68-556645f28d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24c5283-8a89-4101-898f-7d2e30a54cff",
        "cursor": {
          "ref": "9851e8e0-a365-47ee-bcb9-713f95824bdb",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d8a9fc85-c1d7-4848-8b5b-22c3ba663c1f"
        },
        "item": {
          "id": "d24c5283-8a89-4101-898f-7d2e30a54cff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cc77c496-c595-4995-b6c3-daf086fc6405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c40930-ce3e-40dd-bd29-d5d4a071ac47",
        "cursor": {
          "ref": "96dc354d-d3d2-4bb4-8c07-351a3a9aac7a",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "083ec47a-e896-41d0-8013-b224026ac4e2"
        },
        "item": {
          "id": "60c40930-ce3e-40dd-bd29-d5d4a071ac47",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "25f479ad-cec9-41d1-8af1-bf9956013e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98962479-a01c-4b43-91b0-21645d44cc17",
        "cursor": {
          "ref": "80b67b23-3e85-42ba-815e-f22bd99cb7b1",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "86f8df5e-549a-4444-b376-13c78dbae824"
        },
        "item": {
          "id": "98962479-a01c-4b43-91b0-21645d44cc17",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e98becd7-852a-4764-8804-0197a812a840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f168279-201a-47d3-9d59-25575b97e964",
        "cursor": {
          "ref": "ed7188bc-b624-4efc-8fb9-deb8210bf90e",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b8135482-139f-48b7-a4d4-4d2cd8fa3fdb"
        },
        "item": {
          "id": "3f168279-201a-47d3-9d59-25575b97e964",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3858090d-2cd4-44c3-99a9-af90e0a801a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e030027-acf5-4ac6-b600-0e49cb713596",
        "cursor": {
          "ref": "ffa43a1a-4818-47ab-aaee-15a34e17ef86",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7798f69a-62ed-420f-8106-6134375b2721"
        },
        "item": {
          "id": "7e030027-acf5-4ac6-b600-0e49cb713596",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "24ed3e80-d9ab-4644-9eec-66d884b773c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c635597-5a54-4085-8935-c638369f091f",
        "cursor": {
          "ref": "fc8fcf5e-7ee8-47f6-85b7-ab4905a19789",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cee9ac53-d7c2-4493-b61f-2a9b52545613"
        },
        "item": {
          "id": "6c635597-5a54-4085-8935-c638369f091f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "765e4115-a07c-459c-8436-66ad4ac207dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2941b023-42c7-42b5-a930-6b7a335bdc8b",
        "cursor": {
          "ref": "e732fe10-d0b6-4cd0-a32f-c920acc19375",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7a46784b-58d5-4713-8533-bce200afe0be"
        },
        "item": {
          "id": "2941b023-42c7-42b5-a930-6b7a335bdc8b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c3a2cfd3-43a5-43f8-a2a4-50e53bfda35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d124596-47a6-4d9b-befa-d44f38bb3319",
        "cursor": {
          "ref": "dbef2457-cd70-4f24-a582-c37cc29a8980",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2b4cc23a-d85f-4e9e-b2fe-6b862d4e7c7d"
        },
        "item": {
          "id": "8d124596-47a6-4d9b-befa-d44f38bb3319",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3bce92ed-3583-492d-a7a7-50acb8f5f360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336ca1f7-468e-4846-a64c-a9dcc434188e",
        "cursor": {
          "ref": "e58158dd-9b58-48b4-a65b-8c8e8fb21e14",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f3892727-1e63-49a7-8680-c95220ac9695"
        },
        "item": {
          "id": "336ca1f7-468e-4846-a64c-a9dcc434188e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fc536533-1fd7-49db-b0f0-bea596b702fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34b1eb6-f5f1-42af-90ca-69d7441894aa",
        "cursor": {
          "ref": "efa5fbe8-ab3b-4c25-a74f-284d957b44bf",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "addb2298-7257-42aa-af01-423380cb7114"
        },
        "item": {
          "id": "b34b1eb6-f5f1-42af-90ca-69d7441894aa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ffa470f5-8af1-4674-88b3-99ef80b60dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f606c4-aed3-412b-a8b6-4177f2eb6c01",
        "cursor": {
          "ref": "a60e243c-f2c7-4aa0-8195-35e863ece75e",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "76589de2-f06e-4ecb-a1c4-ab2f05cab919"
        },
        "item": {
          "id": "05f606c4-aed3-412b-a8b6-4177f2eb6c01",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b5c4533f-20a8-4fa1-9787-150f305337f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5dc4a1d-46e0-4930-a08d-b809e3810705",
        "cursor": {
          "ref": "4d9abb59-8dbe-4909-a910-a167d76d1659",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "12426025-6e70-4ace-8ed8-dddbe3668ce5"
        },
        "item": {
          "id": "a5dc4a1d-46e0-4930-a08d-b809e3810705",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "77c1a6e3-cc4c-43bf-a616-8b9b90f07920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a1a278-a316-4218-94da-c4b8a7655e7c",
        "cursor": {
          "ref": "a01f328d-785b-48cf-b906-8cd22c0056f6",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "53edc4e8-0d61-450f-970b-02a029f4eb21"
        },
        "item": {
          "id": "70a1a278-a316-4218-94da-c4b8a7655e7c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "507f386b-27a8-4a5c-baab-3df6a90f4933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d5df20-fafd-4647-96a1-8cc7b0b416c3",
        "cursor": {
          "ref": "da640907-113b-4e8e-8107-6ba28ddb06c5",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "152f1bec-5bd1-4986-9761-355a315f6ba7"
        },
        "item": {
          "id": "e2d5df20-fafd-4647-96a1-8cc7b0b416c3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fde2c099-4257-4342-b995-ab1215697bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9982a8-d039-4b5b-a076-849d41cdfe62",
        "cursor": {
          "ref": "004822de-33af-4848-a4fa-7ce433b60cd5",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c801d378-9117-493a-ae2e-e9c008e35ac1"
        },
        "item": {
          "id": "1a9982a8-d039-4b5b-a076-849d41cdfe62",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "52cada78-61d4-4b13-99a0-93f8f8f0f0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db629ee4-2a72-45c5-a075-81cd586511a4",
        "cursor": {
          "ref": "033469a4-9b3f-4bc0-bcc3-82cf07c6802f",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "161382c6-2997-401e-a97e-7c27b48f2ce7"
        },
        "item": {
          "id": "db629ee4-2a72-45c5-a075-81cd586511a4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "874e40bd-8911-4c7a-9826-c2af37567eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff0bea1-444c-4158-a4a2-9a1655731288",
        "cursor": {
          "ref": "86b08694-a5a2-4dc7-9f5c-e28d52053f38",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "eec19bab-1f06-4cc8-a455-10da5856ea4c"
        },
        "item": {
          "id": "6ff0bea1-444c-4158-a4a2-9a1655731288",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a7188723-7d4e-47a6-8ef1-475e5f8c0a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e762add-83e8-45b6-9e7f-52b2ddaeea47",
        "cursor": {
          "ref": "1e4d7681-031c-49ae-a8cc-6c2692b1f726",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d2ab9793-7e06-41e2-aeac-6851730c546c"
        },
        "item": {
          "id": "5e762add-83e8-45b6-9e7f-52b2ddaeea47",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0e596f0d-0e93-46b3-99df-a8df7061518a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5aee2c-f505-4a11-a7a7-5d12ecf1f663",
        "cursor": {
          "ref": "44b24ddb-f4cf-476f-b059-1abd59579e94",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cad9d215-73f5-447b-8b07-6bfae629f9e1"
        },
        "item": {
          "id": "1e5aee2c-f505-4a11-a7a7-5d12ecf1f663",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b5cb1ecd-a9b8-4a40-a0ca-51b0d06b2a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5acb30c-c01c-447a-866f-218df9f7cea8",
        "cursor": {
          "ref": "285c1d3f-94cc-48f4-9890-9727dae335cc",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "86ad13a4-ce6f-4e4e-a203-434beb3327d9"
        },
        "item": {
          "id": "f5acb30c-c01c-447a-866f-218df9f7cea8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0b4c14c4-b925-40d0-b26e-5ff3b531df6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367fb28c-ec9c-4593-a4ca-8e8e3abfe876",
        "cursor": {
          "ref": "e5e66272-0837-420c-a032-0de7e4aa5afe",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dc8df337-7fc7-4525-8b33-c4a099b28e5b"
        },
        "item": {
          "id": "367fb28c-ec9c-4593-a4ca-8e8e3abfe876",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "166385cd-9c05-4891-85bb-bf752aee4406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57aba48-2cf0-4fc5-8236-69afea4534a2",
        "cursor": {
          "ref": "00d57679-d70e-416e-bcac-a57e5afab89f",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7320b2ae-3ce2-48b4-80f4-72003ffca031"
        },
        "item": {
          "id": "d57aba48-2cf0-4fc5-8236-69afea4534a2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "78fd8586-db7d-4a80-80c3-6b704dba773e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9395f0a-cbfd-41c4-a456-d933959d7164",
        "cursor": {
          "ref": "9a0cb45b-daac-452d-9019-38df55312dac",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "38b2263e-ae7b-4044-92f3-b45af8c9ec7e"
        },
        "item": {
          "id": "b9395f0a-cbfd-41c4-a456-d933959d7164",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "553b5752-c53f-47fd-b984-d3e378b39a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430968ba-58cf-42d3-aab6-758fe4c5fc10",
        "cursor": {
          "ref": "98f35055-577d-4439-9b07-c0518076afba",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "007f46e7-0096-473a-94e2-b3e09b38cf7e"
        },
        "item": {
          "id": "430968ba-58cf-42d3-aab6-758fe4c5fc10",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6b1de862-ec2e-4ced-979c-7e346fefeddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96865417-c9cd-462c-9291-1994aeba93df",
        "cursor": {
          "ref": "158bb781-1fe7-4078-8c74-c46c130b1212",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f9ab2873-e390-4745-9512-e2469e057711"
        },
        "item": {
          "id": "96865417-c9cd-462c-9291-1994aeba93df",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e3fc1ce6-3e7f-4a16-8fcc-4628591d8a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c676f79-abfc-40d4-93ad-88b0d9b47faa",
        "cursor": {
          "ref": "016e5b82-0609-4677-a88b-6903ef64320e",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "68101972-8ada-4604-a313-67b4d8541aa7"
        },
        "item": {
          "id": "4c676f79-abfc-40d4-93ad-88b0d9b47faa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2afd7e84-dee2-40b8-8745-5bfd2eea0ca1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "161722ac-6f4e-46be-8d93-7698279e36bf",
        "cursor": {
          "ref": "06bb41e0-08fe-4b9b-a353-cc844efc1ef6",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bec77551-c5b0-43aa-b1f7-be017dd2e6cb"
        },
        "item": {
          "id": "161722ac-6f4e-46be-8d93-7698279e36bf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7a7a4e33-79f2-4a6b-86e9-4552cf9dab1b",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f51b55-ad0c-46c6-a1fa-49683f94d7b0",
        "cursor": {
          "ref": "4f4e3ff8-6793-4423-86d7-332c065b9841",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "69f4931c-8646-49ca-b9a1-b13956a1a08c"
        },
        "item": {
          "id": "71f51b55-ad0c-46c6-a1fa-49683f94d7b0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e20021d-167d-4edc-8773-2285c40ac1d3",
          "status": "OK",
          "code": 200,
          "responseTime": 2166,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d546520-5a08-45e2-adeb-fdaaa30ddd7e",
        "cursor": {
          "ref": "5cacec38-bcdf-4c04-a2d3-89e2a06e86b3",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9c36d352-623a-4a6c-9411-8a0ed125e5af"
        },
        "item": {
          "id": "4d546520-5a08-45e2-adeb-fdaaa30ddd7e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b8b47ed8-9f3a-45e8-98c0-d47594fd894f",
          "status": "OK",
          "code": 200,
          "responseTime": 2168,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c16e1d-b572-435b-84ff-dcd1eca54bff",
        "cursor": {
          "ref": "17392ac1-5e44-48a6-ba79-e03fca03cece",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cb0ccced-869b-4fdb-b0b6-e62db85c0b3a"
        },
        "item": {
          "id": "02c16e1d-b572-435b-84ff-dcd1eca54bff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "455c87af-602a-4d49-854e-310275903017",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "02c16e1d-b572-435b-84ff-dcd1eca54bff",
        "cursor": {
          "ref": "17392ac1-5e44-48a6-ba79-e03fca03cece",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cb0ccced-869b-4fdb-b0b6-e62db85c0b3a"
        },
        "item": {
          "id": "02c16e1d-b572-435b-84ff-dcd1eca54bff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "455c87af-602a-4d49-854e-310275903017",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7a367622-84b8-4485-8ce6-b7a5acdb282f",
        "cursor": {
          "ref": "e4ef4ff4-5f1b-4bf7-a85c-4262162084a4",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "59896a14-e656-4afa-8095-1bb0d9c425bd"
        },
        "item": {
          "id": "7a367622-84b8-4485-8ce6-b7a5acdb282f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "17b1cd54-fca9-4b40-bdab-2f1a071e4588",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "46b21f2f-b5a6-4ebf-870f-af9b9db1f207",
        "cursor": {
          "ref": "bdee7055-5b6b-40c1-a7b3-d39488b44c17",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0541107d-636d-44de-9924-c68bc2c4abf9"
        },
        "item": {
          "id": "46b21f2f-b5a6-4ebf-870f-af9b9db1f207",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "483043db-91a4-4b90-a06d-daf9715db118",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}