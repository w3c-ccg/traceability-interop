{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f609c449-540e-4bf3-9f77-4ecc52b4ea84",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e9bfef42-89ce-42ff-9244-15b972393d58",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92a45144-877b-45cd-b539-f33f2e4545ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0148ab94-e94c-42a3-990c-7add02365a07"
                }
              }
            ]
          },
          {
            "id": "03763738-dfdc-41bb-94a0-c5c77776a3c6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f195359-b229-4055-a393-74a64aa195c1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ac3f0ca0-6800-4ca4-8a2d-24d70742a3c3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a6c8efea-5f56-4d62-ba82-f70cab29d668",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "41a5d455-b6af-4492-a437-7ad14a3754cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab3122a9-9bb0-4003-913b-230975cc1569",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e233f79-ddcd-4888-b9b2-cff603840af2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87fa5e02-a898-4e1f-ab20-cff05314b19b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5dd07466-81cd-4361-bd77-3498812c7239",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a25091e3-77fd-42ba-b224-1df5f01e6b77"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0bc9cef9-f29d-44d4-8cc9-3bd27a359096",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c88aa0a2-76f6-4872-96c7-2d8d3845d653"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdf4a5ce-d436-44a2-9b33-b07c8bcdda37",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fc31bdec-127d-41e7-848b-fbdfab4125b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2294dbc1-8626-41e2-a055-d2558a864998",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f559115-fff2-4959-aa10-ac60ac7b9fae"
            }
          }
        ]
      },
      {
        "id": "78c28480-3023-4d0a-9958-1dc3dd2ad5e1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8a02bef9-e8e7-4d0b-8210-b29b30d586e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff1f7feb-3f3d-4e6b-858d-1d25d8d65099",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b9875e57-12b5-45da-b9a1-18fdc2b21c1d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47810a07-8ff9-4466-a2fa-722ee753bcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7d2a26c-ea33-422b-b4d1-1ea9111eb68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd99fc58-c61f-48ff-9e6a-e2da10a64671",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92242e2e-2a74-4a06-a2d2-4858b788498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad94f9d9-c944-4783-873a-15f4b89a0f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b13316-3359-4665-b1d6-60324fa6140d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3d3a5b-f108-45af-9731-8e572ba54a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c434f048-23fd-4893-9b87-387dc766e659"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0313ad9b-5b1f-4d9e-917c-c9edc7ab8df5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "556f756d-b7ea-4b27-8acf-de8933e7bb09",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e039519e-5a02-4001-92bf-53a68a20671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8156569a-032a-4ac8-adbb-9c0c001f4a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52fac64-4a32-4875-a730-5c38647bc720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a28c70-07b8-4e15-827d-f0333846cf35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4b8238af-21c7-4e5c-938d-53457f1d1185",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3ada673-8477-421b-9234-4ef625a78118",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "495907fe-99c7-4d7d-97fe-d2f13beda0aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8197d6ab-cd8b-4020-9f6c-4c437c0d9b21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0be8846f-33d9-4dac-9a52-bbe6885fea50",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d9a05183-affe-40ec-9f5b-a8109a33ea73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37631f65-23b9-4b9d-a5ca-978839c42133",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ad6c4d1-171e-4b1b-bd7e-bc3a5925e8a3"
            }
          }
        ]
      },
      {
        "id": "da6bce85-79c6-48ec-af58-0ac58738a20e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e8b3329d-73c5-4259-84f2-35a9de25318e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e72a538-0f57-4ff8-a559-54b4d07bb352",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a9407d65-2e59-4286-9272-5dc7d5690eab",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453db4b1-c513-4361-872e-91d215b05068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500ceeeb-bab0-43d1-8e75-642368537cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5838f3-1732-4658-a18a-806728763daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2686090-59a2-43fe-be49-0605e9d8fee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4f0589-7d0e-4174-8d80-05792cd24299",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533ed52a-3c17-48ee-a77b-4924af6527f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9637d1-ee6a-45a6-9ed2-e8063a959949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefd7f9f-13f0-4c9b-8bf1-6863236d7a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6007f740-5798-444c-8372-e475a3f7e812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3d31c0-adb1-4b7b-ab70-8bfcd7d29fde",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b74084-ec9e-408d-8002-52e04c5974fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287a3f51-421f-41c5-9ae7-5f029ca04cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09241d2-e1e1-4cb2-8855-6cd7ad261fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3186088-612a-4ae2-b5bb-c0272f83fda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee45d44-cf92-469f-aa8b-860eb5da3589",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf7be1d-9c31-46ee-8f28-2c70f0c1d91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c32f318-fe22-4976-8f4d-24ec4c06476b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100a23d8-d908-4cb9-8daa-1689baf8db74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7c1555d-32c9-43a5-a0d4-d6aad0cc24f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c2ed2d-9542-437f-bffa-0daf7f6335bf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68459c8-fb85-46d4-9862-903cbb7417b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2259fc6b-d144-451a-8fdc-ff877de052e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef324f5-829b-47be-be93-54f9a85ef01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35e8a686-5222-47ff-9f72-332659b12288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bed62c2-fe98-4dfc-820b-14cce1484186",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb65e32f-8bd6-4c6e-9452-93f70cd987c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e159d230-2ba5-4a11-b233-5d5c77a5c0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05acdd6c-e4ff-44a1-b11b-1c904c3ffe9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63854e96-1378-4e35-a8c7-af0b4c4ce652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a64828-624c-4a4b-b1bc-4f52ee5d6507",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e429b82-6271-4720-a8cc-28aed1c1428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c5d6f4-976e-47ee-ba4d-67144f104f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087b6cd1-675a-42a5-9dca-5d4ea5e7af17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84732290-8ab7-484e-b1e6-6b4f7e447882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601c05c8-b7f1-4137-b477-30d1acda8d4b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4c7673-5c37-42cf-9e8e-89e5aa9695d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e465fc26-c55a-474a-96fe-998cb7020a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959639b7-9682-4020-be35-bc71e4f8babe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be616079-7a3a-4542-9864-cfd8d864a68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a55457f-211f-42c8-a082-1c0a6e376494",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423f0eb0-7ab9-4969-ba95-72c5579cb327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dc4edf-3c40-4f20-b9aa-566e07e57488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c926197-b419-4633-b09b-5ade4eb18206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93a48804-0e07-4de9-9334-f3b7d7d293c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593f13d9-478a-4847-a460-fae633078566",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f265b32-0452-41cf-9240-165816cb0756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b2b0d2-5158-468e-a916-505bb60e888b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc84cc3c-8b8a-4494-b162-061e79653c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f07a666-151e-49d9-b44e-0d9959381950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa39b3ea-8095-47d5-8125-6d3f367d1e7b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9abe43-99ab-48bd-b6a2-a9394c8f66f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f8c8e0-c4b4-438b-b770-11982c8bd406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a195ac82-d490-4a1e-aa3c-a162c00de871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43044b02-cd72-4d79-8599-30d91aa471aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4874cbf6-0b38-48ca-b1ef-7d9af2a7e329",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960ca2c6-12f7-44c1-abf7-1947e24b2cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9e7430-3589-4242-8068-83649e1c6df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cba7eca-e8da-4121-8e9d-91f2de86f624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9730e69d-8039-4dfa-979c-4589db712d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f8080e-7ea7-4dda-be9d-c128dc2e8600",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba68f91e-7c36-488f-a0d2-59c15dce94bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f65580-ef8d-44bf-a279-fb3d60690903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fb99e2-9010-47c1-b595-de355d2bd33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05d75734-04da-4b1b-ab60-d42d84871200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96533c77-a26f-43a4-826a-bfaa684cc8cf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05182eab-0f67-46b8-bd9c-6af7b75c7726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d749d88d-ffd8-4d90-abb8-7db0d96e10a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bba212a-de4c-43b9-8566-2fc9979f9ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de0b2561-4b4a-4a98-ad7e-3e939624367e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2605e885-22da-41c0-a363-b82f0b45c990",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4126826-85a4-4888-8353-15189492c066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e395423d-1b97-4b91-b30f-e44f60b752a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc8eaf7-6482-407f-bcf3-f32c3f248599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78875929-ac2f-4316-a0dd-126a47612b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1e11f9-2238-44f1-8c71-bb69d8ca2739",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a744e6-69d6-4cc7-be32-b5e1b815bd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c39940d-5321-4ae9-a0d4-f419f777e873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be9ab23-8d26-401f-8ad8-70c22c2f47fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8be60c1-17fa-483b-8387-6234c14f9f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4887bb4-5880-48ea-9ce9-fe27251e5f29",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f67667c-fa3f-4b0e-8c5b-18b8217d776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b60f4b6-c73e-4f1f-bbc0-2ee97fe9a076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d79438d-07eb-4f90-88f7-d82dfb86b1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c1c0096-0d55-42a6-9c7d-bec89e68e477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f508f9f9-5bbe-4135-b2e8-68f36bf724f7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ee3a19-a0e1-4ee3-893c-c0c6c378d37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629b6842-27c4-49f0-a744-37f65d1b3e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc29132-b427-4bc3-8d7c-afd9a235f28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "39f8c587-fe96-4311-b9cd-e95539dee12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744776eb-035b-4a32-9ad4-f5ec801deb49",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd85a339-9941-43c3-91d4-6bd7f80100be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caffab23-af14-48a1-bc5c-2f0d16b165a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417d2a14-de39-4aff-8dc8-4c5050ee6eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc1fef7-99e6-468a-ab40-f355dd5fe9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b29a854-89b0-44db-b141-9a2be4dd9c0b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9d4cc3-46d6-4a0b-9c56-ad7bb7b6f966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcac09cb-3bd4-47a0-b918-6e2b9e00b298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0888d593-fec4-49a6-9b2e-4fe89084f88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d679b5ad-705a-4396-88f0-1cc807c7d384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fffe90-68af-4fd2-be9a-046cd9aeba4d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e64bf6-86b3-4d70-a7e5-7a146fd7b0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d8e1fc-a2ea-4382-b5cb-38ce749e265c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66ad018-2954-4645-8460-cc1cf0915c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3038c88d-b793-4dc1-ac40-fadc4b98bf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d52afec-ede9-4f6b-8ef1-7c56aaf12227",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f673b12-73f9-4540-a050-06542b85fe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3046644-780e-4663-8a3f-3f11af54c33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50feebe1-24eb-4632-821f-c7ba2f72a28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a9fe8b-8263-4d85-bf6d-2f58e2a3fd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8adbfd7-4471-4cd4-b7cd-738550ef60bf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8dacc7-3e92-4c0b-8f72-d2d0f5bb12cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666a41cb-9eba-407a-928c-2c1dd9a4803b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60e5513-c572-4978-85d6-51b2366848b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20b073be-bab9-49d2-bcd2-f41d5185c88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff254e7-1f80-4f94-9bbf-79729fcd44a7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636b9571-39bc-4bbc-9fac-2a44fee19741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab99a325-53e9-4e5d-9de0-14f3b89f352e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533a1191-592d-4fe7-9dc1-212c6adf8e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfb578c-dc51-4a90-b9a8-8a456427481b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c767896-49ad-4d63-b912-0fe11672aa40",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccffe4e3-9dcc-4693-9d53-e07e68aefeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626dca0b-1e9f-48b7-b699-f048912b5989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30fdbcd-c783-4bb2-a6e6-57025c6b0814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9026ed0-cb0e-4bf2-acca-0dc31dd11d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17ffd36-2dcc-47b4-b95f-4c41f125002e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99984974-ba76-4822-8975-b980c77885ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb46cf8-c447-4c5c-9a3b-3ab7347bb3e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a2e95d-226e-480f-8007-faf3f1d3fbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4f46a9-2371-4bb4-93e7-da1e6bd1b92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed829680-8226-463e-a2f8-5fabcbbbde6a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8a512b-c1e0-4016-a9d2-1464d2ee0efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e06c622-39f8-48f9-94a4-dd148a61c334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba40c76-b690-4bdf-aead-d2f77eb4ce06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5118ad-b004-40a8-bee2-7c0d59056e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac98b90-80f9-49c5-9cce-8a596409658e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6d284c-b93f-4ec5-bbf3-a1c26b45f3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50350442-a706-4d76-9de0-39a66470e7bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87def979-3d4c-456c-ba8c-f52fec5f6774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "336cde3a-e421-41db-9414-fbd9857b0413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700781aa-7cdb-4959-b955-180bb9515882",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8b7aaf-1990-4c07-8310-68936442a5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711b5a82-471d-4d1a-8d07-5f32924db338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d218c03-3b34-4cb7-b66f-f0f07d5b26d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f04ed74-e823-4f32-bf4b-9fe4c1a21916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8316daf-be76-444c-ac4b-f6a35379b1fb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29763f61-ab59-4291-b138-e58caf6ef144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e52a8bc-e413-42a6-87a4-322ecc44cdad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39669b6d-8d85-4fcc-9942-773738f4acbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4ea66b-d933-49b4-8db9-d7a41188d51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c934b9-72cc-4c44-8c17-9260649acd42",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c97f58-7823-4d69-8c06-86d761c450aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7a3abe-ae55-4694-8c47-bd24fb1bb6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027c9fe8-2fa7-4fb4-b2cb-3166e1028cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0791a05-d740-415b-ad88-e8acafea1809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de246b18-d5b8-44e5-a12b-c23e30513040",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e27fdd2-b8b2-434f-b7c0-fd52334722a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672a31a9-70a9-46fe-af29-9003fd6a1f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37466c0e-777f-4698-8f65-a7993fde4c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54931d5f-bd2d-4c14-a1ca-dfc9f8ca8300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176cf8f7-46e8-4f97-ad6d-5726020b109c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb6d760-1a69-455e-bc3a-6c03013a5019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff16e29b-081e-4fdf-a583-29e6fa3c55b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790a562a-fc1d-4107-80a7-73a9d80ec60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b140097f-84b3-41d5-8f53-d7a24bcbf1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d1242c-f9fe-406d-877e-2a0237878058",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0759210-bef9-4d65-a2db-a6f8f1f4a5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa74405d-2ae4-496d-8e35-7c63324d4bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9970589-f02c-42ac-9cc3-f38b97d6b0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3dc4e2-212e-4603-abc4-1510d5e4ece0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6de2a3-7502-46f2-b415-0f1ba4d08729",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694ff723-e1f3-45d5-ae5d-81fca12627af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc0b696-d2ec-426c-a658-d16d249307d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64758c9-3188-43e2-aa8a-06084b7e638a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6fdcd4-556c-4eba-b5bf-16e3779d6903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da23bba3-4fae-426e-80fc-69214ab998a2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f208126-722b-402f-8816-c18dee6622ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b68a1fe5-e40d-49ad-a1b8-5d234ec34874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40118502-f442-4791-9d61-19e5c8147064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29d45fae-78ac-4474-b881-594baefefe38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6beb50-4314-4c92-ab74-3afcdd0c1640",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd303e4-f310-4009-8039-5aa0b60293c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0452687-0b54-4c53-8bfd-95de16119f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b14d467-4ea5-4f28-8c2f-bd65ea61f1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c75f958-c606-4c0c-b153-971aa64c34ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dfe26f-eb33-4552-a609-ab05daf6be59",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9d398c-62ff-4cb8-bc3b-b59106e41e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89ff6f9-5775-4268-8729-c1d5737f6c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f7e7cd-1233-4e6d-abcd-92276f060771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab397e3a-b55d-47a1-a6f2-b6e34c45d12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b39a17a-09a6-4480-b85e-ce981ee0e2b4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43100da6-3ff4-4108-9e79-e52f5e7cae4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d4999c-05cb-4b28-90d2-e192636e57ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176c7ae0-f430-4de4-a547-83b04150f601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "26634393-6c08-44f2-8be8-d6ae719959e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6015b833-28ca-4d02-9cb5-b7ca11fd08e4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052fe65d-9e65-41f3-9cbc-14188bfb066b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac8f437-5eee-4938-a69e-8954f1a3218f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8896118-746c-4917-b2fc-951074ec77be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9041846f-75ba-45f8-a85e-01028fdc1029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad497fad-db2f-47f7-bad1-91cad9347da9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ee41f1-5f27-4cd1-a6a0-1a2a0b139801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbde8e2-e15a-495b-8c5c-9275be58a1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e204645f-8b30-43cb-a64c-66b0c2452992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd12955-3dbc-420c-81a3-7033d1d5e05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801e71b4-33db-49b3-a127-b9eda00cfe14",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8402e13c-7dbf-461f-9631-5d916a9986fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0ff346-2e27-45a0-9c40-8324bcda846a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ab10d2-f215-489b-8763-3dd1bfea5881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ec263bbe-1916-4232-8f89-ac001a308ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ab748e-f9fd-4053-9fe7-3d61770db50d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e025e1f1-0c5c-489c-8588-9489ea0fdde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4136d0-d8d4-45d7-a75e-dbd6b2d64a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b885816-0e38-4139-9fc9-f82f5b810e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa4402cc-9c39-49ba-bb33-52fadd0c7c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3eea7f5-44ef-476d-bad1-49e263016a80",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4829fae7-06ef-4196-8a28-6b575dd70667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f381850-0ab2-48de-b736-5c40e376d95a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5598d191-852b-4605-bfa6-71f5c4049c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "84c56c81-3c94-4f6c-bde1-593f27048702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0339159-832b-4fea-8022-d627fb66a439",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2f8562-6efc-4ebe-bb39-fb95a18b9c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6d08ca-ec0e-488f-adad-6655dad5706e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145d7e2c-d1a8-4cac-b275-c2b57b99d63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "534adff9-39e9-4c73-823b-56d3394576c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5ec16e-8809-43bf-b36f-18e58abc6584",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867f5eff-2c03-40ed-86f6-caecb8d24651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72bd0f7-c2e9-4397-ac6d-15bf9ebe4aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ff5cf1-be6f-4d35-996a-7919d571c82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48b59616-2151-4574-800e-2cd0d29c466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a262f1d-7401-480c-baea-e986aae3694b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50222e69-818c-4434-b673-05a3435f43ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081f816d-d3b9-4a49-b03e-79cfd1708310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adc30cb-3811-4cec-a824-e2f6c98f2c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e07ab9fe-1877-4c93-b6f1-fb59b10d0bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c295f1-a468-4821-b222-560963453c6e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ef2aef-4c5a-4e0a-859c-f2458eabd28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1e1370-63df-40a1-b334-976bf1845142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e5c7c9-46b1-427a-83d6-df24c4cc51f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a84cac8a-7d42-4b5b-941c-3080d9c93f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf39d01-b4b3-4b63-9ce3-5a6e40342b53",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccd2b3b-211d-413f-be06-195b44d6c098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f4623b-28a1-46b4-83ff-488765a4d3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd3face-91a1-4291-b552-24926b4f6f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2b7fcc-7944-4f6d-bf30-a96b28518fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58b9927-c588-43a2-9a7a-6987501d2a2c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af91b37-0f3f-402a-a3c3-af8bc54d2bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c98f8c0-e51d-4e34-bdef-cd58349d7af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb1fdb6-9bfb-4ca3-b152-889aa6eb2516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e394340-194b-44ab-bf82-945fca533db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f63ea6-247d-465d-afff-6b9e0b098dc9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034b42c5-2a89-4a7d-a60c-a2509728b1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f7b8d9-5396-4beb-9797-110aa67bfddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f717fbc-a934-4f79-88f9-864f31a13f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d112fd-2638-4101-828d-3978e37d8525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36262917-553c-4638-bd1e-05b6747b7298",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c426edc-7ddd-4eed-9252-ebbd6cee5aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d593e17e-0146-4064-ab98-91681efa3892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9902429f-03a7-4c91-916e-b711f05d74cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "75b540f7-aec5-464b-8df1-f67abccacba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdeae8a-0fd1-4c6d-ae68-dff87989d176",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd0d8d2-6177-4a2c-becb-6d144ffd37a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007c461f-066e-4b8f-94af-9289524e06e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4dbd2f-6955-4c99-9f87-54cd1243890b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "172b5417-2e09-4615-969d-d2a411426adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd55267-480f-4781-8e4e-fdd2d4ffbfeb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1269fab2-e88c-4517-8f7b-12d0b0372bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800f24ee-9e51-4802-8bf8-2d888c01027f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa92fd8-9396-4845-b956-b224c12c791f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc70254-60f2-4e63-91a6-1ea7afe75ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6690b61d-5cff-4493-bbb7-21329d53469f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd08ef9e-5931-41af-b854-adc9c758744c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837bfb70-bfbb-406f-9f56-a3caeeeff782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f578ee-f84b-404b-9044-e8db85dca954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "391c3c69-f6fa-4689-bae3-41dcfae84ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c827df-c9bd-433b-badd-29961f95f212",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a29fcd-9415-4902-bf93-27c4d85d9f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f02640-2511-49e4-a34f-ddf4bbe0f015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5eabd0e-c597-42aa-9f92-1648c2720de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f80cd0bf-65bb-4b61-962e-4a6d9257b28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa54c749-53bd-414a-a92d-7d9ac4e7dbfc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ef3a98-587a-49b2-9357-1c4003173b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e548a7-15b6-4d8a-8ebc-c67dab76a03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b984f0ba-f2ed-4e23-bf38-73973a1e9bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "93ef842b-25ae-4e40-a944-c00e5bb6bec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dec5d68-edb8-41f3-8e4f-a134f995a945",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cec020-7fb2-4944-a6f2-a4db3d4906e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bac99ab-2b32-4137-9169-6ce176cf6269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff66d43-1f9b-49b6-bc25-5eff7ce4c6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1deb85d9-a371-4a70-adc1-6a541cd46361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543d37be-9771-4c27-9680-298f1e8c088a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c472e12-0d96-4fbc-831b-43fb08964f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09705c4e-f596-41e3-ac1b-4e0ca6c5fde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0beb66a6-c1ee-424d-8271-cfa5ff870b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47e7c471-ceac-4e67-89f5-e0a96bc6c287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb94b18a-f965-4672-b6c2-686700e5bc70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620fe196-375a-4b1b-af59-7ae4e693a583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f246bbca-4059-44c4-9d98-be92bf331db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1077de26-9b04-4660-8985-aad1404eda87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2720aeea-6362-4d30-9230-1c111b8b80dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30143499-2af2-4987-ba68-f35958728dee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa9c051-b552-40b0-b3b0-b15645b3de22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099eb80c-ef46-4fb1-b593-7b1ead113f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dd60ba-e7a5-4147-aff5-ccfbe16265cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4001e32-8f9c-4d3b-9ef0-652bfdb16e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2352556b-11f3-411d-be6f-d201c81ee7f3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dd4eed-a963-4a6b-bf1a-1721cd7b099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5e54c7-4e33-4bb4-a223-1b2f6648042a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9e8b05-f7f0-4742-930a-2f3f58a707c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "560f495b-4c70-4a14-8c05-7dae5b1fcf48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8fb2e2-910c-4ed1-b903-704a1fab285e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eebf726-2109-47d7-b496-eaa46683cb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb98e6d-7477-416b-b985-030db815df79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1540f294-8719-4113-a175-9606551c14b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c42222-df9b-446f-8b77-0049db3dc34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232ddf0f-77a1-4ed2-bda1-adf4042e96d3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9794cfe-bd78-42d5-ba4d-b0c4ba33d625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfd12c6-3954-4596-ba1c-2aea25b68096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c976f9-c9f4-4e35-8bb6-456a7c201ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "582ab7f1-b4ec-402a-a578-7b32da6ff104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1702a42-ff9b-44fc-8c13-fb19754bb815",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb8db92-046f-412d-be6b-0e2a4828108b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d4f351-f627-4d9c-9c05-f7db71b5134e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f55119-2ccf-42a1-9fdf-97a8ee2b9177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b86f9f7-8d40-4c02-b18f-23f1f275c0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e80368f-fd29-4e48-84da-5bd5ac88986a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7538b8ec-398f-47ea-af44-e303bd22a40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ed0b4f-2e49-445d-905e-05dcca7f0fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29317fde-8681-4200-b03e-e6577a8f77e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0deadc1f-3d91-4221-bdad-1ebcf2ffb2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e362b4-577e-4725-9609-15488d3e4e0c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bce241-3dc3-4aaf-a375-a7e9cbf38c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4434290-9cff-49ea-91ad-22d4034a2494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc9cd50-4995-4eae-a482-eea8876a1fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02d73d09-78e5-446a-bd56-878d24f21f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6431dda5-138b-41f7-b019-8eafc9b0f3b4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9cd04b-946d-499f-9500-40e599c9a4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18568949-f5be-4850-a25f-aacfc350ebb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb7caf0-5604-4bd8-a357-d4907aa358ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f79c376-2d13-43a6-b71a-560ea4fb0ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736f4e08-8a12-4d18-97ef-18f2f2ebe42e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf5724a-a8e6-4151-b83c-00dee34d0913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631112de-33bf-47f1-95df-437023a52465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d5a8e3-bfe1-4b6e-ba57-b8f2656bb43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "064f9c54-74e3-4cf5-a9d2-4a823a9ed47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b03db17-f3d6-49a7-8fe9-05d8e34d9b67",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1056473c-a693-49e1-9aaf-809283789721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9002686-cb6c-4c2f-aa37-140d67aebda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abe7576-8490-4a1e-97b2-3a5b3dd7cd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22054525-d94c-4a30-b075-10fd7663e3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb09cf11-5431-492f-8e7d-8c8c877c7d9f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92eab154-fe79-467c-83d3-03b09331a6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f18cfb7-ec14-45ec-bd71-6d5bff9df9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030b25dc-f913-4b1c-8328-2b7f9e583744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3240cb45-cf2b-44e7-9007-7a81d8713eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad850b8-ff7d-4370-a703-c4fe617dd5a2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddf1ddd-bca8-4b16-bd6a-b166df14cf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c7de95-b106-4890-89a4-3d9fc05ec388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee32856f-dd5f-4be5-9e1a-b59db828fe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aae3bae4-13a1-4dc4-9df7-6376bf527856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed81124-1fc4-4b88-bf9d-5fd6ee2d0150",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31e1414-6fbc-4920-b5e9-940d2f7b3612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd349d7f-cfee-4091-b376-92ed67f54437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526ef843-1202-465b-9cb2-7b5a567944f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5795a48-b0ef-4cfc-961b-2fccb4e385f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637c2f03-3486-4194-8baa-ecc1ee3c9c49",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b6efad-691f-4a9c-a6a7-58ed05b7eb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30764a35-e1e8-4a0e-92d6-f16758c0a51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57476b9-26ae-40fb-b73f-071ade6a6a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96b4ffba-2cd7-497e-89b8-d875e84ce1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a36de1-003e-4669-befe-62cfb08769d6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd5a225-08a3-42a2-a7ea-2996cc834b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11004140-3562-4abb-aab4-5819f0e16886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18646c8b-0e61-4883-a795-614e7679f292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a77ef81-98df-4851-ac29-381713cd226c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d35d557-f8d7-4108-a02d-bdda7de12b21",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b6b154-1521-47b0-b6f9-1943fc991cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a6bd80-5d82-42f5-9f66-ec0580d9bed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80f9a02-6a89-4574-aa47-21d3f32f2940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6515a6ab-d046-4b10-9697-fd0994817af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9e8999-7ef7-436b-b676-9a227a18548a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2887f727-c36d-446d-93e7-fba54b752621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19b94e2-9895-4164-ad82-f8d4652da760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae7d0d6-d050-43ca-a05d-d8c71a083ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b1e95f-1acd-472d-84db-6b3311a6a7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1bd30b-1ced-4206-a811-bee81be3516b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd486706-1ffb-439b-b345-ba8933c49473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430c47fb-aba5-49e3-9af6-2de47853e30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba086ba-ef6f-4a8c-abdc-aeeb763411d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10b084c9-380a-4db9-bda5-5f23a3e28ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece27a7e-6565-40aa-8716-89efbe2ad069",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a476192-9704-4c77-a8ea-cb3b6c62a792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84befc7c-31cd-4e42-a036-03d40c607016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724571c1-cbe0-493a-84fe-ef373819d9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5f2478-a576-4144-a9ba-3c7b56682535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1605cde8-2ac7-4569-8827-e0cd5da8ccef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f380459-96c7-400f-b6e4-ae2792645e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d8c2fb-aad6-4b5e-bb8a-4f67c8090004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b64a31-5b7c-4bfa-ac5c-958293a8a427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fce0f40-bbee-452a-9a57-781dec65c48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86009179-2f7e-4c4b-be7d-697df91cc410",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bd926b-7744-43df-94aa-a39495b0220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcf445b-a6d5-43d1-8815-ce07acb2ad28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6bd5b2-0801-4c3e-81b8-78f6cebcf118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9e97e3-2c7f-48b5-8cfb-624939912ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47ec4ae-eb08-45cb-8544-d5b8d7a88011",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fc8ad8-111b-45aa-8d0a-62f19ddb80b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5462c09f-5a98-42f1-bc09-9feada7341f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2125f861-114f-4be7-a612-463fe3e95e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ede37d35-108b-4d70-8e43-dd374e5fe120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72326cc-6557-45c8-a11d-0e47b3ab2744",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c107923-3e96-4357-b735-762afe7221b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f94dfc-41ac-4fab-bc40-81b3a134d88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9b5446-a01c-4717-801e-e362caf8b2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b74cbf11-1302-42ba-a218-ee8e280d2711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693525be-e7ff-4dce-9d2a-a2d657899078",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38efcda6-6bc2-4fbc-8af4-152d0230c96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def07039-ec80-42a3-ab45-eb26f94e58b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbb1f3b-22c2-4511-8642-40efe4d22c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de08d3ef-16e2-4025-a52d-b492904dd991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad48f6ad-77bc-49d4-aa3f-5a041a1f9be8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2d7da9-b27d-499b-b60d-8d461af9b90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95418208-d6e5-40d8-9f8b-7fca01cc16c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc475c19-2e19-4387-947e-f23ecc634708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d186ffc4-b856-42d3-ab46-911aa9bc1067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9662f6e2-710f-4a3a-b62c-fae074ded1fe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd68a239-e62c-445a-a630-05275aa90ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e379db4d-617f-4d33-8461-4d98732becc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f031ecb5-cd58-495d-ac7d-5cac2e3bebc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b908d719-9fbb-4185-ab4d-fdb697e6273f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddc3bf5-0efc-4164-9c48-a933a25e90cd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06790464-64f1-4891-87bb-f70972d2c497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa612e8-32bf-4ee8-9b16-1d33107b7bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fd23a5-0be9-4edd-9c99-d3b5fa9cf8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "85c2448c-6f07-49d8-accd-7a229a62d0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74737ba7-e858-473f-93d0-756702d29f7f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a28bb93-ad62-49dc-a793-cca58032e55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948e7f72-eec0-43bf-96e2-7c30d3320c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b348751f-b1ff-430d-9680-5a4606c64a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9554fb1-ed26-4960-82b4-058f439e7a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c968dba0-7680-4e5a-8119-53886aca0a11",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e3d4d4-4a8d-4997-a58c-549a45c99483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb5e7f2-dab3-446a-ac01-677c1b80cc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb5d6cf-d75a-48d6-a7e7-5f962537f09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f14af26-6b2d-4451-b772-ea57a6582186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410b8803-cf11-4c43-92be-8c6e5d7bb993",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2d63c2-00af-4615-ac37-8a16fdd54535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf4ceae-978c-4b88-89ab-d61acc540d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ab7048-ab6a-4956-8e17-5169921db8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4ce5a7-ae74-4774-b504-b6e601dfe633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35999f2-aa79-41a9-8910-2bf1ac4f449a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0700f08b-31c7-481e-a230-25699cb165b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d2999e-aff6-464d-917f-e670c3309a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef0b70a-93af-4e76-953e-29163803857f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "346722cb-84a7-4db8-add7-40f463dbd9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258e4edc-9396-4941-adf7-ed269568fe69",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccb3697-193a-49a7-817b-80fa176d9ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "520b47e3-9703-4b55-a84d-2d521ed3a084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c8b8cf-b0b4-4be4-a4e1-47a92a3f2fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe25881-b3b7-460a-9294-58fda925f5a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0cbbae40-a68e-4820-81eb-369cc557c654",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45867093-7b6f-4267-953b-91328b36c941",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf3d102-9364-415d-9f4c-be36aa7e1510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d713a87d-cd85-4316-8794-bcced637b4d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b50bf5a-8c86-4caa-813d-8d741b038f3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fbf7498-1d92-4cb9-8626-6cd92f168bd9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ab5efd4-4aeb-4d12-8c33-1e900b5abee7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01dca76a-f8fb-43f3-a320-e95c1f39df9c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "244592e7-8052-48f5-a770-cbc7e72b73ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f2dd001-1789-4ee0-9a2a-61cca779cf25"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d8379c7-fab5-45a9-beba-88646ccdca43",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20683660-02f0-48ac-8ccf-ddbab06fc91c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a7aed845-1e9f-467a-9041-46c675abe035",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53dceff9-ca2b-432f-a42d-275840d733f1"
                }
              }
            ]
          },
          {
            "id": "ca7d4223-0aea-46ba-b522-e6df1f1040e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0e55d5c-aa60-496f-8a46-974a1fa1b5ec",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1602e0dc-f154-4113-865d-136682421934",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3201a031-949c-4ebd-9fea-22bc2bcbc2d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c78b751a-d261-443d-b45d-bf20b9957821",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5d647250-97a5-4b16-b41b-95652d4eca2c"
                    }
                  }
                ]
              },
              {
                "id": "85f942a6-c899-4ddd-85b6-5061a415d2d6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dfc8a02-4b05-4b92-af38-5d038a45edf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a0f0702-092f-495f-a3d8-bd33b8a8747c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f6882e4-86e6-43f0-a699-4b034d4b9a0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "345d0b82-9367-4876-964d-1a169edc690e"
                    }
                  }
                ]
              },
              {
                "id": "9f276122-c7ee-4a39-a1b6-db8f1ba0a4f1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3dc3ea3-288b-4fef-86dd-5452a0c0a695",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4cb7c7b-9eb2-4fe0-8bc8-9ce2251690fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c43e97f-c007-4466-89b3-d60ae9b665a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86934214-4af4-4a77-98e1-7a1554b2990d"
                    }
                  }
                ]
              },
              {
                "id": "a00094dc-3791-4d19-b5e2-1010ec18d740",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1769bedb-308e-4b64-9836-aeb4cbb6d7a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7b601d4-dd79-49cd-959e-3c3263fa251c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef3438ac-3b86-48a8-88e4-c1dd8d3da1e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b9f27f86-f570-4a34-b231-5277bcf36ebe"
                    }
                  }
                ]
              },
              {
                "id": "45e56d19-96e1-4147-bbd7-1c4fff98376f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38714d05-aef9-4578-b884-97e79775dc41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c9f25c6-0da8-4f8c-9c77-50d6e9109c17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a18608a-77d9-46c2-84aa-7081d44adde7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f2c32e4a-00f7-4dd3-979d-cb7c2dab2618"
                    }
                  }
                ]
              },
              {
                "id": "4524f6b4-e681-4625-ac63-5da566a6fad5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "358d9784-d538-4e83-9faf-c3022412f935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b669457-be84-4125-baa5-2e3f8317701f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a685a8ef-c282-4aeb-b45c-742cd7ebf90b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e32da825-c824-4c6f-b2ba-6d3da5aa95ce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aab76948-eeda-4e62-b6f4-c2999b93f07f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a4175a4-082f-4fba-9b39-0b39589564b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d446070-8c11-4022-b11c-e3e23833064c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "885251d1-c21c-499b-993b-aaaea5626615"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d9eacd4-2cc1-4a71-b7a4-8aaf6b413c33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "52a8b1c6-49b2-4422-a1e6-0ee35ff9a16d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb5c4df7-4215-4ec5-bad9-f16a5e2210af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7af03d5d-b3ad-4d12-8776-48649497f149"
            }
          }
        ]
      },
      {
        "id": "b46ae33c-6780-47d0-ac41-5dfff3c164b0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d56f178b-db31-4fb9-a0f4-5f72182c38a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "090c8185-e95d-4eed-b76e-cccd28168bd2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3415b474-5c59-4c68-ac02-67d8014fd148",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc19e303-8c84-4bf2-b152-2d08707e8381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e27dc36-7975-4481-a8eb-751564a4b507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fe23b4-8e07-4259-a9e3-05a3490217fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fade0d-2783-4d02-b4f5-25d11d9291bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceab0a3-bb23-4f7f-8977-14e598eced45",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ac2574-e2c9-4cba-a9dd-3893b3e5f85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5529672d-b554-4447-b30f-7fc1a42b0263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa15d1d-31b8-44e4-89e7-e22b2f3f4989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "333a6fe9-0b5c-4e7d-9165-5778ef12a535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfb2b4e-65ba-4890-b49e-2959db7386a8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2263314a-c8d6-4950-b633-145826bf145b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fcd289-354a-41c9-9c4e-2a0378b8bacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1772ca-cf22-450f-b807-9b90dcc9fbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c451bd45-5786-4458-ad3d-a2bc223edfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a1f0b0-0b5e-41d1-9073-fe783474d58a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ff65bf-b44f-4350-abd8-cd971020cb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93daeb2-10f1-4815-93db-615b947474a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155ff557-5920-4b4d-a319-0e2a9bac4ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48118a4a-973c-44f1-b8e4-0c672a3a1b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73376811-99ba-4034-b66b-899fead6451f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b9cd8d-752e-455f-a27d-63dc806cc42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a55902b-50f7-43f5-87b0-63864448fcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a326e265-6d00-4874-929a-6547f2dee621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7355ff99-c2fe-413c-b1f2-57c5b76f4e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78950391-584f-4cef-87bb-4b5204bd7bb6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fe2e08-ab88-4d83-82b8-1c6cfcce50f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744519cf-9430-4e2e-8862-e426b12c29eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5d3dad-2306-4a8b-bd50-ec55b6bdea3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e58e9715-2616-4569-8170-0c32890baebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb672a0b-fe9f-4d84-b254-a54097961bf9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eff2cc-c4cf-4a78-9dd6-87d65b66af6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e6d155-cf6e-4bb5-9217-3c5686b4bf00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d27536-f869-4edc-b483-f3977722037b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee97dfe-374c-44a4-9af9-6dcab71dacd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64235c3d-74d1-4fad-8299-1502b1f7c268",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c34657-43c5-4c96-ac5a-494fd84359eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1cc243-63cf-4037-901b-c50bf949b34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9e9b0e-7a37-4904-b039-08d2c987b8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c3776d7-3a54-444f-967f-e17aa264a727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5ca68b-e915-4481-93f4-5f276ac73691",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896c0d0b-b870-472b-9489-77f58113277a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5744e2-6c79-4736-9590-52e9035a6fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd70d04-a044-47b7-8619-e2d2f0768240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a01ac4-be5b-4bb3-ad95-fd34f1631957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa207e2-5410-4314-83af-750011be8492",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7d7409-27c8-4486-b405-529ca8d30f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410d4ec1-eba3-483f-bcc2-4b74323aa3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bba106c-cc8e-45c6-91a3-01f2bd8b81ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27c1648b-18cb-40a3-8f54-18b286753ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a67a2c-a70f-4e9c-b36c-e941372564a2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8c75e2-c70c-470b-8f8e-d72536e19830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c682a122-326d-485b-a4e4-5d28d2ab7d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdef10bf-33e9-4308-94d7-b8c27b96f9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5abd39-e33d-48d0-9b61-5f5152ee57c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86db430f-4b5b-4635-ac27-b18cecfc9473",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dbd71b-e09e-4ba6-8879-ff5eb9b873b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8caa1b55-69ee-45f6-a83c-502ced6c8f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d6cece-df32-4ead-88bd-9c31c4a2c361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb1508f-0851-435b-af0f-7220406bf4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e9c557-6c29-4dc6-a1e3-c543afa12a5f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6635ca87-4fbb-4132-a5ba-be21b35c6a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd19e07-b408-46f3-807d-18587ea2bee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5497e48b-87ad-4d5e-8017-25cc9f47ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b25a152d-e17d-4865-b85e-16ee195feeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4345b5e4-6904-48fc-a326-775e0c910596",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543e2465-c582-4ee9-af15-30ba581fbfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb15993-e8bc-49b8-a633-8dd6bddde686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0619cba5-1309-48bd-a1a8-8f16a09994fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "64ca56b6-94cd-46a4-a896-1fb6d8f1a521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbd56ee-6a03-4ef4-b1a4-04a41fac0abc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d2c865-74b8-47f9-9ebc-dd4fd39c96f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2585224d-e6a4-47b5-ac58-3bfc52d45487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f76c11-ac1a-4898-8654-39f730a48dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d11bed-7dc8-41dd-809b-1109de2ed4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc062db-1e27-4df2-b02d-c774285d98d6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca05c30-e5d7-4959-b713-981a3ce55573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d925ecc2-d39e-4cb3-8bd9-9bf813e866b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fc9b51-02e1-4d7f-a6c9-1a6d59765976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f3fe4f-e7a9-4ce9-9453-ae9b51ad00ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a9cd21-9626-441c-b10e-82439853e7fa",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714186dd-3c43-4157-b484-3e4332a6fd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b3fb4ec-b6fd-46ed-88e5-f72fc5056131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e27b0db-6551-4f49-a319-15ce5945fda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "10caff62-1640-4238-b508-f7c4431a5165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17abb72-e75b-45f0-8369-a7ffbb3b8a44",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636726ff-8469-42c2-a414-0b932a4d88b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90348da3-e7cf-4af0-9b10-9ac232118091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e1e2d4-d2f7-407f-bbed-d3dbbb5ce2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a739895a-a290-4fc2-ae3c-19a2db09a4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9061d8-e982-4fb8-9eb1-7272b4a4d276",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de9631b-d814-4c4c-be46-3ec725ab1b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31396a9-004b-4385-b426-0f6d5bb6e5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166c964f-077d-401d-b61d-32f980942d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85b77f6d-a9a1-456a-9883-e031457e84a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66d2939-f7ae-424b-b155-88680f65a537",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cad50e3-3722-4e56-b88c-0c15153b4872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c0f562-f867-4057-a5b2-c3b1fd154c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdcac89-6a51-42d3-8290-e0434f165237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce90a1f3-60ed-40a7-9381-7cf77f2012eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d064fea4-66e9-4eae-97db-6f0a017fdc6d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e3eb55-c72d-47a4-ad13-054439f39d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a823acf0-809e-4a14-b4d0-9ee90dc6aba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad0d9ac-5488-47ab-8832-7ae310a38ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "342870ea-d8c1-403f-b38d-0a55ed642528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35740d91-eb25-4412-be20-3be56168b12c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b57b4d-c97c-4bdb-89c5-2303c012301e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea97ea21-247d-491e-84f1-b630401f644a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a8f021-5791-434c-8610-a44f01abb0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5953480d-32a3-497e-866d-89bedb21d8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05b43b7-4484-4d56-8c31-7543e6a1adf6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8650b4f-7223-472b-bffd-3a72edf432df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de232db-ee47-47b8-aee3-e35a0cca6685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e8847c-5e47-4f43-aa5b-cb795dd2af5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7065e7b4-1411-4611-a138-01c2759a0df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e06a27-f012-4a3e-a6f8-801c08cb2309",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe2b448-9f93-4c09-874b-ff038ce75167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bf861b-ff15-45a7-9c61-4067e4ae2dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60df8c6-2d84-48f3-8878-5826f0e46d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffb0ef7-1e67-4db0-a7b2-0bb2a8da01c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e29099a-89c7-4ddf-9018-102e480fc92f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b0d364-21f8-4bde-a8ef-1c4ade31f2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23880f8d-551c-4d3c-8d9f-492059704bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8498d848-d26c-4a53-96d4-8be6cdbc3620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "468ce2cd-b491-4033-85c1-dd2b83fb33c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05e90ee-607d-46e0-97de-29beee86231c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d7e07a-d4c0-4020-9cce-9b7ec3414231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935b5bf4-77d5-4433-9217-bde118cd345f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30aa97e1-834c-4ff0-aaa0-a3d299358353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "060f8dab-5108-4d15-be24-0cb1c2e3967f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc4c549-d1bd-4ec9-8628-9a240222aeae",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17169d3-cddc-453e-b50e-7b8675814e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e559a908-e475-4abe-ae11-45e086a63489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00415875-3c9d-40d9-9711-c90fb4589126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a877dec-94e9-422a-9633-2833906e2791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ed362d-11f1-4e43-bb6e-4d093c9e7b81",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98935985-bf85-4b9c-8709-a6c57b76b3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3bd53a-9ee8-43be-933c-584131238b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21479ea7-a3f4-4907-8c39-f597ee6c31bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c331c490-d8e7-4fbc-91ab-e168fc35f12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd32b22-f880-4cd6-a4ee-ff311d756075",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3f3825-0845-498b-8121-8376dc210094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce0b732-2c34-4b3b-bbe2-975a5b90f32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cabe7c-da0f-48b6-8995-b23a1c068bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f720c9d4-2908-41a4-ba26-097af4a90976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8185af0-0ad5-4b14-b4b2-a25be65f608e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2061a00-32b7-4464-9d0f-ce903c25ebb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a9bb3c-6022-4dda-8073-9b65d24d64a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893535d8-a906-44d9-854c-52fbf17d3ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0278f019-8dd4-471e-8683-81ac7049e0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c967ad79-25cd-45eb-8dd2-77cec6c7a3fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fca86a-69f0-4e52-8807-013e4328630c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239d8823-0f6d-4831-91f6-a9c0f3744290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40101b6-c248-41e9-b314-fec48a3ecf7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e859527c-91e8-426d-bb07-11ca2d14fa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c84404-3449-44e4-9093-bf92c0391376",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6b6a4a-ca32-4ea8-81f8-f7233f33b3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824b51b1-8abe-41e5-a7c2-80d3fd7504cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bb11b6-3878-4a65-9720-11b0145f4bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "604b9dd3-bf36-4d1e-a6e4-4d3078efd670"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b3e02e3-9f71-4dec-a5f7-85c96a99e406",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ddd602d-5237-403d-b280-513db7c71def",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd65d15-0286-4115-9061-59dbae6afa7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "71e13e13-3678-48a0-ab1c-3200b13f97e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0605a5d0-5625-46c6-b6d7-24914827f7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0da6ea06-4d76-48d2-80c8-fe266f41f9fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afc54fbd-e23a-4b6f-9fe6-51de9abda060",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ea5f633-4fd2-4398-9646-1498015235a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ae738b9-dbb6-42e1-baf0-ffa7aaddc048",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0c94d2c-f303-48b2-9755-fe043e6588d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbca6847-2951-4d29-b733-87a88ae2948c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a0844fdc-b14b-43ce-b72d-f467bdf46746"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecc6c124-58c3-42b3-888c-78fbd1fbc761",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cd92b86-74f4-4d89-be30-1215d666e9e6"
            }
          }
        ]
      },
      {
        "id": "0f861cc7-bbb5-40a6-8bfd-a9482ee0ba23",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0cf7f99f-0051-4890-80d6-791d419a66ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36e05b10-5791-4a5b-9d5f-0e9eb4414f88",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2d6dcec7-74d3-40a3-aca7-2f904321c0ab",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e050f91-fceb-4448-b18e-3c8b718ea4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6306b2d7-a880-4959-a56d-17d7ee9a61f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdf674e-e6d0-4b0d-bcf1-c01455c6bdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "679aeb8f-63e6-42da-af86-682116ff1045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186323bf-f14a-4310-88ef-39366f4fbee2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340aa350-5f03-4d15-aa54-7eda2610c1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812a8bc0-356b-41d4-9440-e06c6572acee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fe0dee-6ed3-409d-8621-d1e5007159dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "883c7f7a-c95b-4e17-97a2-d00a7f0330c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec18c9d-2167-4a91-b894-95450343d7d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b9404-de83-49af-8ff1-1b45cdcbf0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96cecac6-b721-4a83-899c-1932cd9c9a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c245f768-e812-4402-b5df-67e675573e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf735b03-5542-4419-adac-fc1ba05337c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4fa651-9d50-4f39-984e-4a8a7f8f3685",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53416e1-e7a5-49ab-8f8a-22469a6b12df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c9f14a-e768-4e49-88c5-e13d2ec38434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd28f23a-3c26-46ef-9ea5-f224ad677baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd039d4-ca26-43b8-81e1-5b9d0bcb7a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9b2037-96db-43a0-841c-1de0b8f3037c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a769c7cb-787f-45a9-a71d-32697bd1a2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97d4487-9463-4a20-93fa-a0b999a202fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a30ef2-25ec-47ca-8625-1bb3d9f8d595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "922588a8-3e25-4d06-8028-d2ef777676a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61068d9e-7c17-4636-9abd-a86306a3adad",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6c7ef0-0550-47d3-a410-260429c2ecd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff94aa2-54bb-465e-ba03-74b3bafa46d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d6f93d-f4aa-4497-81c9-edcc3b160687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71cfb607-a256-416e-990a-cada2c6c81e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae50f3d-9ee7-4a21-9b64-e19250c5792e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57c1089-9035-4638-b4a6-77c4971c513e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a25c45-c804-4112-b83b-c1a2f9d7a1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc3ce38-b66b-40a7-9677-bc90b753b87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "80650da4-5fab-459e-bf9d-76efc9703c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f461a2e-3cf7-4acd-aad1-a12a9cd317ca",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156b355f-7c0c-4ab2-a57e-e1c7077416e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ca5c8f-b1df-41e9-b7e2-3b4ebeb874b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fee18b-d121-4e9d-9970-36094f378928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00966f86-9ea5-48ad-90bb-ae9d0bd65816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9da2ed1-1e5f-4b6c-8d94-234f7af9e416",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b066311-60c7-484f-8553-2db4d27a37b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2346f38-ba30-49dd-a236-bfda187a2a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c617de08-0751-4ec6-9611-6f51105aa3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da281c2d-09d7-473c-a604-ebc3fe8e3d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2935db-098b-4d8a-920d-e0a18c82fdda",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e192a19-8993-4a50-a1c4-ab406662019e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9770a19-6363-4c55-a004-b1ef38f5a22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47b465a-eb5e-4777-9a31-4c3dd6e5d832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a0737a-e56a-4c1b-829c-9f69ca15492b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e6d099-534f-4f35-9d2d-13cb2e9f2ce4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d377fd74-b225-4cb8-9630-146f39036dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ece41b-9635-48f8-8724-a477a8edd2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3147df26-02ea-41a6-a2de-7ddfdc6d38ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "08c6dae0-631d-4c61-9969-abd92be62fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d1cb2b-6530-4c75-b1eb-6ef810625e59",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c02ac5-671b-4d79-b3f7-9c5ee6482378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1259d8b9-0ad5-4bf1-b0a4-4c7eba41b60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9e500f-3691-40f8-a162-5edd7cf03fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acfa8962-7d10-4bb1-81f5-4b72bb239cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0765695-582b-405d-ae02-cb21fb6d2a59",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd3d3fa-5e37-49d8-b480-69ef05574848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05569e1-486b-467e-990b-fba2601ed714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d64f73e-832d-4d3d-b7d4-806c1ed8f699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e9e20b-6cc7-4079-a40c-7919e8382c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32b878d-6e97-4e77-9c3b-97a919a75a11",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dfb843-3216-4118-bd74-62dcd69b8547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc72d96b-f130-4c5a-b1b5-6e22e8ce5646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944b75e8-11dd-4cbb-9c08-441ad72506f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "42bc5e2b-d7dd-4805-a37c-1555fde92c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d3adb-79fa-43ef-a1ab-67711e2dda36",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9c9fa7-3f4c-4159-9a79-7b55f74b1ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7b579a-8259-47df-8b5a-a59217e10860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7051eb-00cb-4878-8d61-5d283516d45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbb760b-fb83-4db5-829b-cc0857b452ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23c233d-2f7e-4f6a-a983-ef7b2614e5de",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500e183b-cc27-4031-8593-2e364f0e4f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08c104d-34fe-4dec-8e23-ecb6b8b2f4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec892fa-e0c8-4c54-985c-35460277396e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d587f37-058c-4a1c-9161-bbd00f4d6017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271f4fc4-01ac-48e3-ba05-78bed59dc1ba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d755f80-a381-4a77-9347-92ab6853d218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71d6f8a-c70c-4dce-9d29-07cf84641ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daed19df-fcb5-4af7-bb98-b8575731af4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f424339-04e4-4c55-89a6-2d05c820efd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedc8983-3513-4a5e-83a6-35576834bd2a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9daaf7b-fd0e-4cd7-912a-e1a9fe23ee66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567aad58-ed08-4d1b-93b4-44533135a7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc81522-a8b3-43d5-9bd1-d9c00dee0bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "442a08a4-b5d4-4e48-8606-c570fd42648b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6682d3a4-d04a-4610-a39e-bbcee8b9e094",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ad10e6-37f4-49ab-ae00-c13b0f279e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27de1ae9-7de8-458d-8087-58c79731a119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9766e2ae-2630-4cb5-962a-07ee27c6fd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "699ee41a-2ad0-4f1b-92b2-a5f1b01a8eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54373784-f122-4987-9bc0-ddf8695705ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7143dc-05cb-45b1-bde5-28a3c15fceeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9342fadc-3856-4caa-945d-138daab14025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2298369-273a-4109-b645-d514aa5f5eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba374f1-e22b-4d2a-93cb-2725a34bdda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c75841-0f98-4cac-ab85-c4dcbfc89021",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475eb5f5-459c-4218-a430-2f0c972c5998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811d63ef-5b16-429f-9d6b-e67b261ab872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f242827-dd4e-4e76-be3c-3757e9635a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5bfb9d-7f09-4f11-9045-78aec77ce00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1d5abe-77f8-4413-b6e2-400993805ef4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a146bb4-14ab-4070-86f6-f6ce25cc7a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d7dd8d-d244-40e5-ab02-a483fd7f3c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647bee9c-f426-467d-b441-eaba501fa99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dddc42a6-372f-4f26-abcc-999a87a30ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf136710-85b3-4a11-9a35-87036877ada3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603efcb9-3d4a-423f-a542-e048bacffe3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ad9c0d-7ba2-4d27-abb2-4d070fe0305c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f553ac3-93f5-4bdf-b02d-8f28ad37965e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "378a11c8-ba28-4f7b-b830-d0cb23d3ca42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacba54e-47cc-47f1-8236-382bc47f30fe",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a5f425-8e4e-40ca-8fb1-9808993d5e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c3d0a0-ada8-470e-bf10-ef90c998badc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2342f9-d8af-41b4-9782-3a1aaa8bc2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7699a86a-ffaf-4a0e-8af7-048673b007b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bca22a-b62f-40b0-ac98-616b02affc18",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0aadf7-1c37-4092-a6d6-b5f5482e7ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5381701b-89b5-42d6-8ea7-dd52644f4bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0feb8d-a696-4514-bd6b-b0e8ba69999a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8303d6ed-a83d-4a92-b6fd-1d309b439589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1d8cde-bdf1-4486-b070-ab4b26dfbf89",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6d0b13-b7c9-444a-a0ef-3dfb8620462a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f213397-083d-4590-8d48-6c1c64893071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab78f4a-cde7-40bb-986a-e5560bd05b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa88696-31ab-48f3-a616-b8181934f9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4426c904-2bb2-4405-91dd-7982e33ba5f3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582c480c-affa-418a-a6ff-598446576ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec2dba9-54b1-4142-bac1-9e0c8d64092b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bd24c6-fce4-4661-a343-43ccd97a2c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c002fb8b-41da-4ab4-b5fa-0b1c2090781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c320a5a-2252-4c5c-9a14-3aabcd423671",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911c0c7c-c6cc-4509-8291-9e3d4c2852d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b3c910-9a0b-451c-93df-d7818bb6dc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1202a307-511b-4170-a8dc-f4be09823b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9382bbc6-6d44-42dd-a3aa-7185d5a10f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4556ff4b-f0aa-47d7-8da4-fcb3f49c7ba8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca081ffe-a789-4b0e-b6c9-093f31aa4bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70464541-1ce5-40ef-aeb5-479491985648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355b36b4-bd78-4a8a-9634-367def6c0521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8acd3b83-d8d3-4d51-bb1b-45443596c8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fd03a2-f8ab-4a20-b598-3865f2baee17",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e6db5d-d7e0-4b68-a989-03a06e5beb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59258a8-3bf1-4a7a-8355-de005f8ca612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3bb831-980a-46c7-a969-ac235255972d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "498f5f8c-4d89-48ee-aa4b-5b4c22107d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9af88aa-98c5-41d0-ad48-015dc6a34c49",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a362053-0608-4f9b-adb5-7abff0f73dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f927ed4c-1cc9-4619-9f90-c6fff67af403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbd7ee9-17d1-4900-9816-ff749a4c5e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a80b223e-dcf1-49bd-aee9-50b1d3d138d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6627d79a-507b-4390-8b87-46752045a630",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89a67b3-fc1d-4fda-953c-2bcec265eb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1be95f6-d008-47c2-9187-618e2332b442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bd4ddf-e967-431a-8032-7aa5b6221b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec498653-366c-410a-9a3a-86153fabad3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf101bb0-f7ca-4b9a-b1b6-550de74cd046",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbf4898-7635-4d35-a572-eeb956181521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d4c952-bd7a-44c1-a32a-18701a8802ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3ac78d-e925-4053-9449-d96f03d5dd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3854936-45e3-4bf1-a2be-c399455aca18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffd6ded-d2fc-400c-8148-c8fde4e6c622",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890ab99c-d818-44bb-8c47-cf8e136a3a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1ac64c-e8dd-47d6-be6f-d4ed2eb5f009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02e6d5e-2442-4fd6-a21f-85b34674a180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3182ea-656b-42f0-add6-c5b3b90649bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a323748d-a27c-4a57-abaf-d3f16e59a421",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24665573-cc6c-4a6b-95e2-190493929884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291e42fe-97ba-47af-b356-48326317c1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdcb4c1-c9a7-4b78-abbf-b877a571e14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aea6feb0-03d5-4333-8dbc-3a532c467f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a25c738-0a45-442d-9431-45153389da1b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514c9deb-df21-42d5-9f76-1ef9011b6600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5618a82-cc91-426c-8505-a43f03448dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ba805f-9bf2-446e-8713-29d866fef5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "274a5698-5f07-4c40-834f-21d65e644a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac0f442-6da4-4566-81ba-5ad074c7763f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233d27e4-0bff-4c38-b701-448f08b2326e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b686aa21-fd14-46e1-a220-51d7ad7732f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640ff8a2-af02-4985-ba00-ec26f0c26d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48d71e88-53b6-4226-bc25-8b94193204a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46a2076d-41ce-4632-be29-951d8c272c13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a95ff43-dc40-4cfe-a6ff-85904a9a6785",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3aeb83-d073-48c8-a6b0-d2967a79fdb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "144a227c-12e7-496f-8390-3fa991e08545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a86581-a2a2-42e7-9a8e-623587ba647c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "628a9d62-4737-4a01-825e-a519bc0fe053"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7defa634-2925-4e3e-aa49-d83c18d58345",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41a38507-8f6f-4a04-ae7e-145d4fd66287"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cacc6cc-b864-412c-a3c8-378b31521e9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afbef715-70d1-4ddd-98e4-f7f6f1cfebd4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eab15220-809e-42be-bc01-27c7f68d571a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d8f06615-c5f6-4941-8958-27d5aa76f92e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e08cf0e-b7f3-4d56-b00d-b50890e3fd03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5648895-faea-4252-8b15-0dd1c2bc3261"
            }
          }
        ]
      },
      {
        "id": "7648e592-eef1-4b0d-ae61-54af2de744bd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "acacddc3-892d-4f08-abc1-b4aec3d7d718",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7602f8d2-1d7c-492f-8c23-223199d75365",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1a4373d9-0444-46dc-a4fd-5aa49ee7a980",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674a2cc5-4027-4b87-9c9b-a346162d1314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7888c0-b80b-4a0f-90ea-274cdc36b9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47044ed4-4a1f-4b55-9ba2-5a6277edf78d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e034d26-981a-4a9d-b492-1c7f882ae69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9258492d-c8bb-4467-bcf5-b815026457f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d96e0e-b8ac-4ebd-86ba-2ae307aa612e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53edf53b-c499-4e6f-a679-356d4aae340c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6dc97b2-4f3f-44f3-87e3-744e2666086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079a8c2a-cd5e-4780-93b0-8e2a31b95b87",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db0cd9-1542-4022-a383-c10f4b62f647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db4baa9-6463-4d5c-b422-5a4bb83cb15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d8ad69-34fa-48ce-bcc0-70e548ef86b3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0b4f6b-5e8b-402c-b953-d713f6010aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf831f24-4459-4346-8cf9-fc7f0f51d050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c002b89-cbe8-4749-9d19-192b498fd97b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6158da85-cc61-46b1-a1ba-d5746aa4e096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135d9060-c92c-4c5d-8670-e39b4b24cf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc0ea25-c4b4-49c2-a0af-07b404966afa",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4780e9-1764-423f-87f7-c7fd35c8ad12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b5a0ce-e3cc-4220-91e3-c0d3e3ff06ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cc694c-41fb-4e65-90ee-a4a431217ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b58fb50-1c9c-47c5-a7fc-84d2e1139181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a29186b-d0c6-4f3c-a9ea-84bb22dc1ee6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5698d9-6ea9-435b-afa8-a7fd186cb947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de6dc536-75ee-4476-a998-b210bdbb220d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3401a9-4c94-49e9-9bfe-2c669b3517ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb697fc5-d861-4c72-8170-0cbf5a2fb95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b6f9eb-e5f1-449b-8600-29fa0e98ebc2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdf58f3-73ea-43bd-a028-db4554763ef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4d3aca-d392-4dbe-b30d-329b60e80357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38dfc68-5e2f-447b-9f02-742233baca98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcbfb0c-d2a8-4e44-b130-aff14027310b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0187b80c-31f1-4dc0-9f8a-eb2c6528d27b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29e30f5-d94f-4774-ae0c-9c51a61c42eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61c8a0d-15d0-49ad-b24f-c56a16cff2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57da9507-b0c9-49c4-9d51-66d518ebb52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9760e9-9ab6-4b53-8655-cc30414ff229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7781217b-2ab8-4b54-9ee6-4dfa0701939f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59bdfe1-5b91-4798-b19a-cc3219d4a415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946d566e-e0b3-483c-b8d5-2a9f85793c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce7a369-c2b6-4b4f-8ba9-d0033bfea76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a22b16-31d0-428e-830d-5f8eed21fc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837f5ce4-0955-4b4a-adf1-a5f85f04b833",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617eefa7-4add-46ff-a0ed-2a8c1e3dbad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed126b88-8c97-4478-ba17-074e249f6481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4db6f4-834b-4e58-8243-7e3f9c753c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4266cd2b-e002-4da7-9259-7a2719e66e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86436793-972f-466a-82b6-f8e0be80ccae",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c595fea7-3990-47d8-848e-320d9f040b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "864ea618-188c-42d6-9f03-acad4140479a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fe0e53-6023-494f-b7c3-f4b5e9c97c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743fc938-f7f1-48e4-adb3-741f6a97b889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2004cc10-0328-4104-83de-94c9e66fd21a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bab93a-27b7-4eb3-a11e-7d711f06903d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64bcaddc-4fe2-49e1-b67a-8e3ddfc8f4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd04e39-55d1-4cf6-b378-5d0cbce164bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c939f64-62d1-457b-93cf-a9cad7a5cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c06e70-afb6-48be-ac8a-25ad55a3dacd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd038a5-073e-4941-83b2-fca8ac83cebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94adb3af-c48a-40c9-93e2-5d4dcad91448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c950511-9334-4d1a-af76-e1f9ccbc3ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c6d4a4-c9a5-4e7e-821b-f55374db1be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66b9ca3-bc63-48e0-874e-11c7669c00c2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e245f0-71f5-4009-92fa-d3dc7a6e7bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df695091-1c79-4cfc-902c-b8256a0437a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b6c67e-7485-4038-bf4a-60b20c62470e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2ff6c3-f2ab-45e2-a88b-8ee4860c3e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb04322-3007-411f-bd22-51a365b9a0b2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89943494-d3ee-4054-94df-4dba1fe82f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1dd56e6-4ffc-4c1c-ade2-7b4fcfecc4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8866fe-1ed7-43dc-9850-10f4a3f4db73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcaf3890-0c83-456f-8429-ed0f759a7e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7772cb5-e3fd-440b-a70c-2788d74b21be",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddbd675-28ef-45bb-ae88-054cbef17663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b473f8ef-51f9-4700-84c1-3188a918ad4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4851f226-b2e9-4e6d-9b07-2cfa765a8e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75984589-bca1-4229-bc9e-596469639e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58928479-20a4-49c0-b1fc-2217bc211ce8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1358581-f2f2-46c4-a3ac-b622948ff66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb956e71-addc-4723-b31d-0a4153de883b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "300f08dc-9956-4f69-a0cc-af265cb512c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f7207a-094d-4b9d-92a0-c25440fcb663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a97e8b-845d-4f39-ae72-ee1ecf1ae6ae",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d331e1db-8a64-49d8-9698-75d2d5d2e128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77bf2865-8719-4e72-84e0-fdeb3b0badd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc24c378-9324-4576-998a-b0805537b8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261c2988-ca54-4199-85c0-1056ae87c6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44f76d2-43e4-47a0-8c2f-589d741dbf46",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005b79e4-37f3-4396-892a-113da08b9e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415b4d74-6eca-4cb2-b2f7-60fec1ac0777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed31357-e22e-4ac1-9610-22b3d7e3a5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6709a5e5-9ab8-4d48-b51e-8db65e22a86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27c3066-6479-4e0a-92b1-63873ac1f4bb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da91e3e0-1589-47b7-a3bf-a01f000d8786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091c0625-c16b-43ba-9380-38f9d6d71aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d709bb-5a2c-4617-a740-92abc75c8f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31386438-fa10-4d19-b40a-e70269bd3e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cc2fe6-03bd-4045-bb26-3fa912e8d7cf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baaa99c8-eb66-4662-a5ce-c90ab757ce98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db013f77-1379-4865-a444-904d8d1e7ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9c3db2-eb7c-4d66-bfc4-e4f93cd0955f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11003ed5-bfab-4935-9c30-2ff553006c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e098bcf8-8f4d-485b-822b-e058da99da67",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126d8fd2-57ea-4799-8fa9-96e25f352a2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a86650-a474-4f44-bf34-a40ee61c66b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "372a42b1-6ec5-456c-8d16-c40f3bb06b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3021b909-df2f-4c7a-a6d7-8c4cd7192842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2dc305-7e30-45a7-9dd4-38f8156b9d2a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4cbeb4-26d8-4a9b-a93e-5c76bece1c4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba1a125-1fbb-4945-8889-6f6cca7494f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b706db1-fa6b-4d57-8761-72a9d735d53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1780e6-fec5-4cac-bcec-b6ef9886e2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4b30a2-84a8-40ba-bfb1-7a72b0c4e54e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f217cea4-6ba0-48b2-9055-23a2a657ec2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0dbc230-3b5e-46c5-b433-cf97dacf9d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a8c9c5-40b2-4ea0-bb77-cdd6f4216f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9a2bef-e06e-4880-a63f-57d1d04a77e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc54f0b-1f02-4230-bc96-bf18367c6a6b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09347c4d-a7d2-408a-a06c-2650a677a1b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec13e193-02ae-456b-a252-bd916994a4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a545b06c-feee-4e1a-952d-f21b73a39d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b205b0-f23f-45e8-b451-8d690976089d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588de730-905c-4568-8bbd-785de80f7309",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6c44be-3f13-4a73-8a92-ddf2dc0f4298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420dc145-6ed3-42b2-8ac4-49116f03baca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9289c4-ccd2-4cad-88f8-33d104e30570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7cf7c1-e027-4767-9b03-19c1b02592d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7e29dd-081d-40cd-8838-054e1617b34f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b490c0-25b8-4d32-b328-e93aa2b9c9a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d317e3-ffd2-4c20-80ea-226aaf6b1374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d6b236-20af-4f6c-a98a-b1d8b17c9abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf6ba2b-ee1c-41e4-962a-2a6e8b5b9a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04e973e-d25e-4d82-94ec-878886f9039e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7298e32-db49-449a-a5de-a0c31fee0aba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1995e6f4-4786-49ac-942b-32353247b33b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e1958c-feab-4333-918c-f9483d015fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e4fbc0-caff-4617-ac0b-44a9855a8482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12728a77-3043-4ad7-9819-267046544bec",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dfe94a-7fe4-4fdf-a1e7-c7ef00f13362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef93d54c-0586-4e9a-8fd1-d6589a87d432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fa1012-8402-4fe9-9e32-7b8084b6e6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4fc559-3074-4984-b0ae-64ac5490f8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa1cfc6-45c9-4d4a-8a30-1dc61b260ece",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3225f870-e4cd-481c-8eb5-6a434e11437b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf9d5b5-62bc-4c3b-93ec-734ab6106748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba5c24c-30a4-4934-af2a-07ff704584fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6beeba-9a32-4d6f-b62a-bccb6955ca34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57639d3-e1d8-4af3-afd5-6bd20a9b2c97",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f7d53b-9c5c-48c6-bc35-0af0608cc22d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53123c9-0fd9-4c3f-b429-7feb5712e3e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1351a6-5861-47a7-8615-70306d66f1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8922799a-94f9-402c-92dd-e555c42f9b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c76c07d-76d4-45ee-aa2b-977017cc187c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efaecc9-abff-48f7-9048-beffc052f515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcc5790-0712-4c37-a923-792fb2cfa8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db7fc5e-2be9-4ce0-87d1-b0a721a05e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff34c1fa-4ef2-4eed-8fb7-7046f6c991fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5b3f93-c4fa-4d14-846f-1b7c712770d4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d43c009-2e68-49c9-84df-0a703e1dc2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05beac3b-b83c-4961-8c67-b2e0e45f755d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f976a35-d1a6-41d8-9f23-580e6d2c366b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e4206b-511b-4aef-a64e-d2d99290bbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c3a4a7-4083-40f6-987a-37f08389cfca",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5ce6ed-2f18-4193-acbf-9b07374a6683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f79fa14-68b7-4875-9e31-b954caa1d7da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1481d594-71ea-48e0-8850-7663ef334d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c228a4cf-8007-43e4-b81f-b48a44f98304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b36cc22-d6f5-4502-be9a-7dfa4ee733cb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904e4a86-be11-4526-b74a-6544ba1ce4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdc0e42-c38f-41eb-aa43-d3f2b52d60ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62473dda-aacf-4bd6-9392-044171971775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c507f30-e5c1-4d99-b5b9-79cf3bf18e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749ec3b4-ab49-4759-86ec-f6e91078166a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da514b59-ae39-4af5-8d8c-57ba929f92a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f55701-6c06-4639-b950-27ce0a299496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3168c25-70bb-4023-a909-0f45393511de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cacad735-8343-4a1d-8eba-c885eb4ab7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daee0356-3266-4808-8977-777403accb76",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e862e2-f5cd-4440-b647-2963f6531545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4bb5df-4fef-4987-87af-ab24d0dfb081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325df0e6-a86c-44ac-8b06-04bdb5e3a7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12b1354-cbf3-409b-a01b-e461484e716f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d304e7-10f1-4596-be07-8ca30e52a627",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9774a0ab-25c2-4f7c-be7f-7e28a3bc744f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6b7c00-36a7-4ee6-8234-3e94799de960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935e6280-0e3e-452c-9cd7-6fc84e0cf93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1bf977-216b-4049-81f1-8816580834b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ddc4a6-ccd4-40fe-b522-b7d5c0d1f2a8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2735fee7-4c01-44f4-974e-7b3cdb75a3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d8332d-8715-446e-841d-1e9cdb549e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd02603-092f-49a4-bfbe-663d0bafe3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8974a630-8798-48f9-932f-7d1dd0b565e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d0cb7d-0741-453e-996b-27caf0343fe0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3f0fbc-db57-40c5-a4db-8136da5f11cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb7a408-395d-47a1-96b8-af43b187d727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7efb790-965d-4df7-aa73-330fd85f1445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369c4c02-91d2-4d9b-8ae7-2acc4758105f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520a83a4-a05a-4bdf-920a-02ec306ebc55",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505ef7b2-aecb-4b28-8d50-7cdf9eeecefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bfa230-180f-46ea-86b6-dc2692ec4fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eded37a-b3b6-4d01-83e1-9440de0b653f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97797e66-c13d-4ea0-a438-eca2cb52982f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce055308-f4fa-4ebb-ac07-845f5a6aef75",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7dd5ade-ffed-4d39-90fa-48d807d5c6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a37eb2-c742-4358-9572-92aecc3785ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b49e93b-79c8-42dd-bffb-21bfd2dc7499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bfbfd26-07a7-4160-945a-4d3eeba4c25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e2d592-421f-47d1-a3bc-42dc9f706393",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7e342c-7303-4680-a839-8a4104008f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5234dd4-a77c-4d6f-9ef4-7758e94abd43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771f3f77-ee49-4310-b261-7d5067176ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbd03b8-3a22-4b09-a60f-1d24cedec26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9ccb18-5a96-4ada-91c1-da0283e8d227",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892a2cc0-1499-42ae-baa2-cb54c820c665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d1d0ba-0676-4446-abe7-98c1ca6e9901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42319709-94fb-4b71-b6d6-d807a5b68a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a68427-9aab-4d7f-9265-cdf36ec3d6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d71a60-45fb-4464-a394-d053553a4f97",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1a2343-6709-4f90-b07f-c923b9813608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29c4479-b994-4c23-86b0-e3fac7299911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558cd0b5-037b-4a90-a06d-512b48b8bffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead53d55-860f-4da3-b9c5-b855531e75e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2467b7-2afb-4a99-8af4-959594270b1d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba925763-0156-4ec2-a9a4-c51c5b4feaae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cf6f47-1e7a-4565-8ffd-66180cebedf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca54879-c024-4dff-86a2-c4982eff28da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767bdcd3-57dc-499e-8592-58ccd903b0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0120be9b-db88-4e24-b6d5-1abc34978893",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288928ae-2b49-44c0-b878-44ad2c39a4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6607c7e2-ba44-4a70-9575-2941992fc44f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6115aad-9ed4-4b32-bb14-564e7966a31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3628bbf-e75a-430d-bb6d-611a78587768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb700698-f167-431f-9e09-17ee7554f535",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6780442-3208-4837-ad2b-dc93b9009458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1fd7ac-093c-4ccd-be8c-599f8122a9a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3235cb7-e439-4c5e-8897-14153a6db4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61506e6-8cfb-4724-8f96-c81f88a2855e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d0547f-8b57-45b7-930d-35618175c447",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5bcec9-2780-41bc-8ff1-c65b1974dd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f102f3b-9739-4676-a02a-3fcbaa975ed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c313d47c-d768-4714-b656-fa8c0cf1b3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac49182-140b-4fe4-b1f7-e4677ac52ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac6e799-e1ff-49b8-b664-4b6bbebb2f71",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e85074-6708-4360-8319-40fe7b649994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5172a5-9ee5-4735-9161-b03323df36f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca012b75-870c-47e6-a2bc-8098bfee5c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c959ab7b-ba67-478f-983a-aaef759380a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0390c284-758b-4b54-9653-0923bb194924",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aae8a92-ef67-4206-b433-8f84bdb6fb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a535dc1e-50a8-40a6-9e19-b9980b85f2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d963be-ebfe-439d-b075-ad73db8be560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003484b6-ead8-46a4-a7f5-155ba0771b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402e26be-5517-4d7f-836d-d55dcf8e18bd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f91e80c-8e84-4b1a-9a69-24d8fe7ca390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3273bc7-45a9-45c9-9113-2605325451ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4dd186-6d36-40de-8634-45a24cc1dcc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d53001-c41c-4cd2-8d58-df061c832956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6037aa39-6513-4aa5-b89a-adeaad5757f0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992d5f9b-9282-411a-b65d-fa2b8b4305ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4443f6e0-b7cd-4afa-aae0-e69533498d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431d0c16-2f23-49de-a116-8181834b345d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "820e8c6b-1ec6-42ad-8061-533575b3bc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ee53c5-6054-4542-9bf1-f1f32fabcda4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb2cc8f-4cb2-49c0-b56b-8858a8825b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d0e544-1350-4d8a-b64d-49d302346dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39093172-5899-40a4-b18b-3352f952d215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fa004c-6536-4f82-83ee-1fdf40084a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5841013-c738-42ba-bf81-3f7c1cde2439",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5722b1af-81b0-467c-8874-d677ef0f960d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0866c0a-273e-4e2f-b620-97e4cd4d5a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcab2a7-4eca-4a53-8a13-95c1596e6095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb0cb54-a9e9-4b40-be59-b0829d287ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eb4a56-005d-4987-b648-7cd9793c9377",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df02b0-4a5f-4b38-9327-de124a701626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f5c1fd3-66b4-45ca-85b8-7893c2c66487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5203c77-d3c7-40c8-8f4f-eea453b062de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20814374-7d99-4496-be68-f7f22dc3042f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b86e1e8-1aa4-48f8-a521-cb5396fa6fe6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8bc506-d419-4f36-b755-b07c1bfa41fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311b5e85-b86e-4881-a2f2-552e143ca820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e27f7da-1423-4d0d-bf39-3808076b78cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf638f5-1cc7-484d-af1d-7e2786d74d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a0c3da-097f-4eaf-bdc0-0ff38aa5df29",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cd8b9f-8075-45e0-be5e-7695be66f1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4ed7d3-6835-4891-9876-52db56892c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9751bce3-e107-43ad-aa36-f27e9f7aabcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f41f99-0c1e-47ea-8f6e-00d493935bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10908893-e639-4430-b9da-39b549ade139",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1464b546-ff63-48a4-8a5c-8f4d7ea5f961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d358524-70e6-49c3-a90f-ede30bb18452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa5b122-c25a-4ae9-956b-4881114edf25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f61d9e-a7eb-43ac-947b-64128907a964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54c1d04-ffb4-471b-aa79-fbc65bf69f52",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfd2596-d350-484a-a9c6-84a4f801e588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f08fb1e-6685-4c9b-aefb-3670d6b8913a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ec93c6-272c-48e6-ac83-7bb2f37ea0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4cdd1d3-1667-4980-a1fe-5c52de8cd233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08733142-7380-48b9-853d-1cc2840d7874",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbedfe4-8a66-4c65-adf8-c52254660060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abca27d6-2396-46e5-b03d-c8ea76b122f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148aa7d3-4f8d-48a8-9072-2a61e2cf9d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9f5c21-d48b-4677-927d-ab5a7b8fddd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11de701-1b43-4e75-a4f0-b201806622c0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f896e3a-efea-4f35-ad98-5971ab47e4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f06ea44-18e7-4f69-966e-39a373fec9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2b92b5-0f48-494a-9854-d8d60eff5271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4af143-9f2a-4b7e-ab3e-f4cc7f33eb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721fc0b4-ebd3-4e04-ab9d-b447daec4777",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb5b169-c25f-464c-8ace-11bbf3440fca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f818dbc-10fb-4804-a63b-806231986f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff82f1cc-9639-4650-b4cb-2cb12e42e4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8536f8f1-90cf-4383-93d5-cf1a3f40f5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9856101-131b-4eda-a9a0-26885fb5a96e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f853928-093c-4132-9e2f-fa9a09b65624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4adbfa4-2702-49fb-a493-84fde4109677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a1ab6f-be1d-4336-8a21-3fecc948b03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4ddb14-5f3f-4275-9f37-e87943bd9560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fdf13b-373b-4d1e-9196-96030c91c736",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1c96e6-de68-4d46-825b-309a8803e93b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db913567-8d74-4142-aad1-f2b4629d5a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9de254-540c-446a-b79a-0f89b9d71fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d06f49-a75d-4f11-9c6e-798419967e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a506cc72-d968-4ac9-a68c-87f925e836b5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5892280c-0003-4876-81e2-cd49e12199e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e41a43-078d-41a6-8303-111413cf7bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6723de9d-0960-4746-93ec-1d9ab59a71d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95edf97-0b10-4327-ac99-fa96692d27f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703e1f22-e601-4212-bc37-3d0c6386250a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ca1442-7a04-4b53-8079-cb638aedf5c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4b81d78-519a-4893-be07-c5f0d9640b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d649d0-1dd0-42f1-b8c3-16264f082310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4fb1e5-e42e-4bd0-993e-f25ccad613a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8985a7b-a495-4156-b849-f495298c90d6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332e3115-9da0-43c4-9578-697997dcdd7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b70ccc4-5c64-44c7-8340-6756522f75d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966e1787-8e16-4301-b52e-d102a2a9db49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e93e2f7-1de0-4c37-a028-eb44adcdb320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fe5a84-f4a2-43cd-985f-48f80ef77709",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a9bee7-5629-444b-ab19-726fd98af36a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b27b26b-41e4-4318-af33-e4e787ba3900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006ef60a-a1fd-41f0-8c61-77bf814d84f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2069c9cd-0e99-4326-8779-2feea65d277a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0006c4d5-156e-4336-bdc3-d5ecbc153b66",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add032a3-af75-45f3-af50-410ba69577d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745ad16f-afc1-4f4b-998e-4d9eac14c623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2503ac0d-b2e9-4aa2-94c3-ddd2888df9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "accee887-aa20-483b-a5ba-7f72728564b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21087ba4-91b7-4220-bddb-01409a91eeaa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030e79e8-f6c1-4ca6-9264-686b26738447",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a35bc801-802e-4c96-bcc4-8ea29c3eda84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27b46c1-e460-4faf-b27a-014dc4ef2cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ff31ee-bb17-465b-8daf-bd6f60decc69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bf9e4c-63e2-4cf3-92e7-16abd1c8124b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1b00af-8f64-4f16-ad8c-d69199246c64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3432efb-5f46-4ed2-8276-dfad8491ac29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fae1b1a-c2be-4683-8e55-5a15e095b783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6495abeb-0af8-4171-8abc-c43efc4cf056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9308d6-a0d5-4c4b-8849-faace292f6f9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5ba3ff-5c87-466f-b314-7c2b81121ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd53bf0-7745-4b3c-9528-276e5647190d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccdaec1-40c0-4d1d-bda1-92eb6d7c4684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7278ad6c-62c8-409b-9fee-bc6bde905147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a202aa-2eb7-4c5c-8b54-dd6327c4da18",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bed5a42-c93e-4c4d-914a-a9ae3a206129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce3fc4d-06eb-4bcd-ab85-1b6ae3e149db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c4f287-5df6-4f83-bfc7-f6e01ff980a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89df22bd-3a02-43d0-bd73-7496d210fd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb3519c-de26-44b0-9a51-df306a8de877",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d361b97-77b0-4877-b0dc-72b4f1c5600b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7098174d-20f2-4887-8d4c-c91542e334a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84827e7f-27b1-40c2-91b9-dce00dbd1dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e2ea67-493b-436c-80f4-97a40e34d25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27216e8f-01e4-43ab-b7bb-f246698648a4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a7d34d-f0e6-40c8-8461-c3175d9ba5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9392d53f-a971-49f1-a2f7-8a1b26fcd125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd15f98-2a52-4a67-b293-5fe80cd59db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c810eb54-9b60-452a-91a2-85f837101266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e368e5-28b8-49fe-bf13-68626da20b0e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7534c23e-efab-410d-b5ee-619695821fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53a4264-d664-40a5-a934-fd520c9b8f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dc8fbe-4f0c-45ee-b59d-05ffa77fce05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0d94d1-39d0-4d33-ad91-dfe5ec5c931c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce49bcb3-6e7d-48e2-b62e-1f085031d2f9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab133a29-6330-49c3-bbff-43157bb7e869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b224b53e-2086-4b35-86e7-a2408ef2dab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c660d61a-c3ac-4296-b5e4-526c6b9e1d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f01443b-710f-41ae-9fe8-4dfbe98ef780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0039d1e8-e838-4f0c-a285-97e189d06669",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66de718-108a-4b19-9338-25ebaa6b3ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "defb2a91-a44b-4c44-8a1b-375453d689ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fd2f12-ef1c-48c6-9824-22d024035ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45478cfc-24cc-4354-a5d4-455ffc5a7626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0988d73d-1630-47ab-9e1b-e173177c088f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad6a04d-cd9f-48a0-aac8-61c16f4d8fea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "530539ad-5943-4d81-ad6b-2d4248818c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fde22eb-4f3c-44cc-a578-96f8f8c79d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb978f5c-8cb6-4ce1-8748-c75d21ed47b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934c5afd-13f1-4d25-9c17-713fb29d8faa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1beac93-1246-4528-9811-00d70d523a92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83cd345-05db-4891-9c67-f10a96368ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297b4993-3651-49af-b0e5-d187e77110dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6048af44-6eed-4212-bf21-c853fae713ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7a4f88-640a-48d9-90a0-fb9e7a504362",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361a180a-5543-4854-8396-1054b9ec582a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00617260-9561-4a80-b76f-404d7b99a0e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a24c415-9ce5-48ba-a492-779d4509dc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39fe6a3-b476-49e4-9ec2-2f3c1e31de88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aac37d-15fc-42a6-b4c3-8473805d1dcc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4582bb82-b0ce-48ac-87a1-b219d11c16fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c58cd14-7dda-490c-aceb-0519f59fd256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74b4363-f389-4b53-b125-eea4a7e65033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e51ecd1-38ff-4aa8-bb09-f7c91b49f3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698ea797-c247-452f-8e70-0abdbecf5cbb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad014893-dd48-47a5-aa63-340f845bb805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0b5783-151d-46f6-bd36-2545cfcce28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd538514-93c0-4415-8aee-17899b6c3318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2235b68a-e4ad-4fb9-a0e1-cca80995534d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc4ef04-9c70-435f-bb68-d8165f2827e0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca00e98-9a75-4cec-9892-64d4b0dcc4e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6993c0c4-d21c-4dba-b3a6-69f8c99fdc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ba1efc-fd2b-4a74-8495-4fbe4438b945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf76a55-bb47-46bb-8aab-1abfe742c218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0176e356-bc88-4cb3-8d1c-51e8be94da3f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1153d0-c2a2-40a8-8827-ea689dfbb471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec9edb1f-8ad8-4a0c-bb67-d6266df74dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0394dfb0-b182-4939-95bf-cf4389933738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4050ba6f-3afb-4ff3-9c30-d221e96d3b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1735c471-6cbb-486f-835e-87d3af29d8d1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb77d9c2-5ef4-4e3c-9e51-28b48257de9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d682003e-dad2-48ac-a044-129f78829044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd29e43-6ef8-4793-b271-dbff9acd2168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd00d78-8c65-4af9-9fdc-661ba712d621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4d91b8-568a-4275-9c63-dd9fc6bc8c57",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e56a5e3-a397-4b3a-bcef-2ab091b08370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f440b8c-e42a-4512-81f5-fff5e28abbe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a2ae05-9ba8-4981-bce6-f24d662fd669",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0579bb-0254-40c9-88e7-c9d95358aafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fb0cad-1045-4cc5-a00b-853f126f1f67",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e257d338-c942-467b-8acb-add89d849d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8f6963a-27f1-4110-b39b-e0b1cc097634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97dc5da-1442-4996-b844-4ccac40cd5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1fc665-a804-43e7-80ef-d788a8962ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951a8aa1-4e7f-4e36-a1ff-d4262d47c6c4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fadba56-d8b7-45d4-a337-900532fddfa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96167b21-9b49-497e-aef4-adf783c9f795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af33070b-5900-479e-98b1-dde0733d5336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56cf083-c863-4809-a499-78bb0c04c849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24923e9-a2aa-4944-bafb-12b6e8f4b46c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4182e38b-ee02-4690-bed4-b2521e73f55c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7b2490-fe96-4b2a-b8b7-545600756254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd67750-734b-4ff6-ab26-44f6c0667e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04aca54-3f0d-49d0-84b9-c15c5212bad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf30c52a-2141-406b-8c5c-4335e9a6cd3e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bcb4e2-4f11-42c5-8c89-234dda6e35d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db540a33-af2b-4064-988b-f89b2de2f012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db87434f-e7d0-4018-813c-011263f09fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a243a8-3725-46d9-8e37-cb6667b442be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a861e846-5b6f-4cb1-86e6-f0512a627ba8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9534395d-a688-4fba-8aac-0f00d59a716d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f8ced03-8dfc-4b77-8857-652eaa8b3c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7167c330-0e09-45fc-9ef8-ed0ae73253e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14088de-2163-4855-a7c0-df4e79aa760e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e33dcba-fd59-4e07-83aa-b8918f0974fb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626c97f5-2d63-493e-826f-2816769de977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a03be4d4-edc1-4e0b-b54a-dfe4765a477d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e386e2c-2859-4f85-ac8a-05cc2bd6bf42",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d726e7c-6686-40aa-b7b6-c00b63ebed53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3656e26d-a570-4eb0-ba31-6ebb3f441154",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85050516-cae3-4fac-86a1-4b4cd020a3ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207540ab-f488-4a03-b5e9-cc263c1ed145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb5aac8-57b5-4ab2-9f93-5661c6005db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7ce921-df86-4b01-adcb-18dd810595fa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c315e946-d423-4113-ad2a-bc6dc9576aa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96ae2544-8e08-40d5-956c-ac939ae332e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04fdf557-1c4a-4992-8d9c-3813a6dd3115",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cef22c00-b43a-4970-9e0e-c1eb9dab1d56"
                    }
                  }
                ]
              },
              {
                "id": "a695d7d8-6637-4f33-8c63-26ceb541f38e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2f45167-f3a1-41c1-8aa1-385c05e1279e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61588a19-0d42-4978-8adc-40a33ca2cb48",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "93229bf8-4e95-4234-9931-46513c84622e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1d479d-9a09-4d11-8609-540dfea4b779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92421752-d254-4986-9c0a-54cab474c21a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b20d1d12-5e96-498c-85c5-38a67efccfe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d967de0-97d6-4d98-82da-96cdf9b64889"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0435c906-6037-4c44-a142-11e63d59fc7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9cb5c01-1072-4337-aebe-a6d2a20838ee"
                    }
                  }
                ]
              },
              {
                "id": "75728259-2682-41e1-8c25-d5f5cfc9f6c4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0105bf89-db4b-4652-a57d-80de35952410",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca969406-b9b9-4f92-9017-b99f7a424c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0465cb4f-fc3d-4b09-875a-a89bf815c359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1db3d0-8982-4e3a-bf9a-3aff1dafae1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5673bbf7-9267-4013-8563-8902ab9f7087"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5532be3c-fbdc-4260-a49b-4b3a60d48735",
            "name": "Positive Testing",
            "item": [
              {
                "id": "305f5840-a42d-45e7-b5d7-5a0b203b5af5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b770c78e-64d6-4e8a-be2d-58ebd60200a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "728a856f-edd4-4036-aba4-233f577b38ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13f03ade-ede8-4bb0-8c29-c482ee20e10c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d609105-1bec-4213-aafb-afe302859009"
                    }
                  }
                ]
              },
              {
                "id": "e490d379-de8c-487c-bc74-f0c6bd5b7322",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6753d030-ba9d-4dd2-8bee-f18a7424db54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "01268795-9a9a-43f2-ad8c-d955dc3dee06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d40aa3b4-30fb-4c5e-933f-734ff1aaaac1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0613e39-8a54-4f93-8ed8-fc03fcdcea8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89f7985b-2547-4ee5-8403-56ea79bc1a96",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4011a7fe-fb9c-422b-8662-25923c8faa3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d30e9de-a5c9-44ca-8037-d3503f90c46d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3ae4572-d2bb-4f36-97d9-9efde5443004"
            }
          }
        ]
      },
      {
        "id": "10202454-c77f-4879-a493-2b9195fbc64d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "68a0a1c9-d647-4175-9594-e2fa4cf7b6a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb715888-fa4b-42bc-81b4-12a0f09ffffe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f583893-5905-46cf-8b6f-725e246db0f3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7304d839-45a0-482c-8eb9-d626b66371bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c32a29cf-5a10-40e3-8773-1dfee1151997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ee9411-0237-46fc-a8ff-2dc0d3fd7909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d0b3fdd-5385-4188-9178-7f753c5411de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2994a9da-5e34-4c70-ad50-268a6373c5ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "003ddd17-0b8e-49f1-a253-9c77269f59b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2123a8f2-ff65-424c-ba19-de6f46f6871e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6cea24d-73b2-463d-a052-f62df7b14779"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "029ac01e-f982-461a-bc25-e3105919c19e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9e04803e-9956-4447-b4ed-332e3a578ff8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21190dbb-6013-4a45-a900-99c1f93f71b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24b5de9e-34fd-4792-8823-f2d4f35db922"
            }
          }
        ]
      },
      {
        "id": "771bf9c1-3d34-4f76-9bcb-975f9486bdca",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3f7ba347-c081-4a3d-a43c-9ae100cf05c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b75419af-79f5-4a84-917d-b23e7fcdf930",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0071a2b2-9d89-4aa2-be3d-ffb62d5ad4f5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5628712c-353d-42be-bb96-83add94e94ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7071bfe-7646-4446-a16b-08b3d017718a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb8dad3-e4a9-4221-8b7c-584b06ce7408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bba0aadf-f148-494b-9a35-d17b434569e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99cf6668-7438-4d15-9e9f-8fca431170fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "470739eb-1535-4a82-b597-4f96542df570"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b01ea498-12c2-46c0-b988-023f1754eecf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95a12dba-c386-4b19-9373-a9c11ca28d31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bb84a18-cffc-4bcf-8dae-d605037515a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cad29f31-b9fc-4e40-9cd3-42faeb518d88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d381d38-b449-42a6-a0f7-b3942cbe7043",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06a6bb9b-dd23-463b-9267-7e68f1fdeabc"
            }
          }
        ]
      },
      {
        "id": "7d475d94-fa86-4c57-8bee-484e4ac73c29",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f76c6041-e393-4f3f-b49a-a73aae5ee29f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53a4ae99-b717-4056-b310-84d4fb777891",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c644857e-7cd4-4cc1-806c-380d62966217",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c3ffa1-18d3-46cc-9605-ab3b716a3730",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f67e9ac0-eeea-47aa-be40-2c92d6302fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9d060c-9169-45bf-8271-3e67c4dded87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfc36417-45fc-4d18-a5e4-f0e4646a3265"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cf7277b-7040-41b8-aa45-98e73f82e674",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3107f5d8-39c9-48ed-a987-9f1a6dcf4156"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a9eac7b-4f14-4565-947d-4e579dd4b3a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be5de254-a531-4e32-8cc0-5e99cfe65ef8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d2a93ae-c2b8-4665-ab01-881967a744ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a757168d-4475-40fd-bf18-9738f87c255c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0724fcb-5f87-406f-9c67-16414411d3ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfc2bf21-6e4f-4af7-82f7-ffb39585b560"
            }
          }
        ]
      },
      {
        "id": "78c1bcdf-4662-42c2-bc42-a770000546b5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "706d5ad8-abaa-40fb-9350-9f578cbf947c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7db20a9-b716-4b48-a8c0-71a5d2627b42",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c73aa601-b3ac-4ea0-bdff-5269329560ae",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7736eee-5305-40da-b397-4d53315ac886",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d8bff71-87ec-4947-ab97-a49b97ca18af",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 140.42605633802822,
      "responseMin": 13,
      "responseMax": 2180,
      "responseSd": 273.62704291944885,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691195924110,
      "completed": 1691195978465
    },
    "executions": [
      {
        "id": "e9bfef42-89ce-42ff-9244-15b972393d58",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6fea85b8-80c8-4633-ab7c-f3c2e3bef9fe",
          "httpRequestId": "9a0b5f7a-7ad5-4536-a15c-d2736de98c62"
        },
        "item": {
          "id": "e9bfef42-89ce-42ff-9244-15b972393d58",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5ff04d26-9f96-4114-9046-d624d6776606",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 0
        }
      },
      {
        "id": "03763738-dfdc-41bb-94a0-c5c77776a3c6",
        "cursor": {
          "ref": "bdaf1583-4706-4a7b-86a4-171711d10948",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e6b9a7f4-f096-4b78-a59e-6a38e26e907a"
        },
        "item": {
          "id": "03763738-dfdc-41bb-94a0-c5c77776a3c6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "521fafa2-b859-4a11-a504-4dbac64d6d6b",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "ab3122a9-9bb0-4003-913b-230975cc1569",
        "cursor": {
          "ref": "989ca34e-13c7-4bee-877a-247b65c5914f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a97021fe-1cfb-4532-b583-9d1d3a149018"
        },
        "item": {
          "id": "ab3122a9-9bb0-4003-913b-230975cc1569",
          "name": "did_json"
        },
        "response": {
          "id": "c5328ba8-ec69-4672-b9d4-7c53bb77cb20",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9875e57-12b5-45da-b9a1-18fdc2b21c1d",
        "cursor": {
          "ref": "3a298160-250b-489a-96d0-ebac6804a8e4",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ea9eb67-97b8-455c-a3c5-f0e1d67e93b9"
        },
        "item": {
          "id": "b9875e57-12b5-45da-b9a1-18fdc2b21c1d",
          "name": "did:invalid"
        },
        "response": {
          "id": "30ecaa2a-71f3-4cb5-96ad-612f86ced145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9875e57-12b5-45da-b9a1-18fdc2b21c1d",
        "cursor": {
          "ref": "3a298160-250b-489a-96d0-ebac6804a8e4",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ea9eb67-97b8-455c-a3c5-f0e1d67e93b9"
        },
        "item": {
          "id": "b9875e57-12b5-45da-b9a1-18fdc2b21c1d",
          "name": "did:invalid"
        },
        "response": {
          "id": "30ecaa2a-71f3-4cb5-96ad-612f86ced145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd99fc58-c61f-48ff-9e6a-e2da10a64671",
        "cursor": {
          "ref": "7bb5d00c-d3dc-4978-9580-c94cadd5b623",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d7973faa-d007-4c49-a7c1-5507c1a1fa4e"
        },
        "item": {
          "id": "fd99fc58-c61f-48ff-9e6a-e2da10a64671",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "439bbdf5-6446-4116-9c1d-5717ac9ec65e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 116,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b13316-3359-4665-b1d6-60324fa6140d",
        "cursor": {
          "ref": "60953f7f-d9d4-440a-a0fb-4dee1ce613e3",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3363df9d-e46a-4704-84f4-2f67d351c3e4"
        },
        "item": {
          "id": "b3b13316-3359-4665-b1d6-60324fa6140d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "14a3eaef-c144-4b28-a9fc-d63135bd664f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556f756d-b7ea-4b27-8acf-de8933e7bb09",
        "cursor": {
          "ref": "2aa0e9d8-f2fc-4d2f-bdd3-3c2d6de41b22",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7a306c49-26f4-4ce3-9ec3-c13346b3dfe6"
        },
        "item": {
          "id": "556f756d-b7ea-4b27-8acf-de8933e7bb09",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "76556f43-7af0-4417-b0c7-a7a08346d85a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ada673-8477-421b-9234-4ef625a78118",
        "cursor": {
          "ref": "0f561502-bdf1-413d-addb-06c1428c7f36",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "343a3067-31e7-4684-beb1-437ef2076700"
        },
        "item": {
          "id": "e3ada673-8477-421b-9234-4ef625a78118",
          "name": "identifiers"
        },
        "response": {
          "id": "7c5f89ca-781d-495e-a8aa-42762c0359cb",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9407d65-2e59-4286-9272-5dc7d5690eab",
        "cursor": {
          "ref": "ee4a09e0-522f-408a-aec2-770ce9efb988",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "28be526f-25e5-4d45-863a-8d4c1b7f8355"
        },
        "item": {
          "id": "a9407d65-2e59-4286-9272-5dc7d5690eab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d6e9fe21-e196-4539-9490-9a9a6d3c0423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4f0589-7d0e-4174-8d80-05792cd24299",
        "cursor": {
          "ref": "479e4b4a-f6cb-4270-ab55-d64f5e1f0171",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "63015f0e-aeae-43db-b304-6ca76c0f83c7"
        },
        "item": {
          "id": "6b4f0589-7d0e-4174-8d80-05792cd24299",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b6c04039-4f25-4b39-bf01-63c4e87c41c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3d31c0-adb1-4b7b-ab70-8bfcd7d29fde",
        "cursor": {
          "ref": "5260f5db-5a9e-44ea-827d-dd7f5b980e36",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fee637bc-2632-4628-8771-e1578fbb325e"
        },
        "item": {
          "id": "0d3d31c0-adb1-4b7b-ab70-8bfcd7d29fde",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "caf06489-929b-46a3-a88b-7f0e955c26f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee45d44-cf92-469f-aa8b-860eb5da3589",
        "cursor": {
          "ref": "7a641497-3a5a-45a3-988b-698ef35cfad5",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "154a9c8e-06e8-41ea-b2f6-954ff9d1cad6"
        },
        "item": {
          "id": "1ee45d44-cf92-469f-aa8b-860eb5da3589",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "90e03d51-d1a6-4a20-a221-5320b3d089e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c2ed2d-9542-437f-bffa-0daf7f6335bf",
        "cursor": {
          "ref": "8674d2d5-b34e-4186-9968-b420fac3d1ad",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cf94568a-8adf-42bd-a854-fe0e1a9ec25e"
        },
        "item": {
          "id": "12c2ed2d-9542-437f-bffa-0daf7f6335bf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d3f79787-1e46-4229-a794-4c6018fed37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bed62c2-fe98-4dfc-820b-14cce1484186",
        "cursor": {
          "ref": "c795488a-1cc1-4988-a002-36bae4a6adf7",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b09ec15b-a8f4-49d2-b7de-a90923adcae2"
        },
        "item": {
          "id": "4bed62c2-fe98-4dfc-820b-14cce1484186",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "268ffa74-7b2e-45ad-943c-65f0c5464db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a64828-624c-4a4b-b1bc-4f52ee5d6507",
        "cursor": {
          "ref": "7c579872-1b41-4739-8766-9f9b1a5cc8c2",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d97dbf1a-d1e3-4c88-a0ba-369e3463f9a3"
        },
        "item": {
          "id": "19a64828-624c-4a4b-b1bc-4f52ee5d6507",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "90b83e66-318a-44ad-a249-d0dffab1554c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c05c8-b7f1-4137-b477-30d1acda8d4b",
        "cursor": {
          "ref": "b4267ec2-8ada-4fdf-b252-f40cca2f20e2",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "595d2ef7-eabf-4250-bae0-0ec4b1b8ec16"
        },
        "item": {
          "id": "601c05c8-b7f1-4137-b477-30d1acda8d4b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2b93caef-3089-4b4f-96d0-fddbda37ae26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a55457f-211f-42c8-a082-1c0a6e376494",
        "cursor": {
          "ref": "d82fe9b2-59bc-4ff5-96bf-fa80d98746d0",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84fafef5-1975-476c-b781-ece3122b6965"
        },
        "item": {
          "id": "7a55457f-211f-42c8-a082-1c0a6e376494",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e9b0b890-5d72-4151-b054-859653407e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593f13d9-478a-4847-a460-fae633078566",
        "cursor": {
          "ref": "d7894781-8489-44d0-b5e5-d78e73ce56ee",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2e962ebb-2e00-4642-8bd8-69975dc3b4da"
        },
        "item": {
          "id": "593f13d9-478a-4847-a460-fae633078566",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e122c74c-5192-4b1d-a7d3-a9559a42ef20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa39b3ea-8095-47d5-8125-6d3f367d1e7b",
        "cursor": {
          "ref": "e8b6ad0e-a614-4ed4-8c08-733addd8f5a8",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0b45682d-1361-48c6-a9dd-a4d5dc3b7c1f"
        },
        "item": {
          "id": "fa39b3ea-8095-47d5-8125-6d3f367d1e7b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "33b7143e-386e-4583-bf12-83c60e6f3af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4874cbf6-0b38-48ca-b1ef-7d9af2a7e329",
        "cursor": {
          "ref": "38293ec1-75ef-4887-b737-a419dc764b36",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f123a0bb-adfa-4a07-af3f-800dda1b2470"
        },
        "item": {
          "id": "4874cbf6-0b38-48ca-b1ef-7d9af2a7e329",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ba7d918f-44b6-4bed-b82c-e2064a83524f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f8080e-7ea7-4dda-be9d-c128dc2e8600",
        "cursor": {
          "ref": "4697bd09-78ae-4898-8219-6a0aa75841c1",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "93e0649e-f4a6-4e64-9849-b6065810c1f8"
        },
        "item": {
          "id": "41f8080e-7ea7-4dda-be9d-c128dc2e8600",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5d24bd72-84ad-4ecb-961a-cbd507e12b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96533c77-a26f-43a4-826a-bfaa684cc8cf",
        "cursor": {
          "ref": "d03cb4c5-5562-4a01-a45d-b1813806bf80",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b4f0c36f-116e-475f-9520-f5a1933ad485"
        },
        "item": {
          "id": "96533c77-a26f-43a4-826a-bfaa684cc8cf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "af082322-84e4-4e40-bf53-17df00d5e407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2605e885-22da-41c0-a363-b82f0b45c990",
        "cursor": {
          "ref": "51740e91-1620-4cf6-86d0-7476dadefaa3",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7d2a0e2-8345-46db-8c4d-da76de9305ef"
        },
        "item": {
          "id": "2605e885-22da-41c0-a363-b82f0b45c990",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4be75311-1b35-476e-895d-1ea4dd557430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1e11f9-2238-44f1-8c71-bb69d8ca2739",
        "cursor": {
          "ref": "721f7f82-3239-4aac-90e4-8ff8d9d6af33",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8b402f3c-29f8-4dad-a627-113b7a7f22b1"
        },
        "item": {
          "id": "fd1e11f9-2238-44f1-8c71-bb69d8ca2739",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ef75d11c-5bb6-4370-81be-ee36d1c24800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4887bb4-5880-48ea-9ce9-fe27251e5f29",
        "cursor": {
          "ref": "e3691e9c-74c1-4fbd-9e55-01aedab15d02",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "47d841fb-a630-44d3-a326-ee626b93bf43"
        },
        "item": {
          "id": "e4887bb4-5880-48ea-9ce9-fe27251e5f29",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fca3d6d2-6b6b-4bfb-bdd9-04ea03610d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f508f9f9-5bbe-4135-b2e8-68f36bf724f7",
        "cursor": {
          "ref": "2f0e3647-a946-4d8b-8c5d-7e7452a445fe",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "47cb2099-c898-4a69-8d38-de4d056cf3e3"
        },
        "item": {
          "id": "f508f9f9-5bbe-4135-b2e8-68f36bf724f7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dd3a0562-65df-4259-8576-b15aa3cb1a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744776eb-035b-4a32-9ad4-f5ec801deb49",
        "cursor": {
          "ref": "00282e55-cd70-4249-bbbd-bbe42da94f80",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "317991fb-ca36-4b1c-896e-75d1f836c2e9"
        },
        "item": {
          "id": "744776eb-035b-4a32-9ad4-f5ec801deb49",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ea954676-f1a2-4eb6-ad4a-e4d0aa6d4eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b29a854-89b0-44db-b141-9a2be4dd9c0b",
        "cursor": {
          "ref": "8eeb5533-c065-41f3-885b-7bd90cde6f45",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f7289fa4-f1ce-41b7-8e1e-a91ff4118366"
        },
        "item": {
          "id": "8b29a854-89b0-44db-b141-9a2be4dd9c0b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e3b8b6ee-aa04-4585-8dfc-ea62289bde40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fffe90-68af-4fd2-be9a-046cd9aeba4d",
        "cursor": {
          "ref": "68cbde54-4eef-45f1-8ba8-2d551b51bdab",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f710cec4-0995-4878-ad29-202db6900fc9"
        },
        "item": {
          "id": "e3fffe90-68af-4fd2-be9a-046cd9aeba4d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "818e88bc-3f29-4e9f-b2b5-484ba7699570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d52afec-ede9-4f6b-8ef1-7c56aaf12227",
        "cursor": {
          "ref": "c12163d5-3f35-4b0b-9e81-7b534eab22be",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "100c6a96-bbe1-442a-89c9-fe2e64cd7aff"
        },
        "item": {
          "id": "1d52afec-ede9-4f6b-8ef1-7c56aaf12227",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "93cf2d3f-7778-4260-bee6-ce0df13bc072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8adbfd7-4471-4cd4-b7cd-738550ef60bf",
        "cursor": {
          "ref": "c9c333a0-b4df-4246-a0a8-36bb5e8e7d70",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "df296a60-11b6-4218-b3f6-2e8e7b88064f"
        },
        "item": {
          "id": "f8adbfd7-4471-4cd4-b7cd-738550ef60bf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6a20c4f3-5363-4380-86e1-84ce566ee26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff254e7-1f80-4f94-9bbf-79729fcd44a7",
        "cursor": {
          "ref": "6f5e0ce2-8434-4f3e-a212-81850a8017a2",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "79859a44-af4f-4f21-bb06-d834c62e1f11"
        },
        "item": {
          "id": "3ff254e7-1f80-4f94-9bbf-79729fcd44a7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5b8704ec-ee86-47ec-a309-dc17030e071e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c767896-49ad-4d63-b912-0fe11672aa40",
        "cursor": {
          "ref": "447693bd-3da1-49f6-8fe3-18e0f08caa8d",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "122663b7-6547-4c5a-a0fd-38f8918ba44b"
        },
        "item": {
          "id": "8c767896-49ad-4d63-b912-0fe11672aa40",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "aea97bcf-5217-4476-8d89-8685d350d164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17ffd36-2dcc-47b4-b95f-4c41f125002e",
        "cursor": {
          "ref": "a092d8b6-ac39-4796-9627-9cd64d8c50c3",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "52587556-2bef-417d-bf4f-d05c2e8bc47a"
        },
        "item": {
          "id": "e17ffd36-2dcc-47b4-b95f-4c41f125002e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4ab33699-43c8-4763-af01-692a5419c011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed829680-8226-463e-a2f8-5fabcbbbde6a",
        "cursor": {
          "ref": "c757cb7f-353e-423e-b9c0-7853f705a963",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9d2dce3a-fee0-4046-a511-f542f81949a2"
        },
        "item": {
          "id": "ed829680-8226-463e-a2f8-5fabcbbbde6a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "faedbeee-f942-4d6a-b53a-bc392643ab79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac98b90-80f9-49c5-9cce-8a596409658e",
        "cursor": {
          "ref": "d21381fa-0e0e-4572-81df-aedcd8f24b13",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7e74fa44-45f2-4fd1-b691-9ff693649c9a"
        },
        "item": {
          "id": "eac98b90-80f9-49c5-9cce-8a596409658e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e7c3064e-6f16-4f29-87db-18deef341f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700781aa-7cdb-4959-b955-180bb9515882",
        "cursor": {
          "ref": "d754fb3f-6827-483d-b5ea-6fce3d7288c7",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ab685bad-c1d7-4e44-921b-15547a5202ad"
        },
        "item": {
          "id": "700781aa-7cdb-4959-b955-180bb9515882",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4e262019-7f61-4861-b1d8-f71915943c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8316daf-be76-444c-ac4b-f6a35379b1fb",
        "cursor": {
          "ref": "18973735-f409-41a3-b46f-7a00e406f511",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1f5bdf54-b4f8-4b48-bf58-1575ea4e4607"
        },
        "item": {
          "id": "f8316daf-be76-444c-ac4b-f6a35379b1fb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "716fa985-1b7e-4d5b-9c94-1bf9280569b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c934b9-72cc-4c44-8c17-9260649acd42",
        "cursor": {
          "ref": "f871b9d1-2832-47f7-aa6b-c87023173894",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4963932e-b906-4e8c-afad-df37e3e090ad"
        },
        "item": {
          "id": "67c934b9-72cc-4c44-8c17-9260649acd42",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0522c571-453e-4520-ba2f-9538e8ab953b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "de246b18-d5b8-44e5-a12b-c23e30513040",
        "cursor": {
          "ref": "f0b4d6de-30ff-44b3-ac82-69db731187bd",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "92ad2492-0fa4-468c-86a7-39ee361bab0c"
        },
        "item": {
          "id": "de246b18-d5b8-44e5-a12b-c23e30513040",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a91d6c97-d107-484b-a59c-6b37d26c4599",
          "status": "Created",
          "code": 201,
          "responseTime": 2180,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "176cf8f7-46e8-4f97-ad6d-5726020b109c",
        "cursor": {
          "ref": "c5253297-c52a-4517-a231-47d73ba3b7b8",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0ab70b56-aa01-4d45-a6c3-07262f7b480a"
        },
        "item": {
          "id": "176cf8f7-46e8-4f97-ad6d-5726020b109c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "35c6b184-f6ee-4981-b89d-eeeee5c18750",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "40d1242c-f9fe-406d-877e-2a0237878058",
        "cursor": {
          "ref": "7ef0f3f6-5343-4b31-961f-dee71da4dee6",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "22e6f8e6-5a87-46f5-afea-a38eaf8228e0"
        },
        "item": {
          "id": "40d1242c-f9fe-406d-877e-2a0237878058",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "df0b0b9a-0f01-4dcb-9374-887120ed1d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6de2a3-7502-46f2-b415-0f1ba4d08729",
        "cursor": {
          "ref": "7479b9c3-5888-46d3-9d3b-1e893b62bd54",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ef9b2be0-916d-44ff-9fb2-ecbae5f9c27a"
        },
        "item": {
          "id": "0a6de2a3-7502-46f2-b415-0f1ba4d08729",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c55d96c0-b966-4fe7-a8d6-85ce92d1906b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "da23bba3-4fae-426e-80fc-69214ab998a2",
        "cursor": {
          "ref": "2e90a7bf-0006-468d-9e1a-59ffb855e263",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4442acc5-4ef1-4920-915e-bf06cf7fbdd4"
        },
        "item": {
          "id": "da23bba3-4fae-426e-80fc-69214ab998a2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1d5954f7-5946-45c6-861b-65f6677725dd",
          "status": "Created",
          "code": 201,
          "responseTime": 1355,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5a6beb50-4314-4c92-ab74-3afcdd0c1640",
        "cursor": {
          "ref": "8002df6f-3f46-4f1f-af12-d3e721b9b8bd",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6a828b11-50be-4f63-9102-a7464b5f59ed"
        },
        "item": {
          "id": "5a6beb50-4314-4c92-ab74-3afcdd0c1640",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8074a7f7-c88f-4bb0-b84a-4e32a97e6eab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "75dfe26f-eb33-4552-a609-ab05daf6be59",
        "cursor": {
          "ref": "8db4e33a-8c4b-4bba-b911-83c3966daf4d",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a0b6e731-71fc-4cfa-8825-1f08999c07b6"
        },
        "item": {
          "id": "75dfe26f-eb33-4552-a609-ab05daf6be59",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "53552919-2dd3-496c-b88b-d453fd3fa345",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 767,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7b39a17a-09a6-4480-b85e-ce981ee0e2b4",
        "cursor": {
          "ref": "41edcce0-3391-479a-b8e1-fe4bebe10b08",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0eef4e32-fd4e-485a-a568-242604e671f1"
        },
        "item": {
          "id": "7b39a17a-09a6-4480-b85e-ce981ee0e2b4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b1926be7-93ed-4f81-9bcd-ce7cf55a30e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6015b833-28ca-4d02-9cb5-b7ca11fd08e4",
        "cursor": {
          "ref": "81ff3ee8-0a65-4a8a-86fd-6b72fbb83cc3",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "83bd65c2-b93f-4cfd-b2a8-a4daaee9234d"
        },
        "item": {
          "id": "6015b833-28ca-4d02-9cb5-b7ca11fd08e4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ccd06c53-7f45-4d3c-8808-f0298abd2720",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ad497fad-db2f-47f7-bad1-91cad9347da9",
        "cursor": {
          "ref": "93bc7867-1c1b-4536-9865-825a77a0ddf5",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "29238d58-bcef-444b-94f0-fa38a3ac6c56"
        },
        "item": {
          "id": "ad497fad-db2f-47f7-bad1-91cad9347da9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a155e170-d978-408a-8150-b58e31239e07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "801e71b4-33db-49b3-a127-b9eda00cfe14",
        "cursor": {
          "ref": "c026a46a-e80d-411e-a2ce-d0b099a222da",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "77190b6f-0e32-4578-8457-27ca685b8c5a"
        },
        "item": {
          "id": "801e71b4-33db-49b3-a127-b9eda00cfe14",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e22d0a2f-0cb7-4248-bec7-f648a1e3ddea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "77ab748e-f9fd-4053-9fe7-3d61770db50d",
        "cursor": {
          "ref": "935cc0bd-6642-49d3-8c7f-2f997085f850",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "79a9ac7a-0254-4e0b-b64f-15150ecf1a25"
        },
        "item": {
          "id": "77ab748e-f9fd-4053-9fe7-3d61770db50d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ad64f021-a5e1-45e9-9b71-bbc10d0395cd",
          "status": "Created",
          "code": 201,
          "responseTime": 965,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a3eea7f5-44ef-476d-bad1-49e263016a80",
        "cursor": {
          "ref": "78daa925-ffaa-4ef5-bd9d-78c719510075",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "aa910b92-6b67-4851-8cbc-1b62f4f6d23e"
        },
        "item": {
          "id": "a3eea7f5-44ef-476d-bad1-49e263016a80",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6b983edd-4fc4-467c-8ffa-31e9575aa0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0339159-832b-4fea-8022-d627fb66a439",
        "cursor": {
          "ref": "0cb7d8d9-d7a2-48c4-b76f-05290e3b110b",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d5bb7cc1-5759-44ee-b66f-16b7626390f8"
        },
        "item": {
          "id": "e0339159-832b-4fea-8022-d627fb66a439",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4649444a-9f0c-4ccd-aaa8-8f64857a85aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5ec16e-8809-43bf-b36f-18e58abc6584",
        "cursor": {
          "ref": "e5e125f2-5410-45f1-a8b1-f9870a6d31db",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1dcc68e0-4b57-41bc-8082-2bf7f1c589b5"
        },
        "item": {
          "id": "de5ec16e-8809-43bf-b36f-18e58abc6584",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9fc0ba52-1cbd-4861-899c-e12d34808bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a262f1d-7401-480c-baea-e986aae3694b",
        "cursor": {
          "ref": "aa59984d-b14c-431c-b961-9b5c5de669be",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5843d286-08a3-4b7e-b044-b666e3e4cff9"
        },
        "item": {
          "id": "1a262f1d-7401-480c-baea-e986aae3694b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "04461578-3f4a-457a-bc4c-5c9f01e72d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c295f1-a468-4821-b222-560963453c6e",
        "cursor": {
          "ref": "bd9f5af0-3b09-49a1-9cc6-f3e0c3418168",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4b900bf2-e681-4a93-b998-2a8db169e65d"
        },
        "item": {
          "id": "42c295f1-a468-4821-b222-560963453c6e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "23bca060-70aa-4c38-bc93-76030bb48f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf39d01-b4b3-4b63-9ce3-5a6e40342b53",
        "cursor": {
          "ref": "0ba2c30e-1dcf-4c7c-bab7-5557cae84201",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "be763d37-88b7-4996-9c43-6d5705be5c5a"
        },
        "item": {
          "id": "7bf39d01-b4b3-4b63-9ce3-5a6e40342b53",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ed0db7e2-c384-4641-af45-f866910fb389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58b9927-c588-43a2-9a7a-6987501d2a2c",
        "cursor": {
          "ref": "87a96296-e93e-453c-87c6-e232e84e800d",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "10196f3d-6fbd-4c79-a003-9fd4a1f0b62b"
        },
        "item": {
          "id": "b58b9927-c588-43a2-9a7a-6987501d2a2c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0f3d1bb0-6fb2-480e-ac04-41e09c0ea622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f63ea6-247d-465d-afff-6b9e0b098dc9",
        "cursor": {
          "ref": "58f77d40-d4ad-4631-a4a9-a3fa297194c8",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2acb2a58-015e-4f7a-8665-3cedb11760e5"
        },
        "item": {
          "id": "d9f63ea6-247d-465d-afff-6b9e0b098dc9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "063ff8eb-3f1a-405a-9f80-97f7445ccd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36262917-553c-4638-bd1e-05b6747b7298",
        "cursor": {
          "ref": "f8a387cf-4e6c-4ea0-82de-834c0f2a17cf",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f685298b-98df-4b03-b505-72e828c176fb"
        },
        "item": {
          "id": "36262917-553c-4638-bd1e-05b6747b7298",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d6991f53-45b2-4288-85f7-ef8e9bd73161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdeae8a-0fd1-4c6d-ae68-dff87989d176",
        "cursor": {
          "ref": "41348f37-38a7-4667-bb0f-de56ab2e39bd",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7630e851-a3b5-4c6e-ab36-b8fd843e8852"
        },
        "item": {
          "id": "fbdeae8a-0fd1-4c6d-ae68-dff87989d176",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2aa3a365-013f-4819-9a4f-3682ade1ab9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd55267-480f-4781-8e4e-fdd2d4ffbfeb",
        "cursor": {
          "ref": "5b3d1481-26d8-43c3-b640-f079a0daa77f",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fd8ee15a-c551-471f-a2ed-651461c49dc9"
        },
        "item": {
          "id": "bcd55267-480f-4781-8e4e-fdd2d4ffbfeb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a45e3dd6-8abe-4da9-9a3c-d93709d2af5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6690b61d-5cff-4493-bbb7-21329d53469f",
        "cursor": {
          "ref": "c0d79d10-12f3-49aa-9be9-060d79876371",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7c95cb29-3f1e-4670-a330-2f6ea2a2685b"
        },
        "item": {
          "id": "6690b61d-5cff-4493-bbb7-21329d53469f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6270bde6-c138-4e6a-84d7-dfd892b04cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c827df-c9bd-433b-badd-29961f95f212",
        "cursor": {
          "ref": "5baab852-3c99-433e-863a-e689508aa8d2",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6e43f362-3671-4ba6-b42c-f6b24478ad29"
        },
        "item": {
          "id": "27c827df-c9bd-433b-badd-29961f95f212",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "66fe0d45-1c08-47e0-8686-431bca6a57e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa54c749-53bd-414a-a92d-7d9ac4e7dbfc",
        "cursor": {
          "ref": "039fb2ee-f7e0-4c25-a6e0-7bfd877db374",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8204fd3a-f5b3-45c6-8d6e-25eca047fbe0"
        },
        "item": {
          "id": "fa54c749-53bd-414a-a92d-7d9ac4e7dbfc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a23ee384-34a8-41ce-9ac0-712b8070c5f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 760,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0dec5d68-edb8-41f3-8e4f-a134f995a945",
        "cursor": {
          "ref": "f414202d-aa65-4667-8b3f-a1170af1933f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8170f234-9efa-49f5-b7ca-e10bb187c6e5"
        },
        "item": {
          "id": "0dec5d68-edb8-41f3-8e4f-a134f995a945",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "95587b05-4c2a-442d-b7b0-add9b55c4e99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 775,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "543d37be-9771-4c27-9680-298f1e8c088a",
        "cursor": {
          "ref": "9f95fc79-9bef-435a-a399-afd2499ec4d6",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e0392b8e-525f-41b7-b40a-13adf69621df"
        },
        "item": {
          "id": "543d37be-9771-4c27-9680-298f1e8c088a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "20db72d6-c541-403f-b63c-6b1f2022dffe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bb94b18a-f965-4672-b6c2-686700e5bc70",
        "cursor": {
          "ref": "31d28900-e802-42e4-bb2b-236012cafb44",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f313bbf1-bdd0-4e43-bb13-7c70203f846d"
        },
        "item": {
          "id": "bb94b18a-f965-4672-b6c2-686700e5bc70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f1bd4a16-5ad8-4c21-85a7-d5d072f731fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 769,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "30143499-2af2-4987-ba68-f35958728dee",
        "cursor": {
          "ref": "b295b37b-87a4-4e91-80a3-9956bd54b49b",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1ddbea7c-856c-48bf-8eda-cb53bb394109"
        },
        "item": {
          "id": "30143499-2af2-4987-ba68-f35958728dee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "12bb5a35-0b93-43e0-943d-0fcd66bad005",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2352556b-11f3-411d-be6f-d201c81ee7f3",
        "cursor": {
          "ref": "4efcca7f-2321-4803-82e8-0d6997fd4d1b",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0be3f949-d949-4070-8fb6-e1c9d00c2bb5"
        },
        "item": {
          "id": "2352556b-11f3-411d-be6f-d201c81ee7f3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "14d64805-4f42-4cd8-a6eb-ceddf3dbb29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8fb2e2-910c-4ed1-b903-704a1fab285e",
        "cursor": {
          "ref": "2ec5acdd-d2a0-4ad2-bf9c-ad93153465b4",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cd506848-7c5e-4aa1-bcf1-9e8e2ae1cb29"
        },
        "item": {
          "id": "fa8fb2e2-910c-4ed1-b903-704a1fab285e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ebb56e16-2f75-454c-add0-e1c7217f97e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232ddf0f-77a1-4ed2-bda1-adf4042e96d3",
        "cursor": {
          "ref": "c8ce4e13-ab5a-4c3d-ba97-69d2fd730f9b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ab0836ea-a53d-4e80-b43a-9f6a90d23782"
        },
        "item": {
          "id": "232ddf0f-77a1-4ed2-bda1-adf4042e96d3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bb04c8a7-81db-47a1-875e-8a1f1d7b6bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1702a42-ff9b-44fc-8c13-fb19754bb815",
        "cursor": {
          "ref": "738fc21e-1a4b-49c6-bf5d-92d1756e2657",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ea93be27-79e4-4d64-91c5-76e2b51317e6"
        },
        "item": {
          "id": "d1702a42-ff9b-44fc-8c13-fb19754bb815",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1bc4538a-7472-442b-821e-dfd673a0f83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e80368f-fd29-4e48-84da-5bd5ac88986a",
        "cursor": {
          "ref": "42d09356-0786-488c-bfce-057aa556e5b6",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a714de26-b4ae-482e-9eec-f7d08823c715"
        },
        "item": {
          "id": "8e80368f-fd29-4e48-84da-5bd5ac88986a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "52203c28-2bda-4f01-9f9c-194cfedc90eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e362b4-577e-4725-9609-15488d3e4e0c",
        "cursor": {
          "ref": "5b666e61-016a-4cef-8d7b-09b554e3f790",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "be1606a4-b572-452d-8df9-8127cdb2b4b1"
        },
        "item": {
          "id": "f6e362b4-577e-4725-9609-15488d3e4e0c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2fc54433-6cc0-497e-927d-2719971b6e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6431dda5-138b-41f7-b019-8eafc9b0f3b4",
        "cursor": {
          "ref": "7bf917a5-834e-4375-b161-b2c97858d332",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d22d9d62-0aed-4688-b384-17d92444616f"
        },
        "item": {
          "id": "6431dda5-138b-41f7-b019-8eafc9b0f3b4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5b7d60de-c751-4841-9a81-99c29b7e7661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736f4e08-8a12-4d18-97ef-18f2f2ebe42e",
        "cursor": {
          "ref": "2eaf8409-ca42-4a57-968e-b8bde25abe98",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1e7b3fbb-79fe-4669-9ecb-b9d7af3e0622"
        },
        "item": {
          "id": "736f4e08-8a12-4d18-97ef-18f2f2ebe42e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9026c34f-da5c-4dd6-bb76-ebc4611e2473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b03db17-f3d6-49a7-8fe9-05d8e34d9b67",
        "cursor": {
          "ref": "4298eec8-0fa0-40b5-a70d-55eb933b7a41",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bfd73c40-c4bb-49e8-a747-6f795940f4a0"
        },
        "item": {
          "id": "0b03db17-f3d6-49a7-8fe9-05d8e34d9b67",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2b48a5c1-829c-44c2-81f7-bc2aa90a5f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb09cf11-5431-492f-8e7d-8c8c877c7d9f",
        "cursor": {
          "ref": "58de80c7-98d4-4c4a-9f8b-074e87ffd4b6",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "64a6f919-85b6-4889-aa14-e83af94c1567"
        },
        "item": {
          "id": "bb09cf11-5431-492f-8e7d-8c8c877c7d9f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "89384546-6615-44e8-b9b2-64befc8652a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad850b8-ff7d-4370-a703-c4fe617dd5a2",
        "cursor": {
          "ref": "fd35272b-9a01-4bb5-b23e-3d551b482e8c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7da8d7d5-b705-47f7-9ca3-b83ee5515022"
        },
        "item": {
          "id": "cad850b8-ff7d-4370-a703-c4fe617dd5a2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6b09a30e-a5ab-48c9-ad39-34bc51570c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed81124-1fc4-4b88-bf9d-5fd6ee2d0150",
        "cursor": {
          "ref": "daa9366c-89a0-4fa0-88ce-d6b4b7a6e4a6",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1a8683a1-a8bd-4622-b90e-694a4fe40706"
        },
        "item": {
          "id": "1ed81124-1fc4-4b88-bf9d-5fd6ee2d0150",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "335f1e87-8675-4bc4-a332-1a454a3c9bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637c2f03-3486-4194-8baa-ecc1ee3c9c49",
        "cursor": {
          "ref": "2602459d-304b-4ff2-a8ed-36a5a8fc05fb",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b4846ad5-0231-4740-a289-ed4f11422495"
        },
        "item": {
          "id": "637c2f03-3486-4194-8baa-ecc1ee3c9c49",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "98c1130f-b0fd-43ed-877d-d4701812e305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a36de1-003e-4669-befe-62cfb08769d6",
        "cursor": {
          "ref": "26cb80f1-f2fc-458c-9b8f-d5f491b24d7f",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ad63923b-0865-493f-965f-0c2b8b0b369d"
        },
        "item": {
          "id": "93a36de1-003e-4669-befe-62cfb08769d6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e0001d0d-c7b0-4bb8-b4e3-ee6192e224d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d35d557-f8d7-4108-a02d-bdda7de12b21",
        "cursor": {
          "ref": "819c69d4-aaa6-4f77-9eb6-1ad4fcd932e5",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ddf2d27f-4b5d-4a12-8837-275b732fa7e8"
        },
        "item": {
          "id": "8d35d557-f8d7-4108-a02d-bdda7de12b21",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d414ed30-5403-4b99-9094-e0668d99af0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9e8999-7ef7-436b-b676-9a227a18548a",
        "cursor": {
          "ref": "ba7b7d6a-98ae-4f40-a98d-72d9009a9845",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "16f9072b-a60a-4601-8b7a-71662d2d0c85"
        },
        "item": {
          "id": "de9e8999-7ef7-436b-b676-9a227a18548a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f2df6698-3b52-46bb-ad51-94b56935ea03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1bd30b-1ced-4206-a811-bee81be3516b",
        "cursor": {
          "ref": "831471e7-1a4f-40c6-af86-177a613f9cbe",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0555ce3a-0b64-4415-8a45-e4a6b3413197"
        },
        "item": {
          "id": "7c1bd30b-1ced-4206-a811-bee81be3516b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8d99117a-03e6-435b-8bcf-291698a7cff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece27a7e-6565-40aa-8716-89efbe2ad069",
        "cursor": {
          "ref": "2cdc8e1a-b273-4233-b077-6fd541c747b0",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "43e81025-e0d8-44ad-89e3-f015d7a61414"
        },
        "item": {
          "id": "ece27a7e-6565-40aa-8716-89efbe2ad069",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "70b92d18-fa04-4841-949b-41aacaa116f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1605cde8-2ac7-4569-8827-e0cd5da8ccef",
        "cursor": {
          "ref": "a46ad613-f47a-4dd0-9b98-73a7b914afa4",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0cbed563-ae47-4eb2-b807-904e3733defc"
        },
        "item": {
          "id": "1605cde8-2ac7-4569-8827-e0cd5da8ccef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f65cf598-0c75-463f-90a4-d40284bae57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86009179-2f7e-4c4b-be7d-697df91cc410",
        "cursor": {
          "ref": "e4ced8bd-401f-4952-b169-1e8429e804dd",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "30fd4f1e-f120-45f1-8e5f-00f27046561a"
        },
        "item": {
          "id": "86009179-2f7e-4c4b-be7d-697df91cc410",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8f1ad801-f162-4514-8c40-4d6f4ead5fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47ec4ae-eb08-45cb-8544-d5b8d7a88011",
        "cursor": {
          "ref": "7ede932b-5531-46d4-a4bc-fad596ae2f50",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5fc7a1bb-26a9-4972-8a60-70211c427f80"
        },
        "item": {
          "id": "a47ec4ae-eb08-45cb-8544-d5b8d7a88011",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "404a31d4-4773-4909-b250-8983cd232e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72326cc-6557-45c8-a11d-0e47b3ab2744",
        "cursor": {
          "ref": "d7ff8ad4-8523-48be-97a8-12bd358a81d4",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "84a5232c-6c77-425e-97d2-38e257b7c672"
        },
        "item": {
          "id": "c72326cc-6557-45c8-a11d-0e47b3ab2744",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d98d1109-adea-412b-aa75-2083251f6e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693525be-e7ff-4dce-9d2a-a2d657899078",
        "cursor": {
          "ref": "9d3926ba-bc6a-489c-bd18-43a9c857f359",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "734e6ba2-2304-4468-9198-65db4d6060a0"
        },
        "item": {
          "id": "693525be-e7ff-4dce-9d2a-a2d657899078",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b9120356-7eb8-461e-a1cb-0b2191e38a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad48f6ad-77bc-49d4-aa3f-5a041a1f9be8",
        "cursor": {
          "ref": "00109c9f-1477-4b4d-8cbe-5658331c269f",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bbd93b32-9d35-4c8f-9a07-8056970b6edc"
        },
        "item": {
          "id": "ad48f6ad-77bc-49d4-aa3f-5a041a1f9be8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cf7d6bbb-d9bf-48eb-8de9-128927c668db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9662f6e2-710f-4a3a-b62c-fae074ded1fe",
        "cursor": {
          "ref": "10b22bcb-854e-47ab-807e-004c89f3076e",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "03735ac9-b948-42c7-992d-7b75fa52e31d"
        },
        "item": {
          "id": "9662f6e2-710f-4a3a-b62c-fae074ded1fe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3277f5a3-f1dd-4432-99b5-c647e876cfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddc3bf5-0efc-4164-9c48-a933a25e90cd",
        "cursor": {
          "ref": "a8d62310-5e7d-45b3-9751-6b12fdd74e7c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3812529c-be9f-4aba-858f-f2754525b219"
        },
        "item": {
          "id": "fddc3bf5-0efc-4164-9c48-a933a25e90cd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f218f41b-4e6b-46f3-9675-3efe866452fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74737ba7-e858-473f-93d0-756702d29f7f",
        "cursor": {
          "ref": "bfbeebcd-adcb-43a3-bbde-0c7e5d8e2315",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "eb928dce-d673-4891-9d90-4e67afd23a99"
        },
        "item": {
          "id": "74737ba7-e858-473f-93d0-756702d29f7f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e62d1ef9-b266-48ed-beb8-473587f42e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c968dba0-7680-4e5a-8119-53886aca0a11",
        "cursor": {
          "ref": "d46a7109-57e0-455b-9b78-c2cf5ee31921",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4bfcc45f-d7c4-40f7-a49c-b0e5a327d76f"
        },
        "item": {
          "id": "c968dba0-7680-4e5a-8119-53886aca0a11",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "781efc90-488f-4559-bcac-e8edc9d8aec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410b8803-cf11-4c43-92be-8c6e5d7bb993",
        "cursor": {
          "ref": "9b0caa4b-14b3-4955-8cf3-fe0cf4a944fc",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9ec4f824-7983-4298-9c70-3bcc80076882"
        },
        "item": {
          "id": "410b8803-cf11-4c43-92be-8c6e5d7bb993",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3f08b777-3cdc-4bcf-b750-1c2df4df96e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35999f2-aa79-41a9-8910-2bf1ac4f449a",
        "cursor": {
          "ref": "a7a6b6f5-b1b8-4d26-a3d0-68c5ca1d64c2",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d853b85d-4e04-494f-8196-192ac8e46172"
        },
        "item": {
          "id": "f35999f2-aa79-41a9-8910-2bf1ac4f449a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "eae120cf-887c-4316-9805-23f867d8cf68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258e4edc-9396-4941-adf7-ed269568fe69",
        "cursor": {
          "ref": "2b3cf9e4-8cd2-4fbd-83d9-c47de91f57e0",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c02f4a32-bd8b-4fa6-a5c6-d291f47ef085"
        },
        "item": {
          "id": "258e4edc-9396-4941-adf7-ed269568fe69",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "74149638-50ba-4158-b1dd-421f15d3c9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45867093-7b6f-4267-953b-91328b36c941",
        "cursor": {
          "ref": "ae0e8781-e31c-41d3-bf28-4a8620cddb3b",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "666d8419-727c-45be-a2d8-bdf15f1c344b"
        },
        "item": {
          "id": "45867093-7b6f-4267-953b-91328b36c941",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a53cadae-6751-4d5c-a9d1-303957d88990",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e55d5c-aa60-496f-8a46-974a1fa1b5ec",
        "cursor": {
          "ref": "c3ec2d80-5626-43b5-b7cf-487f30b08370",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b1caea00-7a4d-43cd-b5f4-1fc8952cd7ed"
        },
        "item": {
          "id": "a0e55d5c-aa60-496f-8a46-974a1fa1b5ec",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d6b6d092-acd8-47dd-95e4-b70cd8daa103",
          "status": "Created",
          "code": 201,
          "responseTime": 1543,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f942a6-c899-4ddd-85b6-5061a415d2d6",
        "cursor": {
          "ref": "ca910536-cad1-49bb-8d8b-1298db13efce",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bcc5ac95-23b1-4201-b4f5-3f8f7a6126fd"
        },
        "item": {
          "id": "85f942a6-c899-4ddd-85b6-5061a415d2d6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3b459264-51cb-4510-8b9c-28ac2d6d121c",
          "status": "Created",
          "code": 201,
          "responseTime": 952,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f276122-c7ee-4a39-a1b6-db8f1ba0a4f1",
        "cursor": {
          "ref": "38c08150-5e65-4c74-94c6-f9d5000133d1",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a1685bed-2424-4a32-81ce-81a6d3381d69"
        },
        "item": {
          "id": "9f276122-c7ee-4a39-a1b6-db8f1ba0a4f1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a868eede-14af-4f2e-a84e-8297036a3e0f",
          "status": "Created",
          "code": 201,
          "responseTime": 957,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00094dc-3791-4d19-b5e2-1010ec18d740",
        "cursor": {
          "ref": "23380bd7-fc1e-4930-87c5-c3f66fda3a1a",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "002fe6fb-9083-4bc0-a3c6-5f5709d91887"
        },
        "item": {
          "id": "a00094dc-3791-4d19-b5e2-1010ec18d740",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b8afdc39-7ceb-4ed0-88eb-7ed2093c55de",
          "status": "Created",
          "code": 201,
          "responseTime": 955,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e56d19-96e1-4147-bbd7-1c4fff98376f",
        "cursor": {
          "ref": "93a35bb2-895d-4650-88a6-519f7be0c5de",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9376e818-8ba9-4d92-8172-be891272f52b"
        },
        "item": {
          "id": "45e56d19-96e1-4147-bbd7-1c4fff98376f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c0150ee9-045e-413a-b71e-a055be21c9e0",
          "status": "Created",
          "code": 201,
          "responseTime": 949,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4524f6b4-e681-4625-ac63-5da566a6fad5",
        "cursor": {
          "ref": "b35ba898-ea8b-48ac-bf2d-2c913db4466a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e043c83e-2952-4a3c-9741-fda144a29721"
        },
        "item": {
          "id": "4524f6b4-e681-4625-ac63-5da566a6fad5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3c65715d-0b0b-4c0e-a18b-036f934cd87e",
          "status": "Created",
          "code": 201,
          "responseTime": 1048,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3415b474-5c59-4c68-ac02-67d8014fd148",
        "cursor": {
          "ref": "2a7bc9e5-6826-4641-aef7-ad2c06d59f23",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5e517569-4c6f-428f-b285-63e525137840"
        },
        "item": {
          "id": "3415b474-5c59-4c68-ac02-67d8014fd148",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a28b4b9b-0ab5-4c33-8033-4d271f699e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ceab0a3-bb23-4f7f-8977-14e598eced45",
        "cursor": {
          "ref": "bf54b9d7-a67c-467e-8407-074c4283f45d",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "037efbc8-c554-4178-b943-d4b159759b9b"
        },
        "item": {
          "id": "7ceab0a3-bb23-4f7f-8977-14e598eced45",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cd9d9efd-6c06-4e06-a447-1063cc603f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfb2b4e-65ba-4890-b49e-2959db7386a8",
        "cursor": {
          "ref": "58a1038b-f2b6-4cea-9422-6924a4d14846",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0e3fd51b-12c4-4ee1-831b-d2d4e4e0fed1"
        },
        "item": {
          "id": "cdfb2b4e-65ba-4890-b49e-2959db7386a8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6621ae90-a579-4c4b-ac02-dda6bfe5e95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a1f0b0-0b5e-41d1-9073-fe783474d58a",
        "cursor": {
          "ref": "f29da817-9b8f-40c6-ae83-9cfdf698d229",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bb596231-16c9-4ae7-bf9b-f95ed81e3dff"
        },
        "item": {
          "id": "a7a1f0b0-0b5e-41d1-9073-fe783474d58a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e4b902d6-e5ab-433f-a138-ccb6043ed956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73376811-99ba-4034-b66b-899fead6451f",
        "cursor": {
          "ref": "a6272d3a-b4e4-4db2-8a35-70387760fbef",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0da40004-844a-4354-a439-5943cbc9e6e2"
        },
        "item": {
          "id": "73376811-99ba-4034-b66b-899fead6451f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "41081d75-1109-4955-be47-a0b22a8a3fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78950391-584f-4cef-87bb-4b5204bd7bb6",
        "cursor": {
          "ref": "dbc492bf-47eb-4781-abb0-c95d3270eeb3",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6bd1097c-906d-4d3d-ab32-df510c9d35fa"
        },
        "item": {
          "id": "78950391-584f-4cef-87bb-4b5204bd7bb6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e7dcafb0-af34-4a7f-9d79-7885842572e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb672a0b-fe9f-4d84-b254-a54097961bf9",
        "cursor": {
          "ref": "42a14b4c-788b-4cea-8dc7-4f180fb18690",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a60bdf6a-9021-46cd-bebb-ced6147af6f4"
        },
        "item": {
          "id": "bb672a0b-fe9f-4d84-b254-a54097961bf9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08f1f2bd-b6e7-4ed6-a593-db69a7c36ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64235c3d-74d1-4fad-8299-1502b1f7c268",
        "cursor": {
          "ref": "e6e7ee04-80c0-407b-8242-9929d000ffeb",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3c692267-b3a6-4bb4-9eb2-36bbccfcd2f6"
        },
        "item": {
          "id": "64235c3d-74d1-4fad-8299-1502b1f7c268",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e447cf74-48a0-4395-8692-ace1914a55c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5ca68b-e915-4481-93f4-5f276ac73691",
        "cursor": {
          "ref": "0f6ffaa2-75f7-4134-a72c-2873d1a7d3be",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6f23a9ce-f319-4bfc-ad97-2245e22da46c"
        },
        "item": {
          "id": "cb5ca68b-e915-4481-93f4-5f276ac73691",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bb462448-2c34-4acc-a5e5-53bb77816a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa207e2-5410-4314-83af-750011be8492",
        "cursor": {
          "ref": "50ef1e5d-dc7b-4869-93f6-21dd13108932",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7c910495-c478-48a3-bb08-608be3e29061"
        },
        "item": {
          "id": "caa207e2-5410-4314-83af-750011be8492",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c8b9f52b-f4d0-48df-bad1-490c67f9486f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a67a2c-a70f-4e9c-b36c-e941372564a2",
        "cursor": {
          "ref": "2b05b6e8-acb5-41ed-9661-0638f6870bfb",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9eae12b3-1a2e-41d9-95e5-946e0fb78cff"
        },
        "item": {
          "id": "a7a67a2c-a70f-4e9c-b36c-e941372564a2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a9b0ca0d-4eec-4990-930e-939e0b272f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86db430f-4b5b-4635-ac27-b18cecfc9473",
        "cursor": {
          "ref": "8bb1e8a5-564f-41ac-b984-11ad39536243",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7a876a36-8424-4f82-b391-61ba5e750b17"
        },
        "item": {
          "id": "86db430f-4b5b-4635-ac27-b18cecfc9473",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6c938080-8bf2-41a8-926e-52bb99c33244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e9c557-6c29-4dc6-a1e3-c543afa12a5f",
        "cursor": {
          "ref": "483ac1d1-d1f6-46ee-9050-fe6da5c98012",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3d6bd872-47d7-423e-8119-45c88a228428"
        },
        "item": {
          "id": "69e9c557-6c29-4dc6-a1e3-c543afa12a5f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c546322c-f506-4046-85d4-8d1ebb2ccf1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4345b5e4-6904-48fc-a326-775e0c910596",
        "cursor": {
          "ref": "f570be87-f47b-49a3-b8e0-4137f0d9aaca",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "424486d8-d963-4fbc-b5ee-45aa854826f0"
        },
        "item": {
          "id": "4345b5e4-6904-48fc-a326-775e0c910596",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "13ca04cd-a77f-4fd1-b065-e4b53be64877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbd56ee-6a03-4ef4-b1a4-04a41fac0abc",
        "cursor": {
          "ref": "d63a9c70-44d5-48d6-bbaf-4d9e8786215f",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c971e5a4-6d0a-4aaa-977a-db897a24acf8"
        },
        "item": {
          "id": "7cbd56ee-6a03-4ef4-b1a4-04a41fac0abc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "617c0c85-4ad0-4a3a-b948-43562e9c024b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc062db-1e27-4df2-b02d-c774285d98d6",
        "cursor": {
          "ref": "5138cbd1-99b9-43a5-82e5-6c2c87ce2195",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c777bd1e-c917-41f5-9ff3-6ae7fcc8f5de"
        },
        "item": {
          "id": "8fc062db-1e27-4df2-b02d-c774285d98d6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "466e0ed4-664c-468d-86ab-bcc144be9dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a9cd21-9626-441c-b10e-82439853e7fa",
        "cursor": {
          "ref": "ca9b895d-7c9f-4064-b353-09ea1c6d31f0",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1724ebaf-0cfa-490f-8d3f-1be295d874bf"
        },
        "item": {
          "id": "03a9cd21-9626-441c-b10e-82439853e7fa",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "82ec409f-f935-4af7-9909-462fa9f76a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17abb72-e75b-45f0-8369-a7ffbb3b8a44",
        "cursor": {
          "ref": "4e66a30e-0aef-4290-bcb1-2543b60d7caa",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cfb8fd55-9582-4288-aab8-1af71f61c17e"
        },
        "item": {
          "id": "c17abb72-e75b-45f0-8369-a7ffbb3b8a44",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9de8cb0e-5a06-47dc-820f-0ec542f3dc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9061d8-e982-4fb8-9eb1-7272b4a4d276",
        "cursor": {
          "ref": "a7f8ed51-67f3-4f5f-b576-d837e60a8429",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ee81e9f1-4ee3-4b7a-8336-24c7328909f8"
        },
        "item": {
          "id": "8e9061d8-e982-4fb8-9eb1-7272b4a4d276",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d984c6c-5768-446d-8c6c-ffb20da4c085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66d2939-f7ae-424b-b155-88680f65a537",
        "cursor": {
          "ref": "d65ba0d8-6415-4c96-9cb9-0930a011b3a1",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bcf703c9-9d52-4f42-a24e-2ddaf3ffe183"
        },
        "item": {
          "id": "f66d2939-f7ae-424b-b155-88680f65a537",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cbc5de3b-14ba-49a3-8db3-d19f486ee828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d064fea4-66e9-4eae-97db-6f0a017fdc6d",
        "cursor": {
          "ref": "6211d974-328b-4dd9-8c77-838b170c6982",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "064fb5ae-29a2-4a54-afb8-ee73e7cc8517"
        },
        "item": {
          "id": "d064fea4-66e9-4eae-97db-6f0a017fdc6d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4c8fe6de-1f57-45b2-bec8-4c1c2eef1dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35740d91-eb25-4412-be20-3be56168b12c",
        "cursor": {
          "ref": "4c164a92-994c-42d3-9820-43f5e2c25fc2",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "663967e9-968e-498e-9a2e-92f9f6a9a827"
        },
        "item": {
          "id": "35740d91-eb25-4412-be20-3be56168b12c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b2967fd4-d6d3-42a7-88d5-8a755155bdfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05b43b7-4484-4d56-8c31-7543e6a1adf6",
        "cursor": {
          "ref": "87de2de4-ee29-4d9a-9eb3-804beb64cc1c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c1f6a417-3e1d-4b9d-9618-ec199063154f"
        },
        "item": {
          "id": "f05b43b7-4484-4d56-8c31-7543e6a1adf6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1978af47-7137-44fc-b1bf-e479c0c56841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e06a27-f012-4a3e-a6f8-801c08cb2309",
        "cursor": {
          "ref": "e55c4eda-4461-45e1-bb8e-6c07953ee695",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4d9f0f9a-b7f6-4acc-b207-3dceb25ba03f"
        },
        "item": {
          "id": "46e06a27-f012-4a3e-a6f8-801c08cb2309",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "199c3775-9672-451b-847c-da485cab1a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e29099a-89c7-4ddf-9018-102e480fc92f",
        "cursor": {
          "ref": "1816f92c-7e63-469b-a71f-0ce05e63927b",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c8f5bf49-fbad-4e3f-89a8-977337a27d19"
        },
        "item": {
          "id": "9e29099a-89c7-4ddf-9018-102e480fc92f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dc823618-7def-410e-9c02-6f8eef92b451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05e90ee-607d-46e0-97de-29beee86231c",
        "cursor": {
          "ref": "89d3bd34-7052-440d-b96c-fd9687aaf362",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7968f1a7-0858-4874-bf4b-732a6506b8d9"
        },
        "item": {
          "id": "d05e90ee-607d-46e0-97de-29beee86231c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fd31810d-1f2a-4883-b4b3-af83fa442630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc4c549-d1bd-4ec9-8628-9a240222aeae",
        "cursor": {
          "ref": "7fe02216-8593-49e3-a506-41bbb38165f8",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4c7e0f62-4b4e-465e-80d3-61bb50599a81"
        },
        "item": {
          "id": "fcc4c549-d1bd-4ec9-8628-9a240222aeae",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fdf235a2-e4c3-4884-a0ef-395f26a519f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ed362d-11f1-4e43-bb6e-4d093c9e7b81",
        "cursor": {
          "ref": "c7ab3ac5-6f3c-4400-bb9e-799d7ae67a4d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9a535aa5-53ae-4533-afb8-461f9f50b3f2"
        },
        "item": {
          "id": "87ed362d-11f1-4e43-bb6e-4d093c9e7b81",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "195c7466-cf57-4f6c-b31e-dc607ac10e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd32b22-f880-4cd6-a4ee-ff311d756075",
        "cursor": {
          "ref": "5fe63bc2-c8f8-45e8-b396-69205aeb4401",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9c48fe90-6b9d-46a7-a306-1cb661026eba"
        },
        "item": {
          "id": "8cd32b22-f880-4cd6-a4ee-ff311d756075",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "46eaa106-d03e-487e-8973-560650557c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8185af0-0ad5-4b14-b4b2-a25be65f608e",
        "cursor": {
          "ref": "95366f15-24f3-47ae-ba31-03dd464cae13",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a57582e8-0552-4b59-b27d-0c59e0778836"
        },
        "item": {
          "id": "c8185af0-0ad5-4b14-b4b2-a25be65f608e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f2bc3f8e-fbe2-4f6e-93c6-44d9fead51a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c967ad79-25cd-45eb-8dd2-77cec6c7a3fa",
        "cursor": {
          "ref": "178284b6-5241-4cce-ad49-95056120326f",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f28090a7-9547-426f-81f1-4387d4b838d4"
        },
        "item": {
          "id": "c967ad79-25cd-45eb-8dd2-77cec6c7a3fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "411c73b6-c12e-473a-a2f6-1e2ded85a10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c84404-3449-44e4-9093-bf92c0391376",
        "cursor": {
          "ref": "ed691930-0730-47b0-9253-3bb4defe0be3",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0908a49b-b612-4503-afc4-73550e6db4ea"
        },
        "item": {
          "id": "72c84404-3449-44e4-9093-bf92c0391376",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f85da9c5-7c4b-4db6-a8d6-0caf620b1564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddd602d-5237-403d-b280-513db7c71def",
        "cursor": {
          "ref": "7fb09764-48f1-4834-88b0-30b4f634f4aa",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "28234897-8ed3-4add-b530-1c10dd1cd1aa"
        },
        "item": {
          "id": "6ddd602d-5237-403d-b280-513db7c71def",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "848f7d14-d59b-49cd-8cdf-a3ab82a6c147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6dcec7-74d3-40a3-aca7-2f904321c0ab",
        "cursor": {
          "ref": "ae90b771-b1d0-4acf-b2a1-ed2c15a93b53",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2631d51a-bc3e-4953-a5a1-ebb26073538e"
        },
        "item": {
          "id": "2d6dcec7-74d3-40a3-aca7-2f904321c0ab",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "103856e1-5a1c-4865-a298-f9de1e60955f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186323bf-f14a-4310-88ef-39366f4fbee2",
        "cursor": {
          "ref": "d14ba3dc-a590-4c55-9d2d-3d6d7280ecca",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7503571f-94c5-4c37-929f-8d6861b727ab"
        },
        "item": {
          "id": "186323bf-f14a-4310-88ef-39366f4fbee2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "15a7498b-ae4f-45aa-949c-8d3d26476d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec18c9d-2167-4a91-b894-95450343d7d2",
        "cursor": {
          "ref": "e9c90b57-e9be-4c1d-aa1f-a7ecd4cf56b7",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2b32ffcb-2e4e-45ed-b763-803a791cc7ae"
        },
        "item": {
          "id": "7ec18c9d-2167-4a91-b894-95450343d7d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "64b19722-7f80-43ff-94c9-c3c6c079aefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4fa651-9d50-4f39-984e-4a8a7f8f3685",
        "cursor": {
          "ref": "8f62b4d8-1250-4af8-b4df-12658da06a9f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f6057b7b-6cc9-4523-a1d9-2220334d5680"
        },
        "item": {
          "id": "7f4fa651-9d50-4f39-984e-4a8a7f8f3685",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e859a1dc-7499-4564-bf18-80b6248a2dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9b2037-96db-43a0-841c-1de0b8f3037c",
        "cursor": {
          "ref": "a032311d-a772-4cae-a57a-0930c2f3d30a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4ce75552-b557-4aae-a89e-d114d8eb1489"
        },
        "item": {
          "id": "cd9b2037-96db-43a0-841c-1de0b8f3037c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "577579fa-a458-455d-91b4-d3167522b2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61068d9e-7c17-4636-9abd-a86306a3adad",
        "cursor": {
          "ref": "435d1879-7668-4d7c-ba9c-2d718cd78c58",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "828e0f59-0bbb-4bd1-a42c-9ad3949cbed3"
        },
        "item": {
          "id": "61068d9e-7c17-4636-9abd-a86306a3adad",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1c46d23d-04c3-4621-ba66-bc2ae68e6e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae50f3d-9ee7-4a21-9b64-e19250c5792e",
        "cursor": {
          "ref": "ec305e7b-7e1d-42c0-bc98-686811e04e38",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e9e42d22-dc5e-4e29-9ca8-0b4fd74c3dbe"
        },
        "item": {
          "id": "bae50f3d-9ee7-4a21-9b64-e19250c5792e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0a6cb0c1-c9b0-410f-8ac2-d878b443fc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f461a2e-3cf7-4acd-aad1-a12a9cd317ca",
        "cursor": {
          "ref": "266036f8-60c7-4b93-8689-11c623c78fac",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "66788e0a-d9ae-4b2e-925b-b4fbf1017a08"
        },
        "item": {
          "id": "3f461a2e-3cf7-4acd-aad1-a12a9cd317ca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8420e66f-fb8d-4d64-a539-c4810b215d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9da2ed1-1e5f-4b6c-8d94-234f7af9e416",
        "cursor": {
          "ref": "128ce06e-c0a5-40e8-8702-cf1cf98a9621",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cd5fa753-db1d-44f3-ad60-0eda3dea9d72"
        },
        "item": {
          "id": "d9da2ed1-1e5f-4b6c-8d94-234f7af9e416",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f750362c-fcd5-4b17-95c1-f1d70d006af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2935db-098b-4d8a-920d-e0a18c82fdda",
        "cursor": {
          "ref": "45452355-2ee7-4246-8991-eda9bae8a2e4",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "67dcb5be-794a-4264-8ade-91dd437a6e1d"
        },
        "item": {
          "id": "3a2935db-098b-4d8a-920d-e0a18c82fdda",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4439fd84-f2da-4e9e-aabb-951fbb36c3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e6d099-534f-4f35-9d2d-13cb2e9f2ce4",
        "cursor": {
          "ref": "d071828a-eff8-4632-8137-4918d3129339",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "52d45a86-4052-408a-9ed5-f926b1aa81e9"
        },
        "item": {
          "id": "85e6d099-534f-4f35-9d2d-13cb2e9f2ce4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "95cb6c4a-1bbb-4d59-9984-8a56caf790ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d1cb2b-6530-4c75-b1eb-6ef810625e59",
        "cursor": {
          "ref": "cf1d6d5c-40af-42a2-9791-3ea7d5c3f12c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5e8f3193-ff4f-406c-aa9b-f615a2b3bd40"
        },
        "item": {
          "id": "d2d1cb2b-6530-4c75-b1eb-6ef810625e59",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "768741d1-9860-4145-abaa-8308d8fbc5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0765695-582b-405d-ae02-cb21fb6d2a59",
        "cursor": {
          "ref": "61505d58-f7d8-430c-9b8b-0a1fcb7b2198",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "69c67c08-d832-46ed-bd60-1f0393ec2e07"
        },
        "item": {
          "id": "d0765695-582b-405d-ae02-cb21fb6d2a59",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c32b46e6-530d-4485-8f25-18e9b153dcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32b878d-6e97-4e77-9c3b-97a919a75a11",
        "cursor": {
          "ref": "90bee8ea-bc4f-4759-b7ff-ad5063bed25e",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9a774816-41a5-4206-bc26-26d8830373d5"
        },
        "item": {
          "id": "d32b878d-6e97-4e77-9c3b-97a919a75a11",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "33c037d3-6368-4256-9b54-73d4c0afa3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d3adb-79fa-43ef-a1ab-67711e2dda36",
        "cursor": {
          "ref": "83e24d8b-e4af-4a7d-8c16-fab008a37d6b",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a5382c37-f763-441e-8fb9-43aebc5e3d28"
        },
        "item": {
          "id": "040d3adb-79fa-43ef-a1ab-67711e2dda36",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ac0fafe5-3fea-49e7-9590-98a0e381729d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23c233d-2f7e-4f6a-a983-ef7b2614e5de",
        "cursor": {
          "ref": "5c247874-a88c-423e-acfb-809f7f6dca7a",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a9fba91d-5639-4fca-bd6c-299d6f7c1eb4"
        },
        "item": {
          "id": "d23c233d-2f7e-4f6a-a983-ef7b2614e5de",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e42ed18b-46c0-4c6d-b47e-8a7257320d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271f4fc4-01ac-48e3-ba05-78bed59dc1ba",
        "cursor": {
          "ref": "95767644-72cc-4314-b6b2-22703af1004e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "587bf308-5565-4f0c-a77c-63cbb6da1542"
        },
        "item": {
          "id": "271f4fc4-01ac-48e3-ba05-78bed59dc1ba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d2738fba-0e68-4f36-a335-d9c0739a3854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedc8983-3513-4a5e-83a6-35576834bd2a",
        "cursor": {
          "ref": "785c4228-77db-47c0-b11c-f6a15596fc04",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b2d01c1f-d4e9-4f6c-bf94-b4a43b236261"
        },
        "item": {
          "id": "fedc8983-3513-4a5e-83a6-35576834bd2a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "780dca20-809e-4a04-bc2f-9ccd4bb28713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6682d3a4-d04a-4610-a39e-bbcee8b9e094",
        "cursor": {
          "ref": "fbbab5e8-b09a-4df7-9075-282142a6e1eb",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "160259e5-d559-4962-9dea-cc557689f176"
        },
        "item": {
          "id": "6682d3a4-d04a-4610-a39e-bbcee8b9e094",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6586876f-eefc-448c-a4a0-6b6db9eb0e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54373784-f122-4987-9bc0-ddf8695705ba",
        "cursor": {
          "ref": "2f0e2fc1-d95d-427d-b4db-aa879b200303",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2153a045-038d-49ad-8f1d-f550ba4d28c8"
        },
        "item": {
          "id": "54373784-f122-4987-9bc0-ddf8695705ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f3ddf650-5b1c-4a99-a3bb-4a13277f4550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c75841-0f98-4cac-ab85-c4dcbfc89021",
        "cursor": {
          "ref": "9d546c6f-b0f8-4c8f-8991-47844edf20c6",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "52aa40d9-2500-4215-96ea-7b76576381c2"
        },
        "item": {
          "id": "b2c75841-0f98-4cac-ab85-c4dcbfc89021",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2265ecf1-0fcd-4ea8-a936-2310bd72b9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1d5abe-77f8-4413-b6e2-400993805ef4",
        "cursor": {
          "ref": "7e6c9c5e-b648-48b9-961a-a1cb46d46388",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b9df96a5-c347-43c9-a0f7-9cf397c720fd"
        },
        "item": {
          "id": "fb1d5abe-77f8-4413-b6e2-400993805ef4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2f64065c-4ad9-48a4-b8c3-22c0ae1b3f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf136710-85b3-4a11-9a35-87036877ada3",
        "cursor": {
          "ref": "f0ddadcd-cfa4-49db-a8a7-14678a405749",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5635d101-303e-4ea3-bf84-babbaa2373e8"
        },
        "item": {
          "id": "bf136710-85b3-4a11-9a35-87036877ada3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2c356376-c97c-438a-88f6-5bb3a2a2ef66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacba54e-47cc-47f1-8236-382bc47f30fe",
        "cursor": {
          "ref": "a46d7472-ce90-4609-a386-43d16e944272",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "df58b361-5606-4f79-a3ea-90ac386fb227"
        },
        "item": {
          "id": "dacba54e-47cc-47f1-8236-382bc47f30fe",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8500520-d19d-41e9-bc8d-03868eab2cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bca22a-b62f-40b0-ac98-616b02affc18",
        "cursor": {
          "ref": "7cb5e7ec-83f5-4e94-ab7a-03208cd59370",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bd7d7b07-ee12-4c32-963e-1fafc2eb514f"
        },
        "item": {
          "id": "a8bca22a-b62f-40b0-ac98-616b02affc18",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "80cbc29f-3ced-46e3-91aa-4149a7abf0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1d8cde-bdf1-4486-b070-ab4b26dfbf89",
        "cursor": {
          "ref": "5103f412-4aac-48e3-a733-a4e6e17dbdbe",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2e661d29-e21a-4c6e-9f4a-5a9e65afd456"
        },
        "item": {
          "id": "af1d8cde-bdf1-4486-b070-ab4b26dfbf89",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ec5d9fa9-ccd2-43e6-98b0-18cf3fab8141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4426c904-2bb2-4405-91dd-7982e33ba5f3",
        "cursor": {
          "ref": "27a189da-77b9-422e-a65e-a9d3e38b2f05",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9b3218a2-f838-4054-acdf-7a39479c5ae4"
        },
        "item": {
          "id": "4426c904-2bb2-4405-91dd-7982e33ba5f3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "102135a4-6808-4e44-a7f5-806fff4f1ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c320a5a-2252-4c5c-9a14-3aabcd423671",
        "cursor": {
          "ref": "3b43ad06-d231-4969-890a-3d1442528347",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0ef375a7-25c2-4a85-ae9a-1cecf0653841"
        },
        "item": {
          "id": "6c320a5a-2252-4c5c-9a14-3aabcd423671",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ec326cf6-4b93-4f5b-971c-a57d35f6d7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4556ff4b-f0aa-47d7-8da4-fcb3f49c7ba8",
        "cursor": {
          "ref": "b38eb8ee-e51f-45bd-a394-da175e03bd78",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8af00807-1e5b-42d1-b653-eb24b956885f"
        },
        "item": {
          "id": "4556ff4b-f0aa-47d7-8da4-fcb3f49c7ba8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f7eaed81-1d41-40f7-873d-84aabbd35848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fd03a2-f8ab-4a20-b598-3865f2baee17",
        "cursor": {
          "ref": "d5556293-73ce-4032-8013-7e5ce3297abf",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9b31e031-9e67-44f1-8331-15891ab09390"
        },
        "item": {
          "id": "c1fd03a2-f8ab-4a20-b598-3865f2baee17",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "090ab69d-4239-49fd-ac75-48639e542322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9af88aa-98c5-41d0-ad48-015dc6a34c49",
        "cursor": {
          "ref": "4edc4c08-ee6b-4678-a877-03b1436fe5b2",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "26055082-ed62-423c-bc7b-de452a547652"
        },
        "item": {
          "id": "b9af88aa-98c5-41d0-ad48-015dc6a34c49",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "25d70ca6-e7a7-4075-93d7-7d4ac12e3059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6627d79a-507b-4390-8b87-46752045a630",
        "cursor": {
          "ref": "2d6e1a82-e0bf-4e6d-8f43-14b438472260",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bdc49afe-2491-4a3e-b5c8-0b636c23764b"
        },
        "item": {
          "id": "6627d79a-507b-4390-8b87-46752045a630",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4994e77b-3913-4f15-a091-5cab207164f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf101bb0-f7ca-4b9a-b1b6-550de74cd046",
        "cursor": {
          "ref": "e12a5e6a-bc42-4303-8e89-6a340d84f7cd",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ff867846-1e0e-4b8e-b81d-9d996aa28187"
        },
        "item": {
          "id": "cf101bb0-f7ca-4b9a-b1b6-550de74cd046",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "83c9b285-67b3-46cd-9b18-bc363d0d2824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffd6ded-d2fc-400c-8148-c8fde4e6c622",
        "cursor": {
          "ref": "4f4bd3cb-d392-4776-a9ef-4c0200d249f1",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e7dc0ed0-4899-4d53-8016-b3e51bd4f377"
        },
        "item": {
          "id": "cffd6ded-d2fc-400c-8148-c8fde4e6c622",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "eba2472b-a8b8-423f-a421-07cd24b41d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a323748d-a27c-4a57-abaf-d3f16e59a421",
        "cursor": {
          "ref": "474d7b28-f986-4bb1-b67b-14402443ad32",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "89c953a6-ed86-444a-8467-392b81b1153e"
        },
        "item": {
          "id": "a323748d-a27c-4a57-abaf-d3f16e59a421",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e9c54d62-d408-4ee2-9010-8ff3da36d3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a25c738-0a45-442d-9431-45153389da1b",
        "cursor": {
          "ref": "3635ecdf-3ff5-450c-bc21-66538cd26cae",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7b76b08a-315a-4b94-9ef9-b56c2bf90660"
        },
        "item": {
          "id": "1a25c738-0a45-442d-9431-45153389da1b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2cbc6315-5867-4c7f-9789-dce4cb6b3a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac0f442-6da4-4566-81ba-5ad074c7763f",
        "cursor": {
          "ref": "bc38f258-976f-4dae-9030-4dcbf1a02d4d",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1109af3e-c67e-4b7a-809b-0058161a5dd2"
        },
        "item": {
          "id": "7ac0f442-6da4-4566-81ba-5ad074c7763f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9216e6c1-1621-4c82-b8b7-a82e2f36bb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a95ff43-dc40-4cfe-a6ff-85904a9a6785",
        "cursor": {
          "ref": "f3e10b9a-b4be-4924-afc8-9fbd001d93a2",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "71105816-09dd-4185-abd8-42041f6ae179"
        },
        "item": {
          "id": "6a95ff43-dc40-4cfe-a6ff-85904a9a6785",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2250b14e-ed29-4aaf-96bf-a33d3edaf188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4373d9-0444-46dc-a4fd-5aa49ee7a980",
        "cursor": {
          "ref": "d7a281a8-90c7-4fff-a82c-670cb9b5121e",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5ab7a464-04d4-423f-9bb4-959a273e6fc7"
        },
        "item": {
          "id": "1a4373d9-0444-46dc-a4fd-5aa49ee7a980",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ce645789-4a16-4f51-9372-9b0e0f3ea453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47044ed4-4a1f-4b55-9ba2-5a6277edf78d",
        "cursor": {
          "ref": "3fff7db9-5adf-439f-8eb1-5c93381b52cc",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bdc1168c-6d03-4023-9578-037ba6a5bc7e"
        },
        "item": {
          "id": "47044ed4-4a1f-4b55-9ba2-5a6277edf78d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eca362db-3822-4fa1-8bce-a34dfb92981b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d96e0e-b8ac-4ebd-86ba-2ae307aa612e",
        "cursor": {
          "ref": "51e77fea-9cd8-490c-8528-2f86377fba01",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "54b7d465-df8a-4e94-9688-3152bdef7e2b"
        },
        "item": {
          "id": "50d96e0e-b8ac-4ebd-86ba-2ae307aa612e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cc5a7eda-9b88-41c9-bb3b-8887d973e407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079a8c2a-cd5e-4780-93b0-8e2a31b95b87",
        "cursor": {
          "ref": "3a02a849-bded-404c-b858-c951d06cc696",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3fd6b6dc-3ae0-4bf3-8d62-f5eb9ef79505"
        },
        "item": {
          "id": "079a8c2a-cd5e-4780-93b0-8e2a31b95b87",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c10351fd-1326-4bc6-b6eb-8d75fb671565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d8ad69-34fa-48ce-bcc0-70e548ef86b3",
        "cursor": {
          "ref": "968bafaf-b4a2-4659-9e9b-b9da053e9de4",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "21bafd67-e6cc-442d-8c5d-3c5724f195ef"
        },
        "item": {
          "id": "33d8ad69-34fa-48ce-bcc0-70e548ef86b3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2387f230-8478-4557-a3c2-4c28f42cb22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c002b89-cbe8-4749-9d19-192b498fd97b",
        "cursor": {
          "ref": "699572d6-e922-48c2-8eca-79a04f0e96b4",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "684e95c9-9082-45b8-9c08-59b84327fc30"
        },
        "item": {
          "id": "2c002b89-cbe8-4749-9d19-192b498fd97b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "46bcddb6-fdee-41f1-995c-1046250081a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "5bc0ea25-c4b4-49c2-a0af-07b404966afa",
        "cursor": {
          "ref": "7f854782-292c-4734-809e-53fba6acc7c0",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b5d3653-610a-4498-b11b-39c8b5825fda"
        },
        "item": {
          "id": "5bc0ea25-c4b4-49c2-a0af-07b404966afa",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ad9fece9-382a-4a60-aa6a-f8a99cf6cb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a29186b-d0c6-4f3c-a9ea-84bb22dc1ee6",
        "cursor": {
          "ref": "d641925b-be6c-4d4b-963a-a183df624ded",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9fe7b812-2af3-4ce6-81b4-7b26356a9dfb"
        },
        "item": {
          "id": "1a29186b-d0c6-4f3c-a9ea-84bb22dc1ee6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "467bbc96-cea7-4d2a-b6bf-a24ff3f9ab6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b6f9eb-e5f1-449b-8600-29fa0e98ebc2",
        "cursor": {
          "ref": "47d5c614-18ae-41e7-8c0a-a7f5dc9bc011",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f9cd749b-8dfc-44dd-a291-0331dc587bef"
        },
        "item": {
          "id": "69b6f9eb-e5f1-449b-8600-29fa0e98ebc2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4dad7645-7383-43be-8ea6-e219ff19fb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0187b80c-31f1-4dc0-9f8a-eb2c6528d27b",
        "cursor": {
          "ref": "678fff35-c7e5-422b-951f-30f63d5a5b75",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "39e189ad-1fc0-4cd8-af98-fd67f333f9f9"
        },
        "item": {
          "id": "0187b80c-31f1-4dc0-9f8a-eb2c6528d27b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "813b8768-deb4-4ad5-a670-f7fc77e3374f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7781217b-2ab8-4b54-9ee6-4dfa0701939f",
        "cursor": {
          "ref": "ab9a43e8-f89c-485a-8124-b9e575d699b7",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "416fd3f7-fa66-45bd-9e01-6160459605ea"
        },
        "item": {
          "id": "7781217b-2ab8-4b54-9ee6-4dfa0701939f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c280a445-f5f4-4dda-a958-69b7501aec83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837f5ce4-0955-4b4a-adf1-a5f85f04b833",
        "cursor": {
          "ref": "f664664f-a34f-4400-b48c-aaad14476a8d",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "56d8a98c-8f5c-4958-b907-6d1429de28ae"
        },
        "item": {
          "id": "837f5ce4-0955-4b4a-adf1-a5f85f04b833",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "06603ac1-267a-427a-a734-7f852a65f333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86436793-972f-466a-82b6-f8e0be80ccae",
        "cursor": {
          "ref": "a27a3b4e-c15d-4856-82e2-ff62d434865b",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a0bf271f-d2b3-49e1-8bfb-7e12326dbdd1"
        },
        "item": {
          "id": "86436793-972f-466a-82b6-f8e0be80ccae",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "56a4b79f-26d3-4f02-91b5-115dc952eeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2004cc10-0328-4104-83de-94c9e66fd21a",
        "cursor": {
          "ref": "9f9e7462-7508-4483-a5c1-0a0c8e6c22e2",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3273487b-676c-4b48-b022-e9405647e966"
        },
        "item": {
          "id": "2004cc10-0328-4104-83de-94c9e66fd21a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5b546288-27dd-4e81-ad61-66ac1378cebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c06e70-afb6-48be-ac8a-25ad55a3dacd",
        "cursor": {
          "ref": "a1217752-1021-494a-911e-da337f8cd473",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8787e75b-632f-4a78-88b8-dd74e19e4813"
        },
        "item": {
          "id": "d0c06e70-afb6-48be-ac8a-25ad55a3dacd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2030182c-ecca-4ae3-ba64-4a5ed792ae20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66b9ca3-bc63-48e0-874e-11c7669c00c2",
        "cursor": {
          "ref": "45a641d2-a17f-4559-84d9-d312f546ef08",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "28e6e1a3-c441-40f2-b56f-f3432a0600ef"
        },
        "item": {
          "id": "e66b9ca3-bc63-48e0-874e-11c7669c00c2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0df23d92-3b86-4734-a615-3b90bde370f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb04322-3007-411f-bd22-51a365b9a0b2",
        "cursor": {
          "ref": "f47b71fb-858a-40c8-ac27-3bace4b91bbe",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0d775705-30a0-4961-908a-9e3d898ee307"
        },
        "item": {
          "id": "7bb04322-3007-411f-bd22-51a365b9a0b2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5af0b3ac-a87d-440c-b7c5-5c8ad3b0a4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7772cb5-e3fd-440b-a70c-2788d74b21be",
        "cursor": {
          "ref": "7bd979ab-1034-4f82-9088-4aa5613b44f9",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a70e3ab4-7cf1-4621-b2b4-d69d23b50fe5"
        },
        "item": {
          "id": "d7772cb5-e3fd-440b-a70c-2788d74b21be",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a95e8715-ec86-4879-ab18-c31e7fa4a1ba",
          "status": "OK",
          "code": 200,
          "responseTime": 1257,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "58928479-20a4-49c0-b1fc-2217bc211ce8",
        "cursor": {
          "ref": "564f2d13-b4ca-47fe-8b67-457d84989e0c",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cf400158-ba2e-4b88-a4c3-660d3bcf49e7"
        },
        "item": {
          "id": "58928479-20a4-49c0-b1fc-2217bc211ce8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c73092d4-d68c-4b84-93fa-9978b3a068c5",
          "status": "OK",
          "code": 200,
          "responseTime": 772,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "22a97e8b-845d-4f39-ae72-ee1ecf1ae6ae",
        "cursor": {
          "ref": "82d6a710-9f79-4b2c-8d51-ee641d084a62",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a73b88a9-3e17-4d56-9ae1-ad2b9e62f624"
        },
        "item": {
          "id": "22a97e8b-845d-4f39-ae72-ee1ecf1ae6ae",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "91bcaf7c-6906-4378-b3b0-c499830e53c9",
          "status": "OK",
          "code": 200,
          "responseTime": 754,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d44f76d2-43e4-47a0-8c2f-589d741dbf46",
        "cursor": {
          "ref": "5e7be601-b88f-44f7-a0d7-4481f716298f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3d2bb709-2ee4-499d-9535-1f3ac60d5580"
        },
        "item": {
          "id": "d44f76d2-43e4-47a0-8c2f-589d741dbf46",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "33d0e55e-cb5c-40cf-8313-3bdf1f5414db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27c3066-6479-4e0a-92b1-63873ac1f4bb",
        "cursor": {
          "ref": "9122ec64-e223-46d9-9880-77e8950db4f7",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7e85f5db-4471-47eb-994a-04190f1c6c39"
        },
        "item": {
          "id": "f27c3066-6479-4e0a-92b1-63873ac1f4bb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1c935ae1-27a1-42fe-b18d-612fde30179b",
          "status": "OK",
          "code": 200,
          "responseTime": 777,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "d6cc2fe6-03bd-4045-bb26-3fa912e8d7cf",
        "cursor": {
          "ref": "5cfe7f87-af90-44f0-91e1-264a083b1d0d",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ac6a81a6-8f61-4b36-a585-294eaff16734"
        },
        "item": {
          "id": "d6cc2fe6-03bd-4045-bb26-3fa912e8d7cf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "441f49a3-8518-4cee-b9a7-a0d6bed481b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e098bcf8-8f4d-485b-822b-e058da99da67",
        "cursor": {
          "ref": "743f7687-4ab0-40ed-ac64-66d0171f53d6",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e829cdda-35bd-4a14-9434-de840dc6cfac"
        },
        "item": {
          "id": "e098bcf8-8f4d-485b-822b-e058da99da67",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a5d60e10-8dd9-4ee1-91be-1825f73340ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2dc305-7e30-45a7-9dd4-38f8156b9d2a",
        "cursor": {
          "ref": "417ca80d-ea99-4336-a0a5-304fc0e24eeb",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8d7971be-a80e-47c0-965c-89bb4497d349"
        },
        "item": {
          "id": "ab2dc305-7e30-45a7-9dd4-38f8156b9d2a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "55f8605e-d320-442d-a9d7-d6b5fee1c689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4b30a2-84a8-40ba-bfb1-7a72b0c4e54e",
        "cursor": {
          "ref": "bab9b9c4-f3c7-42db-81cf-5b7531b51206",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "394ca947-5550-4341-8d50-fe6cb36da3ef"
        },
        "item": {
          "id": "7c4b30a2-84a8-40ba-bfb1-7a72b0c4e54e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f5e2d405-5229-41c1-846e-50f6220906aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc54f0b-1f02-4230-bc96-bf18367c6a6b",
        "cursor": {
          "ref": "88263987-b8b8-4a0e-8040-cba13aa716af",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1254e556-7383-43c6-98e7-c880ce80b0e6"
        },
        "item": {
          "id": "bbc54f0b-1f02-4230-bc96-bf18367c6a6b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "20335d9e-ea8a-4dfe-a9d5-56432c1e16df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588de730-905c-4568-8bbd-785de80f7309",
        "cursor": {
          "ref": "b82d3fe4-5010-4737-90bc-6be7d7b3f9eb",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0f99e3d1-cf24-4198-9198-6d544375c7fa"
        },
        "item": {
          "id": "588de730-905c-4568-8bbd-785de80f7309",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "833dd768-f1da-4ad7-98c3-e42bcb1dcff7",
          "status": "OK",
          "code": 200,
          "responseTime": 754,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7d7e29dd-081d-40cd-8838-054e1617b34f",
        "cursor": {
          "ref": "a09db95d-768d-4512-a761-3f862d906a8a",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2811782b-b0e8-43d6-8dbe-ae0e98e2ae76"
        },
        "item": {
          "id": "7d7e29dd-081d-40cd-8838-054e1617b34f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "200ee976-abd0-46eb-9b19-575b95a6251c",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b04e973e-d25e-4d82-94ec-878886f9039e",
        "cursor": {
          "ref": "e8fb123f-06be-49dd-9e47-272697d7d291",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0b1e0d7f-62d4-422b-a83e-39123cfeed9a"
        },
        "item": {
          "id": "b04e973e-d25e-4d82-94ec-878886f9039e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "56817548-0414-43b0-a0ea-9174c70ad050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12728a77-3043-4ad7-9819-267046544bec",
        "cursor": {
          "ref": "dfcb8eb9-ee62-48c6-8576-053b92eeffc0",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "600d66e0-c49b-4e69-9862-a0cfd27f35fb"
        },
        "item": {
          "id": "12728a77-3043-4ad7-9819-267046544bec",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4be02694-fd1e-4896-8605-581a4d170d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa1cfc6-45c9-4d4a-8a30-1dc61b260ece",
        "cursor": {
          "ref": "2535adad-fd6c-4ef7-819b-3b280d5f65c1",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9816f0c5-42b3-455c-bc4e-bf8705beb67d"
        },
        "item": {
          "id": "caa1cfc6-45c9-4d4a-8a30-1dc61b260ece",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0357779c-a352-487d-a60e-f05157e66cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57639d3-e1d8-4af3-afd5-6bd20a9b2c97",
        "cursor": {
          "ref": "84685fbd-64aa-4242-976f-16b312833733",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "93e31a7d-8663-4659-97eb-042a85b06679"
        },
        "item": {
          "id": "e57639d3-e1d8-4af3-afd5-6bd20a9b2c97",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bc0da48f-e3f7-42f0-b211-80fd30054878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c76c07d-76d4-45ee-aa2b-977017cc187c",
        "cursor": {
          "ref": "b83e1fb5-2b7a-4293-b40a-4f8f477e7d87",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9c70469d-f92f-488a-be93-45da46927327"
        },
        "item": {
          "id": "0c76c07d-76d4-45ee-aa2b-977017cc187c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c996ab35-929d-4dd4-b463-83bde26ced39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5b3f93-c4fa-4d14-846f-1b7c712770d4",
        "cursor": {
          "ref": "464e8ab0-a921-49d1-b233-93313dac48fb",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6b2d7e0e-930a-4eb7-b082-7651a27c664d"
        },
        "item": {
          "id": "aa5b3f93-c4fa-4d14-846f-1b7c712770d4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2a186651-edde-4c3d-8fd3-1f127409d539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c3a4a7-4083-40f6-987a-37f08389cfca",
        "cursor": {
          "ref": "445c408f-f291-423c-9122-c87256ce3842",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "234d92e9-d449-4ce9-8c5d-c22b4304d5ec"
        },
        "item": {
          "id": "49c3a4a7-4083-40f6-987a-37f08389cfca",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9831eaa7-675e-4230-a484-f855535a03a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b36cc22-d6f5-4502-be9a-7dfa4ee733cb",
        "cursor": {
          "ref": "9e6d02f8-15a8-4ac3-a07a-fbbee64a4722",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "85390fdd-9dbb-4f75-92c4-e84f0a5b84fe"
        },
        "item": {
          "id": "7b36cc22-d6f5-4502-be9a-7dfa4ee733cb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6d4cde1c-6421-497a-b8d9-a8c541c60b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749ec3b4-ab49-4759-86ec-f6e91078166a",
        "cursor": {
          "ref": "14987b25-1e69-4b11-9118-5c807f757d03",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "08e0b94f-31de-4b82-82f4-1a0d2a0658c7"
        },
        "item": {
          "id": "749ec3b4-ab49-4759-86ec-f6e91078166a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "47f4ab9d-4baa-4cf9-abc8-ddf827fb6e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daee0356-3266-4808-8977-777403accb76",
        "cursor": {
          "ref": "d132f338-462a-4028-ae14-feea5ffb1f84",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "daf16b83-d2aa-4c3e-8a5f-62182e37e385"
        },
        "item": {
          "id": "daee0356-3266-4808-8977-777403accb76",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "549668d2-b31e-4e23-8ffe-c29807d87aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d304e7-10f1-4596-be07-8ca30e52a627",
        "cursor": {
          "ref": "9529ebe6-7057-44ce-bc61-fbf9aefd2c31",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ff9f5121-ba44-4d4a-aa0b-2fc0494e7a29"
        },
        "item": {
          "id": "d6d304e7-10f1-4596-be07-8ca30e52a627",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ced75aaa-d72e-4648-bb59-bdd3be06e16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ddc4a6-ccd4-40fe-b522-b7d5c0d1f2a8",
        "cursor": {
          "ref": "e0ad4eaa-980d-4576-bc4a-053b7ad908b2",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3a921236-6f68-43a1-b9d5-bd3708df4680"
        },
        "item": {
          "id": "32ddc4a6-ccd4-40fe-b522-b7d5c0d1f2a8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "80a4ac05-e0f6-4055-9917-9489c5f77d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d0cb7d-0741-453e-996b-27caf0343fe0",
        "cursor": {
          "ref": "b15e0789-577f-4079-8b67-63a0d265792b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6bfb6102-d41a-4f84-83e7-5e2b4b37225b"
        },
        "item": {
          "id": "26d0cb7d-0741-453e-996b-27caf0343fe0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6f51889e-5967-42b9-8639-2ade92b69117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520a83a4-a05a-4bdf-920a-02ec306ebc55",
        "cursor": {
          "ref": "5da49c77-6cfa-4619-a761-f6250c438b87",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e23b5821-1589-4380-9928-b6d732b931ae"
        },
        "item": {
          "id": "520a83a4-a05a-4bdf-920a-02ec306ebc55",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "99d83bde-ea3e-4745-a820-9a9b5ede707d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce055308-f4fa-4ebb-ac07-845f5a6aef75",
        "cursor": {
          "ref": "1cceb266-908a-4207-8dd9-ac9f63cc9d11",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "315ac159-6926-487a-8489-904a1f76d10c"
        },
        "item": {
          "id": "ce055308-f4fa-4ebb-ac07-845f5a6aef75",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5175e1fb-0272-4af7-961d-30e6e2e8c349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e2d592-421f-47d1-a3bc-42dc9f706393",
        "cursor": {
          "ref": "91adbfa7-a374-4705-9f9e-47e83c5d9bf4",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "27df9f43-2fb0-4ca9-b1f1-576c186e2465"
        },
        "item": {
          "id": "f9e2d592-421f-47d1-a3bc-42dc9f706393",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "76547dd0-9f1d-48f0-8369-75e1e551180b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9ccb18-5a96-4ada-91c1-da0283e8d227",
        "cursor": {
          "ref": "08f52eed-cd72-4f38-ab94-d33201ef2504",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "925b1879-249b-4033-9c8c-b90cb62efa3e"
        },
        "item": {
          "id": "ce9ccb18-5a96-4ada-91c1-da0283e8d227",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a7716fe9-0c21-482a-b9a9-7e02e78582d7",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "11d71a60-45fb-4464-a394-d053553a4f97",
        "cursor": {
          "ref": "b5b46116-81d9-45d8-87eb-f990d1dcda2b",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1ad85914-8e4e-405a-b106-22e8b57cc2aa"
        },
        "item": {
          "id": "11d71a60-45fb-4464-a394-d053553a4f97",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bf3e9b4d-33c9-41ba-abe5-e9019c00da15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2467b7-2afb-4a99-8af4-959594270b1d",
        "cursor": {
          "ref": "77336ea2-e34a-4bc5-a92a-bfcce5436828",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d1886e7f-27a8-4f17-9fd5-5e9af5196c17"
        },
        "item": {
          "id": "0a2467b7-2afb-4a99-8af4-959594270b1d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4225fad8-7aea-4504-bab0-940e6ebf48fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0120be9b-db88-4e24-b6d5-1abc34978893",
        "cursor": {
          "ref": "6d1271c0-845c-46a0-9e1a-7ef7a96c6a54",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5865f0f6-a664-42ba-8932-3a72d2b69e31"
        },
        "item": {
          "id": "0120be9b-db88-4e24-b6d5-1abc34978893",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d5d2e656-45dc-4d94-a2a4-d767a6571634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb700698-f167-431f-9e09-17ee7554f535",
        "cursor": {
          "ref": "08671c7c-2047-4bd7-a0df-1a98e424f1ea",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cf1571e2-40ab-4b6c-a41e-16485292d355"
        },
        "item": {
          "id": "fb700698-f167-431f-9e09-17ee7554f535",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "753c51e1-7981-434f-915f-64c167040474",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "55d0547f-8b57-45b7-930d-35618175c447",
        "cursor": {
          "ref": "19d1daad-331b-47ec-bc2f-916cfa113231",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0b9b710c-d9ab-4f4d-83c9-1c2b2c1d8000"
        },
        "item": {
          "id": "55d0547f-8b57-45b7-930d-35618175c447",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ebfda34a-c1f9-4eac-a8b8-5e430383c023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac6e799-e1ff-49b8-b664-4b6bbebb2f71",
        "cursor": {
          "ref": "62985ab5-214b-4246-8076-4704ded61f61",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bcba7f71-6f28-4eba-8fd4-c2860663ecae"
        },
        "item": {
          "id": "fac6e799-e1ff-49b8-b664-4b6bbebb2f71",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ee4df499-9dc1-4755-a8df-fc34ee741be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0390c284-758b-4b54-9653-0923bb194924",
        "cursor": {
          "ref": "d7132051-e0c6-41a8-a417-3783743d3cee",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "706a64fb-6f13-457d-94d0-2851fcbf5fb2"
        },
        "item": {
          "id": "0390c284-758b-4b54-9653-0923bb194924",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "86420d6d-9f95-453f-a549-d75618a5e278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402e26be-5517-4d7f-836d-d55dcf8e18bd",
        "cursor": {
          "ref": "52de3fb0-e42d-4d56-8488-efd2bdca1289",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f50b8a4-855a-4ca9-ab30-5de393633675"
        },
        "item": {
          "id": "402e26be-5517-4d7f-836d-d55dcf8e18bd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4493690a-75dc-4c25-88c6-5174f5d28a49",
          "status": "OK",
          "code": 200,
          "responseTime": 747,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "6037aa39-6513-4aa5-b89a-adeaad5757f0",
        "cursor": {
          "ref": "cb87efa3-560d-43a7-bedf-f8fd6f32cc2e",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8fd5c386-55de-45c8-abd1-4d4fd8eb1c30"
        },
        "item": {
          "id": "6037aa39-6513-4aa5-b89a-adeaad5757f0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9f01e7bf-6efa-4d41-9883-3f70f6a8cdd9",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "61ee53c5-6054-4542-9bf1-f1f32fabcda4",
        "cursor": {
          "ref": "0ff72eaf-74fb-4193-8b76-410281de373a",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e9bd5a02-547c-4849-afc3-4ac046c508c1"
        },
        "item": {
          "id": "61ee53c5-6054-4542-9bf1-f1f32fabcda4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fc85275f-c64a-472a-9f43-36958536a4e9",
          "status": "OK",
          "code": 200,
          "responseTime": 1208,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "b5841013-c738-42ba-bf81-3f7c1cde2439",
        "cursor": {
          "ref": "67bd08b5-bb2f-44d7-b5c4-a504b558137a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1ffb264e-a54b-4b4f-bb74-93f1759350ec"
        },
        "item": {
          "id": "b5841013-c738-42ba-bf81-3f7c1cde2439",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "95ff322a-317f-481b-aab3-d623f39dbc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eb4a56-005d-4987-b648-7cd9793c9377",
        "cursor": {
          "ref": "a1450192-a88f-44d3-aacf-275da59f55be",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6f915beb-c557-47b1-a3f7-e26f7e629062"
        },
        "item": {
          "id": "b0eb4a56-005d-4987-b648-7cd9793c9377",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6ff0ba06-97d8-4e45-9112-5d550d8e1e88",
          "status": "OK",
          "code": 200,
          "responseTime": 741,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "2b86e1e8-1aa4-48f8-a521-cb5396fa6fe6",
        "cursor": {
          "ref": "5f425bd6-f56c-4a02-aa40-0fc518168369",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eaaf786a-f189-4ebc-b679-d7856705ee6a"
        },
        "item": {
          "id": "2b86e1e8-1aa4-48f8-a521-cb5396fa6fe6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a0d7b6d6-82e2-4d4c-8d0c-364cdb0630d5",
          "status": "OK",
          "code": 200,
          "responseTime": 769,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "64a0c3da-097f-4eaf-bdc0-0ff38aa5df29",
        "cursor": {
          "ref": "d127a9e9-bdaf-428e-96ac-f442ca7abe69",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e68b287d-fcce-44b1-9d04-1e6b50a0ed81"
        },
        "item": {
          "id": "64a0c3da-097f-4eaf-bdc0-0ff38aa5df29",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4b92efed-f864-499c-b2d1-322e6bdd742b",
          "status": "OK",
          "code": 200,
          "responseTime": 771,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "10908893-e639-4430-b9da-39b549ade139",
        "cursor": {
          "ref": "7ad2e5a3-0ea3-477d-a9b1-505c5eef946a",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c2956145-5318-45ec-a96c-8a43e17f12f7"
        },
        "item": {
          "id": "10908893-e639-4430-b9da-39b549ade139",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b2b218e6-d401-4cd9-a0e0-720119808849",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b54c1d04-ffb4-471b-aa79-fbc65bf69f52",
        "cursor": {
          "ref": "833936f5-01d4-4a40-9c61-caac412266df",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3ba82043-ca54-4f57-b0d2-6f9f32aa9788"
        },
        "item": {
          "id": "b54c1d04-ffb4-471b-aa79-fbc65bf69f52",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5966af55-64c1-42e8-a358-f10eae7ac2d1",
          "status": "OK",
          "code": 200,
          "responseTime": 757,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "08733142-7380-48b9-853d-1cc2840d7874",
        "cursor": {
          "ref": "b906ec91-643e-4e6b-bbc4-ad086d941870",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6fdcd478-0752-4a50-b213-f37394ef4752"
        },
        "item": {
          "id": "08733142-7380-48b9-853d-1cc2840d7874",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3a807d2f-4864-4dca-9eb7-09aa50beae40",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e11de701-1b43-4e75-a4f0-b201806622c0",
        "cursor": {
          "ref": "4008165c-f924-495f-8b37-6b792d9a7e63",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d8a03c78-3d1a-4388-9196-9b1d6fda22c4"
        },
        "item": {
          "id": "e11de701-1b43-4e75-a4f0-b201806622c0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "67489b16-47a5-405a-ae7f-9e49e5dc72c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721fc0b4-ebd3-4e04-ab9d-b447daec4777",
        "cursor": {
          "ref": "9e2dccd0-1b16-44ee-9f42-2e97d5eb8957",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9e715e9a-8382-4963-b0a8-f26e5e1b234e"
        },
        "item": {
          "id": "721fc0b4-ebd3-4e04-ab9d-b447daec4777",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b091118b-65a8-4cab-842e-fe0c77f91407",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "c9856101-131b-4eda-a9a0-26885fb5a96e",
        "cursor": {
          "ref": "775f42b7-1c3e-4f8e-9e99-a071cf3651df",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3d94a25a-9dac-493c-8a81-ae9364e8be47"
        },
        "item": {
          "id": "c9856101-131b-4eda-a9a0-26885fb5a96e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e5abb87e-b121-4453-8509-2461ff2f1d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fdf13b-373b-4d1e-9196-96030c91c736",
        "cursor": {
          "ref": "bdcba994-a5dc-4ded-8023-0f7226e4236c",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5c95729f-1571-4694-859b-fe3a34d17455"
        },
        "item": {
          "id": "04fdf13b-373b-4d1e-9196-96030c91c736",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e27756ba-0374-4048-9963-b6f9f777426d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a506cc72-d968-4ac9-a68c-87f925e836b5",
        "cursor": {
          "ref": "6f965b43-190f-4bbc-9f62-3e3c0b4d6c53",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54774242-8f4e-4d1e-bd6c-2fb78290525f"
        },
        "item": {
          "id": "a506cc72-d968-4ac9-a68c-87f925e836b5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b6e6508f-64ee-4bad-971d-e03121221469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703e1f22-e601-4212-bc37-3d0c6386250a",
        "cursor": {
          "ref": "a8fed3a6-1951-4481-8da9-76ebea67c413",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5a7ac5f7-b7fd-4451-aee4-575e03a0562a"
        },
        "item": {
          "id": "703e1f22-e601-4212-bc37-3d0c6386250a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f566ee0f-040d-4ee7-85c9-53edef8ede37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8985a7b-a495-4156-b849-f495298c90d6",
        "cursor": {
          "ref": "cb53798b-7523-479f-a99d-84b7159c1259",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5561c7d3-6eca-43f7-b7ee-e9f5c4b370e2"
        },
        "item": {
          "id": "e8985a7b-a495-4156-b849-f495298c90d6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d6a3ed76-7f45-4ec5-aac5-e285a133b2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fe5a84-f4a2-43cd-985f-48f80ef77709",
        "cursor": {
          "ref": "8eae6cb2-4b47-4870-aa06-a91288758a47",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b2c7de75-351d-4c82-b089-517a4d217794"
        },
        "item": {
          "id": "d2fe5a84-f4a2-43cd-985f-48f80ef77709",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3b06625e-12b7-4323-9f73-f65fc04574a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0006c4d5-156e-4336-bdc3-d5ecbc153b66",
        "cursor": {
          "ref": "9a2c1c48-0ee9-4697-9a03-734ec171b45f",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9fc2c117-a183-4d96-8f34-149c1f3fd505"
        },
        "item": {
          "id": "0006c4d5-156e-4336-bdc3-d5ecbc153b66",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2ced76b2-ff24-42ba-b703-643123535cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21087ba4-91b7-4220-bddb-01409a91eeaa",
        "cursor": {
          "ref": "08c23a8c-069d-4dc6-a1d8-bccea1446a08",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2b03fabb-dc2f-4508-b388-cc8b81a4ac3a"
        },
        "item": {
          "id": "21087ba4-91b7-4220-bddb-01409a91eeaa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d5ca64de-1fe5-4394-838f-30840b7a5ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bf9e4c-63e2-4cf3-92e7-16abd1c8124b",
        "cursor": {
          "ref": "e98e74e8-899c-43bb-ab13-6d517a49e449",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c5201010-a5f0-4eaa-91e6-803a215a28cd"
        },
        "item": {
          "id": "c2bf9e4c-63e2-4cf3-92e7-16abd1c8124b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8702ce0a-9652-45a2-80b4-de6cff6b7b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9308d6-a0d5-4c4b-8849-faace292f6f9",
        "cursor": {
          "ref": "022ac0cd-288b-49ee-9060-31cc463921d6",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5bcde82c-e3bd-41d4-9576-77a255601979"
        },
        "item": {
          "id": "2e9308d6-a0d5-4c4b-8849-faace292f6f9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5480c11d-5299-44cc-8256-fa4289ea50ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a202aa-2eb7-4c5c-8b54-dd6327c4da18",
        "cursor": {
          "ref": "1e096d96-9719-4145-9fda-c65d857c1b4d",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0b01af8a-4510-464e-86a0-c805a0f95f07"
        },
        "item": {
          "id": "11a202aa-2eb7-4c5c-8b54-dd6327c4da18",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "758ecca3-9691-48dd-9a72-b2e5fd3d223f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb3519c-de26-44b0-9a51-df306a8de877",
        "cursor": {
          "ref": "cf371c25-1182-484e-ab38-452ca8f4f79b",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "42781794-c53d-46a9-b041-d6cb8ee7993a"
        },
        "item": {
          "id": "0bb3519c-de26-44b0-9a51-df306a8de877",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d5957d0e-a79c-4874-a782-9040f8928944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27216e8f-01e4-43ab-b7bb-f246698648a4",
        "cursor": {
          "ref": "39429edc-0efc-4e93-8263-aa2d2fa559b7",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fbf04eba-d2b5-435d-aa8b-77e4adb3535d"
        },
        "item": {
          "id": "27216e8f-01e4-43ab-b7bb-f246698648a4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4375fec5-f507-4599-9658-3c0742bd0455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e368e5-28b8-49fe-bf13-68626da20b0e",
        "cursor": {
          "ref": "0ab67678-359e-4699-9e21-57b9f846b446",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3fb3ba0f-75af-4a56-bb3d-22bce6ea38a7"
        },
        "item": {
          "id": "36e368e5-28b8-49fe-bf13-68626da20b0e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f925d033-55a2-4f65-87f8-c0d4b27559ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce49bcb3-6e7d-48e2-b62e-1f085031d2f9",
        "cursor": {
          "ref": "37c1bff0-43e1-4d37-8ef6-92b319330846",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2ebdb681-e5bf-4a0c-a0b8-25d0ed435b2a"
        },
        "item": {
          "id": "ce49bcb3-6e7d-48e2-b62e-1f085031d2f9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b6462ef-49e8-4351-8725-6eb21297cd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0039d1e8-e838-4f0c-a285-97e189d06669",
        "cursor": {
          "ref": "a30c510b-018c-486b-9387-37d3eb0480b6",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "340674c7-e858-4ad9-be18-f1f6dfac8f27"
        },
        "item": {
          "id": "0039d1e8-e838-4f0c-a285-97e189d06669",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "622a99dd-2614-479e-a8b2-a50471e704b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0988d73d-1630-47ab-9e1b-e173177c088f",
        "cursor": {
          "ref": "feb80a5b-aed1-4019-9016-de7181bec56e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f8552da1-5d12-4824-9848-9239361aba51"
        },
        "item": {
          "id": "0988d73d-1630-47ab-9e1b-e173177c088f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "36f187c6-9fd9-404c-ad68-e0b1a4c19d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934c5afd-13f1-4d25-9c17-713fb29d8faa",
        "cursor": {
          "ref": "ac2eaf57-677b-41ac-a323-6d9c1171220e",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "36618bc1-1de6-47f9-9aa2-d0cfb9fbe904"
        },
        "item": {
          "id": "934c5afd-13f1-4d25-9c17-713fb29d8faa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c866715d-5e09-4901-8576-8b005684ea52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7a4f88-640a-48d9-90a0-fb9e7a504362",
        "cursor": {
          "ref": "a7da8e84-c4e0-446b-ac0d-d2b1b3df9e35",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0b28499a-8547-47b5-9006-f5dc40f8f441"
        },
        "item": {
          "id": "ff7a4f88-640a-48d9-90a0-fb9e7a504362",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7e6c31fc-a264-40e8-b8f3-040e6ad43ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aac37d-15fc-42a6-b4c3-8473805d1dcc",
        "cursor": {
          "ref": "0f9fdbb0-b495-4aa8-aa00-ce283d6103da",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5a5e58fb-fc73-43ae-9d5a-8e8ce2a65e34"
        },
        "item": {
          "id": "30aac37d-15fc-42a6-b4c3-8473805d1dcc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1995c339-84ad-4c61-b0e1-2d31c5af052d",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "698ea797-c247-452f-8e70-0abdbecf5cbb",
        "cursor": {
          "ref": "7398b7e9-b272-4d8a-b2ea-2d5d175d720a",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8b58d8d9-2555-4bb6-8bcd-1669aec42ed6"
        },
        "item": {
          "id": "698ea797-c247-452f-8e70-0abdbecf5cbb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "82c5b675-79f4-4776-9ca2-864883fcff21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc4ef04-9c70-435f-bb68-d8165f2827e0",
        "cursor": {
          "ref": "dbcf1c0b-949d-4dc9-90ff-9a43c305050e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a00a0487-80eb-4320-85de-ceb141a5a53d"
        },
        "item": {
          "id": "9fc4ef04-9c70-435f-bb68-d8165f2827e0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "864bf715-625a-45c8-86f0-eb11a5346290",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "0176e356-bc88-4cb3-8d1c-51e8be94da3f",
        "cursor": {
          "ref": "de54e5ef-9f64-4a1c-8bbb-a0b8b0dea618",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "cf247ee6-4a98-40c7-95bf-4b413eb80fa2"
        },
        "item": {
          "id": "0176e356-bc88-4cb3-8d1c-51e8be94da3f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2e6f01a9-55f4-404a-81ab-afadceb347fb",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "1735c471-6cbb-486f-835e-87d3af29d8d1",
        "cursor": {
          "ref": "a959cc8d-ac0e-42ed-8bdd-a5ffc2fcccf4",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e9be3e8e-3b55-4c4f-92b7-ca08852ba142"
        },
        "item": {
          "id": "1735c471-6cbb-486f-835e-87d3af29d8d1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b4a49af5-eb2f-415b-8972-cf79d7981171",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "0a4d91b8-568a-4275-9c63-dd9fc6bc8c57",
        "cursor": {
          "ref": "59e766fa-8805-435e-9448-aac579a173f1",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7fd42ff3-b387-482e-96ea-415c5eb3e7ab"
        },
        "item": {
          "id": "0a4d91b8-568a-4275-9c63-dd9fc6bc8c57",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "532a4bd9-ec36-4840-90cf-165eb55afe5a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "95fb0cad-1045-4cc5-a00b-853f126f1f67",
        "cursor": {
          "ref": "7aeb01d3-1cbe-4975-a7c4-e86484725193",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a8f31cde-dfbe-49e6-84bc-7578ec2dfd76"
        },
        "item": {
          "id": "95fb0cad-1045-4cc5-a00b-853f126f1f67",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "030302b5-bb40-47bd-b75b-207c60b9f812",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "951a8aa1-4e7f-4e36-a1ff-d4262d47c6c4",
        "cursor": {
          "ref": "b8513007-1392-4096-8d93-42584a335e55",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3a0cd07b-d45c-45fa-9560-559aef8593b8"
        },
        "item": {
          "id": "951a8aa1-4e7f-4e36-a1ff-d4262d47c6c4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7fc427fb-4dd3-44aa-91eb-52e1be5db18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24923e9-a2aa-4944-bafb-12b6e8f4b46c",
        "cursor": {
          "ref": "400309fa-259e-43da-9622-8a00bb29fdc8",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "298c6a19-605f-4b2e-9ced-20d99015ef72"
        },
        "item": {
          "id": "e24923e9-a2aa-4944-bafb-12b6e8f4b46c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "11ade8eb-a28f-4505-8c2e-7ac8a2370023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf30c52a-2141-406b-8c5c-4335e9a6cd3e",
        "cursor": {
          "ref": "693a8889-ef5b-4aa3-863d-157bc9d9fb2a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aa33b09d-7fda-4bfd-a72c-8faf9477639a"
        },
        "item": {
          "id": "bf30c52a-2141-406b-8c5c-4335e9a6cd3e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cc94592f-1e1a-467e-ae51-9b92ed1361cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a861e846-5b6f-4cb1-86e6-f0512a627ba8",
        "cursor": {
          "ref": "aeb1cbc0-0dac-4db3-8d58-bfab656437e4",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4442da61-7f6e-412f-9ec4-d5c4fe84f585"
        },
        "item": {
          "id": "a861e846-5b6f-4cb1-86e6-f0512a627ba8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "53e7a618-317e-4bc0-9126-9716efd0e7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e33dcba-fd59-4e07-83aa-b8918f0974fb",
        "cursor": {
          "ref": "d2be85c0-e94c-416d-a3d6-62cf366f277a",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b46120a1-610a-473c-b637-686b7b7a8b23"
        },
        "item": {
          "id": "5e33dcba-fd59-4e07-83aa-b8918f0974fb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b3f8ee00-de0a-46e9-9870-991fda280f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3656e26d-a570-4eb0-ba31-6ebb3f441154",
        "cursor": {
          "ref": "c4741842-b468-481b-94ac-45c94d9ca621",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4026792e-720d-4a3c-a6c3-dc313dde8af3"
        },
        "item": {
          "id": "3656e26d-a570-4eb0-ba31-6ebb3f441154",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5628e869-8e90-4ab9-a762-727ed1fde8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f45167-f3a1-41c1-8aa1-385c05e1279e",
        "cursor": {
          "ref": "df6128a8-e49b-412b-a607-b529ff5be72a",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "efbbc5c9-a70c-43ce-b478-b3312066355f"
        },
        "item": {
          "id": "e2f45167-f3a1-41c1-8aa1-385c05e1279e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "564c00d6-e301-4547-9b04-a3e17c16018e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0105bf89-db4b-4652-a57d-80de35952410",
        "cursor": {
          "ref": "22d862f5-b68c-42c3-8414-d3b0ba5074ff",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "508a8764-e1c4-4086-92ec-cd25481d7cd1"
        },
        "item": {
          "id": "0105bf89-db4b-4652-a57d-80de35952410",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b3968d23-1679-4c9e-8c38-04ad907e3735",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "305f5840-a42d-45e7-b5d7-5a0b203b5af5",
        "cursor": {
          "ref": "86861337-cab1-4f04-a7b4-cb27a77cec58",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4749280b-5eb1-4497-9dac-8fb076f1366a"
        },
        "item": {
          "id": "305f5840-a42d-45e7-b5d7-5a0b203b5af5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "adf11c90-d5c6-4bab-a641-0f328f15416c",
          "status": "OK",
          "code": 200,
          "responseTime": 749,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e490d379-de8c-487c-bc74-f0c6bd5b7322",
        "cursor": {
          "ref": "0f742428-162d-40f5-8fc9-d8692ea3cad5",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d590d6c8-dc7e-41c0-9235-588864cfc7d6"
        },
        "item": {
          "id": "e490d379-de8c-487c-bc74-f0c6bd5b7322",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "772be1f2-3c59-4ca4-9d81-e20bd7de68f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "9f583893-5905-46cf-8b6f-725e246db0f3",
        "cursor": {
          "ref": "ddd11d91-e7ee-4eb7-a88b-24adba831493",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "390a5a7d-282a-4a3b-beac-c6724a7b98b9"
        },
        "item": {
          "id": "9f583893-5905-46cf-8b6f-725e246db0f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ac92f934-5430-43ea-adb5-4c3511021b01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f583893-5905-46cf-8b6f-725e246db0f3",
        "cursor": {
          "ref": "ddd11d91-e7ee-4eb7-a88b-24adba831493",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "390a5a7d-282a-4a3b-beac-c6724a7b98b9"
        },
        "item": {
          "id": "9f583893-5905-46cf-8b6f-725e246db0f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ac92f934-5430-43ea-adb5-4c3511021b01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0071a2b2-9d89-4aa2-be3d-ffb62d5ad4f5",
        "cursor": {
          "ref": "ec5ebdde-ce24-44c6-b087-57f9e8232554",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a70e7691-bca6-4bfc-9151-7736600acbf2"
        },
        "item": {
          "id": "0071a2b2-9d89-4aa2-be3d-ffb62d5ad4f5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9c4ce698-af63-44ac-bc51-1d9e517dfcaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c644857e-7cd4-4cc1-806c-380d62966217",
        "cursor": {
          "ref": "a843f0f7-58ce-4392-8747-a2762f653396",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "cb31db20-5a72-4106-80f0-9fd18c95f1a5"
        },
        "item": {
          "id": "c644857e-7cd4-4cc1-806c-380d62966217",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a28523c2-a3a8-4c8d-8093-25af1284683f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}